{"version":3,"file":"MockProvider.js","sourceRoot":"src/","sources":["mock/MockProvider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,SAAS,EAAoB,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACpF,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC;;;;;;GAMG;AACH,MAAM,OAAO,YAAa,SAAQ,SAAS;IAYzC,YAAY,WAAoB,KAAK,EAAE,mBAAuC,EAAE;QAC9E,KAAK,EAAE,CAAC;QAsBF,cAAS,GAAuB,EAAE,CAAC;QArBzC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,mBAAmB,GAAG,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAI,CAAC,0BAA0B,GAAG,mBAAmB,CAAC;QACtD,IAAI,CAAC,yBAAyB,GAAG,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC;QAElC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;OAOG;IACH,IAAW,iCAAiC;QAC1C,OAAO,CAAC,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,0BAA0B,CAAC;IAC5E,CAAC;IAGD;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAC1B;IACH,CAAC;IAED;;;;;OAKG;IACU,KAAK;;YAChB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrC,MAAM,IAAI,CAAC,iBAAiB,CAAC;YAC7B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;KAAA;IAED;;;;;OAKG;IACU,MAAM;;YACjB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrC,MAAM,IAAI,CAAC,iBAAiB,CAAC;YAC7B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC;KAAA;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,OAAO,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;IACjE,CAAC;IAED;;;;;OAKG;IACH,IAAW,IAAI;QACb,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAEa,mBAAmB,CAAC,WAAoB,KAAK;;YACzD,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC;YAE1C,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aACvC;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aACxC;QACH,CAAC;KAAA;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IProvider, IProviderAccount, ProviderState } from '../providers/IProvider';\nimport { MockGraph } from './MockGraph';\n\n/**\n * Mock Provider access token for Microsoft Graph APIs\n *\n * @export\n * @class MockProvider\n * @extends {IProvider}\n */\nexport class MockProvider extends IProvider {\n  // tslint:disable-next-line: completed-docs\n  public provider: any;\n\n  private _mockGraphPromise: Promise<MockGraph>;\n\n  /**\n   * new instance of mock graph provider\n   *\n   * @memberof MockProvider\n   */\n  public graph: MockGraph;\n  constructor(signedIn: boolean = false, signedInAccounts: IProviderAccount[] = []) {\n    super();\n    this._mockGraphPromise = MockGraph.create(this);\n    const enableMultipleLogin = Boolean(signedInAccounts.length);\n    this.isMultipleAccountSupported = enableMultipleLogin;\n    this.isMultipleAccountDisabled = !enableMultipleLogin;\n    this._accounts = signedInAccounts;\n\n    this.initializeMockGraph(signedIn);\n  }\n\n  /**\n   * Indicates if the MockProvider is configured to support multi account mode\n   * This is only true if the Mock provider has been configured with signedInAccounts in the constructor\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof MockProvider\n   */\n  public get isMultiAccountSupportedAndEnabled(): boolean {\n    return !this.isMultipleAccountDisabled && this.isMultipleAccountSupported;\n  }\n\n  private _accounts: IProviderAccount[] = [];\n  /**\n   * Returns the array of accounts the MockProviders has been configured with\n   *\n   * @return {*}  {IProviderAccount[]}\n   * @memberof MockProvider\n   */\n  public getAllAccounts?(): IProviderAccount[] {\n    return this._accounts;\n  }\n\n  /**\n   * Returns the first account in the set of accounts the MockProvider has been configured with\n   *\n   * @return {*}  {IProviderAccount}\n   * @memberof MockProvider\n   */\n  public getActiveAccount?(): IProviderAccount {\n    if (this._accounts.length) {\n      return this._accounts[0];\n    }\n  }\n\n  /**\n   * sets Provider state to SignedIn\n   *\n   * @returns {Promise<void>}\n   * @memberof MockProvider\n   */\n  public async login(): Promise<void> {\n    this.setState(ProviderState.Loading);\n    await this._mockGraphPromise;\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    this.setState(ProviderState.SignedIn);\n  }\n\n  /**\n   * sets Provider state to signed out\n   *\n   * @returns {Promise<void>}\n   * @memberof MockProvider\n   */\n  public async logout(): Promise<void> {\n    this.setState(ProviderState.Loading);\n    await this._mockGraphPromise;\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    this.setState(ProviderState.SignedOut);\n  }\n\n  /**\n   * Promise returning token from graph.microsoft.com\n   *\n   * @returns {Promise<string>}\n   * @memberof MockProvider\n   */\n  public getAccessToken(): Promise<string> {\n    return Promise.resolve('{token:https://graph.microsoft.com/}');\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtMockProvider';\n  }\n\n  private async initializeMockGraph(signedIn: boolean = false) {\n    this.graph = await this._mockGraphPromise;\n\n    if (signedIn) {\n      this.setState(ProviderState.SignedIn);\n    } else {\n      this.setState(ProviderState.SignedOut);\n    }\n  }\n}\n"]}