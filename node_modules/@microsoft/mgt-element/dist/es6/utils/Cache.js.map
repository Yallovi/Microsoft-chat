{"version":3,"file":"Cache.js","sourceRoot":"src/","sources":["utils/Cache.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { openDB } from 'idb';\nimport { Providers } from '../providers/Providers';\nimport { ProviderState } from '../providers/IProvider';\n\n/**\n * Localstorage key for storing names of cache databases\n *\n * @type {string}\n *\n */\nconst dbListKey: string = 'mgt-db-list';\n\n/**\n * Holds the cache options for cache store\n *\n * @export\n * @interface CacheConfig\n */\nexport interface CacheConfig {\n  /**\n   * Default global invalidation period\n   *\n   * @type {number}\n   * @memberof CacheConfig\n   */\n  defaultInvalidationPeriod: number;\n  /**\n   * Controls whether the cache is enabled globally\n   *\n   * @type {boolean}\n   * @memberof CacheConfig\n   */\n  isEnabled: boolean;\n  /**\n   * Cache options for groups store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  groups: CacheOptions;\n  /**\n   * Cache options for people store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  people: CacheOptions;\n  /**\n   * Cache options for photos store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  photos: CacheOptions;\n  /**\n   * Cache options for presence store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n\n  presence: CacheOptions;\n  /**\n   * Cache options for users store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  users: CacheOptions;\n\n  /**\n   * Cache options for a generic response store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  response: CacheOptions;\n\n  /**\n   * Cache options for files store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  files: CacheOptions;\n  /**\n   * Cache options for fileLists store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  fileLists: CacheOptions;\n}\n\n/**\n * Options for each store\n *\n * @export\n * @interface CacheOptions\n */\nexport interface CacheOptions {\n  /**\n   * Defines the time (in ms) for objects in the store to expire\n   *\n   * @type {number}\n   * @memberof CacheOptions\n   */\n  invalidationPeriod: number;\n  /**\n   * Whether the store is enabled or not\n   *\n   * @type {boolean}\n   * @memberof CacheOptions\n   */\n  isEnabled: boolean;\n}\n\n/**\n * class in charge of managing all the caches and their stores\n *\n * @export\n * @class CacheService\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class CacheService {\n  /**\n   *  Looks for existing cache, otherwise creates a new one\n   *\n   * @static\n   * @template T\n   * @param {CacheSchema} schema\n   * @param {string} storeName\n   * @returns {CacheStore<T>}\n   * @memberof CacheService\n   */\n  public static getCache<T extends CacheItem>(schema: CacheSchema, storeName: string): CacheStore<T> {\n    const key = `${schema.name}/${storeName}`;\n\n    if (!this.isInitialized) {\n      this.init();\n    }\n\n    if (!this.cacheStore.has(storeName)) {\n      this.cacheStore.set(key, new CacheStore<T>(schema, storeName));\n    }\n    return this.cacheStore.get(key) as CacheStore<T>;\n  }\n\n  /**\n   * Clears cache for a single user when ID is passed\n   *\n   * @static\n   * @param {string} id\n   * @memberof CacheService\n   */\n  public static clearCacheById(id: string) {\n    const oldDbArray: Array<string> = JSON.parse(localStorage.getItem(dbListKey));\n    if (oldDbArray) {\n      let newDbArray: Array<string> = [];\n      oldDbArray.forEach(async x => {\n        if (x.includes(id)) {\n          indexedDB.deleteDatabase(x);\n        } else {\n          newDbArray.push(x);\n        }\n      });\n      newDbArray.length > 0\n        ? localStorage.setItem(dbListKey, JSON.stringify(newDbArray))\n        : localStorage.removeItem(dbListKey);\n    }\n  }\n\n  private static cacheStore: Map<string, CacheStore<CacheItem>> = new Map();\n  private static isInitialized: boolean = false;\n\n  private static cacheConfig: CacheConfig = {\n    defaultInvalidationPeriod: 3600000,\n    groups: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    isEnabled: true,\n    people: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    photos: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    presence: {\n      invalidationPeriod: 300000,\n      isEnabled: true\n    },\n    users: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    response: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    files: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    fileLists: {\n      invalidationPeriod: null,\n      isEnabled: true\n    }\n  };\n\n  /**\n   * returns the cacheconfig object\n   *\n   * @readonly\n   * @static\n   * @type {CacheConfig}\n   * @memberof CacheService\n   */\n  public static get config(): CacheConfig {\n    return this.cacheConfig;\n  }\n\n  /**\n   * Checks for current sign in state and see if it has changed from signed-in to signed out\n   *\n   *\n   * @private\n   * @static\n   * @memberof CacheService\n   */\n  private static init() {\n    let previousState: ProviderState;\n    if (Providers.globalProvider) {\n      previousState = Providers.globalProvider.state;\n    }\n\n    Providers.onProviderUpdated(async () => {\n      if (previousState === ProviderState.SignedIn && Providers.globalProvider.state === ProviderState.SignedOut) {\n        const id = await Providers.getCacheId();\n        if (id !== null) {\n          this.clearCacheById(id);\n        }\n      }\n      previousState = Providers.globalProvider.state;\n    });\n    this.isInitialized = true;\n  }\n}\n\n/**\n * Represents organization for a cache\n *\n * @export\n * @interface CacheSchema\n */\nexport interface CacheSchema {\n  /**\n   * version number of cache, useful for upgrading\n   *\n   * @type {number}\n   * @memberof CacheSchema\n   */\n  version: number;\n  /**\n   * name of the cache\n   *\n   * @type {string}\n   * @memberof CacheSchema\n   */\n  name: string;\n  /**\n   * list of stores in the cache\n   *\n   * @type {{ [name: string]: CacheSchemaStore }}\n   * @memberof CacheSchema\n   */\n  stores: { [name: string]: string };\n}\n\n/**\n * item that is stored in cache\n *\n * @export\n * @interface CacheItem\n */\nexport interface CacheItem {\n  /**\n   * date and time that item was retrieved from api/stored in cache\n   *\n   * @type {number}\n   * @memberof CacheItem\n   */\n  timeCached?: number;\n}\n\n/**\n * Represents a store in the cache\n *\n * @class CacheStore\n * @template T\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class CacheStore<T extends CacheItem> {\n  private schema: CacheSchema;\n  private store: string;\n\n  public constructor(schema: CacheSchema, store: string) {\n    if (!(store in schema.stores)) {\n      throw Error('\"store\" must be defined in the \"schema\"');\n    }\n\n    this.schema = schema;\n    this.store = store;\n  }\n\n  /**\n   * gets value from cache for the given key\n   *\n   * @param {string} key\n   * @returns {Promise<T>}\n   * @memberof Cache\n   */\n  public async getValue(key: string): Promise<T> {\n    if (!window.indexedDB) {\n      return null;\n    }\n    try {\n      const db = await this.getDb();\n      return db.get(this.store, key);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * inserts value into cache for the given key\n   *\n   * @param {string} key\n   * @param {T} item\n   * @returns\n   * @memberof Cache\n   */\n  public async putValue(key: string, item: T) {\n    if (!window.indexedDB) {\n      return;\n    }\n    try {\n      await (await this.getDb()).put(this.store, { ...item, timeCached: Date.now() }, key);\n    } catch (e) {\n      return;\n    }\n  }\n\n  /**\n   * Clears the store of all stored values\n   *\n   * @returns\n   * @memberof Cache\n   */\n  public async clearStore() {\n    if (!window.indexedDB) {\n      return;\n    }\n    try {\n      (await this.getDb()).clear(this.store);\n    } catch (e) {\n      return;\n    }\n  }\n\n  /**\n   * Returns the name of the parent DB that the cache store belongs to\n   */\n  public async getDBName() {\n    const id = await Providers.getCacheId();\n    if (id) {\n      return `mgt-${this.schema.name}` + `-${id}`;\n    }\n  }\n\n  private async getDb() {\n    const dbName = await this.getDBName();\n    if (dbName) {\n      return openDB(dbName, this.schema.version, {\n        upgrade: (db, oldVersion, newVersion, transaction) => {\n          let dbArray: Array<string> = JSON.parse(localStorage.getItem(dbListKey)) || [];\n          if (!dbArray.includes(dbName)) {\n            dbArray.push(dbName);\n          }\n          localStorage.setItem(dbListKey, JSON.stringify(dbArray));\n          for (const storeName in this.schema.stores) {\n            if (this.schema.stores.hasOwnProperty(storeName)) {\n              db.objectStoreNames.contains(storeName) || db.createObjectStore(storeName);\n            }\n          }\n        }\n      });\n    }\n  }\n}\n"]}