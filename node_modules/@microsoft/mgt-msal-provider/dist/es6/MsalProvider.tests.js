/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { it, expect } from '@jest/globals';
import { LoginType } from '@microsoft/mgt-element/src/providers/IProvider';
import { UserAgentApplication } from 'msal';
import { MsalProvider } from './MsalProvider';
jest.mock('@microsoft/microsoft-graph-client/lib/es/src/Client');
jest.mock('msal/lib-commonjs');
describe('MSALProvider', () => {
    beforeEach(() => {
        jest.resetAllMocks();
        UserAgentApplication.prototype.acquireTokenSilent = jest.fn().mockReturnValueOnce(Promise.resolve({
            accessToken: 'abc'
        }));
    });
    it('undefined clientId should throw exception', () => {
        const config = {
            clientId: undefined
        };
        expect(() => {
            new MsalProvider(config);
        }).toThrowError('clientId must be provided');
    });
    it('_loginType Popup should call the loginPopup', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = {
            clientId: 'abc',
            loginType: LoginType.Popup
        };
        UserAgentApplication.prototype.loginPopup = jest.fn().mockReturnValueOnce(Promise.resolve({
            account: 1
        }));
        const msalProvider = new MsalProvider(config);
        yield msalProvider.login();
        // tslint:disable-next-line: no-string-literal
        expect(msalProvider['_userAgentApplication'].loginPopup).toBeCalled();
    }));
    it('_loginType Redirect should call the loginRedirect', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = {
            clientId: 'abc',
            loginType: LoginType.Redirect
        };
        const msalProvider = new MsalProvider(config);
        yield msalProvider.login();
        // tslint:disable-next-line: no-string-literal
        expect(msalProvider['_userAgentApplication'].loginRedirect).toBeCalled();
    }));
    it('getAccessToken should call acquireTokenSilent', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = {
            clientId: 'abc',
            loginType: LoginType.Redirect
        };
        const msalProvider = new MsalProvider(config);
        const authProviderOptions = {};
        const _ = yield msalProvider.getAccessToken(authProviderOptions);
        // tslint:disable-next-line: no-string-literal
        expect(msalProvider['_userAgentApplication'].acquireTokenSilent).toBeCalled();
    }));
    it('logout should fire onLoginChanged callback', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = {
            clientId: 'abc',
            loginType: LoginType.Popup
        };
        UserAgentApplication.prototype.loginPopup = jest.fn().mockReturnValueOnce(Promise.resolve({
            account: 1
        }));
        const msalProvider = new MsalProvider(config);
        yield msalProvider.login();
        expect.assertions(1);
        msalProvider.onStateChanged(() => {
            expect(true).toBeTruthy();
        });
        yield msalProvider.logout();
    }));
    it('login should fire onLoginChanged callback when loginType is Popup', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = {
            clientId: 'abc',
            loginType: LoginType.Popup
        };
        UserAgentApplication.prototype.loginPopup = jest.fn().mockReturnValueOnce(Promise.resolve({
            account: 1
        }));
        const msalProvider = new MsalProvider(config);
        expect.assertions(1);
        msalProvider.onStateChanged(() => {
            expect(true).toBeTruthy();
        });
        yield msalProvider.login();
    }));
    it('login should fire onLoginChanged callback when loginType is Redirect', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = {
            clientId: 'abc',
            loginType: LoginType.Redirect
        };
        UserAgentApplication.prototype.loginRedirect = jest.fn().mockImplementationOnce(() => {
            // msalProvider.tokenReceivedCallback(undefined);
        });
        const msalProvider = new MsalProvider(config);
        msalProvider.onStateChanged(() => {
            expect(true).toBeTruthy();
        });
        yield msalProvider.login();
    }));
});
//# sourceMappingURL=MsalProvider.tests.js.map