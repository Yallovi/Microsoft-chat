{"version":3,"file":"MsalProvider.tests.js","sourceRoot":"src/","sources":["MsalProvider.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { it, expect } from '@jest/globals';\nimport { LoginType } from '@microsoft/mgt-element/src/providers/IProvider';\nimport { UserAgentApplication } from 'msal';\nimport { MsalConfig, MsalProvider } from './MsalProvider';\n\njest.mock('@microsoft/microsoft-graph-client/lib/es/src/Client');\njest.mock('msal/lib-commonjs');\n\ndescribe('MSALProvider', () => {\n  beforeEach(() => {\n    jest.resetAllMocks();\n    UserAgentApplication.prototype.acquireTokenSilent = jest.fn().mockReturnValueOnce(\n      Promise.resolve({\n        accessToken: 'abc'\n      })\n    );\n  });\n\n  it('undefined clientId should throw exception', () => {\n    const config: MsalConfig = {\n      clientId: undefined\n    };\n    expect(() => {\n      new MsalProvider(config);\n    }).toThrowError('clientId must be provided');\n  });\n\n  it('_loginType Popup should call the loginPopup', async () => {\n    const config: MsalConfig = {\n      clientId: 'abc',\n      loginType: LoginType.Popup\n    };\n\n    UserAgentApplication.prototype.loginPopup = jest.fn().mockReturnValueOnce(\n      Promise.resolve({\n        account: 1\n      })\n    );\n\n    const msalProvider = new MsalProvider(config);\n    await msalProvider.login();\n    // tslint:disable-next-line: no-string-literal\n    expect(msalProvider['_userAgentApplication'].loginPopup).toBeCalled();\n  });\n\n  it('_loginType Redirect should call the loginRedirect', async () => {\n    const config: MsalConfig = {\n      clientId: 'abc',\n      loginType: LoginType.Redirect\n    };\n    const msalProvider = new MsalProvider(config);\n    await msalProvider.login();\n    // tslint:disable-next-line: no-string-literal\n    expect(msalProvider['_userAgentApplication'].loginRedirect).toBeCalled();\n  });\n\n  it('getAccessToken should call acquireTokenSilent', async () => {\n    const config: MsalConfig = {\n      clientId: 'abc',\n      loginType: LoginType.Redirect\n    };\n    const msalProvider = new MsalProvider(config);\n    const authProviderOptions = {};\n    const _ = await msalProvider.getAccessToken(authProviderOptions);\n    // tslint:disable-next-line: no-string-literal\n    expect(msalProvider['_userAgentApplication'].acquireTokenSilent).toBeCalled();\n  });\n\n  it('logout should fire onLoginChanged callback', async () => {\n    const config: MsalConfig = {\n      clientId: 'abc',\n      loginType: LoginType.Popup\n    };\n\n    UserAgentApplication.prototype.loginPopup = jest.fn().mockReturnValueOnce(\n      Promise.resolve({\n        account: 1\n      })\n    );\n\n    const msalProvider = new MsalProvider(config);\n    await msalProvider.login();\n    expect.assertions(1);\n    msalProvider.onStateChanged(() => {\n      expect(true).toBeTruthy();\n    });\n    await msalProvider.logout();\n  });\n\n  it('login should fire onLoginChanged callback when loginType is Popup', async () => {\n    const config: MsalConfig = {\n      clientId: 'abc',\n      loginType: LoginType.Popup\n    };\n\n    UserAgentApplication.prototype.loginPopup = jest.fn().mockReturnValueOnce(\n      Promise.resolve({\n        account: 1\n      })\n    );\n\n    const msalProvider = new MsalProvider(config);\n\n    expect.assertions(1);\n    msalProvider.onStateChanged(() => {\n      expect(true).toBeTruthy();\n    });\n    await msalProvider.login();\n  });\n\n  it('login should fire onLoginChanged callback when loginType is Redirect', async () => {\n    const config: MsalConfig = {\n      clientId: 'abc',\n      loginType: LoginType.Redirect\n    };\n\n    UserAgentApplication.prototype.loginRedirect = jest.fn().mockImplementationOnce(() => {\n      // msalProvider.tokenReceivedCallback(undefined);\n    });\n\n    const msalProvider = new MsalProvider(config);\n\n    msalProvider.onStateChanged(() => {\n      expect(true).toBeTruthy();\n    });\n    await msalProvider.login();\n  });\n});\n"]}