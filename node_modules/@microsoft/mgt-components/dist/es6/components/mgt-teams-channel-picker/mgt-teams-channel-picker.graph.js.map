{"version":3,"file":"mgt-teams-channel-picker.graph.js","sourceRoot":"src/","sources":["components/mgt-teams-channel-picker/mgt-teams-channel-picker.graph.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAgC,YAAY,EAAc,MAAM,wBAAwB,CAAC;AAEhG,OAAO,EACL,mBAAmB,EAEnB,wBAAwB,EACxB,uBAAuB,EACxB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAElD;;;;;GAKG;AACH,MAAM,UAAgB,aAAa,CAAC,KAAa;;QAC/C,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QACnG,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACpC,CAAC;CAAA;AAOD,MAAM,UAAgB,yBAAyB,CAAC,KAAgB,EAAE,OAAiB;;QACjF,IAAI,KAA6B,CAAC;QAClC,IAAI,MAAM,GAAgB,EAAE,CAAC;QAE7B,IAAI,uBAAuB,EAAE,EAAE;YAC7B,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAa,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvF,KAAK,MAAM,EAAE,IAAI,OAAO,EAAE;gBACxB,IAAI;oBACF,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAC7C,IAAI,WAAW,IAAI,wBAAwB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC,UAAU,EAAE;wBACnF,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;qBAC1B;iBACF;gBAAC,OAAO,CAAC,EAAE,GAAE;aACf;YACD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE;gBAC9B,OAAO,MAAM,CAAC;aACf;SACF;QAED,IAAI,MAAM,GAAG,CAAC,oBAAoB,CAAC,CAAC;QACpC,MAAM,GAAG,EAAE,CAAC;QAEZ,KAAK,MAAM,EAAE,IAAI,OAAO,EAAE;YACxB,IAAI;gBACF,MAAM,WAAW,GAAG,MAAM,mBAAmB,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;gBAC7E,IAAI,uBAAuB,EAAE,IAAI,WAAW,EAAE;oBAC5C,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;iBACjC;gBACD,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;aAC1B;YAAC,OAAO,CAAC,EAAE,GAAE;SACf;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, BetaGraph, CacheItem, CacheService, CacheStore } from '@microsoft/mgt-element';\nimport { Team } from '@microsoft/microsoft-graph-types';\nimport {\n  getPhotoForResource,\n  CachePhoto,\n  getPhotoInvalidationTime,\n  getIsPhotosCacheEnabled\n} from '../../graph/graph.photos';\nimport { schemas } from '../../graph/cacheStores';\n\n/**\n * async promise, returns all Teams associated with the user logged in\n *\n * @returns {Promise<Team[]>}\n * @memberof Graph\n */\nexport async function getAllMyTeams(graph: IGraph): Promise<Team[]> {\n  const teams = await graph.api('/me/joinedTeams').select(['displayName', 'id', 'isArchived']).get();\n  return teams ? teams.value : null;\n}\n\n/** An object collection of cached photos. */\ntype CachePhotos = {\n  [key: string]: CachePhoto;\n};\n\nexport async function getTeamsPhotosforPhotoIds(graph: BetaGraph, teamIds: string[]): Promise<CachePhotos> {\n  let cache: CacheStore<CachePhoto>;\n  let photos: CachePhotos = {};\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.teams);\n    for (const id of teamIds) {\n      try {\n        const photoDetail = await cache.getValue(id);\n        if (photoDetail && getPhotoInvalidationTime() > Date.now() - photoDetail.timeCached) {\n          photos[id] = photoDetail;\n        }\n      } catch (_) {}\n    }\n    if (Object.keys(photos).length) {\n      return photos;\n    }\n  }\n\n  let scopes = ['team.readbasic.all'];\n  photos = {};\n\n  for (const id of teamIds) {\n    try {\n      const photoDetail = await getPhotoForResource(graph, `/teams/${id}`, scopes);\n      if (getIsPhotosCacheEnabled() && photoDetail) {\n        cache.putValue(id, photoDetail);\n      }\n      photos[id] = photoDetail;\n    } catch (_) {}\n  }\n\n  return photos;\n}\n"]}