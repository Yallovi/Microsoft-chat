/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CacheService } from '@microsoft/mgt-element';
import { getPhotoForResource, getPhotoInvalidationTime, getIsPhotosCacheEnabled } from '../../graph/graph.photos';
import { schemas } from '../../graph/cacheStores';
/**
 * async promise, returns all Teams associated with the user logged in
 *
 * @returns {Promise<Team[]>}
 * @memberof Graph
 */
export function getAllMyTeams(graph) {
    return __awaiter(this, void 0, void 0, function* () {
        const teams = yield graph.api('/me/joinedTeams').select(['displayName', 'id', 'isArchived']).get();
        return teams ? teams.value : null;
    });
}
export function getTeamsPhotosforPhotoIds(graph, teamIds) {
    return __awaiter(this, void 0, void 0, function* () {
        let cache;
        let photos = {};
        if (getIsPhotosCacheEnabled()) {
            cache = CacheService.getCache(schemas.photos, schemas.photos.stores.teams);
            for (const id of teamIds) {
                try {
                    const photoDetail = yield cache.getValue(id);
                    if (photoDetail && getPhotoInvalidationTime() > Date.now() - photoDetail.timeCached) {
                        photos[id] = photoDetail;
                    }
                }
                catch (_) { }
            }
            if (Object.keys(photos).length) {
                return photos;
            }
        }
        let scopes = ['team.readbasic.all'];
        photos = {};
        for (const id of teamIds) {
            try {
                const photoDetail = yield getPhotoForResource(graph, `/teams/${id}`, scopes);
                if (getIsPhotosCacheEnabled() && photoDetail) {
                    cache.putValue(id, photoDetail);
                }
                photos[id] = photoDetail;
            }
            catch (_) { }
        }
        return photos;
    });
}
//# sourceMappingURL=mgt-teams-channel-picker.graph.js.map