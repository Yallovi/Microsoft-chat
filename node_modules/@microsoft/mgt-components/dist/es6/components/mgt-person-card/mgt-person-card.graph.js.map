{"version":3,"file":"mgt-person-card.graph.js","sourceRoot":"src/","sources":["components/mgt-person-card/mgt-person-card.graph.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { BatchResponse, IBatch, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { Chat, ChatMessage } from '@microsoft/microsoft-graph-types';\nimport { Profile } from '@microsoft/microsoft-graph-types-beta';\n\nimport { getEmailFromGraphEntity } from '../../graph/graph.people';\nimport { IDynamicPerson } from '../../graph/types';\nimport { MgtPersonCardConfig, MgtPersonCardState } from './mgt-person-card.types';\n\n// tslint:disable-next-line:completed-docs\nconst userProperties =\n  'businessPhones,companyName,department,displayName,givenName,jobTitle,mail,mobilePhone,officeLocation,preferredLanguage,surname,userPrincipalName,id,accountEnabled';\n\n// tslint:disable-next-line:completed-docs\nconst batchKeys = {\n  directReports: 'directReports',\n  files: 'files',\n  messages: 'messages',\n  people: 'people',\n  person: 'person'\n};\n\n/**\n * Get data to populate the person card\n *\n * @export\n * @param {IGraph} graph\n * @param {IDynamicPerson} personDetails\n * @param {boolean} isMe\n * @param {MgtPersonCardConfig} config\n * @return {*}  {Promise<MgtPersonCardState>}\n */\nexport async function getPersonCardGraphData(\n  graph: IGraph,\n  personDetails: IDynamicPerson,\n  isMe: boolean,\n  config: MgtPersonCardConfig\n): Promise<MgtPersonCardState> {\n  const userId = personDetails.id;\n  const email = getEmailFromGraphEntity(personDetails);\n\n  const isContactOrGroup =\n    'classification' in personDetails ||\n    ('personType' in personDetails &&\n      (personDetails.personType.subclass === 'PersonalContact' || personDetails.personType.class === 'Group'));\n\n  const batch = graph.createBatch();\n\n  if (!isContactOrGroup) {\n    if (config.sections.organization) {\n      buildOrgStructureRequest(batch, userId);\n\n      if (typeof config.sections.organization !== 'boolean' && config.sections.organization.showWorksWith) {\n        buildWorksWithRequest(batch, userId);\n      }\n    }\n  }\n\n  if (config.sections.mailMessages && email) {\n    buildMessagesWithUserRequest(batch, email);\n  }\n\n  if (config.sections.files) {\n    buildFilesRequest(batch, isMe ? null : email);\n  }\n\n  let response: Map<string, BatchResponse>;\n  const data: MgtPersonCardState = {}; // TODO\n  try {\n    response = await batch.executeAll();\n  } catch {\n    // nop\n  }\n\n  if (response) {\n    for (const [key, value] of response) {\n      data[key] = value.content.value || value.content;\n    }\n  }\n\n  if (!isContactOrGroup && config.sections.profile) {\n    try {\n      const profile = await getProfile(graph, userId);\n      if (profile) {\n        data.profile = profile;\n      }\n    } catch {\n      // nop\n    }\n  }\n\n  // filter out disabled users from direct reports.\n  if (data.directReports && data.directReports.length > 0) {\n    data.directReports = data.directReports.filter(report => report.accountEnabled);\n  }\n\n  return data;\n}\n\n// tslint:disable-next-line:completed-docs\nfunction buildOrgStructureRequest(batch: IBatch, userId: string) {\n  const expandManagers = `manager($levels=max;$select=${userProperties})`;\n\n  batch.get(\n    batchKeys.person,\n    `users/${userId}?$expand=${expandManagers}&$select=${userProperties}&$count=true`,\n    ['user.read.all'],\n    {\n      ConsistencyLevel: 'eventual'\n    }\n  );\n\n  batch.get(batchKeys.directReports, `users/${userId}/directReports?$select=${userProperties}`);\n}\n\n// tslint:disable-next-line:completed-docs\nfunction buildWorksWithRequest(batch: IBatch, userId: string) {\n  batch.get(batchKeys.people, `users/${userId}/people?$filter=personType/class eq 'Person'`, ['People.Read.All']);\n}\n\n// tslint:disable-next-line:completed-docs\nfunction buildMessagesWithUserRequest(batch: IBatch, emailAddress: string) {\n  batch.get(batchKeys.messages, `me/messages?$search=\"from:${emailAddress}\"`, ['Mail.ReadBasic']);\n}\n\n// tslint:disable-next-line:completed-docs\nfunction buildFilesRequest(batch: IBatch, emailAddress?: string) {\n  let request: string;\n\n  if (emailAddress) {\n    request = `me/insights/shared?$filter=lastshared/sharedby/address eq '${emailAddress}'`;\n  } else {\n    request = 'me/insights/used';\n  }\n\n  batch.get(batchKeys.files, request, ['Sites.Read.All']);\n}\n\n/**\n * Get the profile for a user\n *\n * @param {IGraph} graph\n * @param {string} userId\n * @return {*}  {Promise<Profile>}\n */\nasync function getProfile(graph: IGraph, userId: string): Promise<Profile> {\n  const profile = await graph.api(`/users/${userId}/profile`).version('beta').get();\n  return profile;\n}\n\n/**\n * Initiate a chat to a user\n *\n * @export\n * @param {IGraph} graph\n * @param {{ chatType: string; members: [{\"@odata.type\": string,\"roles\": [\"owner\"],\"user@odata.bind\": string},{\"@odata.type\": string,\"roles\": [\"owner\"],\"user@odata.bind\": string}]  }} chatData\n * @return {*}  {Promise<Chat>}\n */\nexport async function createChat(\n  graph: IGraph,\n  person: string,\n  user: string\n  // tslint:disable-next-line: completed-docs\n): Promise<Chat> {\n  const chatData = {\n    chatType: 'oneonOne',\n    members: [\n      {\n        '@odata.type': '#microsoft.graph.aadUserConversationMember',\n        roles: ['owner'],\n        'user@odata.bind': `https://graph.microsoft.com/v1.0/users('${user}')`\n      },\n      {\n        '@odata.type': '#microsoft.graph.aadUserConversationMember',\n        roles: ['owner'],\n        'user@odata.bind': `https://graph.microsoft.com/v1.0/users('${person}')`\n      }\n    ]\n  };\n  const chat = await graph\n    .api(`/chats`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Chat.Create', 'Chat.ReadWrite'))\n    .post(chatData);\n\n  return chat;\n}\n\n/**\n * Send a chat message to a user\n *\n * @export\n * @param {IGraph} graph\n * @param {{ body: {\"content\": string}  }} messageData\n * @return {*}  {Promise<ChatMessage>}\n */\nexport async function sendMessage(\n  graph: IGraph,\n  // tslint:disable-next-line: completed-docs\n  chatId: string,\n  messageData: {\n    body?: {\n      content: string;\n    };\n  }\n): Promise<ChatMessage> {\n  const message = await graph\n    .api(`/chats/${chatId}/messages`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Chat.ReadWrite', 'ChatMessage.Send'))\n    .post(messageData);\n\n  return message;\n}\n"]}