{"version":3,"file":"mgt-person.tests.js","sourceRoot":"src/","sources":["components/mgt-person/mgt-person.tests.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,0BAA0B,CAAC;AACnD,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACnD,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,sBAAsB,EAAE,MAAM,8BAA8B,CAAC;AACtE,OAAO,cAAc,CAAC;AACtB,gBAAgB,EAAE,CAAC;AAEnB,IAAI,MAAe,CAAC;AACpB,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,UAAU,CAAC,GAAS,EAAE;QACpB,SAAS,CAAC,UAAU,EAAE,CAAC;QACvB,SAAS;YACP,uEAAuE;aACtE,IAAI,CAAC,GAAG,EAAE,CACT,OAAO,CAAC,OAAO,CAAC;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,MAAM,EAAE,GAAG;YACX,IAAI,EAAE,mCAAmC;SAC1C,CAAC,CACH;YACD,yGAAyG;YACzG,mFAAmF;aAClF,UAAU,CAAC,wCAAwC,EAAE,GAAG,EAAE,CACzD,OAAO,CAAC,OAAO,CAAC;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,MAAM,EAAE,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC;SAC7C,CAAC,CACH,CAAC;IACN,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAS,EAAE;QAC7B,SAAS,CAAC,cAAc,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,GAAG,MAAM,OAAO,CAAC,6DAA6D,CAAC,CAAC;QACtF,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACnE,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IAC7B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAS,EAAE;QAC/C,SAAS,CAAC,cAAc,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,GAAG,MAAM,OAAO,CAAC,iFAAiF,CAAC,CAAC;QAC1G,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACnE,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC3B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,+BAA+B;QAC/B,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAEvD,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAEf,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IAC5D,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { screen } from 'testing-library__dom';\nimport { fixture } from '@open-wc/testing-helpers';\nimport { enableFetchMocks } from 'jest-fetch-mock';\nimport fetchMock from 'jest-fetch-mock';\nimport { MockProvider, Providers } from '@microsoft/mgt-element';\nimport { userPhotoBatchResponse } from './__test_data/mock-responses';\nimport './mgt-person';\nenableFetchMocks();\n\nlet person: Element;\ndescribe('mgt-person - tests', () => {\n  beforeEach(async () => {\n    fetchMock.resetMocks();\n    fetchMock\n      // Response for the setup of the MockGraph to call to the proxy service\n      .once(() =>\n        Promise.resolve({\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          status: 200,\n          body: 'https://fake-proxy.microsoft.com/'\n        })\n      )\n      // response to the $batch request to load the user photo and user data when there is nothing in the cache\n      // note that this used mockOnceIf matching the fake url supplied in the first mock.\n      .mockOnceIf(/https:\\/\\/fake-proxy.microsoft.com\\/*$/, () =>\n        Promise.resolve({\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          status: 200,\n          body: JSON.stringify(userPhotoBatchResponse)\n        })\n      );\n  });\n\n  it('should render', async () => {\n    Providers.globalProvider = new MockProvider(true);\n    person = await fixture('<mgt-person person-query=\"me\" view=\"twoLines\"></mgt-person>');\n    const img = await screen.findAllByAltText('Photo for Megan Bowen');\n    expect(img).not.toBeNull();\n  });\n\n  it('should pop up a flyout on click', async () => {\n    Providers.globalProvider = new MockProvider(true);\n    person = await fixture('<mgt-person person-query=\"me\" view=\"twoLines\" person-card=\"click\"></mgt-person>');\n    const img = await screen.findAllByAltText('Photo for Megan Bowen');\n    expect(img).not.toBeNull();\n    expect(img.length).toBe(1);\n    // test that there is no flyout\n    expect(screen.queryByTestId('flyout-slot')).toBeNull();\n\n    img[0].click();\n\n    expect(screen.queryByTestId('flyout-slot')).toBeDefined();\n  });\n});\n"]}