import {
  FluentButton,
  FluentCard,
  FluentCheckbox,
  FluentDesignSystemProvider,
  FluentProgress,
  FluentProgressRing,
  GroupType,
  MgtAgenda,
  MgtFile,
  MgtFileList,
  MgtFileUpload,
  MgtGet,
  MgtLogin,
  MgtPeople,
  MgtPeoplePicker,
  MgtPerson,
  MgtPersonCard,
  MgtTasks,
  MgtTeamsChannelPicker,
  MgtTodo,
  PersonCardInteraction,
  PersonType,
  PersonViewType,
  ResponseType,
  TasksSource,
  UserType,
  ViewType,
  avatarType
} from "./chunk-UU3LAGDZ.js";
import {
  BatchResponse,
  BetaGraph,
  CacheService,
  CacheStore,
  ComponentMediaQuery,
  EventDispatcher,
  Graph,
  GraphPageIterator,
  IProvider,
  LocalizationHelper,
  LoginType,
  MICROSOFT_GRAPH_DEFAULT_ENDPOINT,
  MICROSOFT_GRAPH_ENDPOINTS,
  MgtBaseComponent,
  MgtBaseProvider,
  MgtMockProvider,
  MgtTemplatedComponent,
  MockProvider,
  PACKAGE_VERSION,
  ProviderState,
  Providers,
  ProvidersChangedState,
  SimpleProvider,
  TeamsHelper,
  TemplateHelper,
  arraysAreEqual,
  chainMiddleware,
  createFromProvider,
  equals,
  prepScopes,
  validateBaseURL
} from "./chunk-EVB4GM5G.js";
import {
  require_react_dom
} from "./chunk-BB3BV2MM.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@microsoft/mgt-react/dist/es6/Mgt.js
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/wc-react/dist/esm/Wc.js
var import_react = __toESM(require_react());
var ignoredProps = /* @__PURE__ */ new Set(["children", "wcType"]);
var Wc = class extends import_react.Component {
  /**
   * Gets the web component element reference
   *
   * @readonly
   * @memberof Wc
   */
  get element() {
    return this._element;
  }
  /**
   * Gets the web component tag name from the 'wcType' prop
   *
   * @protected
   * @returns
   * @memberof Wc
   */
  getTag() {
    let tag;
    if (typeof this.props.wcType === "function") {
      tag = this.props.wcType.name.replace(/([a-zA-Z])(?=[A-Z])/g, "$1-").toLowerCase();
    } else if (typeof this.props.wcType === "string") {
      tag = this.props.wcType;
    }
    return tag;
  }
  /**
   * Renders the web component
   *
   * @returns
   * @memberof Wc
   */
  render() {
    const tag = this.getTag();
    if (!tag) {
      throw '"wcType" must be set!';
    }
    const allBools = {};
    for (const key of Object.keys(this.props)) {
      if (key && this.props[key] === true) {
        allBools[key] = true;
      }
    }
    return import_react.default.createElement(tag, Object.assign(Object.assign({}, allBools), { ref: (element) => this.setRef(element) }), this.props.children);
  }
  /**
   * Sets the web component reference and syncs the props
   *
   * @protected
   * @param {HTMLElement} element
   * @memberof Wc
   */
  setRef(element) {
    if (element) {
      if (element !== this._element) {
        this.cleanUp();
      }
      this._element = element;
      this.syncProps(this.props);
    } else {
      this.cleanUp();
    }
    if (this.props.innerRef) {
      if (typeof this.props.innerRef === "function") {
        this.props.innerRef(element);
      } else {
        this.props.innerRef.current = element;
      }
    }
  }
  /**
   * Removes all event listeners from web component element
   *
   * @protected
   * @returns
   * @memberof Wc
   */
  cleanUp() {
    if (!this._element) {
      return;
    }
    for (const prop in this.props) {
      if (!this.props.hasOwnProperty(prop)) {
        continue;
      }
      if (this.isEventProp(prop, this.props[prop])) {
        this.removeEventListener(prop, this.props[prop]);
      }
    }
    this._element = null;
  }
  /**
   * Updates props on web component
   *
   * @param {*} prevProps
   * @memberof Wc
   */
  componentDidUpdate(prevProps) {
    const newProps = {};
    for (const prop in this.props) {
      if (!this.props.hasOwnProperty(prop)) {
        continue;
      }
      if (!prevProps[prop] || prevProps[prop] !== this.props[prop]) {
        newProps[prop] = this.props[prop];
        if (prevProps[prop] && this.isEventProp(prop, prevProps[prop])) {
          this.removeEventListener(prop, prevProps[prop]);
        }
      }
    }
    for (const prop in prevProps) {
      if (!prevProps.hasOwnProperty(prop)) {
        continue;
      }
      if (!this.props[prop] && this.isEventProp(prop, prevProps[prop])) {
        this.removeEventListener(prop, prevProps[prop]);
      }
    }
    this.syncProps(newProps);
  }
  /**
   * Syncs all React component props to web component
   *
   * @protected
   * @param {*} props
   * @memberof Wc
   */
  syncProps(props) {
    if (this._element) {
      for (const prop in props) {
        if (ignoredProps.has(prop)) {
          continue;
        }
        if (this.isEventProp(prop, props[prop])) {
          this.addEventListener(prop, props[prop]);
        }
        this._element[prop] = props[prop];
      }
    }
  }
  /**
   * Returns true if prop should be treated as event
   *
   * @protected
   * @param {string} prop
   * @param {*} value
   * @returns
   * @memberof Wc
   */
  isEventProp(prop, value) {
    return prop && typeof value === "function";
  }
  /**
   * Adds event listener on web component
   *
   * @protected
   * @param {string} propName
   * @param {EventListenerOrEventListenerObject} handler
   * @memberof Wc
   */
  addEventListener(propName, handler) {
    let eventName = propName;
    if (eventName.match(/^on[A-Z]/gm)) {
      eventName = eventName.substring(2).toLowerCase();
    }
    this._element.addEventListener(eventName, handler);
  }
  /**
   * Removes event listener from web component
   *
   * @protected
   * @param {string} propName
   * @param {EventListenerOrEventListenerObject} handler
   * @memberof Wc
   */
  removeEventListener(propName, handler) {
    let eventName = propName;
    if (eventName.match(/^on[A-Z]/gm)) {
      eventName = eventName.substring(2).toLowerCase();
    }
    this._element.removeEventListener(eventName, handler);
  }
};

// node_modules/@microsoft/mgt-react/dist/es6/Mgt.js
var Mgt = class extends Wc {
  constructor(props) {
    super(props);
    this.handleTemplateRendered = this.handleTemplateRendered.bind(this);
  }
  getTag() {
    let tag = super.getTag();
    if (!tag.startsWith("mgt-")) {
      tag = "mgt-" + tag;
    }
    return tag;
  }
  render() {
    const tag = this.getTag();
    if (!tag) {
      throw '"wcType" must be set!';
    }
    this.processTemplates(this.props.children);
    let templateElements = [];
    if (this._templates) {
      for (let t in this._templates) {
        if (this._templates.hasOwnProperty(t)) {
          const element = import_react2.default.createElement("template", { key: t, "data-type": t }, null);
          templateElements.push(element);
        }
      }
    }
    return import_react2.default.createElement(tag, { ref: (element) => this.setRef(element) }, templateElements);
  }
  /**
   * Sets the web component reference and syncs the props
   *
   * @protected
   * @param {HTMLElement} element
   * @memberof Wc
   */
  setRef(component) {
    if (component) {
      component.addEventListener("templateRendered", this.handleTemplateRendered);
    }
    super.setRef(component);
  }
  /**
   * Removes all event listeners from web component element
   *
   * @protected
   * @returns
   * @memberof Mgt
   */
  cleanUp() {
    if (!this.element) {
      return;
    }
    this.element.removeEventListener("templateRendered", this.handleTemplateRendered);
    super.cleanUp();
  }
  /**
   * Renders a template
   *
   * @protected
   * @param {*} e
   * @returns
   * @memberof Mgt
   */
  handleTemplateRendered(e) {
    if (!this._templates) {
      return;
    }
    let templateType = e.detail.templateType;
    let dataContext = e.detail.context;
    let element = e.detail.element;
    let template = this._templates[templateType];
    if (template) {
      template = import_react2.default.cloneElement(template, { dataContext });
      import_react_dom.default.render(template, element);
    }
  }
  /**
   * Prepares templates for rendering
   *
   * @protected
   * @param {ReactNode} children
   * @returns
   * @memberof Mgt
   */
  processTemplates(children) {
    if (!children) {
      return;
    }
    let templates = {};
    import_react2.default.Children.forEach(children, (child) => {
      let element = child;
      if (element && element.props && element.props.template) {
        templates[element.props.template] = element;
      } else {
        templates["default"] = element;
      }
    });
    this._templates = templates;
  }
};
var wrapMgt = (tag) => {
  const component = import_react2.default.forwardRef((props, ref) => import_react2.default.createElement(Mgt, Object.assign({ wcType: tag, innerRef: ref }, props)));
  return component;
};

// node_modules/@microsoft/mgt-react/dist/es6/generated/react.js
var Agenda = wrapMgt("mgt-agenda");
var FileList = wrapMgt("mgt-file-list");
var File = wrapMgt("mgt-file");
var Get = wrapMgt("mgt-get");
var Login = wrapMgt("mgt-login");
var PeoplePicker = wrapMgt("mgt-people-picker");
var People = wrapMgt("mgt-people");
var PersonCard = wrapMgt("mgt-person-card");
var Person = wrapMgt("mgt-person");
var Tasks = wrapMgt("mgt-tasks");
var TeamsChannelPicker = wrapMgt("mgt-teams-channel-picker");
var Todo = wrapMgt("mgt-todo");
export {
  Agenda,
  BatchResponse,
  BetaGraph,
  CacheService,
  CacheStore,
  ComponentMediaQuery,
  EventDispatcher,
  File,
  FileList,
  FluentButton,
  FluentCard,
  FluentCheckbox,
  FluentDesignSystemProvider,
  FluentProgress,
  FluentProgressRing,
  Get,
  Graph,
  GraphPageIterator,
  GroupType,
  IProvider,
  LocalizationHelper,
  Login,
  LoginType,
  MICROSOFT_GRAPH_DEFAULT_ENDPOINT,
  MICROSOFT_GRAPH_ENDPOINTS,
  Mgt,
  MgtAgenda,
  MgtBaseComponent,
  MgtBaseProvider,
  MgtFile,
  MgtFileList,
  MgtFileUpload,
  MgtGet,
  MgtLogin,
  MgtMockProvider,
  MgtPeople,
  MgtPeoplePicker,
  MgtPerson,
  MgtPersonCard,
  MgtTasks,
  MgtTeamsChannelPicker,
  MgtTemplatedComponent,
  MgtTodo,
  MockProvider,
  PACKAGE_VERSION,
  People,
  PeoplePicker,
  Person,
  PersonCard,
  PersonCardInteraction,
  PersonType,
  PersonViewType,
  ProviderState,
  Providers,
  ProvidersChangedState,
  ResponseType,
  SimpleProvider,
  Tasks,
  TasksSource,
  TeamsChannelPicker,
  TeamsHelper,
  TemplateHelper,
  Todo,
  UserType,
  ViewType,
  arraysAreEqual,
  avatarType,
  chainMiddleware,
  createFromProvider,
  equals,
  prepScopes,
  validateBaseURL,
  wrapMgt
};
//# sourceMappingURL=@microsoft_mgt-react.js.map
