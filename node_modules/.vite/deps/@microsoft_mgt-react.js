import {
  AttributePart,
  BatchResponse,
  BetaGraph,
  CacheService,
  CacheStore,
  ComponentMediaQuery,
  EventDispatcher,
  Graph,
  GraphPageIterator,
  IProvider,
  LocalizationHelper,
  LoginType,
  MICROSOFT_GRAPH_DEFAULT_ENDPOINT,
  MICROSOFT_GRAPH_ENDPOINTS,
  MgtBaseComponent,
  MgtBaseProvider,
  MgtMockProvider,
  MgtTemplatedComponent,
  MockProvider,
  NodePart,
  PACKAGE_VERSION,
  PropertyPart,
  ProviderState,
  Providers,
  ProvidersChangedState,
  SimpleProvider,
  TeamsHelper,
  TemplateHelper,
  arraysAreEqual,
  chainMiddleware,
  createFromProvider,
  createMarker,
  css,
  customElement,
  directive,
  equals,
  html,
  internalProperty,
  prepScopes,
  property,
  removeNodes,
  reparentNodes,
  state,
  validateBaseURL
} from "./chunk-BRUHI7VP.js";
import {
  require_react_dom
} from "./chunk-22DKRGA3.js";
import {
  require_react
} from "./chunk-2MHMPIZK.js";
import {
  __toESM
} from "./chunk-HYZYPRER.js";

// node_modules/@microsoft/mgt-react/dist/es6/Mgt.js
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/wc-react/dist/esm/Wc.js
var import_react = __toESM(require_react());
var ignoredProps = /* @__PURE__ */ new Set(["children", "wcType"]);
var Wc = class extends import_react.Component {
  /**
   * Gets the web component element reference
   *
   * @readonly
   * @memberof Wc
   */
  get element() {
    return this._element;
  }
  /**
   * Gets the web component tag name from the 'wcType' prop
   *
   * @protected
   * @returns
   * @memberof Wc
   */
  getTag() {
    let tag;
    if (typeof this.props.wcType === "function") {
      tag = this.props.wcType.name.replace(/([a-zA-Z])(?=[A-Z])/g, "$1-").toLowerCase();
    } else if (typeof this.props.wcType === "string") {
      tag = this.props.wcType;
    }
    return tag;
  }
  /**
   * Renders the web component
   *
   * @returns
   * @memberof Wc
   */
  render() {
    const tag = this.getTag();
    if (!tag) {
      throw '"wcType" must be set!';
    }
    const allBools = {};
    for (const key of Object.keys(this.props)) {
      if (key && this.props[key] === true) {
        allBools[key] = true;
      }
    }
    return import_react.default.createElement(tag, Object.assign(Object.assign({}, allBools), { ref: (element) => this.setRef(element) }), this.props.children);
  }
  /**
   * Sets the web component reference and syncs the props
   *
   * @protected
   * @param {HTMLElement} element
   * @memberof Wc
   */
  setRef(element) {
    if (element) {
      if (element !== this._element) {
        this.cleanUp();
      }
      this._element = element;
      this.syncProps(this.props);
    } else {
      this.cleanUp();
    }
    if (this.props.innerRef) {
      if (typeof this.props.innerRef === "function") {
        this.props.innerRef(element);
      } else {
        this.props.innerRef.current = element;
      }
    }
  }
  /**
   * Removes all event listeners from web component element
   *
   * @protected
   * @returns
   * @memberof Wc
   */
  cleanUp() {
    if (!this._element) {
      return;
    }
    for (const prop in this.props) {
      if (!this.props.hasOwnProperty(prop)) {
        continue;
      }
      if (this.isEventProp(prop, this.props[prop])) {
        this.removeEventListener(prop, this.props[prop]);
      }
    }
    this._element = null;
  }
  /**
   * Updates props on web component
   *
   * @param {*} prevProps
   * @memberof Wc
   */
  componentDidUpdate(prevProps) {
    const newProps = {};
    for (const prop in this.props) {
      if (!this.props.hasOwnProperty(prop)) {
        continue;
      }
      if (!prevProps[prop] || prevProps[prop] !== this.props[prop]) {
        newProps[prop] = this.props[prop];
        if (prevProps[prop] && this.isEventProp(prop, prevProps[prop])) {
          this.removeEventListener(prop, prevProps[prop]);
        }
      }
    }
    for (const prop in prevProps) {
      if (!prevProps.hasOwnProperty(prop)) {
        continue;
      }
      if (!this.props[prop] && this.isEventProp(prop, prevProps[prop])) {
        this.removeEventListener(prop, prevProps[prop]);
      }
    }
    this.syncProps(newProps);
  }
  /**
   * Syncs all React component props to web component
   *
   * @protected
   * @param {*} props
   * @memberof Wc
   */
  syncProps(props) {
    if (this._element) {
      for (const prop in props) {
        if (ignoredProps.has(prop)) {
          continue;
        }
        if (this.isEventProp(prop, props[prop])) {
          this.addEventListener(prop, props[prop]);
        }
        this._element[prop] = props[prop];
      }
    }
  }
  /**
   * Returns true if prop should be treated as event
   *
   * @protected
   * @param {string} prop
   * @param {*} value
   * @returns
   * @memberof Wc
   */
  isEventProp(prop, value) {
    return prop && typeof value === "function";
  }
  /**
   * Adds event listener on web component
   *
   * @protected
   * @param {string} propName
   * @param {EventListenerOrEventListenerObject} handler
   * @memberof Wc
   */
  addEventListener(propName, handler) {
    let eventName = propName;
    if (eventName.match(/^on[A-Z]/gm)) {
      eventName = eventName.substring(2).toLowerCase();
    }
    this._element.addEventListener(eventName, handler);
  }
  /**
   * Removes event listener from web component
   *
   * @protected
   * @param {string} propName
   * @param {EventListenerOrEventListenerObject} handler
   * @memberof Wc
   */
  removeEventListener(propName, handler) {
    let eventName = propName;
    if (eventName.match(/^on[A-Z]/gm)) {
      eventName = eventName.substring(2).toLowerCase();
    }
    this._element.removeEventListener(eventName, handler);
  }
};

// node_modules/@microsoft/mgt-react/dist/es6/Mgt.js
var Mgt = class extends Wc {
  constructor(props) {
    super(props);
    this.handleTemplateRendered = this.handleTemplateRendered.bind(this);
  }
  getTag() {
    let tag = super.getTag();
    if (!tag.startsWith("mgt-")) {
      tag = "mgt-" + tag;
    }
    return tag;
  }
  render() {
    const tag = this.getTag();
    if (!tag) {
      throw '"wcType" must be set!';
    }
    this.processTemplates(this.props.children);
    let templateElements = [];
    if (this._templates) {
      for (let t in this._templates) {
        if (this._templates.hasOwnProperty(t)) {
          const element = import_react2.default.createElement("template", { key: t, "data-type": t }, null);
          templateElements.push(element);
        }
      }
    }
    return import_react2.default.createElement(tag, { ref: (element) => this.setRef(element) }, templateElements);
  }
  /**
   * Sets the web component reference and syncs the props
   *
   * @protected
   * @param {HTMLElement} element
   * @memberof Wc
   */
  setRef(component) {
    if (component) {
      component.addEventListener("templateRendered", this.handleTemplateRendered);
    }
    super.setRef(component);
  }
  /**
   * Removes all event listeners from web component element
   *
   * @protected
   * @returns
   * @memberof Mgt
   */
  cleanUp() {
    if (!this.element) {
      return;
    }
    this.element.removeEventListener("templateRendered", this.handleTemplateRendered);
    super.cleanUp();
  }
  /**
   * Renders a template
   *
   * @protected
   * @param {*} e
   * @returns
   * @memberof Mgt
   */
  handleTemplateRendered(e) {
    if (!this._templates) {
      return;
    }
    let templateType = e.detail.templateType;
    let dataContext = e.detail.context;
    let element = e.detail.element;
    let template2 = this._templates[templateType];
    if (template2) {
      template2 = import_react2.default.cloneElement(template2, { dataContext });
      import_react_dom.default.render(template2, element);
    }
  }
  /**
   * Prepares templates for rendering
   *
   * @protected
   * @param {ReactNode} children
   * @returns
   * @memberof Mgt
   */
  processTemplates(children2) {
    if (!children2) {
      return;
    }
    let templates = {};
    import_react2.default.Children.forEach(children2, (child) => {
      let element = child;
      if (element && element.props && element.props.template) {
        templates[element.props.template] = element;
      } else {
        templates["default"] = element;
      }
    });
    this._templates = templates;
  }
};
var wrapMgt = (tag) => {
  const component = import_react2.default.forwardRef((props, ref2) => import_react2.default.createElement(Mgt, Object.assign({ wcType: tag, innerRef: ref2 }, props)));
  return component;
};

// node_modules/@microsoft/mgt-react/dist/es6/generated/react.js
var Agenda = wrapMgt("mgt-agenda");
var FileList = wrapMgt("mgt-file-list");
var File2 = wrapMgt("mgt-file");
var Get = wrapMgt("mgt-get");
var Login = wrapMgt("mgt-login");
var PeoplePicker = wrapMgt("mgt-people-picker");
var People = wrapMgt("mgt-people");
var PersonCard = wrapMgt("mgt-person-card");
var Person = wrapMgt("mgt-person");
var Tasks = wrapMgt("mgt-tasks");
var TeamsChannelPicker = wrapMgt("mgt-teams-channel-picker");
var Todo = wrapMgt("mgt-todo");

// node_modules/@microsoft/mgt-components/dist/es6/styles/theme-css.js
var styles = [
  css`
.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--selected-person-background-color:#f3f2f1}.mgt-dark{--selected-person-background-color:#4f4f4f}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--dropdown-item-selected-background:#deecf9;--arrow-fill:#000000}.mgt-dark{--dropdown-item-selected-background:#333d47;--arrow-fill:#605e5c}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--button-color:#323130;--popup-color:#323130}.mgt-dark{--button-color:#f3f2f1;--popup-color:#f3f2f1}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--event-background-color:#ffffff}.mgt-dark{--event-background-color:#161514}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--person-card-details-item-color:#201f1e}.mgt-dark{--person-card-details-item-color:#faf9f8}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--task-border:1px solid #e1dfdd;--task-complete-border:2px dotted #e1dfdd;--task-new-add-button-disabled-background:#edebe9;--task-icon-color:#000000}.mgt-dark{--task-border:1px solid #717171;--task-complete-border:2px dotted #717171;--task-new-add-button-disabled-background:#4f4f4f;--task-icon-color:#ffffff}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{background-color:#fff}.mgt-dark{background-color:#424242}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--file-item-background-color--hover:rgba(0, 0, 0, 0.1);--file-item-background-color--active:rgba(0, 0, 0, 0.05);--file-list-background-color:#ffffff;--file-upload-button-background-color:#f3f2f1;--file-upload-dialog-background-color:rgba(0, 0, 0, 0.1);--file-upload-dialog-content-background-color:white;--file-upload-dialog-content-color:#323130;--file-upload-dialog-primarybutton-color:white;--file-upload-dialog-primarybutton-background-color:#006cbe}.mgt-dark{--file-item-background-color--hover:#0078d4;--file-item-background-color--active:#238ada;--file-list-background-color:#424242;--file-upload-button-background-color:#006cbe;--file-upload-dialog-background-color:rgba(0, 0, 0, 0.3);--file-upload-dialog-content-background-color:#4a4a4a;--file-upload-dialog-content-color:white;--file-upload-dialog-primarybutton-color:white;--file-upload-dialog-primarybutton-background-color:#006cbe}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/styles/style-helper.js
var fabricFont = document.createElement("style");
fabricFont.type = "text/css";
fabricFont.appendChild(document.createTextNode(`
@font-face {
    font-family: 'FabricMDL2Icons';
    src: url('https://static2.sharepointonline.com/files/fabric/assets/icons/fabricmdl2icons-2.68.woff2') format('woff2'),
    url(https://static2.sharepointonline.com/files/fabric/assets/icons/fabricmdl2icons-2.68.woff) format("woff"),
    url(https://static2.sharepointonline.com/files/fabric/assets/icons/fabricmdl2icons-2.68.ttf) format("truetype");;
}
`));
document.head.appendChild(fabricFont);
var themeStyle = document.createElement("style");
themeStyle.innerHTML = styles.toString();
document.head.appendChild(themeStyle);

// node_modules/lit-html/directives/class-map.js
var ClassList = class {
  constructor(element) {
    this.classes = /* @__PURE__ */ new Set();
    this.changed = false;
    this.element = element;
    const classList = (element.getAttribute("class") || "").split(/\s+/);
    for (const cls of classList) {
      this.classes.add(cls);
    }
  }
  add(cls) {
    this.classes.add(cls);
    this.changed = true;
  }
  remove(cls) {
    this.classes.delete(cls);
    this.changed = true;
  }
  commit() {
    if (this.changed) {
      let classString = "";
      this.classes.forEach((cls) => classString += cls + " ");
      this.element.setAttribute("class", classString);
    }
  }
};
var previousClassesCache = /* @__PURE__ */ new WeakMap();
var classMap = directive((classInfo) => (part) => {
  if (!(part instanceof AttributePart) || part instanceof PropertyPart || part.committer.name !== "class" || part.committer.parts.length > 1) {
    throw new Error("The `classMap` directive must be used in the `class` attribute and must be the only part in the attribute.");
  }
  const { committer } = part;
  const { element } = committer;
  let previousClasses = previousClassesCache.get(part);
  if (previousClasses === void 0) {
    element.setAttribute("class", committer.strings.join(" "));
    previousClassesCache.set(part, previousClasses = /* @__PURE__ */ new Set());
  }
  const classList = element.classList || new ClassList(element);
  previousClasses.forEach((name) => {
    if (!(name in classInfo)) {
      classList.remove(name);
      previousClasses.delete(name);
    }
  });
  for (const name in classInfo) {
    const value = classInfo[name];
    if (value != previousClasses.has(name)) {
      if (value) {
        classList.add(name);
        previousClasses.add(name);
      } else {
        classList.remove(name);
        previousClasses.delete(name);
      }
    }
  }
  if (typeof classList.commit === "function") {
    classList.commit();
  }
});

// node_modules/@microsoft/mgt-components/dist/es6/utils/Utils.js
function getRelativeDisplayDate(date) {
  const now2 = new Date();
  const today = new Date(now2.getFullYear(), now2.getMonth(), now2.getDate());
  if (date >= today) {
    return date.toLocaleString("default", {
      hour: "numeric",
      minute: "numeric"
    });
  }
  const sunday = new Date(today);
  sunday.setDate(now2.getDate() - now2.getDay());
  if (date >= sunday) {
    return date.toLocaleString("default", {
      hour: "numeric",
      minute: "numeric",
      weekday: "short"
    });
  }
  const lastTwoWeeks = new Date(sunday);
  lastTwoWeeks.setDate(sunday.getDate() - 7);
  if (date >= lastTwoWeeks) {
    return date.toLocaleString("default", {
      day: "numeric",
      month: "numeric",
      weekday: "short"
    });
  }
  return date.toLocaleString("default", {
    day: "numeric",
    month: "numeric",
    year: "numeric"
  });
}
function getShortDateString(date) {
  const month = date.getMonth();
  const day = date.getDate();
  return `${getMonthString(month)} ${day}`;
}
function getMonthString(month) {
  switch (month) {
    case 0:
      return "January";
    case 1:
      return "February";
    case 2:
      return "March";
    case 3:
      return "April";
    case 4:
      return "May";
    case 5:
      return "June";
    case 6:
      return "July";
    case 7:
      return "August";
    case 8:
      return "September";
    case 9:
      return "October";
    case 10:
      return "November";
    case 11:
      return "December";
    default:
      return "Month";
  }
}
function debounce(func, time) {
  let timeout;
  return function() {
    const functionCall = () => func.apply(this, arguments);
    clearTimeout(timeout);
    timeout = setTimeout(functionCall, time);
  };
}
function blobToBase64(blob) {
  return new Promise((resolve, reject2) => {
    const reader = new FileReader();
    reader.onerror = reject2;
    reader.onload = (_) => {
      resolve(reader.result);
    };
    reader.readAsDataURL(blob);
  });
}
function extractEmailAddress(emailString) {
  if (emailString.startsWith("[")) {
    return emailString.match(/([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/gi).toString();
  } else
    return emailString;
}
function isValidEmail(emailString) {
  const emailRx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return emailRx.test(emailString);
}
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0)
    return "0 Bytes";
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
}

// node_modules/@microsoft/mgt-components/dist/es6/graph/cacheStores.js
var schemas = {
  presence: {
    name: "presence",
    stores: {
      presence: "presence"
    },
    version: 1
  },
  users: {
    name: "users",
    stores: {
      users: "users",
      usersQuery: "usersQuery",
      userFilters: "userFilters"
    },
    version: 2
  },
  photos: {
    name: "photos",
    stores: {
      contacts: "contacts",
      users: "users",
      groups: "groups"
    },
    version: 1
  },
  people: {
    name: "people",
    stores: {
      contacts: "contacts",
      groupPeople: "groupPeople",
      peopleQuery: "peopleQuery"
    },
    version: 2
  },
  groups: {
    name: "groups",
    stores: {
      groups: "groups",
      groupsQuery: "groupsQuery"
    },
    version: 4
  },
  get: {
    name: "responses",
    stores: {
      responses: "responses"
    },
    version: 1
  },
  files: {
    name: "files",
    stores: {
      driveFiles: "driveFiles",
      groupFiles: "groupFiles",
      siteFiles: "siteFiles",
      userFiles: "userFiles",
      insightFiles: "insightFiles",
      fileQueries: "fileQueries"
    },
    version: 1
  },
  fileLists: {
    name: "file-lists",
    stores: {
      fileLists: "fileLists",
      insightfileLists: "insightfileLists"
    },
    version: 1
  }
};

// node_modules/@microsoft/mgt-components/dist/es6/graph/graph.people.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var PersonType;
(function(PersonType2) {
  PersonType2[PersonType2["any"] = 0] = "any";
  PersonType2["person"] = "person";
  PersonType2["group"] = "group";
})(PersonType || (PersonType = {}));
var UserType;
(function(UserType2) {
  UserType2["any"] = "any";
  UserType2["user"] = "user";
  UserType2["contact"] = "contact";
})(UserType || (UserType = {}));
var getPeopleInvalidationTime = () => CacheService.config.people.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsPeopleCacheEnabled = () => CacheService.config.people.isEnabled && CacheService.config.isEnabled;
function findPeople(graph, query, top = 10, userType = UserType.any, filters = "") {
  return __awaiter(this, void 0, void 0, function* () {
    const scopes = "people.read";
    let cache3;
    const cacheKey = `${query}:${top}:${userType}`;
    if (getIsPeopleCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.people, schemas.people.stores.peopleQuery);
      const result2 = getIsPeopleCacheEnabled() ? yield cache3.getValue(cacheKey) : null;
      if (result2 && getPeopleInvalidationTime() > Date.now() - result2.timeCached) {
        return result2.results.map((peopleStr) => JSON.parse(peopleStr));
      }
    }
    let filter2 = "personType/class eq 'Person'";
    if (userType !== UserType.any) {
      if (userType === UserType.user) {
        filter2 += "and personType/subclass eq 'OrganizationUser'";
      } else {
        filter2 += "and (personType/subclass eq 'ImplicitContact' or personType/subclass eq 'PersonalContact')";
      }
    }
    if (filters !== "") {
      filter2 += `${filter2} and ${filters}`;
    }
    let graphResult;
    try {
      let graphRequest = graph.api("/me/people").search('"' + query + '"').top(top).filter(filter2).middlewareOptions(prepScopes(scopes));
      if (userType !== UserType.contact) {
        graphRequest = graphRequest.header("X-PeopleQuery-QuerySources", "Mailbox,Directory");
      }
      graphResult = yield graphRequest.get();
      if (getIsPeopleCacheEnabled() && graphResult) {
        const item = { maxResults: top, results: null };
        item.results = graphResult.value.map((personStr) => JSON.stringify(personStr));
        cache3.putValue(cacheKey, item);
      }
    } catch (error) {
    }
    return graphResult ? graphResult.value : null;
  });
}
function getPeople(graph, userType = UserType.any, peopleFilters = "") {
  return __awaiter(this, void 0, void 0, function* () {
    const scopes = "people.read";
    let cache3;
    const cacheKey = peopleFilters ? peopleFilters : `*:${userType}`;
    if (getIsPeopleCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.people, schemas.people.stores.peopleQuery);
      const cacheRes = yield cache3.getValue(cacheKey);
      if (cacheRes && getPeopleInvalidationTime() > Date.now() - cacheRes.timeCached) {
        return cacheRes.results.map((ppl) => JSON.parse(ppl));
      }
    }
    const uri = "/me/people";
    let filter2 = "personType/class eq 'Person'";
    if (userType !== UserType.any) {
      if (userType === UserType.user) {
        filter2 += "and personType/subclass eq 'OrganizationUser'";
      } else {
        filter2 += "and (personType/subclass eq 'ImplicitContact' or personType/subclass eq 'PersonalContact')";
      }
    }
    if (peopleFilters) {
      filter2 += ` and ${peopleFilters}`;
    }
    let people;
    try {
      let graphRequest = graph.api(uri).middlewareOptions(prepScopes(scopes)).filter(filter2);
      if (userType != UserType.contact) {
        graphRequest = graphRequest.header("X-PeopleQuery-QuerySources", "Mailbox,Directory");
      }
      people = yield graphRequest.get();
      if (getIsPeopleCacheEnabled() && people) {
        cache3.putValue(cacheKey, { maxResults: 10, results: people.value.map((ppl) => JSON.stringify(ppl)) });
      }
    } catch (_) {
    }
    return people ? people.value : null;
  });
}
function getEmailFromGraphEntity(entity) {
  const person = entity;
  const user = entity;
  const contact = entity;
  if (user.mail) {
    return extractEmailAddress(user.mail);
  } else if (person.scoredEmailAddresses && person.scoredEmailAddresses.length) {
    return extractEmailAddress(person.scoredEmailAddresses[0].address);
  } else if (contact.emailAddresses && contact.emailAddresses.length) {
    return extractEmailAddress(contact.emailAddresses[0].address);
  }
  return null;
}
function findContactsByEmail(graph, email) {
  return __awaiter(this, void 0, void 0, function* () {
    const scopes = "contacts.read";
    let cache3;
    if (getIsPeopleCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.people, schemas.people.stores.contacts);
      const contact = yield cache3.getValue(email);
      if (contact && getPeopleInvalidationTime() > Date.now() - contact.timeCached) {
        return JSON.parse(contact.person);
      }
    }
    const encodedEmail = `${email.replace(/#/g, "%2523")}`;
    const result2 = yield graph.api("/me/contacts").filter(`emailAddresses/any(a:a/address eq '${encodedEmail}')`).middlewareOptions(prepScopes(scopes)).get();
    if (getIsPeopleCacheEnabled() && result2) {
      cache3.putValue(email, { person: JSON.stringify(result2.value) });
    }
    return result2 ? result2.value : null;
  });
}
function getPeopleFromResource(graph, version, resource, scopes) {
  return __awaiter(this, void 0, void 0, function* () {
    let cache3;
    const key = `${version}${resource}`;
    if (getIsPeopleCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.people, schemas.people.stores.peopleQuery);
      const result2 = yield cache3.getValue(key);
      if (result2 && getPeopleInvalidationTime() > Date.now() - result2.timeCached) {
        return result2.results.map((peopleStr) => JSON.parse(peopleStr));
      }
    }
    let request = graph.api(resource).version(version);
    if (scopes && scopes.length) {
      request = request.middlewareOptions(prepScopes(...scopes));
    }
    let response = yield request.get();
    if (response && Array.isArray(response.value) && response["@odata.nextLink"]) {
      let pageCount = 1;
      let page = response;
      while (page && page["@odata.nextLink"]) {
        pageCount++;
        const nextResource = page["@odata.nextLink"].split(version)[1];
        page = yield graph.client.api(nextResource).version(version).get();
        if (page && page.value && page.value.length) {
          page.value = response.value.concat(page.value);
          response = page;
        }
      }
    }
    if (getIsPeopleCacheEnabled() && response) {
      const item = { results: null };
      if (Array.isArray(response.value)) {
        item.results = response.value.map((personStr) => JSON.stringify(personStr));
      } else {
        item.results = [JSON.stringify(response)];
      }
      cache3.putValue(key, item);
    }
    if (response) {
      return Array.isArray(response.value) ? response.value : [response];
    } else {
      return null;
    }
  });
}

// node_modules/@microsoft/mgt-components/node_modules/tslib/tslib.es6.js
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/RequestMethod.js
var RequestMethod;
(function(RequestMethod2) {
  RequestMethod2["GET"] = "GET";
  RequestMethod2["PATCH"] = "PATCH";
  RequestMethod2["POST"] = "POST";
  RequestMethod2["PUT"] = "PUT";
  RequestMethod2["DELETE"] = "DELETE";
})(RequestMethod || (RequestMethod = {}));

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/content/BatchRequestContent.js
var BatchRequestContent = class {
  /**
   * @public
   * @constructor
   * Constructs a BatchRequestContent instance
   * @param {BatchRequestStep[]} [requests] - Array of requests value
   * @returns An instance of a BatchRequestContent
   */
  constructor(requests) {
    this.requests = /* @__PURE__ */ new Map();
    if (typeof requests !== "undefined") {
      const limit2 = BatchRequestContent.requestLimit;
      if (requests.length > limit2) {
        const error = new Error(`Maximum requests limit exceeded, Max allowed number of requests are ${limit2}`);
        error.name = "Limit Exceeded Error";
        throw error;
      }
      for (const req of requests) {
        this.addRequest(req);
      }
    }
  }
  /**
   * @private
   * @static
   * Validates the dependency chain of the requests
   *
   * Note:
   * Individual requests can depend on other individual requests. Currently, requests can only depend on a single other request, and must follow one of these three patterns:
   * 1. Parallel - no individual request states a dependency in the dependsOn property.
   * 2. Serial - all individual requests depend on the previous individual request.
   * 3. Same - all individual requests that state a dependency in the dependsOn property, state the same dependency.
   * As JSON batching matures, these limitations will be removed.
   * @see {@link https://developer.microsoft.com/en-us/graph/docs/concepts/known_issues#json-batching}
   *
   * @param {Map<string, BatchRequestStep>} requests - The map of requests.
   * @returns The boolean indicating the validation status
   */
  static validateDependencies(requests) {
    const isParallel = (reqs) => {
      const iterator = reqs.entries();
      let cur = iterator.next();
      while (!cur.done) {
        const curReq = cur.value[1];
        if (curReq.dependsOn !== void 0 && curReq.dependsOn.length > 0) {
          return false;
        }
        cur = iterator.next();
      }
      return true;
    };
    const isSerial = (reqs) => {
      const iterator = reqs.entries();
      let cur = iterator.next();
      const firstRequest = cur.value[1];
      if (firstRequest.dependsOn !== void 0 && firstRequest.dependsOn.length > 0) {
        return false;
      }
      let prev = cur;
      cur = iterator.next();
      while (!cur.done) {
        const curReq = cur.value[1];
        if (curReq.dependsOn === void 0 || curReq.dependsOn.length !== 1 || curReq.dependsOn[0] !== prev.value[1].id) {
          return false;
        }
        prev = cur;
        cur = iterator.next();
      }
      return true;
    };
    const isSame = (reqs) => {
      const iterator = reqs.entries();
      let cur = iterator.next();
      const firstRequest = cur.value[1];
      let dependencyId;
      if (firstRequest.dependsOn === void 0 || firstRequest.dependsOn.length === 0) {
        dependencyId = firstRequest.id;
      } else {
        if (firstRequest.dependsOn.length === 1) {
          const fDependencyId = firstRequest.dependsOn[0];
          if (fDependencyId !== firstRequest.id && reqs.has(fDependencyId)) {
            dependencyId = fDependencyId;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
      cur = iterator.next();
      while (!cur.done) {
        const curReq = cur.value[1];
        if ((curReq.dependsOn === void 0 || curReq.dependsOn.length === 0) && dependencyId !== curReq.id) {
          return false;
        }
        if (curReq.dependsOn !== void 0 && curReq.dependsOn.length !== 0) {
          if (curReq.dependsOn.length === 1 && (curReq.id === dependencyId || curReq.dependsOn[0] !== dependencyId)) {
            return false;
          }
          if (curReq.dependsOn.length > 1) {
            return false;
          }
        }
        cur = iterator.next();
      }
      return true;
    };
    if (requests.size === 0) {
      const error = new Error("Empty requests map, Please provide at least one request.");
      error.name = "Empty Requests Error";
      throw error;
    }
    return isParallel(requests) || isSerial(requests) || isSame(requests);
  }
  /**
   * @private
   * @static
   * @async
   * Converts Request Object instance to a JSON
   * @param {IsomorphicRequest} request - The IsomorphicRequest Object instance
   * @returns A promise that resolves to JSON representation of a request
   */
  static getRequestData(request) {
    return __awaiter2(this, void 0, void 0, function* () {
      const requestData = {
        url: ""
      };
      const hasHttpRegex = new RegExp("^https?://");
      requestData.url = hasHttpRegex.test(request.url) ? "/" + request.url.split(/.*?\/\/.*?\//)[1] : request.url;
      requestData.method = request.method;
      const headers = {};
      request.headers.forEach((value, key) => {
        headers[key] = value;
      });
      if (Object.keys(headers).length) {
        requestData.headers = headers;
      }
      if (request.method === RequestMethod.PATCH || request.method === RequestMethod.POST || request.method === RequestMethod.PUT) {
        requestData.body = yield BatchRequestContent.getRequestBody(request);
      }
      return requestData;
    });
  }
  /**
   * @private
   * @static
   * @async
   * Gets the body of a Request object instance
   * @param {IsomorphicRequest} request - The IsomorphicRequest object instance
   * @returns The Promise that resolves to a body value of a Request
   */
  static getRequestBody(request) {
    return __awaiter2(this, void 0, void 0, function* () {
      let bodyParsed = false;
      let body;
      try {
        const cloneReq = request.clone();
        body = yield cloneReq.json();
        bodyParsed = true;
      } catch (e) {
      }
      if (!bodyParsed) {
        try {
          if (typeof Blob !== "undefined") {
            const blob = yield request.blob();
            const reader = new FileReader();
            body = yield new Promise((resolve) => {
              reader.addEventListener("load", () => {
                const dataURL = reader.result;
                const regex = new RegExp("^s*data:(.+?/.+?(;.+?=.+?)*)?(;base64)?,(.*)s*$");
                const segments = regex.exec(dataURL);
                resolve(segments[4]);
              }, false);
              reader.readAsDataURL(blob);
            });
          } else if (typeof Buffer !== "undefined") {
            const buffer = yield request.buffer();
            body = buffer.toString("base64");
          }
          bodyParsed = true;
        } catch (e) {
        }
      }
      return body;
    });
  }
  /**
   * @public
   * Adds a request to the batch request content
   * @param {BatchRequestStep} request - The request value
   * @returns The id of the added request
   */
  addRequest(request) {
    const limit2 = BatchRequestContent.requestLimit;
    if (request.id === "") {
      const error = new Error(`Id for a request is empty, Please provide an unique id`);
      error.name = "Empty Id For Request";
      throw error;
    }
    if (this.requests.size === limit2) {
      const error = new Error(`Maximum requests limit exceeded, Max allowed number of requests are ${limit2}`);
      error.name = "Limit Exceeded Error";
      throw error;
    }
    if (this.requests.has(request.id)) {
      const error = new Error(`Adding request with duplicate id ${request.id}, Make the id of the requests unique`);
      error.name = "Duplicate RequestId Error";
      throw error;
    }
    this.requests.set(request.id, request);
    return request.id;
  }
  /**
   * @public
   * Removes request from the batch payload and its dependencies from all dependents
   * @param {string} requestId - The id of a request that needs to be removed
   * @returns The boolean indicating removed status
   */
  removeRequest(requestId) {
    const deleteStatus = this.requests.delete(requestId);
    const iterator = this.requests.entries();
    let cur = iterator.next();
    while (!cur.done) {
      const dependencies = cur.value[1].dependsOn;
      if (typeof dependencies !== "undefined") {
        const index = dependencies.indexOf(requestId);
        if (index !== -1) {
          dependencies.splice(index, 1);
        }
        if (dependencies.length === 0) {
          delete cur.value[1].dependsOn;
        }
      }
      cur = iterator.next();
    }
    return deleteStatus;
  }
  /**
   * @public
   * @async
   * Serialize content from BatchRequestContent instance
   * @returns The body content to make batch request
   */
  getContent() {
    return __awaiter2(this, void 0, void 0, function* () {
      const requests = [];
      const requestBody = {
        requests
      };
      const iterator = this.requests.entries();
      let cur = iterator.next();
      if (cur.done) {
        const error = new Error("No requests added yet, Please add at least one request.");
        error.name = "Empty Payload";
        throw error;
      }
      if (!BatchRequestContent.validateDependencies(this.requests)) {
        const error = new Error(`Invalid dependency found, Dependency should be:
1. Parallel - no individual request states a dependency in the dependsOn property.
2. Serial - all individual requests depend on the previous individual request.
3. Same - all individual requests that state a dependency in the dependsOn property, state the same dependency.`);
        error.name = "Invalid Dependency";
        throw error;
      }
      while (!cur.done) {
        const requestStep = cur.value[1];
        const batchRequestData = yield BatchRequestContent.getRequestData(requestStep.request);
        if (batchRequestData.body !== void 0 && (batchRequestData.headers === void 0 || batchRequestData.headers["content-type"] === void 0)) {
          const error = new Error(`Content-type header is not mentioned for request #${requestStep.id}, For request having body, Content-type header should be mentioned`);
          error.name = "Invalid Content-type header";
          throw error;
        }
        batchRequestData.id = requestStep.id;
        if (requestStep.dependsOn !== void 0 && requestStep.dependsOn.length > 0) {
          batchRequestData.dependsOn = requestStep.dependsOn;
        }
        requests.push(batchRequestData);
        cur = iterator.next();
      }
      requestBody.requests = requests;
      return requestBody;
    });
  }
  /**
   * @public
   * Adds a dependency for a given dependent request
   * @param {string} dependentId - The id of the dependent request
   * @param {string} [dependencyId] - The id of the dependency request, if not specified the preceding request will be considered as a dependency
   * @returns Nothing
   */
  addDependency(dependentId, dependencyId) {
    if (!this.requests.has(dependentId)) {
      const error = new Error(`Dependent ${dependentId} does not exists, Please check the id`);
      error.name = "Invalid Dependent";
      throw error;
    }
    if (typeof dependencyId !== "undefined" && !this.requests.has(dependencyId)) {
      const error = new Error(`Dependency ${dependencyId} does not exists, Please check the id`);
      error.name = "Invalid Dependency";
      throw error;
    }
    if (typeof dependencyId !== "undefined") {
      const dependent = this.requests.get(dependentId);
      if (dependent.dependsOn === void 0) {
        dependent.dependsOn = [];
      }
      if (dependent.dependsOn.indexOf(dependencyId) !== -1) {
        const error = new Error(`Dependency ${dependencyId} is already added for the request ${dependentId}`);
        error.name = "Duplicate Dependency";
        throw error;
      }
      dependent.dependsOn.push(dependencyId);
    } else {
      const iterator = this.requests.entries();
      let prev;
      let cur = iterator.next();
      while (!cur.done && cur.value[1].id !== dependentId) {
        prev = cur;
        cur = iterator.next();
      }
      if (typeof prev !== "undefined") {
        const dId = prev.value[0];
        if (cur.value[1].dependsOn === void 0) {
          cur.value[1].dependsOn = [];
        }
        if (cur.value[1].dependsOn.indexOf(dId) !== -1) {
          const error = new Error(`Dependency ${dId} is already added for the request ${dependentId}`);
          error.name = "Duplicate Dependency";
          throw error;
        }
        cur.value[1].dependsOn.push(dId);
      } else {
        const error = new Error(`Can't add dependency ${dependencyId}, There is only a dependent request in the batch`);
        error.name = "Invalid Dependency Addition";
        throw error;
      }
    }
  }
  /**
   * @public
   * Removes a dependency for a given dependent request id
   * @param {string} dependentId - The id of the dependent request
   * @param {string} [dependencyId] - The id of the dependency request, if not specified will remove all the dependencies of that request
   * @returns The boolean indicating removed status
   */
  removeDependency(dependentId, dependencyId) {
    const request = this.requests.get(dependentId);
    if (typeof request === "undefined" || request.dependsOn === void 0 || request.dependsOn.length === 0) {
      return false;
    }
    if (typeof dependencyId !== "undefined") {
      const index = request.dependsOn.indexOf(dependencyId);
      if (index === -1) {
        return false;
      }
      request.dependsOn.splice(index, 1);
      return true;
    } else {
      delete request.dependsOn;
      return true;
    }
  }
};
BatchRequestContent.requestLimit = 20;

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/MiddlewareControl.js
var MiddlewareControl = class {
  /**
   * @public
   * @constructor
   * Creates an instance of MiddlewareControl
   * @param {MiddlewareOptions[]} [middlewareOptions = []] - The array of middlewareOptions
   * @returns The instance of MiddlewareControl
   */
  constructor(middlewareOptions = []) {
    this.middlewareOptions = /* @__PURE__ */ new Map();
    for (const option of middlewareOptions) {
      const fn = option.constructor;
      this.middlewareOptions.set(fn, option);
    }
  }
  /**
   * @public
   * To get the middleware option using the class of the option
   * @param {Function} fn - The class of the strongly typed option class
   * @returns The middleware option
   * @example
   * // if you wanted to return the middleware option associated with this class (MiddlewareControl)
   * // call this function like this:
   * getMiddlewareOptions(MiddlewareControl)
   */
  // tslint:disable-next-line:ban-types
  getMiddlewareOptions(fn) {
    return this.middlewareOptions.get(fn);
  }
  /**
   * @public
   * To set the middleware options using the class of the option
   * @param {Function} fn - The class of the strongly typed option class
   * @param {MiddlewareOptions} option - The strongly typed middleware option
   * @returns nothing
   */
  // tslint:disable-next-line:ban-types
  setMiddlewareOptions(fn, option) {
    this.middlewareOptions.set(fn, option);
  }
};

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/MiddlewareUtil.js
var generateUUID = () => {
  let uuid = "";
  for (let j = 0; j < 32; j++) {
    if (j === 8 || j === 12 || j === 16 || j === 20) {
      uuid += "-";
    }
    uuid += Math.floor(Math.random() * 16).toString(16);
  }
  return uuid;
};
var getRequestHeader = (request, options, key) => {
  let value = null;
  if (typeof Request !== "undefined" && request instanceof Request) {
    value = request.headers.get(key);
  } else if (typeof options !== "undefined" && options.headers !== void 0) {
    if (typeof Headers !== "undefined" && options.headers instanceof Headers) {
      value = options.headers.get(key);
    } else if (options.headers instanceof Array) {
      const headers = options.headers;
      for (let i = 0, l = headers.length; i < l; i++) {
        if (headers[i][0] === key) {
          value = headers[i][1];
          break;
        }
      }
    } else if (options.headers[key] !== void 0) {
      value = options.headers[key];
    }
  }
  return value;
};
var setRequestHeader = (request, options, key, value) => {
  if (typeof Request !== "undefined" && request instanceof Request) {
    request.headers.set(key, value);
  } else if (typeof options !== "undefined") {
    if (options.headers === void 0) {
      options.headers = new Headers({
        [key]: value
      });
    } else {
      if (typeof Headers !== "undefined" && options.headers instanceof Headers) {
        options.headers.set(key, value);
      } else if (options.headers instanceof Array) {
        let i = 0;
        const l = options.headers.length;
        for (; i < l; i++) {
          const header = options.headers[i];
          if (header[0] === key) {
            header[1] = value;
            break;
          }
        }
        if (i === l) {
          options.headers.push([key, value]);
        }
      } else {
        Object.assign(options.headers, { [key]: value });
      }
    }
  }
};
var appendRequestHeader = (request, options, key, value) => {
  if (typeof Request !== "undefined" && request instanceof Request) {
    request.headers.append(key, value);
  } else if (typeof options !== "undefined") {
    if (options.headers === void 0) {
      options.headers = new Headers({
        [key]: value
      });
    } else {
      if (typeof Headers !== "undefined" && options.headers instanceof Headers) {
        options.headers.append(key, value);
      } else if (options.headers instanceof Array) {
        options.headers.push([key, value]);
      } else if (options.headers === void 0) {
        options.headers = { [key]: value };
      } else if (options.headers[key] === void 0) {
        options.headers[key] = value;
      } else {
        options.headers[key] += `, ${value}`;
      }
    }
  }
};
var cloneRequestWithNewUrl = (newUrl, request) => __awaiter2(void 0, void 0, void 0, function* () {
  const body = request.headers.get("Content-Type") ? yield request.blob() : yield Promise.resolve(void 0);
  const { method: method2, headers, referrer, referrerPolicy, mode, credentials, cache: cache3, redirect, integrity, keepalive, signal } = request;
  return new Request(newUrl, { method: method2, headers, body, referrer, referrerPolicy, mode, credentials, cache: cache3, redirect, integrity, keepalive, signal });
});

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/options/AuthenticationHandlerOptions.js
var AuthenticationHandlerOptions = class {
  /**
   * @public
   * @constructor
   * To create an instance of AuthenticationHandlerOptions
   * @param {AuthenticationProvider} [authenticationProvider] - The authentication provider instance
   * @param {AuthenticationProviderOptions} [authenticationProviderOptions] - The authentication provider options instance
   * @returns An instance of AuthenticationHandlerOptions
   */
  constructor(authenticationProvider, authenticationProviderOptions) {
    this.authenticationProvider = authenticationProvider;
    this.authenticationProviderOptions = authenticationProviderOptions;
  }
};

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/options/TelemetryHandlerOptions.js
var FeatureUsageFlag;
(function(FeatureUsageFlag2) {
  FeatureUsageFlag2[FeatureUsageFlag2["NONE"] = 0] = "NONE";
  FeatureUsageFlag2[FeatureUsageFlag2["REDIRECT_HANDLER_ENABLED"] = 1] = "REDIRECT_HANDLER_ENABLED";
  FeatureUsageFlag2[FeatureUsageFlag2["RETRY_HANDLER_ENABLED"] = 2] = "RETRY_HANDLER_ENABLED";
  FeatureUsageFlag2[FeatureUsageFlag2["AUTHENTICATION_HANDLER_ENABLED"] = 4] = "AUTHENTICATION_HANDLER_ENABLED";
})(FeatureUsageFlag || (FeatureUsageFlag = {}));
var TelemetryHandlerOptions = class {
  constructor() {
    this.featureUsage = FeatureUsageFlag.NONE;
  }
  /**
   * @public
   * @static
   * To update the feature usage in the context object
   * @param {Context} context - The request context object containing middleware options
   * @param {FeatureUsageFlag} flag - The flag value
   * @returns nothing
   */
  static updateFeatureUsageFlag(context, flag) {
    let options;
    if (context.middlewareControl instanceof MiddlewareControl) {
      options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);
    } else {
      context.middlewareControl = new MiddlewareControl();
    }
    if (typeof options === "undefined") {
      options = new TelemetryHandlerOptions();
      context.middlewareControl.setMiddlewareOptions(TelemetryHandlerOptions, options);
    }
    options.setFeatureUsage(flag);
  }
  /**
   * @private
   * To set the feature usage flag
   * @param {FeatureUsageFlag} flag - The flag value
   * @returns nothing
   */
  setFeatureUsage(flag) {
    this.featureUsage = this.featureUsage | flag;
  }
  /**
   * @public
   * To get the feature usage
   * @returns A feature usage flag as hexadecimal string
   */
  getFeatureUsage() {
    return this.featureUsage.toString(16);
  }
};

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/AuthenticationHandler.js
var AuthenticationHandler = class {
  /**
   * @public
   * @constructor
   * Creates an instance of AuthenticationHandler
   * @param {AuthenticationProvider} authenticationProvider - The authentication provider for the authentication handler
   */
  constructor(authenticationProvider) {
    this.authenticationProvider = authenticationProvider;
  }
  /**
   * @public
   * @async
   * To execute the current middleware
   * @param {Context} context - The context object of the request
   * @returns A Promise that resolves to nothing
   */
  execute(context) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        let options;
        if (context.middlewareControl instanceof MiddlewareControl) {
          options = context.middlewareControl.getMiddlewareOptions(AuthenticationHandlerOptions);
        }
        let authenticationProvider;
        let authenticationProviderOptions;
        if (typeof options !== "undefined") {
          authenticationProvider = options.authenticationProvider;
          authenticationProviderOptions = options.authenticationProviderOptions;
        }
        if (typeof authenticationProvider === "undefined") {
          authenticationProvider = this.authenticationProvider;
        }
        const token = yield authenticationProvider.getAccessToken(authenticationProviderOptions);
        const bearerKey = `Bearer ${token}`;
        appendRequestHeader(context.request, context.options, AuthenticationHandler.AUTHORIZATION_HEADER, bearerKey);
        TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.AUTHENTICATION_HANDLER_ENABLED);
        return yield this.nextMiddleware.execute(context);
      } catch (error) {
        throw error;
      }
    });
  }
  /**
   * @public
   * To set the next middleware in the chain
   * @param {Middleware} next - The middleware instance
   * @returns Nothing
   */
  setNext(next) {
    this.nextMiddleware = next;
  }
};
AuthenticationHandler.AUTHORIZATION_HEADER = "Authorization";

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/options/RetryHandlerOptions.js
var RetryHandlerOptions = class {
  /**
   * @public
   * @constructor
   * To create an instance of RetryHandlerOptions
   * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds
   * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value
   * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function
   * @returns An instance of RetryHandlerOptions
   */
  constructor(delay2 = RetryHandlerOptions.DEFAULT_DELAY, maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES, shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY) {
    if (delay2 > RetryHandlerOptions.MAX_DELAY && maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {
      const error = new Error(`Delay and MaxRetries should not be more than ${RetryHandlerOptions.MAX_DELAY} and ${RetryHandlerOptions.MAX_MAX_RETRIES}`);
      error.name = "MaxLimitExceeded";
      throw error;
    } else if (delay2 > RetryHandlerOptions.MAX_DELAY) {
      const error = new Error(`Delay should not be more than ${RetryHandlerOptions.MAX_DELAY}`);
      error.name = "MaxLimitExceeded";
      throw error;
    } else if (maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {
      const error = new Error(`MaxRetries should not be more than ${RetryHandlerOptions.MAX_MAX_RETRIES}`);
      error.name = "MaxLimitExceeded";
      throw error;
    } else if (delay2 < 0 && maxRetries < 0) {
      const error = new Error(`Delay and MaxRetries should not be negative`);
      error.name = "MinExpectationNotMet";
      throw error;
    } else if (delay2 < 0) {
      const error = new Error(`Delay should not be negative`);
      error.name = "MinExpectationNotMet";
      throw error;
    } else if (maxRetries < 0) {
      const error = new Error(`MaxRetries should not be negative`);
      error.name = "MinExpectationNotMet";
      throw error;
    }
    this.delay = Math.min(delay2, RetryHandlerOptions.MAX_DELAY);
    this.maxRetries = Math.min(maxRetries, RetryHandlerOptions.MAX_MAX_RETRIES);
    this.shouldRetry = shouldRetry;
  }
  /**
   * @public
   * To get the maximum delay
   * @returns A maximum delay
   */
  getMaxDelay() {
    return RetryHandlerOptions.MAX_DELAY;
  }
};
RetryHandlerOptions.DEFAULT_DELAY = 3;
RetryHandlerOptions.DEFAULT_MAX_RETRIES = 3;
RetryHandlerOptions.MAX_DELAY = 180;
RetryHandlerOptions.MAX_MAX_RETRIES = 10;
RetryHandlerOptions.DEFAULT_SHOULD_RETRY = () => true;

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/RetryHandler.js
var RetryHandler = class {
  /**
   * @public
   * @constructor
   * To create an instance of RetryHandler
   * @param {RetryHandlerOptions} [options = new RetryHandlerOptions()] - The retry handler options value
   * @returns An instance of RetryHandler
   */
  constructor(options = new RetryHandlerOptions()) {
    this.options = options;
  }
  /**
   *
   * @private
   * To check whether the response has the retry status code
   * @param {Response} response - The response object
   * @returns Whether the response has retry status code or not
   */
  isRetry(response) {
    return RetryHandler.RETRY_STATUS_CODES.indexOf(response.status) !== -1;
  }
  /**
   * @private
   * To check whether the payload is buffered or not
   * @param {RequestInfo} request - The url string or the request object value
   * @param {FetchOptions} options - The options of a request
   * @returns Whether the payload is buffered or not
   */
  isBuffered(request, options) {
    const method2 = typeof request === "string" ? options.method : request.method;
    const isPutPatchOrPost = method2 === RequestMethod.PUT || method2 === RequestMethod.PATCH || method2 === RequestMethod.POST;
    if (isPutPatchOrPost) {
      const isStream = getRequestHeader(request, options, "Content-Type") === "application/octet-stream";
      if (isStream) {
        return false;
      }
    }
    return true;
  }
  /**
   * @private
   * To get the delay for a retry
   * @param {Response} response - The response object
   * @param {number} retryAttempts - The current attempt count
   * @param {number} delay - The delay value in seconds
   * @returns A delay for a retry
   */
  getDelay(response, retryAttempts, delay2) {
    const getRandomness = () => Number(Math.random().toFixed(3));
    const retryAfter = response.headers !== void 0 ? response.headers.get(RetryHandler.RETRY_AFTER_HEADER) : null;
    let newDelay;
    if (retryAfter !== null) {
      if (Number.isNaN(Number(retryAfter))) {
        newDelay = Math.round((new Date(retryAfter).getTime() - Date.now()) / 1e3);
      } else {
        newDelay = Number(retryAfter);
      }
    } else {
      newDelay = retryAttempts >= 2 ? this.getExponentialBackOffTime(retryAttempts) + delay2 + getRandomness() : delay2 + getRandomness();
    }
    return Math.min(newDelay, this.options.getMaxDelay() + getRandomness());
  }
  /**
   * @private
   * To get an exponential back off value
   * @param {number} attempts - The current attempt count
   * @returns An exponential back off value
   */
  getExponentialBackOffTime(attempts) {
    return Math.round(1 / 2 * (Math.pow(2, attempts) - 1));
  }
  /**
   * @private
   * @async
   * To add delay for the execution
   * @param {number} delaySeconds - The delay value in seconds
   * @returns Nothing
   */
  sleep(delaySeconds) {
    return __awaiter2(this, void 0, void 0, function* () {
      const delayMilliseconds = delaySeconds * 1e3;
      return new Promise((resolve) => setTimeout(resolve, delayMilliseconds));
    });
  }
  getOptions(context) {
    let options;
    if (context.middlewareControl instanceof MiddlewareControl) {
      options = context.middlewareControl.getMiddlewareOptions(this.options.constructor);
    }
    if (typeof options === "undefined") {
      options = Object.assign(new RetryHandlerOptions(), this.options);
    }
    return options;
  }
  /**
   * @private
   * @async
   * To execute the middleware with retries
   * @param {Context} context - The context object
   * @param {number} retryAttempts - The current attempt count
   * @param {RetryHandlerOptions} options - The retry middleware options instance
   * @returns A Promise that resolves to nothing
   */
  executeWithRetry(context, retryAttempts, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        yield this.nextMiddleware.execute(context);
        if (retryAttempts < options.maxRetries && this.isRetry(context.response) && this.isBuffered(context.request, context.options) && options.shouldRetry(options.delay, retryAttempts, context.request, context.options, context.response)) {
          ++retryAttempts;
          setRequestHeader(context.request, context.options, RetryHandler.RETRY_ATTEMPT_HEADER, retryAttempts.toString());
          const delay2 = this.getDelay(context.response, retryAttempts, options.delay);
          yield this.sleep(delay2);
          return yield this.executeWithRetry(context, retryAttempts, options);
        } else {
          return;
        }
      } catch (error) {
        throw error;
      }
    });
  }
  /**
   * @public
   * @async
   * To execute the current middleware
   * @param {Context} context - The context object of the request
   * @returns A Promise that resolves to nothing
   */
  execute(context) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        const retryAttempts = 0;
        const options = this.getOptions(context);
        TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.RETRY_HANDLER_ENABLED);
        return yield this.executeWithRetry(context, retryAttempts, options);
      } catch (error) {
        throw error;
      }
    });
  }
  /**
   * @public
   * To set the next middleware in the chain
   * @param {Middleware} next - The middleware instance
   * @returns Nothing
   */
  setNext(next) {
    this.nextMiddleware = next;
  }
};
RetryHandler.RETRY_STATUS_CODES = [
  429,
  503,
  504
];
RetryHandler.RETRY_ATTEMPT_HEADER = "Retry-Attempt";
RetryHandler.RETRY_AFTER_HEADER = "Retry-After";

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/options/RedirectHandlerOptions.js
var RedirectHandlerOptions = class {
  /**
   * @public
   * @constructor
   * To create an instance of RedirectHandlerOptions
   * @param {number} [maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS] - The max redirects value
   * @param {ShouldRedirect} [shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY] - The should redirect callback
   * @returns An instance of RedirectHandlerOptions
   */
  constructor(maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS, shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY) {
    if (maxRedirects > RedirectHandlerOptions.MAX_MAX_REDIRECTS) {
      const error = new Error(`MaxRedirects should not be more than ${RedirectHandlerOptions.MAX_MAX_REDIRECTS}`);
      error.name = "MaxLimitExceeded";
      throw error;
    }
    if (maxRedirects < 0) {
      const error = new Error(`MaxRedirects should not be negative`);
      error.name = "MinExpectationNotMet";
      throw error;
    }
    this.maxRedirects = maxRedirects;
    this.shouldRedirect = shouldRedirect;
  }
};
RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS = 5;
RedirectHandlerOptions.MAX_MAX_REDIRECTS = 20;
RedirectHandlerOptions.DEFAULT_SHOULD_RETRY = () => true;

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/RedirectHandler.js
var RedirectHandler = class {
  /**
   * @public
   * @constructor
   * To create an instance of RedirectHandler
   * @param {RedirectHandlerOptions} [options = new RedirectHandlerOptions()] - The redirect handler options instance
   * @returns An instance of RedirectHandler
   */
  constructor(options = new RedirectHandlerOptions()) {
    this.options = options;
  }
  /**
   * @private
   * To check whether the response has the redirect status code or not
   * @param {Response} response - The response object
   * @returns A boolean representing whether the response contains the redirect status code or not
   */
  isRedirect(response) {
    return RedirectHandler.REDIRECT_STATUS_CODES.indexOf(response.status) !== -1;
  }
  /**
   * @private
   * To check whether the response has location header or not
   * @param {Response} response - The response object
   * @returns A boolean representing the whether the response has location header or not
   */
  hasLocationHeader(response) {
    return response.headers.has(RedirectHandler.LOCATION_HEADER);
  }
  /**
   * @private
   * To get the redirect url from location header in response object
   * @param {Response} response - The response object
   * @returns A redirect url from location header
   */
  getLocationHeader(response) {
    return response.headers.get(RedirectHandler.LOCATION_HEADER);
  }
  /**
   * @private
   * To check whether the given url is a relative url or not
   * @param {string} url - The url string value
   * @returns A boolean representing whether the given url is a relative url or not
   */
  isRelativeURL(url) {
    return url.indexOf("://") === -1;
  }
  /**
   * @private
   * To check whether the authorization header in the request should be dropped for consequent redirected requests
   * @param {string} requestUrl - The request url value
   * @param {string} redirectUrl - The redirect url value
   * @returns A boolean representing whether the authorization header in the request should be dropped for consequent redirected requests
   */
  shouldDropAuthorizationHeader(requestUrl, redirectUrl) {
    const schemeHostRegex = /^[A-Za-z].+?:\/\/.+?(?=\/|$)/;
    const requestMatches = schemeHostRegex.exec(requestUrl);
    let requestAuthority;
    let redirectAuthority;
    if (requestMatches !== null) {
      requestAuthority = requestMatches[0];
    }
    const redirectMatches = schemeHostRegex.exec(redirectUrl);
    if (redirectMatches !== null) {
      redirectAuthority = redirectMatches[0];
    }
    return typeof requestAuthority !== "undefined" && typeof redirectAuthority !== "undefined" && requestAuthority !== redirectAuthority;
  }
  /**
   * @private
   * @async
   * To update a request url with the redirect url
   * @param {string} redirectUrl - The redirect url value
   * @param {Context} context - The context object value
   * @returns Nothing
   */
  updateRequestUrl(redirectUrl, context) {
    return __awaiter2(this, void 0, void 0, function* () {
      context.request = typeof context.request === "string" ? redirectUrl : yield cloneRequestWithNewUrl(redirectUrl, context.request);
    });
  }
  /**
   * @private
   * To get the options for execution of the middleware
   * @param {Context} context - The context object
   * @returns A options for middleware execution
   */
  getOptions(context) {
    let options;
    if (context.middlewareControl instanceof MiddlewareControl) {
      options = context.middlewareControl.getMiddlewareOptions(RedirectHandlerOptions);
    }
    if (typeof options === "undefined") {
      options = Object.assign(new RedirectHandlerOptions(), this.options);
    }
    return options;
  }
  /**
   * @private
   * @async
   * To execute the next middleware and to handle in case of redirect response returned by the server
   * @param {Context} context - The context object
   * @param {number} redirectCount - The redirect count value
   * @param {RedirectHandlerOptions} options - The redirect handler options instance
   * @returns A promise that resolves to nothing
   */
  executeWithRedirect(context, redirectCount, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        yield this.nextMiddleware.execute(context);
        const response = context.response;
        if (redirectCount < options.maxRedirects && this.isRedirect(response) && this.hasLocationHeader(response) && options.shouldRedirect(response)) {
          ++redirectCount;
          if (response.status === RedirectHandler.STATUS_CODE_SEE_OTHER) {
            context.options.method = RequestMethod.GET;
            delete context.options.body;
          } else {
            const redirectUrl = this.getLocationHeader(response);
            if (!this.isRelativeURL(redirectUrl) && this.shouldDropAuthorizationHeader(response.url, redirectUrl)) {
              delete context.options.headers[RedirectHandler.AUTHORIZATION_HEADER];
            }
            yield this.updateRequestUrl(redirectUrl, context);
          }
          yield this.executeWithRedirect(context, redirectCount, options);
        } else {
          return;
        }
      } catch (error) {
        throw error;
      }
    });
  }
  /**
   * @public
   * @async
   * To execute the current middleware
   * @param {Context} context - The context object of the request
   * @returns A Promise that resolves to nothing
   */
  execute(context) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        const redirectCount = 0;
        const options = this.getOptions(context);
        context.options.redirect = RedirectHandler.MANUAL_REDIRECT;
        TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.REDIRECT_HANDLER_ENABLED);
        return yield this.executeWithRedirect(context, redirectCount, options);
      } catch (error) {
        throw error;
      }
    });
  }
  /**
   * @public
   * To set the next middleware in the chain
   * @param {Middleware} next - The middleware instance
   * @returns Nothing
   */
  setNext(next) {
    this.nextMiddleware = next;
  }
};
RedirectHandler.REDIRECT_STATUS_CODES = [
  301,
  302,
  303,
  307,
  308
];
RedirectHandler.STATUS_CODE_SEE_OTHER = 303;
RedirectHandler.LOCATION_HEADER = "Location";
RedirectHandler.AUTHORIZATION_HEADER = "Authorization";
RedirectHandler.MANUAL_REDIRECT = "manual";

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/Constants.js
var GRAPH_URLS = /* @__PURE__ */ new Set(["graph.microsoft.com", "graph.microsoft.us", "dod-graph.microsoft.us", "graph.microsoft.de", "microsoftgraph.chinacloudapi.cn"]);

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/GraphRequestUtil.js
var isGraphURL = (url) => {
  url = url.toLowerCase();
  if (url.indexOf("https://") !== -1) {
    url = url.replace("https://", "");
    const startofPortNoPos = url.indexOf(":");
    const endOfHostStrPos = url.indexOf("/");
    let hostName = "";
    if (endOfHostStrPos !== -1) {
      if (startofPortNoPos !== -1 && startofPortNoPos < endOfHostStrPos) {
        hostName = url.substring(0, startofPortNoPos);
        return GRAPH_URLS.has(hostName);
      }
      hostName = url.substring(0, endOfHostStrPos);
      return GRAPH_URLS.has(hostName);
    }
  }
  return false;
};

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/Version.js
var PACKAGE_VERSION2 = "2.2.1";

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/TelemetryHandler.js
var TelemetryHandler = class {
  /**
   * @public
   * @async
   * To execute the current middleware
   * @param {Context} context - The context object of the request
   * @returns A Promise that resolves to nothing
   */
  execute(context) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        const url = typeof context.request === "string" ? context.request : context.request.url;
        if (isGraphURL(url)) {
          let clientRequestId = getRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER);
          if (!clientRequestId) {
            clientRequestId = generateUUID();
            setRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER, clientRequestId);
          }
          let sdkVersionValue = `${TelemetryHandler.PRODUCT_NAME}/${PACKAGE_VERSION2}`;
          let options;
          if (context.middlewareControl instanceof MiddlewareControl) {
            options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);
          }
          if (options) {
            const featureUsage = options.getFeatureUsage();
            sdkVersionValue += ` (${TelemetryHandler.FEATURE_USAGE_STRING}=${featureUsage})`;
          }
          appendRequestHeader(context.request, context.options, TelemetryHandler.SDK_VERSION_HEADER, sdkVersionValue);
        } else {
          delete context.options.headers[TelemetryHandler.CLIENT_REQUEST_ID_HEADER];
          delete context.options.headers[TelemetryHandler.SDK_VERSION_HEADER];
        }
        return yield this.nextMiddleware.execute(context);
      } catch (error) {
        throw error;
      }
    });
  }
  /**
   * @public
   * To set the next middleware in the chain
   * @param {Middleware} next - The middleware instance
   * @returns Nothing
   */
  setNext(next) {
    this.nextMiddleware = next;
  }
};
TelemetryHandler.CLIENT_REQUEST_ID_HEADER = "client-request-id";
TelemetryHandler.SDK_VERSION_HEADER = "SdkVersion";
TelemetryHandler.PRODUCT_NAME = "graph-js";
TelemetryHandler.FEATURE_USAGE_STRING = "featureUsage";

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/middleware/options/ChaosStrategy.js
var ChaosStrategy;
(function(ChaosStrategy2) {
  ChaosStrategy2[ChaosStrategy2["MANUAL"] = 0] = "MANUAL";
  ChaosStrategy2[ChaosStrategy2["RANDOM"] = 1] = "RANDOM";
})(ChaosStrategy || (ChaosStrategy = {}));

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/Range.js
var Range = class {
  /**
   * @public
   * @constructor
   * Creates a range for given min and max values
   * @param {number} [minVal = -1] - The minimum value.
   * @param {number} [maxVal = -1] - The maximum value.
   * @returns An instance of a Range
   */
  constructor(minVal = -1, maxVal = -1) {
    this.minValue = minVal;
    this.maxValue = maxVal;
  }
};

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/tasks/LargeFileUploadTask.js
var LargeFileUploadTask = class {
  /**
   * @public
   * @constructor
   * Constructs a LargeFileUploadTask
   * @param {Client} client - The GraphClient instance
   * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded
   * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done
   * @param {LargeFileUploadTaskOptions} options - The upload task options
   * @returns An instance of LargeFileUploadTask
   */
  constructor(client, file, uploadSession, options = {}) {
    this.DEFAULT_FILE_SIZE = 5 * 1024 * 1024;
    this.client = client;
    this.file = file;
    if (options.rangeSize === void 0) {
      options.rangeSize = this.DEFAULT_FILE_SIZE;
    }
    this.options = options;
    this.uploadSession = uploadSession;
    this.nextRange = new Range(0, this.options.rangeSize - 1);
  }
  /**
   * @public
   * @static
   * @async
   * Makes request to the server to create an upload session
   * @param {Client} client - The GraphClient instance
   * @param {any} payload - The payload that needs to be sent
   * @param {KeyValuePairObjectStringNumber} headers - The headers that needs to be sent
   * @returns The promise that resolves to LargeFileUploadSession
   */
  static createUploadSession(client, requestUrl, payload, headers = {}) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        const session = yield client.api(requestUrl).headers(headers).post(payload);
        const largeFileUploadSession = {
          url: session.uploadUrl,
          expiry: new Date(session.expirationDateTime)
        };
        return largeFileUploadSession;
      } catch (err) {
        throw err;
      }
    });
  }
  /**
   * @private
   * Parses given range string to the Range instance
   * @param {string[]} ranges - The ranges value
   * @returns The range instance
   */
  parseRange(ranges) {
    const rangeStr = ranges[0];
    if (typeof rangeStr === "undefined" || rangeStr === "") {
      return new Range();
    }
    const firstRange = rangeStr.split("-");
    const minVal = parseInt(firstRange[0], 10);
    let maxVal = parseInt(firstRange[1], 10);
    if (Number.isNaN(maxVal)) {
      maxVal = this.file.size - 1;
    }
    return new Range(minVal, maxVal);
  }
  /**
   * @private
   * Updates the expiration date and the next range
   * @param {UploadStatusResponse} response - The response of the upload status
   * @returns Nothing
   */
  updateTaskStatus(response) {
    this.uploadSession.expiry = new Date(response.expirationDateTime);
    this.nextRange = this.parseRange(response.nextExpectedRanges);
  }
  /**
   * @public
   * Gets next range that needs to be uploaded
   * @returns The range instance
   */
  getNextRange() {
    if (this.nextRange.minValue === -1) {
      return this.nextRange;
    }
    const minVal = this.nextRange.minValue;
    let maxValue = minVal + this.options.rangeSize - 1;
    if (maxValue >= this.file.size) {
      maxValue = this.file.size - 1;
    }
    return new Range(minVal, maxValue);
  }
  /**
   * @public
   * Slices the file content to the given range
   * @param {Range} range - The range value
   * @returns The sliced ArrayBuffer or Blob
   */
  sliceFile(range3) {
    const blob = this.file.content.slice(range3.minValue, range3.maxValue + 1);
    return blob;
  }
  /**
   * @public
   * @async
   * Uploads file to the server in a sequential order by slicing the file
   * @returns The promise resolves to uploaded response
   */
  upload() {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        while (true) {
          const nextRange = this.getNextRange();
          if (nextRange.maxValue === -1) {
            const err = new Error("Task with which you are trying to upload is already completed, Please check for your uploaded file");
            err.name = "Invalid Session";
            throw err;
          }
          const fileSlice = this.sliceFile(nextRange);
          const response = yield this.uploadSlice(fileSlice, nextRange, this.file.size);
          if (response.id !== void 0) {
            return response;
          } else {
            this.updateTaskStatus(response);
          }
        }
      } catch (err) {
        throw err;
      }
    });
  }
  /**
   * @public
   * @async
   * Uploads given slice to the server
   * @param {ArrayBuffer | Blob | File} fileSlice - The file slice
   * @param {Range} range - The range value
   * @param {number} totalSize - The total size of a complete file
   */
  uploadSlice(fileSlice, range3, totalSize) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        return yield this.client.api(this.uploadSession.url).headers({
          "Content-Length": `${range3.maxValue - range3.minValue + 1}`,
          "Content-Range": `bytes ${range3.minValue}-${range3.maxValue}/${totalSize}`
        }).put(fileSlice);
      } catch (err) {
        throw err;
      }
    });
  }
  /**
   * @public
   * @async
   * Deletes upload session in the server
   * @returns The promise resolves to cancelled response
   */
  cancel() {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        return yield this.client.api(this.uploadSession.url).delete();
      } catch (err) {
        throw err;
      }
    });
  }
  /**
   * @public
   * @async
   * Gets status for the upload session
   * @returns The promise resolves to the status enquiry response
   */
  getStatus() {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        const response = yield this.client.api(this.uploadSession.url).get();
        this.updateTaskStatus(response);
        return response;
      } catch (err) {
        throw err;
      }
    });
  }
  /**
   * @public
   * @async
   * Resumes upload session and continue uploading the file from the last sent range
   * @returns The promise resolves to the uploaded response
   */
  resume() {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        yield this.getStatus();
        return yield this.upload();
      } catch (err) {
        throw err;
      }
    });
  }
};

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/tasks/OneDriveLargeFileUploadTaskUtil.js
var DEFAULT_FILE_SIZE = 5 * 1024 * 1024;
var roundTo320KB = (value) => {
  if (value > 320 * 1024) {
    value = Math.floor(value / (320 * 1024)) * 320 * 1024;
  }
  return value;
};
var getValidRangeSize = (rangeSize = DEFAULT_FILE_SIZE) => {
  const sixtyMB = 60 * 1024 * 1024;
  if (rangeSize > sixtyMB) {
    rangeSize = sixtyMB;
  }
  return roundTo320KB(rangeSize);
};

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/tasks/OneDriveLargeFileUploadTask.js
var OneDriveLargeFileUploadTask = class extends LargeFileUploadTask {
  /**
   * @public
   * @constructor
   * Constructs a OneDriveLargeFileUploadTask
   * @param {Client} client - The GraphClient instance
   * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded
   * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done
   * @param {LargeFileUploadTaskOptions} options - The upload task options
   * @returns An instance of OneDriveLargeFileUploadTask
   */
  constructor(client, file, uploadSession, options) {
    super(client, file, uploadSession, options);
  }
  /**
   * @private
   * @static
   * Constructs the create session url for Onedrive
   * @param {string} fileName - The name of the file
   * @param {path} [path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH] - The path for the upload
   * @returns The constructed create session url
   */
  static constructCreateSessionUrl(fileName, path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH) {
    fileName = fileName.trim();
    path = path.trim();
    if (path === "") {
      path = "/";
    }
    if (path[0] !== "/") {
      path = `/${path}`;
    }
    if (path[path.length - 1] !== "/") {
      path = `${path}/`;
    }
    return `/me/drive/root:${path.split("/").map((p) => encodeURIComponent(p)).join("/")}${encodeURIComponent(fileName)}:/createUploadSession`;
  }
  /**
   * @public
   * @static
   * @async
   * Creates a OneDriveLargeFileUploadTask
   * @param {Client} client - The GraphClient instance
   * @param {Blob | Buffer | File} file - File represented as Blob, Buffer or File
   * @param {OneDriveLargeFileUploadOptions} options - The options for upload task
   * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance
   */
  static create(client, file, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      const name = options.fileName;
      let content;
      let size2;
      if (typeof Blob !== "undefined" && file instanceof Blob) {
        content = new File([file], name);
        size2 = content.size;
      } else if (typeof File !== "undefined" && file instanceof File) {
        content = file;
        size2 = content.size;
      } else if (typeof Buffer !== "undefined" && file instanceof Buffer) {
        const b = file;
        size2 = b.byteLength - b.byteOffset;
        content = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);
      }
      try {
        const requestUrl = OneDriveLargeFileUploadTask.constructCreateSessionUrl(options.fileName, options.path);
        const session = yield OneDriveLargeFileUploadTask.createUploadSession(client, requestUrl, options.fileName);
        const rangeSize = getValidRangeSize(options.rangeSize);
        const fileObj = {
          name,
          content,
          size: size2
        };
        return new OneDriveLargeFileUploadTask(client, fileObj, session, {
          rangeSize
        });
      } catch (err) {
        throw err;
      }
    });
  }
  /**
   * @public
   * @static
   * @async
   * Makes request to the server to create an upload session
   * @param {Client} client - The GraphClient instance
   * @param {string} requestUrl - The URL to create the upload session
   * @param {string} fileName - The name of a file to upload, (with extension)
   * @returns The promise that resolves to LargeFileUploadSession
   */
  static createUploadSession(client, requestUrl, fileName) {
    const _super = Object.create(null, {
      createUploadSession: { get: () => super.createUploadSession }
    });
    return __awaiter2(this, void 0, void 0, function* () {
      const payload = {
        item: {
          "@microsoft.graph.conflictBehavior": "rename",
          name: fileName
        }
      };
      try {
        return _super.createUploadSession.call(this, client, requestUrl, payload);
      } catch (err) {
        throw err;
      }
    });
  }
  /**
   * @public
   * Commits upload session to end uploading
   * @param {string} requestUrl - The URL to commit the upload session
   * @returns The promise resolves to committed response
   */
  commit(requestUrl) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        const payload = {
          name: this.file.name,
          "@microsoft.graph.conflictBehavior": "rename",
          "@microsoft.graph.sourceUrl": this.uploadSession.url
        };
        return yield this.client.api(requestUrl).put(payload);
      } catch (err) {
        throw err;
      }
    });
  }
};
OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH = "/";

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/ResponseType.js
var ResponseType;
(function(ResponseType3) {
  ResponseType3["ARRAYBUFFER"] = "arraybuffer";
  ResponseType3["BLOB"] = "blob";
  ResponseType3["DOCUMENT"] = "document";
  ResponseType3["JSON"] = "json";
  ResponseType3["RAW"] = "raw";
  ResponseType3["STREAM"] = "stream";
  ResponseType3["TEXT"] = "text";
})(ResponseType || (ResponseType = {}));

// node_modules/@microsoft/mgt-components/node_modules/@microsoft/microsoft-graph-client/lib/es/GraphResponseHandler.js
var DocumentType;
(function(DocumentType2) {
  DocumentType2["TEXT_HTML"] = "text/html";
  DocumentType2["TEXT_XML"] = "text/xml";
  DocumentType2["APPLICATION_XML"] = "application/xml";
  DocumentType2["APPLICATION_XHTML"] = "application/xhtml+xml";
})(DocumentType || (DocumentType = {}));
var ContentType;
(function(ContentType2) {
  ContentType2["TEXT_PLAIN"] = "text/plain";
  ContentType2["APPLICATION_JSON"] = "application/json";
})(ContentType || (ContentType = {}));
var ContentTypeRegexStr;
(function(ContentTypeRegexStr2) {
  ContentTypeRegexStr2["DOCUMENT"] = "^(text\\/(html|xml))|(application\\/(xml|xhtml\\+xml))$";
  ContentTypeRegexStr2["IMAGE"] = "^image\\/.+";
})(ContentTypeRegexStr || (ContentTypeRegexStr = {}));

// node_modules/@microsoft/mgt-components/dist/es6/graph/graph.user.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var getUserInvalidationTime = () => CacheService.config.users.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsUsersCacheEnabled = () => CacheService.config.users.isEnabled && CacheService.config.isEnabled;
function getUsers(graph, userFilters = "", top = 10) {
  return __awaiter3(this, void 0, void 0, function* () {
    let apiString = "/users";
    let cache3;
    const cacheKey = userFilters === "" ? "*" : userFilters;
    const cacheItem = { maxResults: top, results: null };
    if (getIsUsersCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.users, schemas.users.stores.userFilters);
      const cacheRes = yield cache3.getValue(cacheKey);
      if (cacheRes && getUserInvalidationTime() > Date.now() - cacheRes.timeCached) {
        return cacheRes.results.map((userStr) => JSON.parse(userStr));
      }
    }
    const graphClient = graph.api(apiString).top(top);
    if (userFilters) {
      graphClient.filter(userFilters);
    }
    try {
      const response = yield graphClient.middlewareOptions(prepScopes("user.read")).get();
      if (getIsUsersCacheEnabled() && response) {
        cacheItem.results = response.value.map((userStr) => JSON.stringify(userStr));
        cache3.putValue(userFilters, cacheItem);
      }
      return response.value;
    } catch (error) {
    }
  });
}
function getMe(graph, requestedProps) {
  return __awaiter3(this, void 0, void 0, function* () {
    let cache3;
    if (getIsUsersCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.users, schemas.users.stores.users);
      const me = yield cache3.getValue("me");
      if (me && getUserInvalidationTime() > Date.now() - me.timeCached) {
        const cachedData = JSON.parse(me.user);
        const uniqueProps = requestedProps ? requestedProps.filter((prop) => !Object.keys(cachedData).includes(prop)) : null;
        if (!uniqueProps || uniqueProps.length <= 1) {
          return cachedData;
        }
      }
    }
    let apiString = "me";
    if (requestedProps) {
      apiString = apiString + "?$select=" + requestedProps.toString();
    }
    const response = graph.api(apiString).middlewareOptions(prepScopes("user.read")).get();
    if (getIsUsersCacheEnabled()) {
      cache3.putValue("me", { user: JSON.stringify(yield response) });
    }
    return response;
  });
}
function getUser(graph, userPrincipleName, requestedProps) {
  return __awaiter3(this, void 0, void 0, function* () {
    const scopes = "user.readbasic.all";
    let cache3;
    if (getIsUsersCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.users, schemas.users.stores.users);
      const user = yield cache3.getValue(userPrincipleName);
      if (user && getUserInvalidationTime() > Date.now() - user.timeCached) {
        const cachedData = user.user ? JSON.parse(user.user) : null;
        const uniqueProps = requestedProps && cachedData ? requestedProps.filter((prop) => !Object.keys(cachedData).includes(prop)) : null;
        if (!uniqueProps || uniqueProps.length <= 1) {
          return cachedData;
        }
      }
    }
    let apiString = `/users/${userPrincipleName}`;
    if (requestedProps) {
      apiString = apiString + "?$select=" + requestedProps.toString();
    }
    let response;
    try {
      response = yield graph.api(apiString).middlewareOptions(prepScopes(scopes)).get();
    } catch (_) {
    }
    if (getIsUsersCacheEnabled()) {
      cache3.putValue(userPrincipleName, { user: JSON.stringify(response) });
    }
    return response;
  });
}
function getUsersForUserIds(graph, userIds, searchInput = "", userFilters = "") {
  return __awaiter3(this, void 0, void 0, function* () {
    if (!userIds || userIds.length === 0) {
      return [];
    }
    const batch = graph.createBatch();
    const peopleDict = {};
    const peopleSearchMatches = {};
    const notInCache = [];
    searchInput = searchInput.toLowerCase();
    let cache3;
    if (getIsUsersCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.users, schemas.users.stores.users);
    }
    for (const id of userIds) {
      peopleDict[id] = null;
      let user = null;
      if (getIsUsersCacheEnabled()) {
        user = yield cache3.getValue(id);
      }
      if (user && getUserInvalidationTime() > Date.now() - user.timeCached) {
        user = JSON.parse(user === null || user === void 0 ? void 0 : user.user);
        const displayName = user === null || user === void 0 ? void 0 : user.displayName;
        if (searchInput) {
          const match = displayName && displayName.toLowerCase().includes(searchInput);
          const searchMatches = match ? true : false;
          if (searchMatches) {
            peopleSearchMatches[id] = user ? user : null;
          }
        } else {
          peopleDict[id] = user ? user : null;
        }
      } else if (id !== "") {
        if (id.toString() === "me") {
          peopleDict[id] = yield getMe(graph);
        } else {
          let apiUrl = `/users/${id}`;
          if (userFilters) {
            apiUrl += `${apiUrl}?$filter=${userFilters}`;
          }
          batch.get(id, apiUrl, ["user.readbasic.all"]);
          notInCache.push(id);
        }
      }
    }
    try {
      const responses = yield batch.executeAll();
      for (const id of userIds) {
        const response = responses.get(id);
        if (response && response.content) {
          const user = response.content;
          if (searchInput) {
            const displayName = user === null || user === void 0 ? void 0 : user.displayName.toLowerCase();
            if (displayName.contains(searchInput)) {
              peopleSearchMatches[id] = user;
            }
          } else {
            peopleDict[id] = user;
          }
          if (getIsUsersCacheEnabled()) {
            cache3.putValue(id, { user: JSON.stringify(user) });
          }
        }
      }
      if (searchInput && Object.keys(peopleSearchMatches).length) {
        return Promise.all(Object.values(peopleSearchMatches));
      }
      return Promise.all(Object.values(peopleDict));
    } catch (_) {
      try {
        userIds.filter((id) => notInCache.includes(id)).forEach((id) => peopleDict[id] = getUser(graph, id));
        if (getIsUsersCacheEnabled()) {
          userIds.filter((id) => notInCache.includes(id)).forEach((id) => __awaiter3(this, void 0, void 0, function* () {
            return cache3.putValue(id, { user: JSON.stringify(yield peopleDict[id]) });
          }));
        }
        return Promise.all(Object.values(peopleDict));
      } catch (_2) {
        return [];
      }
    }
  });
}
function getUsersForPeopleQueries(graph, peopleQueries) {
  return __awaiter3(this, void 0, void 0, function* () {
    if (!peopleQueries || peopleQueries.length === 0) {
      return [];
    }
    const batch = graph.createBatch();
    const people = [];
    let cacheRes;
    let cache3;
    if (getIsUsersCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.users, schemas.users.stores.usersQuery);
    }
    for (const personQuery of peopleQueries) {
      if (getIsUsersCacheEnabled()) {
        cacheRes = yield cache3.getValue(personQuery);
      }
      if (getIsUsersCacheEnabled() && cacheRes && getUserInvalidationTime() > Date.now() - cacheRes.timeCached) {
        people.push(JSON.parse(cacheRes.results[0]));
      } else if (personQuery !== "") {
        batch.get(personQuery, `/me/people?$search="${personQuery}"`, ["people.read"], {
          "X-PeopleQuery-QuerySources": "Mailbox,Directory"
        });
      }
    }
    try {
      const responses = yield batch.executeAll();
      for (const personQuery of peopleQueries) {
        const response = responses.get(personQuery);
        if (response && response.content && response.content.value && response.content.value.length > 0) {
          people.push(response.content.value[0]);
          if (getIsUsersCacheEnabled()) {
            cache3.putValue(personQuery, { maxResults: 1, results: [JSON.stringify(response.content.value[0])] });
          }
        } else {
          people.push(null);
        }
      }
      return people;
    } catch (_) {
      try {
        return Promise.all(peopleQueries.filter((personQuery) => personQuery && personQuery !== "").map((personQuery) => __awaiter3(this, void 0, void 0, function* () {
          const personArray = yield findPeople(graph, personQuery, 1);
          if (personArray && personArray.length) {
            if (getIsUsersCacheEnabled()) {
              cache3.putValue(personQuery, { maxResults: 1, results: [JSON.stringify(personArray[0])] });
            }
            return personArray[0];
          }
        })));
      } catch (_2) {
        return [];
      }
    }
  });
}
function findUsers(graph, query, top = 10, userFilters = "") {
  return __awaiter3(this, void 0, void 0, function* () {
    const scopes = "User.ReadBasic.All";
    const item = { maxResults: top, results: null };
    let cache3;
    if (getIsUsersCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.users, schemas.users.stores.usersQuery);
      const result2 = yield cache3.getValue(query);
      if (result2 && getUserInvalidationTime() > Date.now() - result2.timeCached) {
        return result2.results.map((userStr) => JSON.parse(userStr));
      }
    }
    let encodedQuery = `${query.replace(/#/g, "%2523")}`;
    let graphBuilder = graph.api("users").header("ConsistencyLevel", "eventual").count(true).search(`"displayName:${encodedQuery}" OR "mail:${encodedQuery}"`);
    let graphResult;
    if (userFilters !== "") {
      graphBuilder.filter(userFilters);
    }
    try {
      graphResult = yield graphBuilder.top(top).middlewareOptions(prepScopes(scopes)).get();
    } catch (_a) {
    }
    if (getIsUsersCacheEnabled() && graphResult) {
      item.results = graphResult.value.map((userStr) => JSON.stringify(userStr));
      cache3.putValue(query, item);
    }
    return graphResult ? graphResult.value : null;
  });
}
function findGroupMembers(graph, query, groupId, top = 10, personType = PersonType.person, transitive = false, userFilters = "", peopleFilters = "") {
  return __awaiter3(this, void 0, void 0, function* () {
    const scopes = ["user.read.all", "people.read"];
    const item = { maxResults: top, results: null };
    let cache3;
    const key = `${groupId || "*"}:${query || "*"}:${personType}:${transitive}:${userFilters}`;
    if (getIsUsersCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.users, schemas.users.stores.usersQuery);
      const result2 = yield cache3.getValue(key);
      if (result2 && getUserInvalidationTime() > Date.now() - result2.timeCached) {
        return result2.results.map((userStr) => JSON.parse(userStr));
      }
    }
    let filter2 = "";
    if (query) {
      filter2 = `startswith(displayName,'${query}') or startswith(givenName,'${query}') or startswith(surname,'${query}') or startswith(mail,'${query}') or startswith(userPrincipalName,'${query}')`;
    }
    let apiUrl = `/groups/${groupId}/${transitive ? "transitiveMembers" : "members"}`;
    if (personType === PersonType.person) {
      apiUrl += `/microsoft.graph.user`;
    } else if (personType === PersonType.group) {
      apiUrl += `/microsoft.graph.group`;
      if (query) {
        filter2 = `startswith(displayName,'${query}') or startswith(mail,'${query}')`;
      }
    }
    if (userFilters) {
      filter2 += query ? ` and ${userFilters}` : userFilters;
    }
    if (peopleFilters) {
      filter2 += query ? ` and ${peopleFilters}` : peopleFilters;
    }
    const graphResult = yield graph.api(apiUrl).count(true).top(top).filter(filter2).header("ConsistencyLevel", "eventual").middlewareOptions(prepScopes(...scopes)).get();
    if (getIsUsersCacheEnabled() && graphResult) {
      item.results = graphResult.value.map((userStr) => JSON.stringify(userStr));
      cache3.putValue(key, item);
    }
    return graphResult ? graphResult.value : null;
  });
}
function findUsersFromGroupIds(graph, query, groupIds, top = 10, personType = PersonType.person, transitive = false, groupFilters = "") {
  return __awaiter3(this, void 0, void 0, function* () {
    const users = [];
    for (let i = 0; i < groupIds.length; i++) {
      const groupId = groupIds[i];
      try {
        const groupUsers = yield findGroupMembers(graph, query, groupId, top, personType, transitive, groupFilters);
        users.push(...groupUsers);
      } catch (_) {
        continue;
      }
    }
    return users;
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/graph/graph.photos.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var getPhotoInvalidationTime = () => CacheService.config.photos.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsPhotosCacheEnabled = () => CacheService.config.photos.isEnabled && CacheService.config.isEnabled;
function getPhotoForResource(graph, resource, scopes) {
  return __awaiter4(this, void 0, void 0, function* () {
    try {
      const response = yield graph.api(`${resource}/photo/$value`).responseType(ResponseType.RAW).middlewareOptions(prepScopes(...scopes)).get();
      if (response.status === 404) {
        return { eTag: null, photo: null };
      } else if (!response.ok) {
        return null;
      }
      const eTag = response.headers.get("eTag");
      const blob = yield blobToBase64(yield response.blob());
      return { eTag, photo: blob };
    } catch (e) {
      return null;
    }
  });
}
function getContactPhoto(graph, contactId) {
  return __awaiter4(this, void 0, void 0, function* () {
    let cache3;
    let photoDetails;
    if (getIsPhotosCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.photos, schemas.photos.stores.contacts);
      photoDetails = yield cache3.getValue(contactId);
      if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {
        return photoDetails.photo;
      }
    }
    photoDetails = yield getPhotoForResource(graph, `me/contacts/${contactId}`, ["contacts.read"]);
    if (getIsPhotosCacheEnabled() && photoDetails) {
      cache3.putValue(contactId, photoDetails);
    }
    return photoDetails ? photoDetails.photo : null;
  });
}
function getUserPhoto(graph, userId) {
  return __awaiter4(this, void 0, void 0, function* () {
    let cache3;
    let photoDetails;
    if (getIsPhotosCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.photos, schemas.photos.stores.users);
      photoDetails = yield cache3.getValue(userId);
      if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {
        return photoDetails.photo;
      } else if (photoDetails) {
        try {
          const response = yield graph.api(`users/${userId}/photo`).get();
          if (response && (response["@odata.mediaEtag"] !== photoDetails.eTag || response["@odata.mediaEtag"] === null && response.eTag === null)) {
            photoDetails = null;
          }
        } catch (_a) {
          return null;
        }
      }
    }
    photoDetails = photoDetails || (yield getPhotoForResource(graph, `users/${userId}`, ["user.readbasic.all"]));
    if (getIsPhotosCacheEnabled() && photoDetails) {
      cache3.putValue(userId, photoDetails);
    }
    return photoDetails ? photoDetails.photo : null;
  });
}
function getPersonImage(graph, person, useContactsApis = true) {
  return __awaiter4(this, void 0, void 0, function* () {
    if ("personType" in person && person.personType.subclass !== "OrganizationUser") {
      if (person.personType.subclass === "PersonalContact" && useContactsApis) {
        const email2 = getEmailFromGraphEntity(person);
        const contact = yield findContactsByEmail(graph, email2);
        if (contact && contact.length && contact[0].id) {
          return yield getContactPhoto(graph, contact[0].id);
        }
      }
      return null;
    }
    if (person.userPrincipalName || person.id) {
      const id = person.userPrincipalName || person.id;
      return yield getUserPhoto(graph, id);
    }
    if (person.id) {
      const image = yield getUserPhoto(graph, person.id);
      if (image) {
        return image;
      }
    }
    const email = getEmailFromGraphEntity(person);
    if (email) {
      const users = yield findUsers(graph, email, 1);
      if (users && users.length) {
        return yield getUserPhoto(graph, users[0].id);
      }
      if (useContactsApis) {
        const contacts = yield findContactsByEmail(graph, email);
        if (contacts && contacts.length) {
          return yield getContactPhoto(graph, contacts[0].id);
        }
      }
    }
    return null;
  });
}
function getGroupImage(graph, group, useContactsApis = true) {
  return __awaiter4(this, void 0, void 0, function* () {
    let photoDetails;
    let cache3;
    let groupId = group.id;
    if (getIsPhotosCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.photos, schemas.photos.stores.groups);
      photoDetails = yield cache3.getValue(groupId);
      if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {
        return photoDetails.photo;
      } else if (photoDetails) {
        try {
          const response = yield graph.api(`groups/${groupId}/photo`).get();
          if (response && (response["@odata.mediaEtag"] !== photoDetails.eTag || response["@odata.mediaEtag"] === null && response.eTag === null)) {
            photoDetails = null;
          }
        } catch (_a) {
          return null;
        }
      }
    }
    photoDetails = photoDetails || (yield getPhotoForResource(graph, `groups/${groupId}`, ["user.readbasic.all"]));
    if (getIsPhotosCacheEnabled() && photoDetails) {
      cache3.putValue(groupId, photoDetails);
    }
    return photoDetails ? photoDetails.photo : null;
  });
}
function getPhotoFromCache(userId, storeName) {
  return __awaiter4(this, void 0, void 0, function* () {
    const cache3 = CacheService.getCache(schemas.photos, storeName);
    const item = yield cache3.getValue(userId);
    return item;
  });
}
function storePhotoInCache(userId, storeName, value) {
  return __awaiter4(this, void 0, void 0, function* () {
    const cache3 = CacheService.getCache(schemas.photos, storeName);
    cache3.putValue(userId, value);
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/graph/graph.presence.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var getPresenceInvalidationTime = () => CacheService.config.presence.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsPresenceCacheEnabled = () => CacheService.config.presence.isEnabled && CacheService.config.isEnabled;
function getUserPresence(graph, userId) {
  return __awaiter5(this, void 0, void 0, function* () {
    let cache3;
    if (getIsPresenceCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.presence, schemas.presence.stores.presence);
      const presence = yield cache3.getValue(userId || "me");
      if (presence && getPresenceInvalidationTime() > Date.now() - presence.timeCached) {
        return JSON.parse(presence.presence);
      }
    }
    const scopes = userId ? ["presence.read.all"] : ["presence.read"];
    const resource = userId ? `/users/${userId}/presence` : "/me/presence";
    const result2 = yield graph.api(resource).middlewareOptions(prepScopes(...scopes)).get();
    if (getIsPresenceCacheEnabled()) {
      cache3.putValue(userId || "me", { presence: JSON.stringify(result2) });
    }
    return result2;
  });
}
function getUsersPresenceByPeople(graph, people) {
  return __awaiter5(this, void 0, void 0, function* () {
    if (!people || people.length === 0) {
      return {};
    }
    const peoplePresence = {};
    const peoplePresenceToQuery = [];
    const scopes = ["presence.read.all"];
    let cache3;
    if (getIsPresenceCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.presence, schemas.presence.stores.presence);
    }
    for (const person of people) {
      if (person === null || person === void 0 ? void 0 : person.id) {
        const id = person.id;
        peoplePresence[id] = null;
        let presence;
        if (getIsPresenceCacheEnabled()) {
          presence = yield cache3.getValue(id);
        }
        if (getIsPresenceCacheEnabled() && presence && getPresenceInvalidationTime() > Date.now() - (yield presence).timeCached) {
          peoplePresence[id] = JSON.parse(presence.presence);
        } else {
          peoplePresenceToQuery.push(id);
        }
      }
    }
    try {
      if (peoplePresenceToQuery.length > 0) {
        const presenceResult = yield graph.api("/communications/getPresencesByUserId").middlewareOptions(prepScopes(...scopes)).post({
          ids: peoplePresenceToQuery
        });
        for (const r of presenceResult.value) {
          peoplePresence[r.id] = r;
          if (getIsPresenceCacheEnabled()) {
            cache3.putValue(r.id, { presence: JSON.stringify(r) });
          }
        }
      }
      return peoplePresence;
    } catch (_) {
      try {
        const response = yield Promise.all(people.filter((person) => person && person.id && !peoplePresence[person.id] && "personType" in person && person.personType.subclass === "OrganizationUser").map((person) => getUserPresence(graph, person.id)));
        for (const r of response) {
          peoplePresence[r.id] = r;
        }
        return peoplePresence;
      } catch (_2) {
        return null;
      }
    }
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/graph/graph.userWithPhoto.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function getUserWithPhoto(graph, userId, requestedProps) {
  return __awaiter6(this, void 0, void 0, function* () {
    let photo = null;
    let user = null;
    let cachedPhoto;
    let cachedUser;
    const resource = userId ? `users/${userId}` : "me";
    let fullResource = resource + (requestedProps ? `?$select=${requestedProps.toString()}` : "");
    const scopes = userId ? ["user.readbasic.all"] : ["user.read"];
    if (getIsUsersCacheEnabled()) {
      const cache3 = CacheService.getCache(schemas.users, schemas.users.stores.users);
      cachedUser = yield cache3.getValue(userId || "me");
      if (cachedUser !== void 0 && getUserInvalidationTime() > Date.now() - cachedUser.timeCached) {
        user = cachedUser.user ? JSON.parse(cachedUser.user) : null;
        if (user !== null && requestedProps) {
          const uniqueProps = requestedProps.filter((prop) => !Object.keys(user).includes(prop));
          if (uniqueProps.length >= 1) {
            user = null;
            cachedUser = null;
          }
        }
      } else {
        cachedUser = null;
      }
    }
    if (getIsPhotosCacheEnabled()) {
      cachedPhoto = yield getPhotoFromCache(userId || "me", schemas.photos.stores.users);
      if (cachedPhoto && getPhotoInvalidationTime() > Date.now() - cachedPhoto.timeCached) {
        photo = cachedPhoto.photo;
      } else if (cachedPhoto) {
        try {
          const response = yield graph.api(`${resource}/photo`).get();
          if (response && response["@odata.mediaEtag"] && response["@odata.mediaEtag"] === cachedPhoto.eTag) {
            storePhotoInCache(userId || "me", schemas.photos.stores.users, cachedPhoto);
            photo = cachedPhoto.photo;
          } else {
            cachedPhoto = null;
          }
        } catch (e) {
          if (e.code === "ErrorItemNotFound" || e.code === "ImageNotFound") {
            storePhotoInCache(userId || "me", schemas.photos.stores.users, { eTag: null, photo: null });
          }
        }
      }
    }
    if (!cachedPhoto && !cachedUser) {
      let eTag;
      const batch = graph.createBatch();
      if (userId) {
        batch.get("user", `/users/${userId}${requestedProps ? "?$select=" + requestedProps.toString() : ""}`, [
          "user.readbasic.all"
        ]);
        batch.get("photo", `users/${userId}/photo/$value`, ["user.readbasic.all"]);
      } else {
        batch.get("user", "me", ["user.read"]);
        batch.get("photo", "me/photo/$value", ["user.read"]);
      }
      const response = yield batch.executeAll();
      const photoResponse = response.get("photo");
      if (photoResponse) {
        eTag = photoResponse.headers["ETag"];
        photo = photoResponse.content;
      }
      const userResponse = response.get("user");
      if (userResponse) {
        user = userResponse.content;
      }
      if (getIsUsersCacheEnabled()) {
        const cache3 = CacheService.getCache(schemas.users, schemas.users.stores.users);
        cache3.putValue(userId || "me", { user: JSON.stringify(user) });
      }
      if (getIsPhotosCacheEnabled()) {
        storePhotoInCache(userId || "me", schemas.photos.stores.users, { eTag, photo });
      }
    } else if (!cachedPhoto) {
      try {
        const response = yield getPhotoForResource(graph, resource, scopes);
        if (response) {
          if (getIsPhotosCacheEnabled()) {
            storePhotoInCache(userId || "me", schemas.photos.stores.users, {
              eTag: response.eTag,
              photo: response.photo
            });
          }
          photo = response.photo;
        }
      } catch (_) {
      }
    } else if (!cachedUser) {
      try {
        const response = yield graph.api(fullResource).middlewareOptions(prepScopes(...scopes)).get();
        if (response) {
          if (getIsUsersCacheEnabled()) {
            const cache3 = CacheService.getCache(schemas.users, schemas.users.stores.users);
            cache3.putValue(userId || "me", { user: JSON.stringify(response) });
          }
          user = response;
        }
      } catch (_) {
      }
    }
    if (user) {
      user.personImage = photo;
    }
    return user;
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/graph/types.js
var ViewType;
(function(ViewType2) {
  ViewType2[ViewType2["image"] = 2] = "image";
  ViewType2[ViewType2["oneline"] = 3] = "oneline";
  ViewType2[ViewType2["twolines"] = 4] = "twolines";
  ViewType2[ViewType2["threelines"] = 5] = "threelines";
})(ViewType || (ViewType = {}));

// node_modules/@microsoft/mgt-components/dist/es6/utils/SvgHelper.js
var SvgIcon;
(function(SvgIcon2) {
  SvgIcon2[SvgIcon2["ArrowRight"] = 0] = "ArrowRight";
  SvgIcon2[SvgIcon2["ArrowDown"] = 1] = "ArrowDown";
  SvgIcon2[SvgIcon2["TeamSeparator"] = 2] = "TeamSeparator";
  SvgIcon2[SvgIcon2["Search"] = 3] = "Search";
  SvgIcon2[SvgIcon2["SkypeArrow"] = 4] = "SkypeArrow";
  SvgIcon2[SvgIcon2["SmallEmail"] = 5] = "SmallEmail";
  SvgIcon2[SvgIcon2["SmallChat"] = 6] = "SmallChat";
  SvgIcon2[SvgIcon2["ExpandDown"] = 7] = "ExpandDown";
  SvgIcon2[SvgIcon2["Overview"] = 8] = "Overview";
  SvgIcon2[SvgIcon2["Send"] = 9] = "Send";
  SvgIcon2[SvgIcon2["Contact"] = 10] = "Contact";
  SvgIcon2[SvgIcon2["Copy"] = 11] = "Copy";
  SvgIcon2[SvgIcon2["Phone"] = 12] = "Phone";
  SvgIcon2[SvgIcon2["CellPhone"] = 13] = "CellPhone";
  SvgIcon2[SvgIcon2["Chat"] = 14] = "Chat";
  SvgIcon2[SvgIcon2["Department"] = 15] = "Department";
  SvgIcon2[SvgIcon2["Email"] = 16] = "Email";
  SvgIcon2[SvgIcon2["OfficeLocation"] = 17] = "OfficeLocation";
  SvgIcon2[SvgIcon2["Person"] = 18] = "Person";
  SvgIcon2[SvgIcon2["Messages"] = 19] = "Messages";
  SvgIcon2[SvgIcon2["Organization"] = 20] = "Organization";
  SvgIcon2[SvgIcon2["ExpandRight"] = 21] = "ExpandRight";
  SvgIcon2[SvgIcon2["Profile"] = 22] = "Profile";
  SvgIcon2[SvgIcon2["Birthday"] = 23] = "Birthday";
  SvgIcon2[SvgIcon2["File"] = 24] = "File";
  SvgIcon2[SvgIcon2["Files"] = 25] = "Files";
  SvgIcon2[SvgIcon2["Back"] = 26] = "Back";
  SvgIcon2[SvgIcon2["Upload"] = 27] = "Upload";
  SvgIcon2[SvgIcon2["FileCloud"] = 28] = "FileCloud";
  SvgIcon2[SvgIcon2["DragFile"] = 29] = "DragFile";
  SvgIcon2[SvgIcon2["Cancel"] = 30] = "Cancel";
  SvgIcon2[SvgIcon2["Success"] = 31] = "Success";
  SvgIcon2[SvgIcon2["Fail"] = 32] = "Fail";
})(SvgIcon || (SvgIcon = {}));
function getSvg(svgIcon, color2) {
  switch (svgIcon) {
    case SvgIcon.ArrowRight:
      return html`
        <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M8 7L4.46481 10.5359L4.46481 7L4.46481 3.46413L8 7Z" />
        </svg>
      `;
    case SvgIcon.ArrowDown:
      return html`
        <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 9L2.46447 5.46447H6H9.53553L6 9Z" />
        </svg>
      `;
    case SvgIcon.TeamSeparator:
      return html`
        <svg width="6" height="10" viewBox="0 0 6 10" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M5.70711 5L1.49999 9.20711L0.792886 8.50001L4.29289 5L0.792887 1.49999L1.49999 0.792885L5.70711 5Z"
            fill=${color2}
          />
        </svg>
      `;
    case SvgIcon.Search:
      return html`
        <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0)">
            <circle cx="5.36377" cy="5.36396" r="4" transform="rotate(45 5.36377 5.36396)" stroke="#B3B0AD" />
            <path
              d="M8.19189 7.48529L12.7881 12.0815C12.9834 12.2767 12.9834 12.5933 12.7881 12.7886V12.7886C12.5928 12.9839 12.2762 12.9839 12.081 12.7886L7.48479 8.1924L8.19189 7.48529Z"
              fill="#B3B0AD"
            />
          </g>
          <defs>
            <clipPath id="clip0">
              <rect width="14" height="14" fill="white" />
            </clipPath>
          </defs>
        </svg>
      `;
    case SvgIcon.SkypeArrow:
      return html`
        <svg viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M3.95184 0.480534C4.23385 0.10452 4.70926 -0.0724722 5.1685 0.0275755C5.62775 0.127623 5.98645 0.486329 6.0865 0.945575C6.18655 1.40482 6.00956 1.88023 5.63354 2.16224L4.07196 3.72623H10.7988C11.4622 3.72623 12 4.26403 12 4.92744C12 5.59086 11.4622 6.12866 10.7988 6.12866H4.07196L5.63114 7.68784C6.0955 8.15225 6.0955 8.90515 5.63114 9.36955C5.51655 9.48381 5.38119 9.57514 5.23234 9.63862C5.09341 9.69857 4.94399 9.73042 4.79269 9.73232C4.63498 9.73233 4.4789 9.70046 4.33382 9.63862C4.18765 9.57669 4.05593 9.48507 3.94703 9.36955L0.343377 5.7659C-0.114459 5.29881 -0.114459 4.55128 0.343377 4.08419L3.95184 0.480534Z"
            fill="#B4009E"
          />
        </svg>
      `;
    case SvgIcon.SmallEmail:
      return html`
        <svg width="14" height="10" viewBox="0 0 14 10" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M11.8473 1H2.04886L6.47364 4.18916C6.64273 4.31103 6.86969 4.31522 7.04316 4.19968L11.8473 1ZM1 1.47671V9H13V1.43376L7.59749 5.03198C7.07706 5.3786 6.39621 5.36601 5.88894 5.0004L1 1.47671ZM0 1C0 0.447715 0.447715 0 1 0H13C13.5523 0 14 0.447715 14 1V9C14 9.55228 13.5523 10 13 10H1C0.447716 10 0 9.55229 0 9V1Z"
          />
        </svg>
      `;
    case SvgIcon.SmallChat:
      return html`
        <svg width="13" height="13" viewBox="0 0 13 13" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M9.5781 8.26403L9.57811 8.26403C9.68611 8.29867 9.8455 8.36364 10.0125 8.50479C10.1405 8.61294 10.2409 8.73883 10.3235 8.86465L11.9634 10.9944C11.9701 10.9924 11.9753 10.9904 11.9785 10.9889C11.9841 10.9864 11.9918 10.9823 12 10.9768V1.32284C12 1.18078 11.8731 1 11.6207 1H1.37926C1.12692 1 1 1.18078 1 1.32284V7.37377C1 7.45357 1.01415 7.49036 1.02102 7.50507C1.02778 7.51955 1.04342 7.54689 1.09159 7.58705L1.10485 7.5981L1.11771 7.6096C1.13526 7.62529 1.21707 7.69076 1.33937 7.76027C1.46122 7.82952 1.58119 7.87864 1.67944 7.89966L1.69102 7.90214L1.691 7.9022C3.32106 8.27116 6.2626 8.27688 8.67896 8.18036L8.69908 8.17955L8.71921 8.17956L8.7627 8.17954C9.01362 8.17932 9.31313 8.17907 9.5781 8.26403ZM11.2376 11.6908L9.50506 9.44081C9.39493 9.26422 9.32445 9.23285 9.27276 9.21627C9.17534 9.18504 9.0401 9.17966 8.71888 9.17956C6.31879 9.27543 3.24831 9.27999 1.47024 8.87753C1.01314 8.77974 0.600449 8.48852 0.451238 8.35513C0.15593 8.10893 0 7.78958 0 7.37377V1.32284C0 0.593147 0.610664 0 1.37926 0H11.6207C12.3893 0 13 0.593147 13 1.32284V11.0441C13 11.4686 12.6828 11.7689 12.3881 11.9012C12.1048 12.0284 11.673 12.0728 11.3387 11.7993C11.3003 11.7679 11.2678 11.7301 11.2376 11.6908ZM3 3.5C3 3.22386 3.22386 3 3.5 3H9.5C9.77614 3 10 3.22386 10 3.5C10 3.77614 9.77614 4 9.5 4H3.5C3.22386 4 3 3.77614 3 3.5ZM3.5 5C3.22386 5 3 5.22386 3 5.5C3 5.77614 3.22386 6 3.5 6H6.5C6.77614 6 7 5.77614 7 5.5C7 5.22386 6.77614 5 6.5 5H3.5Z"
          />
        </svg>
      `;
    case SvgIcon.ExpandDown: {
      return html`
        <svg width="15" height="8" viewBox="0 0 15 8" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M14 1L7.5 7L1 1" stroke="#3078CD" />
        </svg>
      `;
    }
    case SvgIcon.Overview:
      return html`
        <svg xmlns="http://www.w3.org/2000/svg">
          <path
            d="M12 4V9H2V4H12ZM11 8V5H3V8H11ZM13 4H18V9H13V4ZM17 8V5H14V8H17ZM8 15V10H18V15H8ZM9 11V14H17V11H9ZM2 15V10H7V15H2ZM3 11V14H6V11H3Z"
          />
        </svg>
      `;
    case SvgIcon.Send:
      return html`
        <svg xmlns="http://www.w3.org/2000/svg">
          <path
            d="M4.27144 8.99999L1.72572 2.45387C1.54854 1.99826 1.9928 1.56256 2.43227 1.71743L2.50153 1.74688L16.0015 8.49688C16.3902 8.69122 16.4145 9.22336 16.0744 9.45992L16.0015 9.50311L2.50153 16.2531C2.0643 16.4717 1.58932 16.0697 1.70282 15.6178L1.72572 15.5461L4.27144 8.99999L1.72572 2.45387L4.27144 8.99999ZM3.3028 3.4053L5.25954 8.43705L10.2302 8.43749C10.515 8.43749 10.7503 8.64911 10.7876 8.92367L10.7927 8.99999C10.7927 9.28476 10.5811 9.52011 10.3065 9.55736L10.2302 9.56249L5.25954 9.56205L3.3028 14.5947L14.4922 8.99999L3.3028 3.4053Z"
          />
        </svg>
      `;
    case SvgIcon.Contact:
      return html`
        <svg xmlns="http://www.w3.org/2000/svg">
          <path
            d="M11.3315 11.7855L11.3452 11.7913L11.3591 11.7967C11.4057 11.8149 11.4421 11.8389 11.4762 11.8729L12.8836 13.2797C12.9177 13.3137 12.9416 13.35 12.9597 13.3965L12.9651 13.4104L12.971 13.4241C12.9902 13.4693 13 13.5151 13 13.5699C13 13.6248 12.9901 13.6759 12.9676 13.7303L12.9675 13.7302L12.9628 13.7419C12.9458 13.7844 12.9218 13.822 12.8836 13.8602L12.7941 13.9497C12.57 14.1736 12.3673 14.37 12.1855 14.5396C12.0445 14.6712 11.9037 14.7767 11.7639 14.8601C11.6429 14.9284 11.499 14.9865 11.3265 15.0296C11.1716 15.0683 10.9523 15.0957 10.6541 15.0957C10.226 15.0957 9.77339 15.0291 9.29316 14.8873C8.79837 14.7411 8.29897 14.537 7.79466 14.2716C7.29099 14.0043 6.7904 13.6843 6.2931 13.3097C5.79797 12.9334 5.32815 12.5234 4.88351 12.0793C4.44215 11.6299 4.03516 11.1575 3.66219 10.6619C3.2916 10.1652 2.97561 9.66531 2.71228 9.16232C2.44987 8.65684 2.24939 8.16115 2.1072 7.67496C1.96889 7.20203 1.9043 6.75953 1.9043 6.34426C1.9043 6.04676 1.92945 5.8283 1.96505 5.67477C2.00758 5.51024 2.06491 5.36965 2.13346 5.24839C2.21771 5.10725 2.32161 4.96874 2.44802 4.83312C2.61763 4.65148 2.814 4.44899 3.03788 4.22522L3.14024 4.12291C3.18256 4.08061 3.22694 4.05101 3.2785 4.0291C3.32105 4.01103 3.36887 4 3.43131 4C3.48634 4 3.53235 4.00983 3.57773 4.0291L3.57771 4.02914L3.58585 4.03251C3.6411 4.05541 3.68414 4.08469 3.72239 4.12291L5.12984 5.52968C5.16387 5.56369 5.18781 5.60004 5.20594 5.64649L5.21136 5.66038L5.2172 5.6741C5.23642 5.71931 5.24622 5.76513 5.24622 5.81992C5.24622 5.88591 5.23631 5.9178 5.23225 5.92835C5.20132 5.99698 5.16601 6.05438 5.12738 6.10352C5.07447 6.17083 5.01613 6.23146 4.95179 6.28625L4.94467 6.2923L4.93768 6.29849C4.81323 6.40852 4.69584 6.51839 4.58605 6.62811C4.45174 6.76237 4.32909 6.90895 4.22378 7.06908C4.0535 7.32254 3.96032 7.61696 3.96032 7.93007C3.96032 8.35888 4.12439 8.75141 4.42612 9.05299L7.95115 12.5763C8.25285 12.8779 8.64535 13.0417 9.07392 13.0417C9.38687 13.0417 9.68121 12.9486 9.9347 12.7785C10.0949 12.6733 10.2415 12.5507 10.3758 12.4164C10.4856 12.3067 10.5955 12.1894 10.7056 12.065L10.7118 12.058L10.7179 12.0509C10.7727 11.9866 10.8333 11.9283 10.9007 11.8754C10.9499 11.8367 11.0074 11.8014 11.0761 11.7704C11.0868 11.7663 11.1189 11.7564 11.1851 11.7564C11.2401 11.7564 11.2861 11.7662 11.3315 11.7855ZM11.5689 15.9998C11.8248 15.9358 12.0573 15.8442 12.2663 15.7248C12.4753 15.6012 12.6757 15.4499 12.8676 15.2708C13.0596 15.0918 13.2707 14.8872 13.501 14.657L13.5906 14.5674C13.7228 14.4353 13.823 14.284 13.8912 14.1134C13.9637 13.9387 14 13.7575 14 13.5699C14 13.3824 13.9637 13.2033 13.8912 13.0328C13.823 12.858 13.7228 12.7045 13.5906 12.5724L12.1831 11.1656C12.0509 11.0335 11.8974 10.9333 11.7225 10.8651C11.5519 10.7926 11.3728 10.7564 11.1851 10.7564C10.9974 10.7564 10.829 10.7884 10.6797 10.8523C10.5347 10.9163 10.4025 10.9951 10.283 11.0889C10.1636 11.1827 10.0549 11.2871 9.95677 11.4022C9.85868 11.5131 9.76272 11.6154 9.66889 11.7092C9.57506 11.8029 9.47909 11.8818 9.381 11.9457C9.28717 12.0097 9.18481 12.0417 9.07392 12.0417C8.91185 12.0417 8.77323 11.9841 8.65808 11.869L5.13305 8.34571C5.0179 8.23061 4.96032 8.09206 4.96032 7.93007C4.96032 7.81924 4.99231 7.71693 5.05628 7.62314C5.12026 7.52509 5.19916 7.42918 5.29299 7.33539C5.38682 7.24161 5.48918 7.14569 5.60007 7.04765C5.71522 6.9496 5.81972 6.84089 5.91355 6.72153C6.00738 6.60217 6.08628 6.47002 6.15026 6.32508C6.21423 6.17588 6.24622 6.00749 6.24622 5.81992C6.24622 5.63236 6.20997 5.45331 6.13746 5.2828C6.06922 5.10802 5.96899 4.95455 5.83678 4.8224L4.42932 3.41564C4.29711 3.28348 4.14357 3.18117 3.9687 3.1087C3.7981 3.03623 3.61897 3 3.43131 3C3.23939 3 3.05813 3.03623 2.88752 3.1087C2.71692 3.18117 2.56552 3.28348 2.4333 3.41564L2.33094 3.51795C2.10063 3.74814 1.89591 3.95916 1.71678 4.15099C1.54192 4.33856 1.39264 4.53678 1.26895 4.74567C1.14953 4.95455 1.05784 5.18475 0.993862 5.43626C0.934152 5.68777 0.904297 5.99044 0.904297 6.34426C0.904297 6.86434 0.985332 7.40147 1.1474 7.95565C1.30947 8.50983 1.53552 9.06614 1.82554 9.62458C2.11556 10.1788 2.46102 10.7244 2.86193 11.2615C3.26285 11.7944 3.70001 12.3017 4.17342 12.7834C4.65111 13.2609 5.15651 13.7021 5.68963 14.107C6.22703 14.512 6.77295 14.8616 7.3274 15.1557C7.88611 15.4499 8.44696 15.6801 9.00994 15.8463C9.57292 16.0126 10.121 16.0957 10.6541 16.0957C11.0081 16.0957 11.313 16.0637 11.5689 15.9998ZM14.9616 14H17.0002C17.5525 14 18.0002 13.5523 18.0002 13V5C18.0002 4.44772 17.5525 4 17.0002 4H6.43555L6.54385 4.11514C6.77073 4.34192 6.94536 4.60775 7.06365 4.90525C7.07677 4.93665 7.08919 4.96824 7.10089 5H16.8821L10.2238 8.32913C10.083 8.39951 9.91736 8.39951 9.7766 8.32913L7.22381 7.05273L6.7766 7.94716L9.32938 9.22355C9.75167 9.4347 10.2487 9.4347 10.671 9.22356L17.0002 6.05895V13H14.9314C14.9772 13.1858 15.0001 13.3764 15.0001 13.5699C15.0001 13.7154 14.9872 13.8589 14.9616 14Z"
          />
        </svg>
      `;
    case SvgIcon.Copy:
      return html`
        <svg width="13" height="14" viewBox="0 0 13 14" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M12.625 5.50293V14H3.875V11.375H0.375V0H6.24707L8.87207 2.625H9.74707L12.625 5.50293ZM10 5.25H11.1279L10 4.12207V5.25ZM3.875 2.625H7.62793L5.87793 0.875H1.25V10.5H3.875V2.625ZM11.75 6.125H9.125V3.5H4.75V13.125H11.75V6.125Z"
          />
        </svg>
      `;
    case SvgIcon.Phone:
      return html`
        <svg width="15" height="15" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2048 2048" fill="none">
            <path d="M1607 1213q44 0 84 16t72 48l220 220q31 31 47 71t17 85q0 44-16 84t-48 72l-14 14q-54 54-99 96t-94 70-109 44-143 15q-125 0-257-39t-262-108-256-164-237-207-206-238-162-256T38 775 0 523q0-83 14-142t43-108 70-93 96-99l16-16q31-31 71-48t85-17q44 0 84 17t72 48l220 220q31 31 47 71t17 85q0 44-15 78t-37 63-48 51-49 45-37 44-15 49q0 38 27 65l551 551q27 27 65 27 26 0 48-15t45-37 45-48 51-49 62-37 79-15zm-83 707q72 0 120-13t88-39 76-64 85-86q27-27 27-65 0-18-14-42t-38-52-51-55-56-54-51-47-37-35q-27-27-66-27-26 0-48 15t-44 37-45 48-52 49-62 37-79 15q-44 0-84-16t-72-48L570 927q-31-31-47-71t-17-85q0-44 15-78t37-63 48-51 49-46 37-44 15-48q0-39-27-66-13-13-34-36t-47-51-54-56-56-52-51-37-43-15q-38 0-65 27l-85 85q-37 37-64 76t-40 87-14 120q0 112 36 231t101 238 153 234 192 219 219 190 234 150 236 99 226 36z" fill="${color2}"></path>
        </svg>
      `;
    case SvgIcon.CellPhone:
      return html`
        <svg width="10" height="15" viewBox="0 0 10 15" fill="none" xmlns="http://www.w3.org/2000/svg">
          <rect x="0.5" y="0.5" width="9" height="14" rx="0.9" stroke="${color2}" />
          <rect x="3" y="12" width="4" height="1" rx="0.5" fill="${color2}" />
        </svg>
      `;
    case SvgIcon.Chat:
      return html`
        <svg width="17" height="15" viewBox="0 0 17 15" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M2.67824 0C2.3824 0 2.14258 0.239826 2.14258 0.535665C2.14258 0.831505 2.3824 1.07133 2.67824 1.07133H13.9985C14.5508 1.07133 14.9985 1.51905 14.9985 2.07133V12.3203C14.9985 12.6161 15.2384 12.856 15.5342 12.856C15.8301 12.856 16.0699 12.6161 16.0699 12.3203V2C16.0699 0.895431 15.1744 0 14.0699 0H2.67824Z"
            fill="${color2}"
          />
          <path
            d="M9.34097 11.4769L9.3309 11.4769L9.32085 11.4773C6.74142 11.5804 3.51639 11.5801 1.6855 11.1657L1.6855 11.1657L1.67972 11.1644C1.30373 11.084 0.937799 10.8292 0.816663 10.7209L0.81023 10.7152L0.803602 10.7096C0.601843 10.5414 0.5 10.3403 0.5 10.0423V3.55978C0.5 3.07185 0.912353 2.64258 1.47765 2.64258H12.4497C13.0149 2.64258 13.4273 3.07185 13.4273 3.55978V13.9745C13.4273 14.1578 13.2827 14.3397 13.067 14.4366C12.8614 14.5288 12.6204 14.5275 12.457 14.3904L10.5932 11.9699C10.5218 11.8587 10.4457 11.7646 10.3579 11.6904C10.2528 11.6015 10.1556 11.5622 10.0869 11.5401L9.93419 12.0163L10.0869 11.5401C9.89097 11.4773 9.65413 11.477 9.34097 11.4769Z"
            stroke="${color2}"
          />
        </svg>
      `;
    case SvgIcon.Department:
      return html`
        <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M9.625 3.5H14V11.375H0V3.5H4.375V1.75H9.625V3.5ZM5.25 2.625V3.5H8.75V2.625H5.25ZM13.125 4.375H0.875V6.125H3.5V5.25H4.375V6.125H9.625V5.25H10.5V6.125H13.125V4.375ZM0.875 10.5H13.125V7H10.5V7.875H9.625V7H4.375V7.875H3.5V7H0.875V10.5Z"
            fill="${color2}"
          />
        </svg>
      `;
    case SvgIcon.Email:
      return html`
        <svg width="14" height="10" viewBox="0 0 14 10" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M0.5 0.772727C0.5 0.622104 0.622104 0.5 0.772727 0.5H13.2273C13.3779 0.5 13.5 0.622104 13.5 0.772727V9.22727C13.5 9.3779 13.3779 9.5 13.2273 9.5H0.772727C0.622104 9.5 0.5 9.3779 0.5 9.22727V0.772727Z"
            stroke="${color2}"
          />
          <path d="M13.5 0.5L7.18923 4.70314C6.92113 4.8817 6.57039 4.87522 6.30907 4.68687L0.5 0.5" stroke="#929292" />
        </svg>
      `;
    case SvgIcon.OfficeLocation:
      return html`
        <svg width="14" height="17" viewBox="0 0 14 17" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M6.78489 16.3832L6.78263 16.3859C6.75278 16.4216 6.71543 16.4503 6.67324 16.4701L6.88498 16.923L6.67324 16.4701C6.63105 16.4898 6.58504 16.5 6.53846 16.5C6.49188 16.5 6.44588 16.4898 6.40368 16.4701C6.36149 16.4503 6.32415 16.4216 6.2943 16.3859L6.29202 16.3832C5.47882 15.4241 4.01597 13.6289 2.75914 11.7172C2.13055 10.7611 1.56021 9.78597 1.14862 8.87887C0.732553 7.96189 0.5 7.15987 0.5 6.53687C0.5 3.20251 3.20343 0.5 6.53846 0.5C9.87349 0.5 12.5769 3.20251 12.5769 6.53687C12.5769 7.16011 12.3444 7.96225 11.9283 8.87925C11.5167 9.78639 10.9464 10.7615 10.3178 11.7175C9.06097 13.6291 7.59812 15.424 6.78489 16.3832Z"
            stroke="${color2}"
          />
          <path
            d="M4.40039 6.53921C4.40039 5.37092 5.34748 4.42383 6.51577 4.42383C7.68407 4.42383 8.63116 5.37092 8.63116 6.53921C8.63116 7.70751 7.68407 8.6546 6.51577 8.6546C5.34748 8.6546 4.40039 7.70751 4.40039 6.53921Z"
            stroke="${color2}"
          />
        </svg>
      `;
    case SvgIcon.Person:
      return html`
        <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M8.91699 4C8.91699 5.65685 7.57385 7 5.91699 7C4.26014 7 2.91699 5.65685 2.91699 4C2.91699 2.34315 4.26014 1 5.91699 1C7.57385 1 8.91699 2.34315 8.91699 4ZM8.04431 7.38803C9.16935 6.68014 9.91699 5.42738 9.91699 4C9.91699 1.79086 8.12613 0 5.91699 0C3.70785 0 1.91699 1.79086 1.91699 4C1.91699 5.42739 2.66465 6.68016 3.78972 7.38805C1.82681 8.13254 0.356122 9.8773 0 12H1.01706C1.48033 9.71776 3.49808 8 5.91704 8C8.336 8 10.3538 9.71776 10.817 12H11.8341C11.478 9.87728 10.0072 8.1325 8.04431 7.38803Z"
            fill="${color2}"
          />
        </svg>
      `;
    case SvgIcon.Messages:
      return html`
        <svg xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M4 3.5C4 3.22386 4.22386 3 4.5 3H16C17.1046 3 18 3.89543 18 5V12.5C18 12.7761 17.7761 13 17.5 13C17.2239 13 17 12.7761 17 12.5V5C17 4.44772 16.5523 4 16 4H4.5C4.22386 4 4 3.77614 4 3.5ZM4.04886 6H13.8473L9.04316 9.19968C8.86969 9.31522 8.64273 9.31103 8.47364 9.18916L4.04886 6ZM3 14V6.47671L7.88894 10.0004C8.39621 10.366 9.07706 10.3786 9.59749 10.032L15 6.43376V14H3ZM3 5C2.44772 5 2 5.44772 2 6V14C2 14.5523 2.44772 15 3 15H15C15.5523 15 16 14.5523 16 14V6C16 5.44772 15.5523 5 15 5H3Z"
          />
        </svg>
      `;
    case SvgIcon.Organization:
      return html`
        <svg xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M13 4H8V7H13V4ZM8 3C7.44772 3 7 3.44772 7 4V7C7 7.55228 7.44772 8 8 8H10V9H7.5C6.67157 9 6 9.67157 6 10.5V11H4C3.44772 11 3 11.4477 3 12V15C3 15.5523 3.44772 16 4 16H9C9.55228 16 10 15.5523 10 15V12C10 11.4477 9.55228 11 9 11H7V10.5C7 10.2239 7.22386 10 7.5 10H13.5C13.7761 10 14 10.2239 14 10.5V11H12C11.4477 11 11 11.4477 11 12V15C11 15.5523 11.4477 16 12 16H17C17.5523 16 18 15.5523 18 15V12C18 11.4477 17.5523 11 17 11H15V10.5C15 9.67157 14.3284 9 13.5 9H11V8H13C13.5523 8 14 7.55228 14 7V4C14 3.44772 13.5523 3 13 3H8ZM9 12H4L4 15H9V12ZM12 12H17V15H12V12Z"
          />
        </svg>
      `;
    case SvgIcon.ExpandRight:
      return html`
        <svg width="8" height="13" viewBox="0 0 8 13" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M1 12L6.5 6.5L1 1" stroke="#B8B8B8" stroke-width="2" />
        </svg>
      `;
    case SvgIcon.Profile:
      return html`
        <svg xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M13 8C13 9.65685 11.6569 11 10 11C8.34315 11 7 9.65685 7 8C7 6.34315 8.34315 5 10 5C11.6569 5 13 6.34315 13 8ZM12.1273 11.388C13.2524 10.6801 14 9.42738 14 8C14 5.79086 12.2091 4 10 4C7.79086 4 6 5.79086 6 8C6 9.42739 6.74766 10.6802 7.87272 11.3881C5.90981 12.1325 4.43913 13.8773 4.08301 16H5.10007C5.56334 13.7178 7.58109 12 10 12C12.419 12 14.4368 13.7178 14.9 16H15.9171C15.561 13.8773 14.0903 12.1325 12.1273 11.388Z"
          />
        </svg>
      `;
    case SvgIcon.Profile:
      return html`
        <svg width="12" height="14" viewBox="0 0 12 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            opacity="0.5"
            d="M5.125 10.0625C5.125 10.2448 5.15918 10.4157 5.22754 10.5752C5.2959 10.7347 5.38932 10.8737 5.50781 10.9922C5.6263 11.1107 5.7653 11.2041 5.9248 11.2725C6.08431 11.3408 6.25521 11.375 6.4375 11.375H9.0625C9.35872 11.375 9.63672 11.4297 9.89648 11.5391C10.1608 11.6484 10.3978 11.8079 10.6074 12.0176C10.8171 12.2272 10.9766 12.4642 11.0859 12.7285C11.1953 12.9883 11.25 13.2663 11.25 13.5625C11.25 13.681 11.2067 13.7835 11.1201 13.8701C11.0335 13.9567 10.931 14 10.8125 14C10.694 14 10.5915 13.9567 10.5049 13.8701C10.4183 13.7835 10.375 13.681 10.375 13.5625C10.375 13.3802 10.3408 13.2093 10.2725 13.0498C10.2041 12.8903 10.1107 12.7513 9.99219 12.6328C9.8737 12.5143 9.7347 12.4209 9.5752 12.3525C9.41569 12.2842 9.24479 12.25 9.0625 12.25H6.4375C6.14128 12.25 5.861 12.1953 5.59668 12.0859C5.33691 11.9766 5.10221 11.8171 4.89258 11.6074C4.68294 11.3978 4.52344 11.1631 4.41406 10.9033C4.30469 10.639 4.25 10.3587 4.25 10.0625V9.46777C3.7168 9.21712 3.23372 8.89811 2.80078 8.51074C2.36784 8.12337 1.9987 7.69043 1.69336 7.21191C1.39258 6.72884 1.16016 6.21159 0.996094 5.66016C0.832031 5.10417 0.75 4.52995 0.75 3.9375C0.75 3.39518 0.852539 2.88477 1.05762 2.40625C1.26725 1.92773 1.5498 1.51074 1.90527 1.15527C2.26074 0.799805 2.67773 0.519531 3.15625 0.314453C3.63477 0.104818 4.14518 0 4.6875 0C5.22982 0 5.74023 0.104818 6.21875 0.314453C6.69727 0.519531 7.11426 0.799805 7.46973 1.15527C7.8252 1.51074 8.10547 1.92773 8.31055 2.40625C8.52018 2.88477 8.625 3.39518 8.625 3.9375C8.625 4.52995 8.54297 5.10417 8.37891 5.66016C8.21484 6.21615 7.98014 6.7334 7.6748 7.21191C7.37402 7.69043 7.00716 8.12337 6.57422 8.51074C6.14583 8.89811 5.66276 9.21712 5.125 9.46777V10.0625ZM1.625 3.9375C1.625 4.45247 1.69564 4.9515 1.83691 5.43457C1.98275 5.91309 2.18783 6.3597 2.45215 6.77441C2.72103 7.18913 3.04232 7.56283 3.41602 7.89551C3.79427 8.22363 4.2181 8.49479 4.6875 8.70898C5.1569 8.49479 5.57845 8.22363 5.95215 7.89551C6.3304 7.56283 6.65169 7.18913 6.91602 6.77441C7.1849 6.3597 7.38997 5.91309 7.53125 5.43457C7.67708 4.9515 7.75 4.45247 7.75 3.9375C7.75 3.51367 7.66797 3.11719 7.50391 2.74805C7.3444 2.37435 7.12565 2.05078 6.84766 1.77734C6.57422 1.49935 6.25065 1.2806 5.87695 1.12109C5.50781 0.957031 5.11133 0.875 4.6875 0.875C4.26367 0.875 3.86491 0.957031 3.49121 1.12109C3.12207 1.2806 2.7985 1.49935 2.52051 1.77734C2.24707 2.05078 2.02832 2.37435 1.86426 2.74805C1.70475 3.11719 1.625 3.51367 1.625 3.9375ZM6.4375 4.375C6.31901 4.375 6.21647 4.33171 6.12988 4.24512C6.04329 4.15853 6 4.05599 6 3.9375C6 3.75521 5.96582 3.58431 5.89746 3.4248C5.8291 3.2653 5.73568 3.1263 5.61719 3.00781C5.4987 2.88932 5.3597 2.7959 5.2002 2.72754C5.04069 2.65918 4.86979 2.625 4.6875 2.625C4.56901 2.625 4.46647 2.58171 4.37988 2.49512C4.29329 2.40853 4.25 2.30599 4.25 2.1875C4.25 2.06901 4.29329 1.96647 4.37988 1.87988C4.46647 1.79329 4.56901 1.75 4.6875 1.75C4.98828 1.75 5.27083 1.80697 5.53516 1.9209C5.80404 2.03483 6.03646 2.19206 6.23242 2.39258C6.43294 2.58854 6.59017 2.82096 6.7041 3.08984C6.81803 3.35417 6.875 3.63672 6.875 3.9375C6.875 4.05599 6.83171 4.15853 6.74512 4.24512C6.65853 4.33171 6.55599 4.375 6.4375 4.375Z"
            fill="black"
          />
        </svg>
      `;
    case SvgIcon.File:
      return html`
        <svg width="20" height="26" viewBox="0 0 20 26" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            opacity="0.64"
            d="M19.613 6.993L13.018 0.421C12.7473 0.15221 12.3815 0.000947397 12 0H1.4C0.628 0 0 0.615 0 1.372V24.642C0 25.391 0.622 26 1.386 26H18.6C19.372 26 20 25.385 20 24.628V7.923C20 7.577 19.86 7.237 19.613 6.993Z"
            fill="#605E5C"
          />
          <path
            d="M19 24.628C19 24.83 18.816 25 18.6 25H1.386C1.173 25 1 24.84 1 24.642V1.372C1 1.17 1.184 1 1.4 1H12V6.6C12 7.372 12.628 8 13.4 8H19V24.628Z"
            fill="white"
          />
          <path d="M18.204 6.99994L13 1.81494V6.59994C13 6.81994 13.18 6.99994 13.4 6.99994H18.204Z" fill="white" />
        </svg>
      `;
    case SvgIcon.Files:
      return html`
        <svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M17 8C17.1354 8 17.263 8.02604 17.3828 8.07812C17.5078 8.13021 17.6146 8.20312 17.7031 8.29688C17.7969 8.38542 17.8698 8.48958 17.9219 8.60938C17.974 8.72917 18 8.85677 18 8.99219C18 9.14844 17.9635 9.29948 17.8906 9.44531L14.6172 16H2V5C2 4.85938 2.02604 4.72917 2.07812 4.60938C2.13021 4.48958 2.20052 4.38542 2.28906 4.29688C2.38281 4.20312 2.48958 4.13021 2.60938 4.07812C2.72917 4.02604 2.85938 4 3 4H5.75C5.98438 4 6.1849 4.02604 6.35156 4.07812C6.52344 4.125 6.67448 4.1849 6.80469 4.25781C6.9401 4.33073 7.0599 4.41146 7.16406 4.5C7.26823 4.58854 7.3724 4.66927 7.47656 4.74219C7.58594 4.8151 7.70052 4.8776 7.82031 4.92969C7.94531 4.97656 8.08854 5 8.25 5H14C14.1406 5 14.2708 5.02604 14.3906 5.07812C14.5104 5.13021 14.6146 5.20312 14.7031 5.29688C14.7969 5.38542 14.8698 5.48958 14.9219 5.60938C14.974 5.72917 15 5.85938 15 6V8H17ZM3 13.3828L5.41406 8.55469C5.5026 8.38281 5.625 8.2474 5.78125 8.14844C5.94271 8.04948 6.11979 8 6.3125 8H14V6H8.25C8.01562 6 7.8125 5.97656 7.64062 5.92969C7.47396 5.8776 7.32292 5.8151 7.1875 5.74219C7.05729 5.66927 6.9401 5.58854 6.83594 5.5C6.73177 5.41146 6.625 5.33073 6.51562 5.25781C6.41146 5.1849 6.29688 5.125 6.17188 5.07812C6.05208 5.02604 5.91146 5 5.75 5H3V13.3828ZM17 9H6.3125L3.3125 15H14L17 9Z"
          />
        </svg>
      `;
    case SvgIcon.Back:
      return html`
        <svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M16 8.5H1.95312L8.10156 14.6484L7.39844 15.3516L0.046875 8L7.39844 0.648438L8.10156 1.35156L1.95312 7.5H16V8.5Z"
          />
        </svg>
      `;
    case SvgIcon.Upload:
      return html`
    <svg class="upload-icon" width="10" height="12"  xmlns="http://www.w3.org/2000/svg">
      <path
        d="m9.58733,0l0,0.74599l-9.22101,0l0,-0.74599l9.22101,0zm0.3602,5.70569l-0.72039,0.52453l-3.73803,-2.7392l0,8.44489l-1.02456,0l0,-8.44489l-3.73803,2.7392l-0.72039,-0.52453l4.9707,-3.64838l4.9707,3.64838z"
      />
    </svg>
  `;
    case SvgIcon.FileCloud:
      return html`
    <svg width="16" height="16"  xmlns="http://www.w3.org/2000/svg">
      <path
        d="m8,0c2.8166,0 4.4145,1.9233 4.6469,4.246l0.071,0c1.8127,0 3.2821,1.5119 3.2821,3.377c0,0.0953 -0.0038,0.1897 -0.0114,0.283c-0.322,-0.4017 -0.6967,-0.7591 -1.1138,-1.062c-0.3104,-0.9329 -1.1627,-1.598 -2.1568,-1.598l-0.0711,0c-0.5137,0 -0.9439,-0.3893 -0.9951,-0.9005c-0.2021,-2.0206 -1.5433,-3.3455 -3.6518,-3.3455c-2.1139,0 -3.4489,1.3159 -3.6518,3.3455c-0.0511,0.5112 -0.4813,0.9005 -0.9951,0.9005l-0.071,0c-1.2539,0 -2.2821,1.0579 -2.2821,2.377c0,1.3191 1.0282,2.377 2.2821,2.377l2.6655,0c-0.087,0.323 -0.1466,0.6572 -0.1762,1l-2.4893,0c-1.8127,0 -3.2821,-1.5119 -3.2821,-3.377c0,-1.8029 1.3731,-3.2758 3.102,-3.372l0.2511,-0.005c0.2338,-2.338 1.8303,-4.246 4.6469,-4.246zm3.5,16c2.4853,0 4.5,-2.0147 4.5,-4.5c0,-2.4853 -2.0147,-4.5 -4.5,-4.5c-2.4853,0 -4.5,2.0147 -4.5,4.5c0,2.4853 2.0147,4.5 4.5,4.5zm0,-7c0.2761,0 0.5,0.2239 0.5,0.5l0,1.5l1.5,0c0.2761,0 0.5,0.2239 0.5,0.5c0,0.2761 -0.2239,0.5 -0.5,0.5l-1.5,0l0,1.5c0,0.2761 -0.2239,0.5 -0.5,0.5c-0.2761,0 -0.5,-0.2239 -0.5,-0.5l0,-1.5l-1.5,0c-0.2761,0 -0.5,-0.2239 -0.5,-0.5c0,-0.2761 0.2239,-0.5 0.5,-0.5l1.5,0l0,-1.5c0,-0.2761 0.2239,-0.5 0.5,-0.5z" fill="#0078D4"
      />
    </svg>
  `;
    case SvgIcon.DragFile:
      return html`
    <svg width="13" height="16" xmlns="http://www.w3.org/2000/svg">
      <path
        d="m0,1.00189c0,-0.8451 0.983,-1.3091 1.636,-0.772l11.006,9.0622c0.724,0.5964 0.302,1.772 -0.636,1.772l-5.592,0c-0.435,0 -0.849,0.1892 -1.134,0.5185l-3.524,4.0725c-0.606,0.7003 -1.756,0.2717 -1.756,-0.6544l0,-13.9988zm12.006,9.0622l-11.006,-9.0622l0,13.9988l3.524,-4.0724c0.475,-0.5488 1.164,-0.8642 1.89,-0.8642l5.592,0z"
      />
    </svg>
  `;
    case SvgIcon.Cancel:
      return html`
    <svg class="cancel-icon" width="10" height="10" xmlns="http://www.w3.org/2000/svg">
      <path
        d="m5.52795,4.92946l4.37418,4.36141l-0.57055,0.56806l-4.38052,-4.35509l-4.38052,4.35509l-0.57055,-0.56806l4.37418,-4.36141l-4.37418,-4.36141l0.57055,-0.56806l4.38052,4.35509l4.38052,-4.35509l0.57055,0.56806l-4.37418,4.36141z"
      />
    </svg>
  `;
    case SvgIcon.Success:
      return html`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path fill="#009E00" d="m6.322,12c3.492,0 6.323,-2.6863 6.323,-6c0,-3.3137 -2.831,-6 -6.323,-6c-3.491,0 -6.322,2.6863 -6.322,6c0,3.3137 2.831,6 6.322,6z"/>
      <path fill="white" d="m9.629,3.7509c-0.131,-0.125 -0.31,-0.1952 -0.496,-0.1952c-0.187,0 -0.365,0.0702 -0.497,0.1952l-3.267,3.1l-1.393,-1.3222c-0.177,-0.1695 -0.436,-0.2361 -0.68,-0.1746c-0.243,0.0615 -0.433,0.2418 -0.497,0.4725c-0.065,0.2307 0.005,0.4767 0.184,0.6449l1.807,1.7154c0.019,0.0331 0.041,0.0646 0.066,0.094c0.289,0.2562 0.738,0.2562 1.027,0c0.024,-0.0294 0.047,-0.0609 0.065,-0.0941l3.681,-3.4931c0.275,-0.2603 0.275,-0.6824 0,-0.9428z"/>
    </svg>
  `;
    case SvgIcon.Fail:
      return html`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path fill="#EF355D" d="m6,12c3.314,0 6,-2.6863 6,-6c0,-3.3137 -2.686,-6 -6,-6c-3.314,0 -6,2.6863 -6,6c0,3.3137 2.686,6 6,6z"/>
      <path fill="white" d="m6.943,6.0004l1.544,-1.5444c0.169,-0.1683 0.236,-0.4142 0.174,-0.6448c-0.061,-0.2306 -0.241,-0.4107 -0.472,-0.4722c-0.231,-0.0616 -0.477,0.0049 -0.645,0.1742l-1.544,1.5443l-1.545,-1.5443c-0.26,-0.259 -0.681,-0.2583 -0.941,0.0014c-0.26,0.2598 -0.26,0.6808 -0.001,0.9414l1.544,1.5444l-1.544,1.5444c-0.259,0.2606 -0.259,0.6815 0.001,0.9413c0.26,0.2598 0.681,0.2604 0.941,0.0015l1.545,-1.5444l1.544,1.5444c0.261,0.2589 0.682,0.2583 0.942,-0.0015c0.259,-0.2598 0.26,-0.6807 0.001,-0.9413l-1.544,-1.5444z" />
    </svg>
  `;
  }
}

// node_modules/@microsoft/mgt-components/dist/es6/utils/WindowSegmentHelpers.js
function isWindowSegmentAware() {
  return window.getWindowSegments !== void 0;
}
function getSegmentAwareWindow() {
  return isWindowSegmentAware() ? window : null;
}

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-flyout/mgt-flyout-css.js
var styles2 = [
  css`
.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.root .scout-top{position:fixed;top:0;left:0}.root .scout-bottom{position:fixed;bottom:0;right:0}.root .flyout{display:none;position:fixed;z-index:9999999;opacity:0;box-shadow:var(--box-shadow,0 3.2px 7.2px 0 rgba(0,0,0,.132));border-radius:8px}.root .flyout.small{overflow-y:auto;overflow-x:hidden}.root.visible .flyout{display:inline-block;animation-name:fadeIn;animation-duration:.3s;animation-timing-function:cubic-bezier(.1,.9,.2,1);animation-fill-mode:both;transition:top .3s ease,bottom .3s ease,left .3s ease}.root.visible .flyout.small{overflow-y:auto;overflow-x:hidden}@keyframes fadeIn{from{opacity:0;margin-top:-10px;margin-bottom:-10px}to{opacity:1;margin-top:0;margin-bottom:0}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-flyout/mgt-flyout.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtFlyout = class MgtFlyout2 extends MgtBaseComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles2;
  }
  /**
   * Gets or sets whether the flyout is visible
   *
   * @type {string}
   * @memberof MgtFlyout
   */
  get isOpen() {
    return this._isOpen;
  }
  set isOpen(value) {
    const oldValue = this._isOpen;
    if (oldValue === value) {
      return;
    }
    this._isOpen = value;
    window.requestAnimationFrame(() => {
      this.setupWindowEvents(this.isOpen);
      const flyout = this._flyout;
      if (!this.isOpen && flyout) {
        flyout.style.width = null;
        flyout.style.setProperty("--mgt-flyout-set-width", null);
        flyout.style.setProperty("--mgt-flyout-set-height", null);
        flyout.style.maxHeight = null;
        flyout.style.top = null;
        flyout.style.left = null;
        flyout.style.bottom = null;
      }
    });
    this.requestUpdate("isOpen", oldValue);
    this.dispatchEvent(new Event(value ? "opened" : "closed"));
  }
  get _flyout() {
    return this.renderRoot.querySelector(".flyout");
  }
  get _anchor() {
    return this.renderRoot.querySelector(".anchor");
  }
  get _topScout() {
    return this.renderRoot.querySelector(".scout-top");
  }
  get _bottomScout() {
    return this.renderRoot.querySelector(".scout-bottom");
  }
  constructor() {
    super();
    this._edgePadding = 24;
    this._renderedOnce = false;
    this.avoidHidingAnchor = true;
    this.handleWindowEvent = this.handleWindowEvent.bind(this);
    this.handleResize = this.handleResize.bind(this);
    this.handleKeyUp = this.handleKeyUp.bind(this);
    this.addEventListener("expanded", () => {
      window.requestAnimationFrame(() => {
        this.updateFlyout();
      });
    });
  }
  /**
   * Show the flyout.
   */
  open() {
    this.isOpen = true;
  }
  /**
   * Close the flyout.
   */
  close() {
    this.isOpen = false;
  }
  /**
   * Invoked each time the custom element is disconnected from the document's DOM
   *
   * @memberof MgtFlyout
   */
  disconnectedCallback() {
    this.setupWindowEvents(false);
    super.disconnectedCallback();
  }
  /**
   * Invoked whenever the element is updated. Implement to perform
   * post-updating tasks via DOM APIs, for example, focusing an element.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param changedProperties Map of changed properties with old values
   */
  updated(changedProps) {
    super.updated(changedProps);
    window.requestAnimationFrame(() => {
      this.updateFlyout();
    });
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    const flyoutClasses = {
      dir: this.direction,
      root: true,
      visible: this.isOpen
    };
    const anchorTemplate = this.renderAnchor();
    let flyoutTemplate = null;
    this._windowHeight = window.innerHeight && document.documentElement.clientHeight ? Math.min(window.innerHeight, document.documentElement.clientHeight) : window.innerHeight || document.documentElement.clientHeight;
    if (this._windowHeight < 250) {
      this._smallView = true;
    }
    if (this.isOpen || this._renderedOnce) {
      this._renderedOnce = true;
      flyoutTemplate = html`
        <div class=${this._smallView ? "flyout small" : "flyout"} @wheel=${this.handleFlyoutWheel}>
          ${this.renderFlyout()}
        </div>
      `;
    }
    return html`
      <div class=${classMap(flyoutClasses)}>
        <div class="anchor">
          ${anchorTemplate}
        </div>
        <div class="scout-top"></div>
        <div class="scout-bottom"></div>
        ${flyoutTemplate}
      </div>
    `;
  }
  /**
   * Renders the anchor content.
   *
   * @protected
   * @returns
   * @memberof MgtFlyout
   */
  renderAnchor() {
    return html`
      <slot></slot>
    `;
  }
  /**
   * Renders the flyout.
   */
  renderFlyout() {
    return html`
      <slot name="flyout"></slot>
    `;
  }
  updateFlyout() {
    if (!this.isOpen) {
      return;
    }
    const anchor = this._anchor;
    const flyout = this._flyout;
    if (flyout && anchor) {
      const windowWidth = window.innerWidth && document.documentElement.clientWidth ? Math.min(window.innerWidth, document.documentElement.clientWidth) : window.innerWidth || document.documentElement.clientWidth;
      this._windowHeight = window.innerHeight && document.documentElement.clientHeight ? Math.min(window.innerHeight, document.documentElement.clientHeight) : window.innerHeight || document.documentElement.clientHeight;
      let left = 0;
      let bottom;
      let top = 0;
      let height;
      let width;
      const flyoutRect = flyout.getBoundingClientRect();
      const anchorRect = anchor.getBoundingClientRect();
      const topScoutRect = this._topScout.getBoundingClientRect();
      const bottomScoutRect = this._bottomScout.getBoundingClientRect();
      const windowRect = {
        height: this._windowHeight,
        left: 0,
        top: 0,
        width: windowWidth
      };
      if (isWindowSegmentAware()) {
        const segmentAwareWindow = getSegmentAwareWindow();
        const screenSegments = segmentAwareWindow.getWindowSegments();
        let anchorSegment;
        const anchorCenterX = anchorRect.left + anchorRect.width / 2;
        const anchorCenterY = anchorRect.top + anchorRect.height / 2;
        for (const segment of screenSegments) {
          if (anchorCenterX >= segment.left && anchorCenterY >= segment.top) {
            anchorSegment = segment;
            break;
          }
        }
        if (anchorSegment) {
          windowRect.left = anchorSegment.left;
          windowRect.top = anchorSegment.top;
          windowRect.width = anchorSegment.width;
          windowRect.height = anchorSegment.height;
        }
      }
      if (flyoutRect.width + 2 * this._edgePadding > windowRect.width) {
        if (flyoutRect.width > windowRect.width) {
          width = windowRect.width;
          left = 0;
        } else {
          left = (windowRect.width - flyoutRect.width) / 2;
        }
      } else if (anchorRect.left + flyoutRect.width + this._edgePadding > windowRect.width) {
        left = anchorRect.left - (anchorRect.left + flyoutRect.width + this._edgePadding - windowRect.width);
      } else if (anchorRect.left < this._edgePadding) {
        left = this._edgePadding;
      } else {
        left = anchorRect.left;
      }
      const anchorRectBottomToWindowBottom = windowRect.height - (anchorRect.top + anchorRect.height);
      const anchorRectTopToWindowTop = anchorRect.top;
      if (this.avoidHidingAnchor) {
        if (anchorRectBottomToWindowBottom <= flyoutRect.height) {
          if (anchorRectTopToWindowTop < flyoutRect.height) {
            if (anchorRectTopToWindowTop > anchorRectBottomToWindowBottom) {
              bottom = windowRect.height - anchorRect.top;
              height = anchorRectTopToWindowTop;
            } else {
              top = anchorRect.bottom;
              height = anchorRectBottomToWindowBottom;
            }
          } else {
            bottom = windowRect.height - anchorRect.top;
            height = anchorRectTopToWindowTop;
          }
        } else {
          top = anchorRect.bottom;
          height = anchorRectBottomToWindowBottom;
        }
      } else {
        if (flyoutRect.height + 2 * this._edgePadding > windowRect.height) {
          if (flyoutRect.height >= windowRect.height) {
            height = windowRect.height;
            top = 0;
          } else {
            top = (windowRect.height - flyoutRect.height) / 2;
          }
        } else {
          if (anchorRect.top + anchorRect.height + flyoutRect.height + this._edgePadding > windowRect.height) {
            top = windowRect.height - flyoutRect.height - this._edgePadding;
          } else {
            top = Math.max(anchorRect.top + anchorRect.height, this._edgePadding);
          }
        }
      }
      if (topScoutRect.top !== 0 || topScoutRect.left !== 0) {
        left -= topScoutRect.left;
        if (typeof bottom !== "undefined") {
          bottom += bottomScoutRect.top - this._windowHeight;
        } else {
          top -= topScoutRect.top;
        }
      }
      if (this.direction === "rtl") {
        if (left > 100 && this.offsetLeft > 100) {
          flyout.style.left = `${windowRect.width - left + flyoutRect.left - flyoutRect.width - 30}px`;
        }
      } else {
        flyout.style.left = `${left + windowRect.left}px`;
      }
      if (typeof bottom !== "undefined") {
        flyout.style.top = "unset";
        flyout.style.bottom = `${bottom}px`;
      } else {
        flyout.style.bottom = "unset";
        flyout.style.top = `${top + windowRect.top}px`;
      }
      if (width) {
        flyout.style.width = `${width}px`;
        flyout.style.setProperty("--mgt-flyout-set-width", `${width}px`);
        window.requestAnimationFrame(() => this.updateFlyout());
      }
      if (height) {
        flyout.style.maxHeight = `${height}px`;
        flyout.style.setProperty("--mgt-flyout-set-height", `${height}px`);
      } else {
        flyout.style.maxHeight = null;
        flyout.style.setProperty("--mgt-flyout-set-height", `unset`);
      }
    }
  }
  setupWindowEvents(isOpen) {
    if (isOpen && this.isLightDismiss) {
      window.addEventListener("wheel", this.handleWindowEvent);
      window.addEventListener("pointerdown", this.handleWindowEvent);
      window.addEventListener("resize", this.handleResize);
      window.addEventListener("keyup", this.handleKeyUp);
    } else {
      window.removeEventListener("wheel", this.handleWindowEvent);
      window.removeEventListener("pointerdown", this.handleWindowEvent);
      window.removeEventListener("resize", this.handleResize);
      window.removeEventListener("keyup", this.handleKeyUp);
    }
  }
  handleWindowEvent(e) {
    const flyout = this._flyout;
    if (flyout) {
      if (!e.composedPath) {
        let currentElem = e.target;
        while (currentElem) {
          currentElem = currentElem.parentElement;
          if (currentElem === flyout || e.type === "pointerdown" && currentElem === this) {
            return;
          }
        }
      } else {
        const path = e.composedPath();
        if (path.includes(flyout) || e.type === "pointerdown" && path.includes(this)) {
          return;
        }
      }
    }
    this.close();
  }
  handleResize(e) {
    this.close();
  }
  handleKeyUp(e) {
    if (e.key === "Escape") {
      this.close();
    }
  }
  handleFlyoutWheel(e) {
    e.preventDefault();
  }
};
__decorate([
  property({
    attribute: "light-dismiss",
    type: Boolean
  }),
  __metadata("design:type", Boolean)
], MgtFlyout.prototype, "isLightDismiss", void 0);
__decorate([
  property({
    attribute: null,
    type: Boolean
  }),
  __metadata("design:type", Boolean)
], MgtFlyout.prototype, "avoidHidingAnchor", void 0);
__decorate([
  property({
    attribute: "isOpen",
    type: Boolean
  }),
  __metadata("design:type", Boolean),
  __metadata("design:paramtypes", [Boolean])
], MgtFlyout.prototype, "isOpen", null);
MgtFlyout = __decorate([
  customElement("mgt-flyout"),
  __metadata("design:paramtypes", [])
], MgtFlyout);

// node_modules/@microsoft/mgt-components/dist/es6/components/PersonCardInteraction.js
var PersonCardInteraction;
(function(PersonCardInteraction2) {
  PersonCardInteraction2[PersonCardInteraction2["none"] = 0] = "none";
  PersonCardInteraction2[PersonCardInteraction2["hover"] = 1] = "hover";
  PersonCardInteraction2[PersonCardInteraction2["click"] = 2] = "click";
})(PersonCardInteraction || (PersonCardInteraction = {}));

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person/mgt-person-css.js
var styles3 = [
  css`
@charset "UTF-8";:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host([hidden]){display:none}:host{display:inline-block;font-family:var(--font-family,var(--default-font-family));vertical-align:top}:host .root{display:block;margin:-11px -13px;padding:11px 13px}:host .root:focus-visible{outline:0}:host svg,mgt-person svg{width:var(--avatar-size-s,var(--avatar-size,24px));height:var(--avatar-size-s,var(--avatar-size,24px))}:host .person-root,mgt-person .person-root{position:relative;display:flex;align-items:center;color:var(--color,var(--color-sub1,#323130))}:host .person-root.clickable,mgt-person .person-root.clickable{cursor:pointer}:host .person-root.small:focus-visible,mgt-person .person-root.small:focus-visible{outline:auto}:host .person-root .user-avatar,mgt-person .person-root .user-avatar{position:relative;width:var(--avatar-size,var(--avatar-size-s,48px));height:var(--avatar-size,var(--avatar-size-s,48px));display:flex;justify-content:center;align-items:center;flex-shrink:0;cursor:var(--avatar-cursor,inherit)}:host .person-root .user-avatar .user-presence,mgt-person .person-root .user-avatar .user-presence{margin:0;position:absolute;left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .72 - 4px);top:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .72 - 4px);width:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .28);height:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .28);border:2px solid var(--presence-background-color,var(--background-color,#fff));border-radius:50%}:host .person-root .user-avatar .user-presence .presence-oof-offline-wrapper,mgt-person .person-root .user-avatar .user-presence .presence-oof-offline-wrapper{background-color:var(--presence-background-color,var(--background-color,#fff));border-color:#b4009e}:host .person-root .user-avatar .user-presence .presence-oof-offline-wrapper .presence-oof-offline svg,mgt-person .person-root .user-avatar .user-presence .presence-oof-offline-wrapper .presence-oof-offline svg{color:#b4009e;width:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .14);margin-left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}:host .person-root .user-avatar .user-presence .presence-basic,mgt-person .person-root .user-avatar .user-presence .presence-basic{width:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .28 - 4px);height:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .28 - 4px);border-style:solid;border-width:2px;border-radius:50%;margin:0;font-size:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .14);vertical-align:top;display:flex;align-items:center}:host .person-root .user-avatar .user-presence .presence-basic.presence-offline,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-offline{background-color:var(--presence-background-color,var(--background-color,#fff));border-color:#8a8886}:host .person-root .user-avatar .user-presence .presence-basic.presence-available,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-available{background-color:#6bb700;border-color:#6bb700}:host .person-root .user-avatar .user-presence .presence-basic.presence-oof-available,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-oof-available{background-color:var(--presence-background-color,var(--background-color,#fff));border-color:#6bb700}:host .person-root .user-avatar .user-presence .presence-basic.presence-away,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-away{background-color:#fa4;border-color:#fa4}:host .person-root .user-avatar .user-presence .presence-basic.presence-dnd,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-dnd{background-color:#c50f1f;border-color:#c50f1f}:host .person-root .user-avatar .user-presence .presence-basic.presence-oof-dnd,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-oof-dnd{background-color:var(--presence-background-color,var(--background-color,#fff));border-color:#c50f1f}:host .person-root .user-avatar .user-presence .presence-basic.presence-busy,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-busy{background-color:#c50f1f;border-color:#c50f1f}:host .person-root .user-avatar .user-presence .presence-basic.presence-oof-busy,mgt-person .person-root .user-avatar .user-presence .presence-basic.presence-oof-busy{background-color:var(--presence-background-color,var(--background-color,#fff));border-color:#c50f1f}:host .person-root .user-avatar .user-presence .presence-offline::before,mgt-person .person-root .user-avatar .user-presence .presence-offline::before{content:"";color:#8a8886;font-weight:700;margin-left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}:host .person-root .user-avatar .user-presence .presence-available::before,mgt-person .person-root .user-avatar .user-presence .presence-available::before{content:"";color:var(--presence-icon-color,var(--background-color,#fff));margin-left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}:host .person-root .user-avatar .user-presence .presence-oof-available::before,mgt-person .person-root .user-avatar .user-presence .presence-oof-available::before{content:"";color:#6bb700;margin-left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}:host .person-root .user-avatar .user-presence .presence-away::before,mgt-person .person-root .user-avatar .user-presence .presence-away::before{content:"";color:var(--presence-icon-color,var(--background-color,#fff));margin-left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}:host .person-root .user-avatar .user-presence .presence-dnd::before,mgt-person .person-root .user-avatar .user-presence .presence-dnd::before{content:"";color:var(--presence-icon-color,var(--background-color,#fff));margin-left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}:host .person-root .user-avatar .user-presence .presence-oof-dnd::before,mgt-person .person-root .user-avatar .user-presence .presence-oof-dnd::before{content:"";color:#c50f1f;margin-left:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}:host .person-root .user-avatar.initials,mgt-person .person-root .user-avatar.initials{color:var(--initials-color,#fff);border-radius:var(--avatar-border-radius,50%);font-weight:400}:host .person-root .user-avatar.initials .contact-icon,:host .person-root .user-avatar.initials .initials-text,mgt-person .person-root .user-avatar.initials .contact-icon,mgt-person .person-root .user-avatar.initials .initials-text{cursor:var(--avatar-cursor,inherit);margin-top:-1px;font-size:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .4)}:host .person-root .user-avatar.initials .contact-icon,mgt-person .person-root .user-avatar.initials .contact-icon{display:inline}:host .person-root .user-avatar.small,mgt-person .person-root .user-avatar.small{width:var(--avatar-size-s,var(--avatar-size,24px));height:var(--avatar-size-s,var(--avatar-size,24px))}:host .person-root .user-avatar.small .contact-icon,:host .person-root .user-avatar.small .initials-text,mgt-person .person-root .user-avatar.small .contact-icon,mgt-person .person-root .user-avatar.small .initials-text{font-size:calc(var(--avatar-size-s,var(--avatar-size,24px)) * .4)}:host .person-root .user-avatar.small .user-presence,mgt-person .person-root .user-avatar.small .user-presence{left:calc(var(--avatar-size-s,var(--avatar-size,24px)) - 8px);top:calc(var(--avatar-size-s,var(--avatar-size,24px)) - 8px);width:8px;height:8px}:host .person-root .user-avatar.small .user-presence .presence-basic,mgt-person .person-root .user-avatar.small .user-presence .presence-basic{width:4px;height:4px;border-radius:4px;padding:0}:host .person-root .user-avatar.small .user-presence .presence-basic .presence-oof-offline svg,mgt-person .person-root .user-avatar.small .user-presence .presence-basic .presence-oof-offline svg{height:0;width:0}:host .person-root .user-avatar.small .user-presence .presence-available::before,:host .person-root .user-avatar.small .user-presence .presence-away::before,:host .person-root .user-avatar.small .user-presence .presence-dnd::before,:host .person-root .user-avatar.small .user-presence .presence-offline::before,:host .person-root .user-avatar.small .user-presence .presence-oof-available::before,:host .person-root .user-avatar.small .user-presence .presence-oof-away::before,:host .person-root .user-avatar.small .user-presence .presence-oof-dnd::before,:host .person-root .user-avatar.small .user-presence .presence-oof-offline::before,mgt-person .person-root .user-avatar.small .user-presence .presence-available::before,mgt-person .person-root .user-avatar.small .user-presence .presence-away::before,mgt-person .person-root .user-avatar.small .user-presence .presence-dnd::before,mgt-person .person-root .user-avatar.small .user-presence .presence-offline::before,mgt-person .person-root .user-avatar.small .user-presence .presence-oof-available::before,mgt-person .person-root .user-avatar.small .user-presence .presence-oof-away::before,mgt-person .person-root .user-avatar.small .user-presence .presence-oof-dnd::before,mgt-person .person-root .user-avatar.small .user-presence .presence-oof-offline::before{content:''}:host .person-root .user-avatar .img-wrapper,mgt-person .person-root .user-avatar .img-wrapper{height:100%;width:100%;display:flex;overflow:hidden;border:var(--avatar-border,0);border-radius:var(--avatar-border-radius,50%);position:relative;box-sizing:border-box}:host .person-root .user-avatar .img-wrapper img,mgt-person .person-root .user-avatar .img-wrapper img{position:absolute;display:block;top:-100%;right:-100%;bottom:-100%;left:-100%;margin:auto;height:100%;width:100%;object-fit:cover;object-position:top}:host .person-root .user-avatar .img-wrapper img:focus(),mgt-person .person-root .user-avatar .img-wrapper img:focus(){outline:0}:host .person-root .user-avatar.pinkRed10,mgt-person .person-root .user-avatar.pinkRed10{background-color:var(--initials-background-color,#750b1c)}:host .person-root .user-avatar.red20,mgt-person .person-root .user-avatar.red20{background-color:var(--initials-background-color,#a4262c)}:host .person-root .user-avatar.red10,mgt-person .person-root .user-avatar.red10{background-color:var(--initials-background-color,#d13438)}:host .person-root .user-avatar.orange20,mgt-person .person-root .user-avatar.orange20{background-color:var(--initials-background-color,#ca5010)}:host .person-root .user-avatar.orangeYellow20,mgt-person .person-root .user-avatar.orangeYellow20{background-color:var(--initials-background-color,#986f0b)}:host .person-root .user-avatar.green10,mgt-person .person-root .user-avatar.green10{background-color:var(--initials-background-color,#498205)}:host .person-root .user-avatar.green20,mgt-person .person-root .user-avatar.green20{background-color:var(--initials-background-color,#0b6a0b)}:host .person-root .user-avatar.cyan20,mgt-person .person-root .user-avatar.cyan20{background-color:var(--initials-background-color,#038387)}:host .person-root .user-avatar.cyan30,mgt-person .person-root .user-avatar.cyan30{background-color:var(--initials-background-color,#005b70)}:host .person-root .user-avatar.cyanBlue10,mgt-person .person-root .user-avatar.cyanBlue10{background-color:var(--initials-background-color,#0078d4)}:host .person-root .user-avatar.cyanBlue20,mgt-person .person-root .user-avatar.cyanBlue20{background-color:var(--initials-background-color,#004e8c)}:host .person-root .user-avatar.blue10,mgt-person .person-root .user-avatar.blue10{background-color:var(--initials-background-color,#4f6bed)}:host .person-root .user-avatar.blueMagenta30,mgt-person .person-root .user-avatar.blueMagenta30{background-color:var(--initials-background-color,#5c2e91)}:host .person-root .user-avatar.blueMagenta20,mgt-person .person-root .user-avatar.blueMagenta20{background-color:var(--initials-background-color,#8764b8)}:host .person-root .user-avatar.magenta20,mgt-person .person-root .user-avatar.magenta20{background-color:var(--initials-background-color,#881798)}:host .person-root .user-avatar.magenta10,mgt-person .person-root .user-avatar.magenta10{background-color:var(--initials-background-color,#c239b3)}:host .person-root .user-avatar.magentaPink10,mgt-person .person-root .user-avatar.magentaPink10{background-color:var(--initials-background-color,#e3008c)}:host .person-root .user-avatar.orange30,mgt-person .person-root .user-avatar.orange30{background-color:var(--initials-background-color,#8e562e)}:host .person-root .user-avatar.gray30,mgt-person .person-root .user-avatar.gray30{background-color:var(--initials-background-color,#7a7574)}:host .person-root .user-avatar.gray20,mgt-person .person-root .user-avatar.gray20{background-color:var(--initials-background-color,#69797e)}:host .person-root .details,mgt-person .person-root .details{flex-shrink:1;display:flex;flex-direction:column;overflow:hidden;line-height:1.4;margin:var(--details-spacing,0 0 0 12px)}:host .person-root .details.small,mgt-person .person-root .details.small{margin:var(--details-spacing,0 0 0 6px)}:host .person-root .details>div,mgt-person .person-root .details>div{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .person-root .details .line1,mgt-person .person-root .details .line1{font-size:var(--font-size,14px);font-weight:var(--font-weight,600);text-transform:var(text-transform,none)}:host .person-root .details .line2,mgt-person .person-root .details .line2{color:var(--line2-color,var(--color-sub1,#323130));font-size:var(--line2-font-size,var(--email-font-size,12px));font-weight:var(--line2-font-weight,400);text-transform:var(--line2-text-transform,var(text-transform,none))}:host .person-root .details .line3,mgt-person .person-root .details .line3{color:var(--line3-color,var(--color-sub2,#717171));font-size:var(--line3-font-size,var(--email-font-size,12px));font-weight:var(--line3-font-weight,400);text-transform:var(--line3-text-transform,var(text-transform,none))}:host .avatar-icon,mgt-person .avatar-icon{display:flex;align-items:center;justify-content:center;line-height:1;margin:0;font-size:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .5);width:var(--avatar-size,var(--avatar-size-s,48px));height:var(--avatar-size,var(--avatar-size-s,48px));overflow:hidden;border-radius:var(--avatar-border-radius,50%)}:host .avatar-icon.small,mgt-person .avatar-icon.small{font-size:var(--avatar-size-s,var(--avatar-size,24px));width:var(--avatar-size-s,var(--avatar-size,24px));height:var(--avatar-size-s,var(--avatar-size,24px))}[dir=rtl] .root{direction:rtl}[dir=rtl] svg{direction:rtl}[dir=rtl] .person-root .user-avatar{position:relative}[dir=rtl] .person-root .details{margin:var(--details-spacing,0 12px 0 0)}[dir=rtl] .person-root .details.small{margin:var(--details-spacing,0 6px 0 0)}[dir=rtl] .person-root .user-presence .presence-oof-offline svg{margin-right:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}[dir=rtl] .person-root .user-presence .presence-offline::before{margin-right:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}[dir=rtl] .person-root .user-presence .presence-available::before{margin-right:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}[dir=rtl] .person-root .user-presence .presence-oof-available::before{margin-right:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}[dir=rtl] .person-root .user-presence .presence-away::before{margin-right:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}[dir=rtl] .person-root .user-presence .presence-dnd::before{margin-right:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}[dir=rtl] .person-root .user-presence .presence-oof-dnd::before{margin-right:calc(var(--avatar-size,var(--avatar-size-s,48px)) * .07 - 2px)}[dir=rtl] .person-root.small .contact-icon,[dir=rtl] .person-root.small .initials-text{font-size:calc(var(--avatar-size-s,var(--avatar-size,24px)) * .4)}[dir=rtl] .person-root.small .user-presence{left:calc(var(--avatar-size-s,var(--avatar-size,24px)) - 8px);top:calc(var(--avatar-size-s,var(--avatar-size,24px)) - 8px);width:8px;height:8px}[dir=rtl] .person-root.small .user-presence .presence-basic{width:4px;height:4px;border-radius:4px;padding:0}[dir=rtl] .person-root.small .user-presence .presence-basic .presence-oof-offline svg{height:0;width:0}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg,:host svg>path,mgt-person svg,mgt-person svg>path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg,:host svg>path,mgt-person svg,mgt-person svg>path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person/strings.js
var strings = {
  photoFor: "Photo for",
  emailAddress: "Email address",
  initials: "Initials"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person/mgt-person.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata2 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter7 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtPerson_1;
var PersonViewType;
(function(PersonViewType2) {
  PersonViewType2[PersonViewType2["avatar"] = 2] = "avatar";
  PersonViewType2[PersonViewType2["oneline"] = 3] = "oneline";
  PersonViewType2[PersonViewType2["twolines"] = 4] = "twolines";
  PersonViewType2[PersonViewType2["threelines"] = 5] = "threelines";
})(PersonViewType || (PersonViewType = {}));
var avatarType;
(function(avatarType2) {
  avatarType2["photo"] = "photo";
  avatarType2["initials"] = "initials";
})(avatarType || (avatarType = {}));
var defaultPersonProperties = [
  "businessPhones",
  "displayName",
  "givenName",
  "jobTitle",
  "mail",
  "mobilePhone",
  "officeLocation",
  "preferredLanguage",
  "surname",
  "userPrincipalName",
  "id"
];
var MgtPerson = MgtPerson_1 = class MgtPerson2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles3;
  }
  get strings() {
    return strings;
  }
  /**
   * allows developer to define name of person for component
   * @type {string}
   */
  get personQuery() {
    return this._personQuery;
  }
  set personQuery(value) {
    if (value === this._personQuery) {
      return;
    }
    this._personQuery = value;
    this.personDetailsInternal = null;
    this.requestStateUpdate();
  }
  /**
   * Fallback when no user is found
   * @type {IDynamicPerson}
   */
  get fallbackDetails() {
    return this._fallbackDetails;
  }
  set fallbackDetails(value) {
    if (value === this._fallbackDetails) {
      return;
    }
    this._fallbackDetails = value;
    if (this.personDetailsInternal) {
      return;
    }
    if (value && value.displayName) {
      this._personAvatarBg = this.getColorFromName(value.displayName);
    } else {
      this._personAvatarBg = "gray20";
    }
    this.requestStateUpdate();
  }
  /**
   * user-id property allows developer to use id value to determine person
   * @type {string}
   */
  get userId() {
    return this._userId;
  }
  set userId(value) {
    if (value === this._userId) {
      return;
    }
    this._userId = value;
    this.personDetailsInternal = null;
    this.requestStateUpdate();
  }
  /**
   * object containing Graph details on person
   * a copy of person-details attribute
   * @type {IDynamicPerson}
   */
  get personDetailsInternal() {
    return this._personDetailsInternal;
  }
  set personDetailsInternal(value) {
    if (this._personDetailsInternal === value) {
      return;
    }
    this._personDetailsInternal = value;
    if (value && value.displayName) {
      this._personAvatarBg = this.getColorFromName(value.displayName);
    } else {
      this._personAvatarBg = "gray20";
    }
    this._fetchedImage = null;
    this._fetchedPresence = null;
    this.requestStateUpdate();
    this.requestUpdate("personDetailsInternal");
  }
  /**
   * object containing Graph details on person
   * @type {IDynamicPerson}
   */
  get personDetails() {
    return this._personDetails;
  }
  set personDetails(value) {
    if (this._personDetails === value) {
      return;
    }
    this._personDetails = value;
    if (value && value.displayName) {
      this._personAvatarBg = this.getColorFromName(value.displayName);
    } else {
      this._personAvatarBg = "gray20";
    }
    this._fetchedImage = null;
    this._fetchedPresence = null;
    this.requestStateUpdate();
    this.requestUpdate("personDetails");
  }
  /**
   * Set the image of the person
   *
   * @type {string}
   * @memberof MgtPersonCard
   */
  get personImage() {
    return this._personImage || this._fetchedImage;
  }
  set personImage(value) {
    if (value === this._personImage) {
      return;
    }
    this._isInvalidImageSrc = !value;
    const oldValue = this._personImage;
    this._personImage = value;
    this.requestUpdate("personImage", oldValue);
  }
  /**
   * Determines and sets person avatar
   *
   *
   * @type {string}
   * @memberof MgtPerson
   */
  get avatarType() {
    return this._avatarType;
  }
  set avatarType(value) {
    if (value === this._avatarType) {
      return;
    }
    this._avatarType = value;
    this.requestStateUpdate();
  }
  /**
   * Gets or sets presence of person
   *
   * @type {MicrosoftGraph.Presence}
   * @memberof MgtPerson
   */
  get personPresence() {
    return this._personPresence || this._fetchedPresence;
  }
  set personPresence(value) {
    if (value === this._personPresence) {
      return;
    }
    const oldValue = this._personPresence;
    this._personPresence = value;
    this.requestUpdate("personPresence", oldValue);
  }
  /**
   * Get the scopes required for person
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtPerson
   */
  static get requiredScopes() {
    const scopes = ["user.readbasic.all", "user.read", "people.read", "presence.read.all", "presence.read"];
    if (MgtPerson_1.config.useContactApis) {
      scopes.push("contacts.read");
    }
    return scopes;
  }
  /**
   * Gets the flyout element
   *
   * @protected
   * @type {MgtFlyout}
   * @memberof MgtPerson
   */
  get flyout() {
    return this.renderRoot.querySelector(".flyout");
  }
  constructor() {
    super();
    this.personCardInteraction = PersonCardInteraction.none;
    this.line1Property = "displayName";
    this.line2Property = "email";
    this.line3Property = "jobTitle";
    this.view = ViewType.image;
    this.avatarSize = "auto";
    this.disableImageFetch = false;
    this._isInvalidImageSrc = false;
    this._avatarType = "photo";
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    if (this.isLoadingState && !this.personDetails && !this.personDetailsInternal && !this.fallbackDetails) {
      return this.renderLoading();
    }
    const person = this.personDetails || this.personDetailsInternal || this.fallbackDetails;
    const image = this.getImage();
    const presence = this.personPresence || this._fetchedPresence;
    if (!person && !image) {
      return this.renderNoData();
    }
    if (!(person && person.personImage) && image) {
      person.personImage = image;
    }
    let personTemplate = this.renderTemplate("default", { person, personImage: image, personPresence: presence });
    if (!personTemplate) {
      const detailsTemplate = this.renderDetails(person, presence);
      const imageWithPresenceTemplate = this.renderAvatar(person, image, presence);
      const rootClasses = {
        "person-root": true,
        clickable: this.personCardInteraction === PersonCardInteraction.click,
        small: !this.isLargeAvatar()
      };
      personTemplate = html`
        <div class=${classMap(rootClasses)} tabindex="0">
          ${imageWithPresenceTemplate} ${detailsTemplate}
        </div>
      `;
    }
    if (this.personCardInteraction !== PersonCardInteraction.none) {
      personTemplate = this.renderFlyout(personTemplate, person, image, presence);
    }
    return html`
      <div
        class="root"
        dir=${this.direction}
        @click=${this.handleMouseClick}
        @mouseenter=${this.handleMouseEnter}
        @mouseleave=${this.handleMouseLeave}
        @keydown=${this.handleKeyDown}
      >
        ${personTemplate}
      </div>
    `;
  }
  /**
   * Render the loading state
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPerson
   */
  renderLoading() {
    return this.renderTemplate("loading", null) || html``;
  }
  /**
   * Clears state of the component
   *
   * @protected
   * @memberof MgtPerson
   */
  clearState() {
    this._personImage = "";
    this._personDetailsInternal = null;
    this._fetchedImage = null;
    this._fetchedPresence = null;
  }
  /**
   * Render the state when no data is available
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPerson
   */
  renderNoData() {
    const noDataTemplate = this.renderTemplate("no-data", null);
    if (noDataTemplate) {
      return noDataTemplate;
    }
    const avatarClasses = {
      "avatar-icon": true,
      "ms-Icon": true,
      "ms-Icon--Contact": true,
      small: !this.isLargeAvatar()
    };
    return html`
      <i class=${classMap(avatarClasses)}></i>
    `;
  }
  /**
   * Render the image part of the person template.
   * If the image is unavailable, the person's initials will be used instead.
   *
   * @protected
   * @param {string} [imageSrc]
   * @param {IDynamicPerson} [personDetailsInternal]
   * @returns
   * @memberof MgtPerson
   */
  renderImage(personDetailsInternal, imageSrc) {
    if (imageSrc && !this._isInvalidImageSrc && this._avatarType === "photo") {
      const altText = `${this.strings.photoFor} ${personDetailsInternal.displayName}`;
      return html`
        <div class="img-wrapper">
          <img alt=${altText} src=${imageSrc} @error=${() => this._isInvalidImageSrc = true} />
        </div>
      `;
    } else if (personDetailsInternal) {
      const initials = this.getInitials(personDetailsInternal);
      return html`
        <span class="initials-text" aria-label="${this.strings.initials} ${initials}">
          ${initials && initials.length ? html`
                ${initials}
              ` : html`
                <i class="ms-Icon ms-Icon--Contact contact-icon"></i>
              `}
        </span>
      `;
    }
  }
  /**
   * Render presence for the person.
   *
   * @protected
   * @param
   * @memberof MgtPersonCard
   */
  renderPresence(presence) {
    if (!this.showPresence || !presence) {
      return html``;
    }
    let statusClass = null;
    switch (presence.availability) {
      case "DoNotDisturb":
        switch (presence.activity) {
          case "OutOfOffice":
            statusClass = "presence-oof-dnd";
            break;
          default:
            statusClass = "presence-dnd";
            break;
        }
        break;
      case "BeRightBack":
        statusClass = "presence-away";
        break;
      case "Available":
        switch (presence.activity) {
          case "Available":
            statusClass = "presence-available";
            break;
          case "OutOfOffice":
            statusClass = "presence-oof-available";
            break;
        }
        break;
      case "Busy":
        switch (presence.activity) {
          case "OutOfOffice":
            statusClass = "presence-oof-busy";
            break;
          default:
            statusClass = "presence-busy";
            break;
        }
        break;
      case "Away":
        switch (presence.activity) {
          case "Away":
            statusClass = "presence-away";
            break;
          case "OutOfOffice":
            statusClass = "presence-oof-offline";
            break;
        }
        break;
      case "Offline":
        switch (presence.activity) {
          case "Offline":
            statusClass = "presence-offline";
            break;
          case "OutOfOffice":
            statusClass = "presence-oof-offline";
            break;
          case "OffWork":
            statusClass = "presence-offline";
            break;
        }
        break;
      default:
        statusClass = "presence-offline";
        break;
    }
    const presenceClasses = {
      "ms-Icon": true,
      "presence-basic": true
    };
    presenceClasses[statusClass] = true;
    let iconHtml = null;
    if (statusClass === "presence-oof-offline") {
      iconHtml = html`
        <div class="ms-Icon presence-basic presence-oof-offline-wrapper">
          <i class="presence-oof-offline">
            ${getSvg(SvgIcon.SkypeArrow, "#666666")}
          </i>
        </div>
      `;
    } else {
      iconHtml = html`
        <i class=${classMap(presenceClasses)} aria-hidden="true"></i>
      `;
    }
    return html`
      <div class="user-presence" title=${presence.activity} aria-label=${presence.activity} role="img">
        ${iconHtml}
      </div>
    `;
  }
  /**
   * Render image with presence for the person.
   *
   * @protected
   * @param
   * @memberof MgtPersonCard
   */
  renderAvatar(personDetailsInternal, image, presence) {
    const hasInitials = !image || this._isInvalidImageSrc || this._avatarType === avatarType.initials;
    const imageClasses = {
      initials: hasInitials,
      small: !this.isLargeAvatar(),
      "user-avatar": true
    };
    let title = "";
    if (hasInitials && personDetailsInternal) {
      imageClasses[this._personAvatarBg] = true;
      title = `${this.strings.initials} ${this.getInitials(personDetailsInternal)}`;
    } else {
      title = personDetailsInternal ? personDetailsInternal.displayName || "" : "";
      if (title !== "") {
        title = `${this.strings.photoFor} ${title}`;
      }
    }
    if (title === "") {
      const emailAddress = getEmailFromGraphEntity(personDetailsInternal);
      if (emailAddress !== null) {
        title = `${this.strings.emailAddress} ${emailAddress}`;
      }
    }
    const imageTemplate = this.renderImage(personDetailsInternal, image);
    const presenceTemplate = this.renderPresence(presence);
    return html`
      <div class=${classMap(imageClasses)} title=${title} aria-label=${title}>
        ${imageTemplate} ${presenceTemplate}
      </div>
    `;
  }
  handleLine1Clicked() {
    this.fireCustomEvent("line1clicked", this.personDetailsInternal);
  }
  handleLine2Clicked() {
    this.fireCustomEvent("line2clicked", this.personDetailsInternal);
  }
  handleLine3Clicked() {
    this.fireCustomEvent("line3clicked", this.personDetailsInternal);
  }
  /**
   * Render the details part of the person template.
   *
   * @protected
   * @param {IDynamicPerson} [person]
   * @param {string} [image]
   * @returns {TemplateResult}
   * @memberof MgtPerson
   */
  renderDetails(personProps, presence) {
    if (!personProps || this.view === ViewType.image || this.view === PersonViewType.avatar) {
      return html``;
    }
    let person = personProps;
    if (presence) {
      person.presenceActivity = presence === null || presence === void 0 ? void 0 : presence.activity;
      person.presenceAvailability = presence === null || presence === void 0 ? void 0 : presence.availability;
    }
    const details = [];
    if (this.view > ViewType.image) {
      if (this.hasTemplate("line1")) {
        const template2 = this.renderTemplate("line1", { person });
        details.push(html`
          <div class="line1" @click=${() => this.handleLine1Clicked()}>${template2}</div>
        `);
      } else {
        const text = this.getTextFromProperty(person, this.line1Property);
        if (text) {
          details.push(html`
            <div class="line1" @click=${() => this.handleLine1Clicked()} role="presentation" aria-label="${text}">${text}</div>
          `);
        }
      }
    }
    if (this.view > ViewType.oneline) {
      if (this.hasTemplate("line2")) {
        const template2 = this.renderTemplate("line2", { person });
        details.push(html`
          <div class="line2" @click=${() => this.handleLine2Clicked()}>${template2}</div>
        `);
      } else {
        const text = this.getTextFromProperty(person, this.line2Property);
        if (text) {
          details.push(html`
            <div class="line2" @click=${() => this.handleLine2Clicked()} role="presentation" aria-label="${text}">${text}</div>
          `);
        }
      }
    }
    if (this.view > ViewType.twolines) {
      if (this.hasTemplate("line3")) {
        const template2 = this.renderTemplate("line3", { person });
        details.push(html`
          <div class="line3" @click=${() => this.handleLine3Clicked()}>${template2}</div>
        `);
      } else {
        const text = this.getTextFromProperty(person, this.line3Property);
        if (text) {
          details.push(html`
            <div class="line3" @click=${() => this.handleLine3Clicked()} role="presentation" aria-label="${text}">${text}</div>
          `);
        }
      }
    }
    const detailsClasses = classMap({
      details: true,
      small: !this.isLargeAvatar()
    });
    return html`
      <div class="${detailsClasses}">
        ${details}
      </div>
    `;
  }
  /**
   * Render the details flyout.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPerson
   */
  renderFlyout(anchor, personDetails, image, presence) {
    const flyoutContent = this._personCardShouldRender ? html`
          <div slot="flyout">
            ${this.renderFlyoutContent(personDetails, image, presence)}
          </div>
        ` : html``;
    return html`
      <mgt-flyout light-dismiss class="flyout" .avoidHidingAnchor=${false}>
        ${anchor} ${flyoutContent}
      </mgt-flyout>
    `;
  }
  /**
   * Render the flyout menu content.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPerson
   */
  renderFlyoutContent(personDetails, image, presence) {
    return this.renderTemplate("person-card", { person: personDetails, personImage: image }) || html`
        <mgt-person-card
          lock-tab-navigation
          .personDetails=${personDetails}
          .personImage=${image}
          .personPresence=${presence}
          .showPresence=${this.showPresence}
        ></mgt-person-card>
      `;
  }
  /**
   * load state into the component.
   *
   * @protected
   * @returns
   * @memberof MgtPerson
   */
  loadState() {
    return __awaiter7(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      if (!provider || provider.state === ProviderState.Loading) {
        return;
      }
      if (provider && provider.state === ProviderState.SignedOut) {
        this.personDetailsInternal = null;
        return;
      }
      const graph = provider.graph.forComponent(this);
      let personProps = [...defaultPersonProperties, this.line1Property, this.line2Property, this.line3Property];
      personProps = personProps.filter((email) => email !== "email");
      let details = this.personDetailsInternal || this.personDetails;
      if (details) {
        if (!details.personImage && this.fetchImage && this._avatarType === "photo" && !this.personImage && !this._fetchedImage) {
          let image;
          if ("groupTypes" in details) {
            image = yield getGroupImage(graph, details, MgtPerson_1.config.useContactApis);
          } else {
            image = yield getPersonImage(graph, details, MgtPerson_1.config.useContactApis);
          }
          if (image) {
            details.personImage = image;
            this._fetchedImage = image;
          }
        }
      } else if (this.userId || this.personQuery === "me") {
        let person;
        if (this._avatarType === "photo" && !this.disableImageFetch) {
          person = yield getUserWithPhoto(graph, this.userId, personProps);
        } else {
          if (this.personQuery === "me") {
            person = yield getMe(graph, personProps);
          } else {
            person = yield getUser(graph, this.userId, personProps);
          }
        }
        this.personDetailsInternal = person;
        this.personDetails = person;
        this._fetchedImage = this.getImage();
      } else if (this.personQuery) {
        let people = yield findPeople(graph, this.personQuery, 1);
        if (!people || people.length === 0) {
          people = (yield findUsers(graph, this.personQuery, 1)) || [];
        }
        if (people && people.length) {
          this.personDetailsInternal = people[0];
          this.personDetails = people[0];
          if (this._avatarType === "photo" && !this.disableImageFetch) {
            const image = yield getPersonImage(graph, people[0], MgtPerson_1.config.useContactApis);
            if (image) {
              this.personDetailsInternal.personImage = image;
              this.personDetails.personImage = image;
              this._fetchedImage = image;
            }
          }
        }
      }
      const defaultPresence = {
        activity: "Offline",
        availability: "Offline",
        id: null
      };
      if (this.showPresence && !this.personPresence && !this._fetchedPresence) {
        try {
          details = this.personDetailsInternal || this.personDetails;
          if (details) {
            const userId = this.personQuery !== "me" ? details === null || details === void 0 ? void 0 : details.id : null;
            this._fetchedPresence = yield getUserPresence(graph, userId);
          } else {
            this._fetchedPresence = defaultPresence;
          }
        } catch (_) {
          this._fetchedPresence = defaultPresence;
        }
      }
    });
  }
  /**
   * Gets the user initials
   *
   * @protected
   * @returns {string}
   * @memberof MgtPerson
   */
  getInitials(person) {
    if (!person) {
      person = this.personDetailsInternal;
    }
    if (person.initials) {
      return person.initials;
    }
    let initials = "";
    if (person.givenName) {
      initials += person.givenName[0].toUpperCase();
    }
    if (person.surname) {
      initials += person.surname[0].toUpperCase();
    }
    if (!initials && person.displayName) {
      const name = person.displayName.split(/\s+/);
      for (let i = 0; i < 2 && i < name.length; i++) {
        if (name[i][0] && this.isLetter(name[i][0])) {
          initials += name[i][0].toUpperCase();
        }
      }
    }
    return initials;
  }
  /**
   * Gets color from name
   *
   * @protected
   * @param {string} name
   * @returns {string}
   * @memberof MgtPerson
   */
  getColorFromName(name) {
    const charCodes = name.split("").map((char) => char.charCodeAt(0)).join("");
    const nameInt = parseInt(charCodes, 10);
    const colors = [
      "pinkRed10",
      "red20",
      "red10",
      "orange20",
      "orangeYellow20",
      "green10",
      "green20",
      "cyan20",
      "cyan30",
      "cyanBlue10",
      "cyanBlue20",
      "blue10",
      "blueMagenta30",
      "blueMagenta20",
      "magenta20",
      "magenta10",
      "magentaPink10",
      "orange30",
      "gray30",
      "gray20"
    ];
    return colors[nameInt % colors.length];
  }
  getImage() {
    if (this.personImage) {
      return this.personImage;
    }
    if (this._fetchedImage) {
      return this._fetchedImage;
    }
    const person = this.personDetailsInternal || this.personDetails;
    return person && person.personImage ? person.personImage : null;
  }
  isLetter(char) {
    try {
      return char.match(new RegExp("\\p{L}", "u"));
    } catch (e) {
      return char.toLowerCase() !== char.toUpperCase();
    }
  }
  getTextFromProperty(personDetailsInternal, prop) {
    if (!prop || prop.length === 0) {
      return null;
    }
    const properties = prop.trim().split(",");
    let text;
    let i = 0;
    while (!text && i < properties.length) {
      const currentProp = properties[i].trim();
      switch (currentProp) {
        case "mail":
        case "email":
          text = getEmailFromGraphEntity(personDetailsInternal);
          break;
        default:
          text = personDetailsInternal[currentProp];
      }
      i++;
    }
    return text;
  }
  isLargeAvatar() {
    return this.avatarSize === "large" || this.avatarSize === "auto" && this.view > ViewType.oneline;
  }
  handleMouseClick(e) {
    if (this.personCardInteraction === PersonCardInteraction.click) {
      this.showPersonCard();
    }
  }
  handleKeyDown(e) {
    if (e) {
      if (e.key === "Enter") {
        this.showPersonCard();
      }
    }
  }
  handleMouseEnter(e) {
    clearTimeout(this._mouseEnterTimeout);
    clearTimeout(this._mouseLeaveTimeout);
    if (this.personCardInteraction !== PersonCardInteraction.hover) {
      return;
    }
    this._mouseEnterTimeout = setTimeout(this.showPersonCard.bind(this), 500);
  }
  handleMouseLeave(e) {
    clearTimeout(this._mouseEnterTimeout);
    clearTimeout(this._mouseLeaveTimeout);
    this._mouseLeaveTimeout = setTimeout(this.hidePersonCard.bind(this), 500);
  }
  hidePersonCard() {
    const flyout = this.flyout;
    if (flyout) {
      flyout.close();
    }
    const personCard = this.querySelector("mgt-person-card") || this.renderRoot.querySelector("mgt-person-card");
    if (personCard) {
      personCard.isExpanded = false;
      personCard.clearHistory();
    }
  }
  showPersonCard() {
    if (!this._personCardShouldRender) {
      this._personCardShouldRender = true;
    }
    const flyout = this.flyout;
    if (flyout) {
      flyout.open();
    }
  }
};
MgtPerson.config = {
  useContactApis: true
};
__decorate2([
  property({
    attribute: "person-query"
  }),
  __metadata2("design:type", String),
  __metadata2("design:paramtypes", [String])
], MgtPerson.prototype, "personQuery", null);
__decorate2([
  property({
    attribute: "fallback-details",
    type: Object
  }),
  __metadata2("design:type", Object),
  __metadata2("design:paramtypes", [Object])
], MgtPerson.prototype, "fallbackDetails", null);
__decorate2([
  property({
    attribute: "user-id"
  }),
  __metadata2("design:type", String),
  __metadata2("design:paramtypes", [String])
], MgtPerson.prototype, "userId", null);
__decorate2([
  property({
    attribute: "show-presence",
    type: Boolean
  }),
  __metadata2("design:type", Boolean)
], MgtPerson.prototype, "showPresence", void 0);
__decorate2([
  property({
    attribute: "avatar-size",
    type: String
  }),
  __metadata2("design:type", String)
], MgtPerson.prototype, "avatarSize", void 0);
__decorate2([
  property({
    attribute: null,
    type: Object
  }),
  __metadata2("design:type", Object),
  __metadata2("design:paramtypes", [Object])
], MgtPerson.prototype, "personDetailsInternal", null);
__decorate2([
  property({
    attribute: "person-details",
    type: Object
  }),
  __metadata2("design:type", Object),
  __metadata2("design:paramtypes", [Object])
], MgtPerson.prototype, "personDetails", null);
__decorate2([
  property({
    attribute: "person-image",
    type: String
  }),
  __metadata2("design:type", String),
  __metadata2("design:paramtypes", [String])
], MgtPerson.prototype, "personImage", null);
__decorate2([
  property({
    attribute: "fetch-image",
    type: Boolean
  }),
  __metadata2("design:type", Boolean)
], MgtPerson.prototype, "fetchImage", void 0);
__decorate2([
  property({
    attribute: "disable-image-fetch",
    type: Boolean
  }),
  __metadata2("design:type", Boolean)
], MgtPerson.prototype, "disableImageFetch", void 0);
__decorate2([
  property({
    attribute: "avatar-type",
    converter: (value) => {
      value = value.toLowerCase();
      if (value === "initials") {
        return avatarType.initials;
      } else {
        return avatarType.photo;
      }
    }
  }),
  __metadata2("design:type", String),
  __metadata2("design:paramtypes", [String])
], MgtPerson.prototype, "avatarType", null);
__decorate2([
  property({
    attribute: "person-presence",
    type: Object
  }),
  __metadata2("design:type", Object),
  __metadata2("design:paramtypes", [Object])
], MgtPerson.prototype, "personPresence", null);
__decorate2([
  property({
    attribute: "person-card",
    converter: (value, type) => {
      value = value.toLowerCase();
      if (typeof PersonCardInteraction[value] === "undefined") {
        return PersonCardInteraction.none;
      } else {
        return PersonCardInteraction[value];
      }
    }
  }),
  __metadata2("design:type", Number)
], MgtPerson.prototype, "personCardInteraction", void 0);
__decorate2([
  property({ attribute: "line1-property" }),
  __metadata2("design:type", String)
], MgtPerson.prototype, "line1Property", void 0);
__decorate2([
  property({ attribute: "line2-property" }),
  __metadata2("design:type", String)
], MgtPerson.prototype, "line2Property", void 0);
__decorate2([
  property({ attribute: "line3-property" }),
  __metadata2("design:type", String)
], MgtPerson.prototype, "line3Property", void 0);
__decorate2([
  property({
    converter: (value) => {
      if (!value || value.length === 0) {
        return ViewType.image;
      }
      value = value.toLowerCase();
      if (typeof ViewType[value] === "undefined") {
        return ViewType.image;
      } else {
        return ViewType[value];
      }
    }
  }),
  __metadata2("design:type", Number)
], MgtPerson.prototype, "view", void 0);
__decorate2([
  internalProperty(),
  __metadata2("design:type", String)
], MgtPerson.prototype, "_fetchedImage", void 0);
__decorate2([
  internalProperty(),
  __metadata2("design:type", Object)
], MgtPerson.prototype, "_fetchedPresence", void 0);
__decorate2([
  internalProperty(),
  __metadata2("design:type", Boolean)
], MgtPerson.prototype, "_isInvalidImageSrc", void 0);
__decorate2([
  internalProperty(),
  __metadata2("design:type", Boolean)
], MgtPerson.prototype, "_personCardShouldRender", void 0);
MgtPerson = MgtPerson_1 = __decorate2([
  customElement("mgt-person"),
  __metadata2("design:paramtypes", [])
], MgtPerson);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-agenda/mgt-agenda-css.js
var styles4 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--event-background-color:#ffffff}.mgt-dark{--event-background-color:#161514}:host .header,mgt-agenda .header{margin:var(--agenda-header-margin,40px 10px 14px 10px);font-family:var(--default-font-family);font-size:var(--agenda-header-font-size,24px);color:var(--agenda-header-color,var(--color-sub1,#323130))}:host .agenda>.group:first-child>.header,mgt-agenda .agenda>.group:first-child>.header{margin-top:0}:host .agenda-list,mgt-agenda .agenda-list{list-style-type:none;padding:0;margin:0;font-family:var(--default-font-family);font-style:normal;font-weight:400}:host .event,mgt-agenda .event{background:var(--event-background-color,#fff);border:var(--event-border,solid 2px transparent);box-shadow:var(--event-box-shadow,0 2px 8px var(--box-shadow-color,rgba(0,0,0,.092)));margin:var(--event-margin,0 10px 14px 10px);padding:var(--event-padding,0);display:flex;border-radius:8px}:host .narrow .event,mgt-agenda .narrow .event{flex-direction:column}:host .event-time-container,mgt-agenda .event-time-container{display:flex;flex-direction:column;margin:18px 38px 18px 18px;width:125px}:host .narrow .event-time-container,mgt-agenda .narrow .event-time-container{margin:14px 18px 8px 18px}:host .event-time,mgt-agenda .event-time{font-size:var(--event-time-font-size,12px);color:var(--event-time-color,var(--color,#000));font-weight:600}:host .event-duration,mgt-agenda .event-duration{color:rgba(16,16,16,.3)}:host .event-details-container,mgt-agenda .event-details-container{margin:14px 18px 14px 0}:host .narrow .event-details-container,mgt-agenda .narrow .event-details-container{margin:0 18px 14px 18px}:host .event-subject,mgt-agenda .event-subject{margin:0 18px 0 0;font-size:var(--event-subject-font-size,19px);color:var(--event-subject-color,var(--color-sub1,#323130))}:host .event-location-container,mgt-agenda .event-location-container{display:flex;margin:8px 18px 0 0}:host .event-location-icon svg,mgt-agenda .event-location-icon svg{height:12px}:host .event-location-icon svg path,mgt-agenda .event-location-icon svg path{stroke:var(--event-location-color,var(--color,#000))}:host .event-location,mgt-agenda .event-location{font-size:var(--event-location-font-size,12px);color:var(--event-location-color,var(--color,#000));margin:0 0 0 4px;line-height:17px}:host .event-attendees,mgt-agenda .event-attendees{--list-margin:8px 0 0 0;--avatar-size-s:20px}:host .event-other-container,mgt-agenda .event-other-container{margin:2px 16px 4px 16px;margin-left:auto}:host .loading-element,mgt-agenda .loading-element{background:var(--event-background-color,#fff);border-radius:1px}:host .event-time-loading,mgt-agenda .event-time-loading{width:100px;height:10px}:host .event-subject-loading,mgt-agenda .event-subject-loading{width:263px;height:16px}:host .event-location-icon-loading,mgt-agenda .event-location-icon-loading{width:14px;height:14px}:host .event-location-loading,mgt-agenda .event-location-loading{width:90px;height:10px;margin:2px 0 0 4px}:host .event-attendee-loading,mgt-agenda .event-attendee-loading{width:20px;height:20px;border-radius:10px;margin:0 2px 0 0}[dir=rtl] .event-location{margin:0 4px 0 0}[dir=rtl] .event-time-container{direction:ltr;margin:18px 18px 18px 38px}[dir=rtl] .event-details-container{margin:14px 0 14px 18px}[dir=rtl] .event-details-container .event-subject{margin:0 0 0 18px}[dir=rtl] .event-details-container .event-location-container{margin:8px 0 0 18px}@media (forced-colors:active) and (prefers-color-scheme:dark){svg,svg>path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important;color:#fff!important}}@media (forced-colors:active) and (prefers-color-scheme:light){svg,svg>path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important;color:#000!important}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-agenda/mgt-agenda.graph.js
var __awaiter8 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function getEventsPageIterator(graph, startDateTime, endDateTime, groupId) {
  return __awaiter8(this, void 0, void 0, function* () {
    const scopes = "calendars.read";
    const sdt = `startdatetime=${startDateTime.toISOString()}`;
    const edt = `enddatetime=${endDateTime.toISOString()}`;
    let uri;
    if (groupId) {
      uri = `groups/${groupId}/calendar`;
    } else {
      uri = "me";
    }
    uri += `/calendarview?${sdt}&${edt}`;
    let request = graph.api(uri).middlewareOptions(prepScopes(scopes)).orderby("start/dateTime");
    return GraphPageIterator.create(graph, request);
  });
}

// node_modules/lit-html/directives/repeat.js
var createAndInsertPart = (containerPart, beforePart) => {
  const container = containerPart.startNode.parentNode;
  const beforeNode = beforePart === void 0 ? containerPart.endNode : beforePart.startNode;
  const startNode = container.insertBefore(createMarker(), beforeNode);
  container.insertBefore(createMarker(), beforeNode);
  const newPart = new NodePart(containerPart.options);
  newPart.insertAfterNode(startNode);
  return newPart;
};
var updatePart = (part, value) => {
  part.setValue(value);
  part.commit();
  return part;
};
var insertPartBefore = (containerPart, part, ref2) => {
  const container = containerPart.startNode.parentNode;
  const beforeNode = ref2 ? ref2.startNode : containerPart.endNode;
  const endNode = part.endNode.nextSibling;
  if (endNode !== beforeNode) {
    reparentNodes(container, part.startNode, endNode, beforeNode);
  }
};
var removePart = (part) => {
  removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);
};
var generateMap = (list, start, end) => {
  const map2 = /* @__PURE__ */ new Map();
  for (let i = start; i <= end; i++) {
    map2.set(list[i], i);
  }
  return map2;
};
var partListCache = /* @__PURE__ */ new WeakMap();
var keyListCache = /* @__PURE__ */ new WeakMap();
var repeat = directive((items, keyFnOrTemplate, template2) => {
  let keyFn;
  if (template2 === void 0) {
    template2 = keyFnOrTemplate;
  } else if (keyFnOrTemplate !== void 0) {
    keyFn = keyFnOrTemplate;
  }
  return (containerPart) => {
    if (!(containerPart instanceof NodePart)) {
      throw new Error("repeat can only be used in text bindings");
    }
    const oldParts = partListCache.get(containerPart) || [];
    const oldKeys = keyListCache.get(containerPart) || [];
    const newParts = [];
    const newValues = [];
    const newKeys = [];
    let index = 0;
    for (const item of items) {
      newKeys[index] = keyFn ? keyFn(item, index) : index;
      newValues[index] = template2(item, index);
      index++;
    }
    let newKeyToIndexMap;
    let oldKeyToIndexMap;
    let oldHead = 0;
    let oldTail = oldParts.length - 1;
    let newHead = 0;
    let newTail = newValues.length - 1;
    while (oldHead <= oldTail && newHead <= newTail) {
      if (oldParts[oldHead] === null) {
        oldHead++;
      } else if (oldParts[oldTail] === null) {
        oldTail--;
      } else if (oldKeys[oldHead] === newKeys[newHead]) {
        newParts[newHead] = updatePart(oldParts[oldHead], newValues[newHead]);
        oldHead++;
        newHead++;
      } else if (oldKeys[oldTail] === newKeys[newTail]) {
        newParts[newTail] = updatePart(oldParts[oldTail], newValues[newTail]);
        oldTail--;
        newTail--;
      } else if (oldKeys[oldHead] === newKeys[newTail]) {
        newParts[newTail] = updatePart(oldParts[oldHead], newValues[newTail]);
        insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);
        oldHead++;
        newTail--;
      } else if (oldKeys[oldTail] === newKeys[newHead]) {
        newParts[newHead] = updatePart(oldParts[oldTail], newValues[newHead]);
        insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);
        oldTail--;
        newHead++;
      } else {
        if (newKeyToIndexMap === void 0) {
          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);
          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);
        }
        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {
          removePart(oldParts[oldHead]);
          oldHead++;
        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {
          removePart(oldParts[oldTail]);
          oldTail--;
        } else {
          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);
          const oldPart = oldIndex !== void 0 ? oldParts[oldIndex] : null;
          if (oldPart === null) {
            const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);
            updatePart(newPart, newValues[newHead]);
            newParts[newHead] = newPart;
          } else {
            newParts[newHead] = updatePart(oldPart, newValues[newHead]);
            insertPartBefore(containerPart, oldPart, oldParts[oldHead]);
            oldParts[oldIndex] = null;
          }
          newHead++;
        }
      }
    }
    while (newHead <= newTail) {
      const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);
      updatePart(newPart, newValues[newHead]);
      newParts[newHead++] = newPart;
    }
    while (oldHead <= oldTail) {
      const oldPart = oldParts[oldHead++];
      if (oldPart !== null) {
        removePart(oldPart);
      }
    }
    partListCache.set(containerPart, newParts);
    keyListCache.set(containerPart, newKeys);
  };
});

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-people/mgt-people-css.js
var styles5 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host .people-list,mgt-people .people-list{list-style-type:none;margin:var(--list-margin,8px 4px 8px 8px);padding:0;font-family:var(--default-font-family);color:var(--color,#000);font-style:normal;font-weight:400;display:flex;align-items:center}:host .people-person,mgt-people .people-person{margin:var(--avatar-margin,0 4px 0 0);display:flex}:host .overflow span,mgt-people .overflow span{vertical-align:middle}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-people/mgt-people.js
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata3 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter9 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtPeople = class MgtPeople2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles5;
  }
  /**
   * determines if agenda events come from specific group
   * @type {string}
   */
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    if (this._groupId === value) {
      return;
    }
    this._groupId = value;
    this.requestStateUpdate(true);
  }
  /**
   * user id array
   *
   * @memberof MgtPeople
   */
  get userIds() {
    return this._userIds;
  }
  set userIds(value) {
    if (arraysAreEqual(this._userIds, value)) {
      return;
    }
    this._userIds = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to define queries of people for component
   * @type {string[]}
   */
  get peopleQueries() {
    return this._peopleQueries;
  }
  set peopleQueries(value) {
    if (arraysAreEqual(this._peopleQueries, value)) {
      return;
    }
    this._peopleQueries = value;
    this.requestStateUpdate(true);
  }
  /**
   * The resource to get
   *
   * @type {string}
   * @memberof MgtPeople
   */
  get resource() {
    return this._resource;
  }
  set resource(value) {
    if (this._resource === value) {
      return;
    }
    this._resource = value;
    this.requestStateUpdate(true);
  }
  /**
   * Api version to use for request
   *
   * @type {string}
   * @memberof MgtPeople
   */
  get version() {
    return this._version;
  }
  set version(value) {
    if (this._version === value) {
      return;
    }
    this._version = value;
    this.requestStateUpdate(true);
  }
  /**
   * Fallback when no user is found
   * @type {IDynamicPerson[]}
   */
  get fallbackDetails() {
    return this._fallbackDetails;
  }
  set fallbackDetails(value) {
    if (value === this._fallbackDetails) {
      return;
    }
    this._fallbackDetails = value;
    this.requestStateUpdate();
  }
  /**
   * Get the scopes required for people
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtPeople
   */
  static get requiredScopes() {
    return [
      .../* @__PURE__ */ new Set([
        "user.read.all",
        "people.read",
        "user.readbasic.all",
        "presence.read.all",
        "contacts.read",
        ...MgtPerson.requiredScopes
      ])
    ];
  }
  constructor() {
    super();
    this.personCardInteraction = PersonCardInteraction.hover;
    this.scopes = [];
    this._version = "v1.0";
    this.showMax = 3;
  }
  /**
   * Clears the state of the component
   *
   * @protected
   * @memberof MgtPeople
   */
  clearState() {
    this.people = null;
  }
  /**
   * Request to reload the state.
   * Use reload instead of load to ensure loading events are fired.
   *
   * @protected
   * @memberof MgtBaseComponent
   */
  requestStateUpdate(force) {
    if (force) {
      this.people = null;
    }
    return super.requestStateUpdate(force);
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    if (this.isLoadingState) {
      return this.renderLoading();
    }
    if (!this.people || this.people.length === 0) {
      return this.renderNoData();
    }
    return this.renderTemplate("default", { people: this.people, max: this.showMax }) || this.renderPeople();
  }
  /**
   * Render the loading state.
   *
   * @protected
   * @returns
   * @memberof MgtPeople
   */
  renderLoading() {
    return this.renderTemplate("loading", null) || html``;
  }
  /**
   * Render the list of people.
   *
   * @protected
   * @param {*} people
   * @returns {TemplateResult}
   * @memberof MgtPeople
   */
  renderPeople() {
    const maxPeople = this.people.slice(0, this.showMax).filter((pple) => pple);
    return html`
      <ul class="people-list" aria-label="people">
        ${repeat(maxPeople, (p) => p.id ? p.id : p.displayName, (p) => html`
            <li class="people-person">
              ${this.renderPerson(p)}
            </li>
          `)}
        ${this.people.length > this.showMax ? this.renderOverflow() : null}
      </ul>
    `;
  }
  /**
   * Render the overflow content to represent any extra people, beyond the max.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeople
   */
  renderOverflow() {
    const extra = this.people.length - this.showMax;
    return this.renderTemplate("overflow", {
      extra,
      max: this.showMax,
      people: this.people
    }) || html`
        <li aria-label="and ${extra} more attendees" class="overflow"><span>+${extra}<span></li>
      `;
  }
  /**
   * Render an individual person.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeople
   */
  renderPerson(person) {
    let personPresence = {
      // set up default presence
      activity: "Offline",
      availability: "Offline",
      id: null
    };
    if (this.showPresence && this._peoplePresence) {
      personPresence = this._peoplePresence[person.id];
    }
    const avatarSize = "small";
    return this.renderTemplate("person", { person }, person.id) || // set image to @ to flag the mgt-person component to
    // query the image from the graph
    html`
        <mgt-person
          .personDetails=${person}
          .fetchImage=${true}
          .avatarSize=${avatarSize}
          .personCardInteraction=${this.personCardInteraction}
          .showPresence=${this.showPresence}
          .personPresence=${personPresence}
        ></mgt-person>
      `;
  }
  /**
   * render the no data state.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeople
   */
  renderNoData() {
    return this.renderTemplate("no-data", null) || html``;
  }
  /**
   * load state into the component.
   *
   * @protected
   * @returns
   * @memberof MgtPeople
   */
  loadState() {
    return __awaiter9(this, void 0, void 0, function* () {
      if (!this.people) {
        const provider = Providers.globalProvider;
        if (provider && provider.state === ProviderState.SignedIn) {
          const graph = provider.graph.forComponent(this);
          if (this.groupId) {
            this.people = yield findGroupMembers(graph, null, this.groupId, this.showMax, PersonType.person);
          } else if (this.userIds || this.peopleQueries) {
            this.userIds ? this.people = yield getUsersForUserIds(graph, this.userIds) : this.people = yield getUsersForPeopleQueries(graph, this.peopleQueries);
            if (this._fallbackDetails) {
              this.people = this.people.map((p, i) => {
                if (p) {
                  return p;
                } else if (i < this._fallbackDetails.length) {
                  return this._fallbackDetails[i];
                }
                return null;
              });
            } else {
              this.people = this.people.filter((p) => p !== null);
            }
          } else if (this.resource) {
            this.people = yield getPeopleFromResource(graph, this.version, this.resource, this.scopes);
          } else {
            this.people = yield getPeople(graph);
          }
          if (this.showPresence) {
            this._peoplePresence = yield getUsersPresenceByPeople(graph, this.people);
          } else {
            this._peoplePresence = null;
          }
        }
      }
    });
  }
};
__decorate3([
  property({
    attribute: "group-id",
    type: String
  }),
  __metadata3("design:type", String),
  __metadata3("design:paramtypes", [Object])
], MgtPeople.prototype, "groupId", null);
__decorate3([
  property({
    attribute: "user-ids",
    converter: (value, type) => {
      return value.split(",").map((v) => v.trim());
    }
  }),
  __metadata3("design:type", Array),
  __metadata3("design:paramtypes", [Array])
], MgtPeople.prototype, "userIds", null);
__decorate3([
  property({
    attribute: "people",
    type: Object
  }),
  __metadata3("design:type", Array)
], MgtPeople.prototype, "people", void 0);
__decorate3([
  property({
    attribute: "people-queries",
    converter: (value, type) => {
      return value.split(",").map((v) => v.trim());
    }
  }),
  __metadata3("design:type", Array),
  __metadata3("design:paramtypes", [Array])
], MgtPeople.prototype, "peopleQueries", null);
__decorate3([
  property({
    attribute: "show-max",
    type: Number
  }),
  __metadata3("design:type", Number)
], MgtPeople.prototype, "showMax", void 0);
__decorate3([
  property({
    attribute: "show-presence",
    type: Boolean
  }),
  __metadata3("design:type", Boolean)
], MgtPeople.prototype, "showPresence", void 0);
__decorate3([
  property({
    attribute: "person-card",
    converter: (value, type) => {
      value = value.toLowerCase();
      if (typeof PersonCardInteraction[value] === "undefined") {
        return PersonCardInteraction.hover;
      } else {
        return PersonCardInteraction[value];
      }
    }
  }),
  __metadata3("design:type", Number)
], MgtPeople.prototype, "personCardInteraction", void 0);
__decorate3([
  property({
    attribute: "resource",
    type: String
  }),
  __metadata3("design:type", String),
  __metadata3("design:paramtypes", [Object])
], MgtPeople.prototype, "resource", null);
__decorate3([
  property({
    attribute: "version",
    type: String
  }),
  __metadata3("design:type", String),
  __metadata3("design:paramtypes", [Object])
], MgtPeople.prototype, "version", null);
__decorate3([
  property({
    attribute: "scopes",
    converter: (value) => {
      return value ? value.toLowerCase().split(",") : null;
    },
    reflect: true
  }),
  __metadata3("design:type", Array)
], MgtPeople.prototype, "scopes", void 0);
__decorate3([
  property({
    attribute: "fallback-details",
    type: Array
  }),
  __metadata3("design:type", Array),
  __metadata3("design:paramtypes", [Array])
], MgtPeople.prototype, "fallbackDetails", null);
MgtPeople = __decorate3([
  customElement("mgt-people"),
  __metadata3("design:paramtypes", [])
], MgtPeople);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-agenda/mgt-agenda.js
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata4 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter10 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtAgenda = class MgtAgenda2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles4;
  }
  /**
   * stores current date for initial calender selection in events.
   * @type {string}
   */
  get date() {
    return this._date;
  }
  set date(value) {
    if (this._date === value) {
      return;
    }
    this._date = value;
    this.reloadState();
  }
  /**
   * determines if agenda events come from specific group
   * @type {string}
   */
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    if (this._groupId === value) {
      return;
    }
    this._groupId = value;
    this.reloadState();
  }
  /**
   * sets number of days until end date, 3 is the default
   * @type {number}
   */
  get days() {
    return this._days;
  }
  set days(value) {
    if (this._days === value) {
      return;
    }
    this._days = value;
    this.reloadState();
  }
  /**
   * allows developer to specify a different graph query that retrieves events
   * @type {string}
   */
  get eventQuery() {
    return this._eventQuery;
  }
  set eventQuery(value) {
    if (this._eventQuery === value) {
      return;
    }
    this._eventQuery = value;
    this.reloadState();
  }
  /**
   * allows developer to specify preferred timezone that should be used for
   * retrieving events from Graph, eg. `Pacific Standard Time`. The preferred timezone for
   * the current user can be retrieved by calling `me/mailboxSettings` and
   * retrieving the value of the `timeZone` property.
   * @type {string}
   */
  get preferredTimezone() {
    return this._preferredTimezone;
  }
  set preferredTimezone(value) {
    if (this._preferredTimezone === value) {
      return;
    }
    this._preferredTimezone = value;
    this.reloadState();
  }
  /**
   * Get the scopes required for agenda
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtAgenda
   */
  static get requiredScopes() {
    return [.../* @__PURE__ */ new Set(["calendars.read", ...MgtPeople.requiredScopes])];
  }
  constructor() {
    super();
    this._days = 3;
    this.onResize = this.onResize.bind(this);
  }
  /**
   * Determines width available if resize is necessary, adds onResize event listener to window
   *
   * @memberof MgtAgenda
   */
  connectedCallback() {
    this._isNarrow = this.offsetWidth < 600;
    super.connectedCallback();
    window.addEventListener("resize", this.onResize);
  }
  /**
   * Removes onResize event listener from window
   *
   * @memberof MgtAgenda
   */
  disconnectedCallback() {
    window.removeEventListener("resize", this.onResize);
    super.disconnectedCallback();
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.
   * Setting properties inside this method will not trigger the element to update
   *
   * @returns
   * @memberof MgtAgenda
   */
  render() {
    if (!this.events && this.isLoadingState) {
      return this.renderLoading();
    }
    if (!this.events || this.events.length === 0) {
      return this.renderNoData();
    }
    const events = this.showMax && this.showMax > 0 ? this.events.slice(0, this.showMax) : this.events;
    const renderedTemplate = this.renderTemplate("default", { events });
    if (renderedTemplate) {
      return renderedTemplate;
    }
    this._isNarrow = this.offsetWidth < 600;
    return html`
      <div dir=${this.direction} class="agenda${this._isNarrow ? " narrow" : ""}${this.groupByDay ? " grouped" : ""}">
        ${this.groupByDay ? this.renderGroups(events) : this.renderEvents(events)}
        ${this.isLoadingState ? this.renderLoading() : html``}
      </div>
    `;
  }
  /**
   * Reloads the component with its current settings and potential new data
   *
   * @memberof MgtAgenda
   */
  reload() {
    return __awaiter10(this, void 0, void 0, function* () {
      this.events = yield this.loadEvents();
    });
  }
  /**
   * Render the loading state
   *
   * @protected
   * @returns
   * @memberof MgtAgenda
   */
  renderLoading() {
    return this.renderTemplate("loading", null) || html`
        <div class="event">
          <div class="event-time-container">
            <div class="event-time-loading loading-element"></div>
          </div>
          <div class="event-details-container">
            <div class="event-subject-loading loading-element"></div>
            <div class="event-location-container">
              <div class="event-location-icon-loading loading-element"></div>
              <div class="event-location-loading loading-element"></div>
            </div>
            <div class="event-location-container">
              <div class="event-attendee-loading loading-element"></div>
              <div class="event-attendee-loading loading-element"></div>
              <div class="event-attendee-loading loading-element"></div>
            </div>
          </div>
        </div>
      `;
  }
  /**
   * Clears state of the component
   *
   * @protected
   * @memberof MgtAgenda
   */
  clearState() {
    this.events = null;
  }
  /**
   * Render the no-data state.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtAgenda
   */
  renderNoData() {
    return this.renderTemplate("no-data", null) || html``;
  }
  /**
   * Render an individual Event.
   *
   * @protected
   * @param {MicrosoftGraph.Event} event
   * @returns
   * @memberof MgtAgenda
   */
  renderEvent(event) {
    return html`
      <div class="event">
        <div class="event-time-container">
          <div class="event-time" aria-label="${this.getEventTimeString(event)}">${this.getEventTimeString(event)}</div>
        </div>
        <div class="event-details-container">
          ${this.renderTitle(event)} ${this.renderLocation(event)} ${this.renderAttendees(event)}
        </div>
        <div class="event-other-container">${this.renderOther(event)}</div>
      </div>
    `;
  }
  /**
   * Render the header for a group.
   * Only relevant for grouped Events.
   *
   * @protected
   * @param {Date} date
   * @returns
   * @memberof MgtAgenda
   */
  renderHeader(header) {
    return this.renderTemplate("header", { header }, "header-" + header) || html`
        <div class="header" aria-label="${header}">${header}</div>
      `;
  }
  /**
   * Render the title field of an Event
   *
   * @protected
   * @param {MicrosoftGraph.Event} event
   * @returns
   * @memberof MgtAgenda
   */
  renderTitle(event) {
    return html`
      <div aria-label=${event.subject} class="event-subject">${event.subject}</div>
    `;
  }
  /**
   * Render the location field of an Event
   *
   * @protected
   * @param {MicrosoftGraph.Event} event
   * @returns
   * @memberof MgtAgenda
   */
  renderLocation(event) {
    if (!event.location.displayName) {
      return null;
    }
    return html`
      <div class="event-location-container">
        <div class="event-location-icon">${getSvg(SvgIcon.OfficeLocation)}</div>
        <div class="event-location" aria-label="${event.location.displayName}">${event.location.displayName}</div>
      </div>
    `;
  }
  /**
   * Render the attendees field of an Event
   *
   * @protected
   * @param {MicrosoftGraph.Event} event
   * @returns
   * @memberof MgtAgenda
   */
  renderAttendees(event) {
    if (!event.attendees.length) {
      return null;
    }
    return html`
      <mgt-people
        class="event-attendees"
        .peopleQueries=${event.attendees.map((attendee) => {
      return attendee.emailAddress.address;
    })}
      ></mgt-people>
    `;
  }
  /**
   * Render the event other field of an Event
   *
   * @protected
   * @param {MicrosoftGraph.Event} event
   * @returns
   * @memberof MgtAgenda
   */
  renderOther(event) {
    return this.hasTemplate("event-other") ? html`
          ${this.renderTemplate("event-other", { event }, event.id + "-other")}
        ` : null;
  }
  /**
   * Render the events in groups, each with a header.
   *
   * @protected
   * @param {MicrosoftGraph.Event[]} events
   * @returns {TemplateResult}
   * @memberof MgtAgenda
   */
  renderGroups(events) {
    const grouped = {};
    events.forEach((event) => {
      var _a;
      let dateString = (_a = event === null || event === void 0 ? void 0 : event.start) === null || _a === void 0 ? void 0 : _a.dateTime;
      if (event.end.timeZone === "UTC") {
        dateString += "Z";
      }
      const header = this.getDateHeaderFromDateTimeString(dateString);
      grouped[header] = grouped[header] || [];
      grouped[header].push(event);
    });
    return html`
      ${Object.keys(grouped).map((header) => html`
            <div class="group">${this.renderHeader(header)} ${this.renderEvents(grouped[header])}</div>
          `)}
    `;
  }
  /**
   * Render a list of events.
   *
   * @protected
   * @param {MicrosoftGraph.Event[]} events
   * @returns {TemplateResult}
   * @memberof MgtAgenda
   */
  renderEvents(events) {
    return html`
      <ul class="agenda-list">
        ${events.map((event) => html`
              <li @click=${() => this.eventClicked(event)}>
                ${this.renderTemplate("event", { event }, event.id) || this.renderEvent(event)}
              </li>
            `)}
      </ul>
    `;
  }
  /**
   * Load state into the component
   *
   * @protected
   * @returns
   * @memberof MgtAgenda
   */
  loadState() {
    return __awaiter10(this, void 0, void 0, function* () {
      if (this.events) {
        return;
      }
      const events = yield this.loadEvents();
      if (events && events.length > 0) {
        this.events = events;
      }
    });
  }
  reloadState() {
    return __awaiter10(this, void 0, void 0, function* () {
      this.events = null;
      this.requestStateUpdate(true);
    });
  }
  onResize() {
    this._isNarrow = this.offsetWidth < 600;
  }
  eventClicked(event) {
    this.fireCustomEvent("eventClick", { event });
  }
  getEventTimeString(event) {
    if (event.isAllDay) {
      return "ALL DAY";
    }
    let startString = event.start.dateTime;
    if (event.start.timeZone === "UTC") {
      startString += "Z";
    }
    let endString = event.end.dateTime;
    if (event.end.timeZone === "UTC") {
      endString += "Z";
    }
    const start = this.prettyPrintTimeFromDateTime(new Date(startString));
    const end = this.prettyPrintTimeFromDateTime(new Date(endString));
    return `${start} - ${end}`;
  }
  loadEvents() {
    return __awaiter10(this, void 0, void 0, function* () {
      const p = Providers.globalProvider;
      let events = [];
      if (p && p.state === ProviderState.SignedIn) {
        const graph = p.graph.forComponent(this);
        if (this.eventQuery) {
          try {
            const tokens = this.eventQuery.split("|");
            let scope;
            let query;
            if (tokens.length > 1) {
              query = tokens[0].trim();
              scope = tokens[1].trim();
            } else {
              query = this.eventQuery;
            }
            let request = graph.api(query);
            if (scope) {
              request = request.middlewareOptions(prepScopes(scope));
            }
            const results = yield request.get();
            if (results && results.value) {
              events = results.value;
            }
          } catch (e) {
          }
        } else {
          const start = this.date ? new Date(this.date) : new Date();
          const end = new Date(start.getTime());
          end.setDate(start.getDate() + this.days);
          try {
            const iterator = yield getEventsPageIterator(graph, start, end, this.groupId);
            if (iterator && iterator.value) {
              events = iterator.value;
              while (iterator.hasNext) {
                yield iterator.next();
                events = iterator.value;
              }
            }
          } catch (error) {
          }
        }
      }
      return events;
    });
  }
  prettyPrintTimeFromDateTime(date) {
    return date.toLocaleTimeString(navigator.language, {
      timeStyle: "short",
      timeZone: this.preferredTimezone
    });
  }
  getDateHeaderFromDateTimeString(dateTimeString) {
    const date = new Date(dateTimeString);
    return date.toLocaleDateString(navigator.language, {
      dateStyle: "full",
      timeZone: this.preferredTimezone
    });
  }
};
__decorate4([
  property({
    attribute: "date",
    type: String
  }),
  __metadata4("design:type", String),
  __metadata4("design:paramtypes", [Object])
], MgtAgenda.prototype, "date", null);
__decorate4([
  property({
    attribute: "group-id",
    type: String
  }),
  __metadata4("design:type", String),
  __metadata4("design:paramtypes", [Object])
], MgtAgenda.prototype, "groupId", null);
__decorate4([
  property({
    attribute: "days",
    type: Number
  }),
  __metadata4("design:type", Number),
  __metadata4("design:paramtypes", [Object])
], MgtAgenda.prototype, "days", null);
__decorate4([
  property({
    attribute: "event-query",
    type: String
  }),
  __metadata4("design:type", String),
  __metadata4("design:paramtypes", [Object])
], MgtAgenda.prototype, "eventQuery", null);
__decorate4([
  property({
    attribute: "events",
    type: Array
  }),
  __metadata4("design:type", Array)
], MgtAgenda.prototype, "events", void 0);
__decorate4([
  property({
    attribute: "show-max",
    type: Number
  }),
  __metadata4("design:type", Number)
], MgtAgenda.prototype, "showMax", void 0);
__decorate4([
  property({
    attribute: "group-by-day",
    type: Boolean
  }),
  __metadata4("design:type", Boolean)
], MgtAgenda.prototype, "groupByDay", void 0);
__decorate4([
  property({
    attribute: "preferred-timezone",
    type: String
  }),
  __metadata4("design:type", String),
  __metadata4("design:paramtypes", [Object])
], MgtAgenda.prototype, "preferredTimezone", null);
__decorate4([
  property({ attribute: false }),
  __metadata4("design:type", Boolean)
], MgtAgenda.prototype, "_isNarrow", void 0);
MgtAgenda = __decorate4([
  customElement("mgt-agenda"),
  __metadata4("design:paramtypes", [])
], MgtAgenda);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file/mgt-file-css.js
var styles6 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{background-color:#fff}.mgt-dark{background-color:#424242}:host{font-family:var(--font-family,var(--default-font-family))}:host .item,mgt-file .item{display:flex;flex-flow:row nowrap;align-items:center;background-color:var(background-color,#fff)}:host .item__file-type-icon,mgt-file .item__file-type-icon{padding:16px;width:var(--file-type-icon-size,28px);min-width:var(--file-type-icon-size,28px);height:var(--file-type-icon-size,28px);display:flex;align-items:center;justify-content:center}:host .item__file-type-icon img,mgt-file .item__file-type-icon img{height:var(--file-type-icon-size,28px);width:var(--file-type-icon-size,28px)}:host .item__details,mgt-file .item__details{padding:10px 0}:host .item__details .line1,mgt-file .item__details .line1{font-size:var(--font-size,14px);font-weight:var(--font-weight,400);text-transform:var(text-transform,none);line-height:20px;color:var(--color-sub1,#323130)}:host .item__details .line2,mgt-file .item__details .line2{color:var(--line2-color,var(--color-sub1,#323130));font-size:var(--line2-font-size,var(--last-modified-font-size,12px));font-weight:var(--line2-font-weight,400);text-transform:var(--line2-text-transform,var(text-transform,none));line-height:16px}:host .item__details .line3,mgt-file .item__details .line3{color:var(--line3-color,var(--color-sub1,#323130));font-size:var(--line3-font-size,var(--size-font-size,12px));font-weight:var(--line3-font-weight,400);text-transform:var(--line3-text-transform,var(text-transform,none));line-height:16px}[dir=rtl] .item__details{direction:ltr}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/graph/graph.files.js
var __awaiter11 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function clearFilesCache() {
  let cache3;
  cache3 = CacheService.getCache(schemas.fileLists, schemas.fileLists.stores.fileLists);
  cache3.clearStore();
}
var getFileInvalidationTime = () => CacheService.config.files.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsFilesCacheEnabled = () => CacheService.config.files.isEnabled && CacheService.config.isEnabled;
var getFileListInvalidationTime = () => CacheService.config.fileLists.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsFileListsCacheEnabled = () => CacheService.config.fileLists.isEnabled && CacheService.config.isEnabled;
function getDriveItemByQuery(graph, resource) {
  return __awaiter11(this, void 0, void 0, function* () {
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.fileQueries);
    const cachedFile = yield getFileFromCache(cache3, resource);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(resource).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(resource, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getDriveItemById(graph, driveId, itemId) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/drives/${driveId}/items/${itemId}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.driveFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getDriveItemByPath(graph, driveId, itemPath) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/drives/${driveId}/root:/${itemPath}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.driveFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getGroupDriveItemById(graph, groupId, itemId) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/groups/${groupId}/drive/items/${itemId}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.groupFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getGroupDriveItemByPath(graph, groupId, itemPath) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/groups/${groupId}/drive/root:/${itemPath}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.groupFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getMyDriveItemById(graph, itemId) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/me/drive/items/${itemId}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getMyDriveItemByPath(graph, itemPath) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/me/drive/root:/${itemPath}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getSiteDriveItemById(graph, siteId, itemId) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/sites/${siteId}/drive/items/${itemId}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.siteFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getSiteDriveItemByPath(graph, siteId, itemPath) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/sites/${siteId}/drive/root:/${itemPath}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.siteFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getListDriveItemById(graph, siteId, listId, itemId) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/sites/${siteId}/lists/${listId}/items/${itemId}/driveItem`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.siteFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getUserDriveItemById(graph, userId, itemId) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/users/${userId}/drive/items/${itemId}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getUserDriveItemByPath(graph, userId, itemPath) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/users/${userId}/drive/root:/${itemPath}`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "files.read";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getMyInsightsDriveItemById(graph, insightType, id) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/me/insights/${insightType}/${id}/resource`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.insightFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "sites.read.all";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getUserInsightsDriveItemById(graph, userId, insightType, id) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/users/${userId}/insights/${insightType}/${id}/resource`;
    let cache3;
    cache3 = CacheService.getCache(schemas.files, schemas.files.stores.insightFiles);
    const cachedFile = yield getFileFromCache(cache3, endpoint);
    if (cachedFile) {
      return cachedFile;
    }
    const scopes = "sites.read.all";
    let response;
    try {
      response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
      if (getIsFilesCacheEnabled()) {
        cache3.putValue(endpoint, { file: JSON.stringify(response) });
      }
    } catch (_a) {
    }
    return response || null;
  });
}
function getFilesIterator(graph, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = "/me/drive/root/children";
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getDriveFilesByIdIterator(graph, driveId, itemId, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/drives/${driveId}/items/${itemId}/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getDriveFilesByPathIterator(graph, driveId, itemPath, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/drives/${driveId}/root:/${itemPath}:/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getGroupFilesByIdIterator(graph, groupId, itemId, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/groups/${groupId}/drive/items/${itemId}/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getGroupFilesByPathIterator(graph, groupId, itemPath, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/groups/${groupId}/drive/root:/${itemPath}:/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getFilesByIdIterator(graph, itemId, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/me/drive/items/${itemId}/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getFilesByPathIterator(graph, itemPath, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/me/drive/root:/${itemPath}:/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getSiteFilesByIdIterator(graph, siteId, itemId, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/sites/${siteId}/drive/items/${itemId}/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getSiteFilesByPathIterator(graph, siteId, itemPath, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/sites/${siteId}/drive/root:/${itemPath}:/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getUserFilesByIdIterator(graph, userId, itemId, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/users/${userId}/drive/items/${itemId}/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getUserFilesByPathIterator(graph, userId, itemPath, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/users/${userId}/drive/root:/${itemPath}:/children`;
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = "files.read";
    let request;
    try {
      request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getFilesByListQueryIterator(graph, listQuery, top) {
  return __awaiter11(this, void 0, void 0, function* () {
    let filesPageIterator;
    let cache3;
    const cacheStore = schemas.fileLists.stores.fileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, listQuery);
    if (fileList) {
      filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
      return filesPageIterator;
    }
    const scopes = ["files.read", "sites.read.all"];
    let request;
    try {
      request = yield graph.api(listQuery).middlewareOptions(prepScopes(...scopes));
      if (top) {
        request.top(top);
      }
      filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
      if (getIsFileListsCacheEnabled()) {
        cache3.putValue(listQuery, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
      }
    } catch (_a) {
    }
    return filesPageIterator || null;
  });
}
function getMyInsightsFiles(graph, insightType) {
  return __awaiter11(this, void 0, void 0, function* () {
    const endpoint = `/me/insights/${insightType}`;
    let cache3;
    const cacheStore = schemas.fileLists.stores.insightfileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, endpoint);
    if (fileList) {
      return fileList.files;
    }
    const scopes = ["sites.read.all"];
    let insightResponse;
    try {
      insightResponse = yield graph.api(endpoint).filter(`resourceReference/type eq 'microsoft.graph.driveItem'`).middlewareOptions(prepScopes(...scopes)).get();
    } catch (_a) {
    }
    const result2 = yield getDriveItemsByInsights(graph, insightResponse, scopes);
    if (getIsFileListsCacheEnabled()) {
      cache3.putValue(endpoint, { files: result2 });
    }
    return result2 || null;
  });
}
function getUserInsightsFiles(graph, userId, insightType) {
  return __awaiter11(this, void 0, void 0, function* () {
    let endpoint;
    let filter2;
    if (insightType === "shared") {
      endpoint = `/me/insights/shared`;
      filter2 = `((lastshared/sharedby/id eq '${userId}') and (resourceReference/type eq 'microsoft.graph.driveItem'))`;
    } else {
      endpoint = `/users/${userId}/insights/${insightType}`;
      filter2 = `resourceReference/type eq 'microsoft.graph.driveItem'`;
    }
    const key = `${endpoint}?$filter=${filter2}`;
    let cache3;
    const cacheStore = schemas.fileLists.stores.insightfileLists;
    cache3 = CacheService.getCache(schemas.fileLists, cacheStore);
    const fileList = yield getFileListFromCache(cache3, cacheStore, key);
    if (fileList) {
      return fileList.files;
    }
    const scopes = ["sites.read.all"];
    let insightResponse;
    try {
      insightResponse = yield graph.api(endpoint).filter(filter2).middlewareOptions(prepScopes(...scopes)).get();
    } catch (_a) {
    }
    const result2 = yield getDriveItemsByInsights(graph, insightResponse, scopes);
    if (getIsFileListsCacheEnabled()) {
      cache3.putValue(endpoint, { files: result2 });
    }
    return result2 || null;
  });
}
function getFilesByQueries(graph, fileQueries) {
  return __awaiter11(this, void 0, void 0, function* () {
    if (!fileQueries || fileQueries.length === 0) {
      return [];
    }
    const batch = graph.createBatch();
    const files = [];
    const scopes = ["files.read"];
    let cache3;
    let cachedFile;
    if (getIsFilesCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.files, schemas.files.stores.fileQueries);
    }
    for (const fileQuery of fileQueries) {
      if (getIsFilesCacheEnabled()) {
        cachedFile = yield cache3.getValue(fileQuery);
      }
      if (getIsFilesCacheEnabled() && cachedFile && getFileInvalidationTime() > Date.now() - cachedFile.timeCached) {
        files.push(JSON.parse(cachedFile.file));
      } else if (fileQuery !== "") {
        batch.get(fileQuery, fileQuery, scopes);
      }
    }
    try {
      const responses = yield batch.executeAll();
      for (const fileQuery of fileQueries) {
        const response = responses.get(fileQuery);
        if (response && response.content) {
          files.push(response.content);
          if (getIsFilesCacheEnabled()) {
            cache3.putValue(fileQuery, { file: JSON.stringify(response.content) });
          }
        }
      }
      return files;
    } catch (_) {
      try {
        return Promise.all(fileQueries.filter((fileQuery) => fileQuery && fileQuery !== "").map((fileQuery) => __awaiter11(this, void 0, void 0, function* () {
          const file = yield getDriveItemByQuery(graph, fileQuery);
          if (file) {
            if (getIsFilesCacheEnabled()) {
              cache3.putValue(fileQuery, { file: JSON.stringify(file) });
            }
            return file;
          }
        })));
      } catch (_2) {
        return [];
      }
    }
  });
}
function getDriveItemsByInsights(graph, insightResponse, scopes) {
  return __awaiter11(this, void 0, void 0, function* () {
    if (!insightResponse) {
      return [];
    }
    const insightItems = insightResponse.value;
    const batch = graph.createBatch();
    const driveItems = [];
    for (const item of insightItems) {
      const driveItemId = item.resourceReference.id;
      if (driveItemId !== "") {
        batch.get(driveItemId, driveItemId, scopes);
      }
    }
    try {
      const driveItemResponses = yield batch.executeAll();
      for (const item of insightItems) {
        const driveItemResponse = driveItemResponses.get(item.resourceReference.id);
        if (driveItemResponse && driveItemResponse.content) {
          driveItems.push(driveItemResponse.content);
        }
      }
      return driveItems;
    } catch (_) {
      try {
        return Promise.all(insightItems.filter((insightItem) => insightItem.resourceReference.id && insightItem.resourceReference.id !== "").map((insightItem) => __awaiter11(this, void 0, void 0, function* () {
          const driveItemResponses = yield graph.api(insightItem.resourceReference.id).middlewareOptions(prepScopes(...scopes)).get();
          if (driveItemResponses && driveItemResponses.length) {
            return driveItemResponses[0].content;
          }
        })));
      } catch (_2) {
        return [];
      }
    }
  });
}
function getFilesPageIteratorFromRequest(graph, request) {
  return __awaiter11(this, void 0, void 0, function* () {
    return GraphPageIterator.create(graph, request);
  });
}
function getFilesPageIteratorFromCache(graph, value, nextLink) {
  return __awaiter11(this, void 0, void 0, function* () {
    return GraphPageIterator.createFromValue(graph, value, nextLink);
  });
}
function getFileFromCache(cache3, key) {
  return __awaiter11(this, void 0, void 0, function* () {
    if (getIsFilesCacheEnabled()) {
      const file = yield cache3.getValue(key);
      if (file && getFileInvalidationTime() > Date.now() - file.timeCached) {
        const cachedFile = JSON.parse(file.file);
        return cachedFile;
      }
    }
    return null;
  });
}
function getFileListFromCache(cache3, store, key) {
  return __awaiter11(this, void 0, void 0, function* () {
    if (!cache3) {
      cache3 = CacheService.getCache(schemas.fileLists, store);
    }
    if (getIsFileListsCacheEnabled()) {
      const fileList = yield cache3.getValue(key);
      if (fileList && getFileListInvalidationTime() > Date.now() - fileList.timeCached) {
        return fileList;
      }
    }
    return null;
  });
}
function fetchNextAndCacheForFilesPageIterator(filesPageIterator) {
  return __awaiter11(this, void 0, void 0, function* () {
    const nextLink = filesPageIterator._nextLink;
    if (filesPageIterator.hasNext) {
      yield filesPageIterator.next();
    }
    if (getIsFileListsCacheEnabled()) {
      let cache3;
      cache3 = CacheService.getCache(schemas.fileLists, schemas.fileLists.stores.fileLists);
      const reg = /(graph.microsoft.com\/(v1.0|beta))(.*?)(?=\?)/gi;
      const matches3 = reg.exec(nextLink);
      const key = matches3[3];
      cache3.putValue(key, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
    }
  });
}
function getDocumentThumbnail(graph, resource, scopes) {
  return __awaiter11(this, void 0, void 0, function* () {
    try {
      const response = yield graph.api(resource).responseType(ResponseType.RAW).middlewareOptions(prepScopes(...scopes)).get();
      if (response.status === 404) {
        return { eTag: null, thumbnail: null };
      } else if (!response.ok) {
        return null;
      }
      const eTag = response.headers.get("eTag");
      const blob = yield blobToBase64(yield response.blob());
      return { eTag, thumbnail: blob };
    } catch (e) {
      return null;
    }
  });
}
function getGraphfile(graph, resource) {
  return __awaiter11(this, void 0, void 0, function* () {
    try {
      const scopes = "files.read";
      let response;
      try {
        response = yield graph.api(resource).middlewareOptions(prepScopes(scopes)).get().catch((error) => {
          return null;
        });
      } catch (_a) {
      }
      return response || null;
    } catch (e) {
      return null;
    }
  });
}
function getUploadSession(graph, resource, conflictBehavior) {
  return __awaiter11(this, void 0, void 0, function* () {
    try {
      const scopes = "files.readwrite";
      const sessionOptions = {
        item: {
          "@microsoft.graph.conflictBehavior": conflictBehavior === 0 || conflictBehavior === null ? "rename" : "replace"
        }
      };
      let response;
      try {
        response = yield graph.api(resource).middlewareOptions(prepScopes(scopes)).post(JSON.stringify(sessionOptions));
      } catch (_a) {
      }
      return response || null;
    } catch (e) {
      return null;
    }
  });
}
function sendFileChunck(graph, resource, contentLength, contentRange, file) {
  return __awaiter11(this, void 0, void 0, function* () {
    try {
      const scopes = "files.readwrite";
      const header = {
        "Content-Length": contentLength,
        "Content-Range": contentRange
      };
      let response;
      try {
        response = yield graph.client.api(resource).middlewareOptions(prepScopes(scopes)).headers(header).put(file);
      } catch (_a) {
      }
      return response || null;
    } catch (e) {
      return null;
    }
  });
}
function sendFileContent(graph, resource, file) {
  return __awaiter11(this, void 0, void 0, function* () {
    try {
      const scopes = "files.readwrite";
      let response;
      try {
        response = yield graph.client.api(resource).middlewareOptions(prepScopes(scopes)).put(file);
      } catch (_a) {
      }
      return response || null;
    } catch (e) {
      return null;
    }
  });
}
function deleteSessionFile(graph, resource) {
  return __awaiter11(this, void 0, void 0, function* () {
    try {
      const scopes = "files.readwrite";
      let response;
      try {
        response = yield graph.client.api(resource).middlewareOptions(prepScopes(scopes)).delete((response2) => {
          return response2;
        });
      } catch (_a) {
      }
      return response || null;
    } catch (e) {
      return null;
    }
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/styles/fluent-icons.js
var fileTypeMap = {
  PowerPoint: "pptx",
  Word: "docx",
  Excel: "xlsx",
  Pdf: "pdf",
  OneNote: "onetoc",
  OneNotePage: "one",
  InfoPath: "xsn",
  Visio: "vstx",
  Publisher: "pub",
  Project: "mpp",
  Access: "accdb",
  Mail: "email",
  Csv: "csv",
  Archive: "archive",
  Xps: "vector",
  Audio: "audio",
  Video: "video",
  Image: "photo",
  Web: "html",
  Text: "txt",
  Xml: "xml",
  Story: "genericfile",
  ExternalContent: "genericfile",
  Folder: "folder",
  Spsite: "spo",
  Other: "genericfile"
};
var baseUri = "https://spoprod-a.akamaihd.net/files/fabric-cdn-prod_20201008.001/assets/item-types";
function getFileTypeIconUri(type, size2, extension) {
  const fileType = fileTypeMap[type] || "genericfile";
  return `${baseUri}/${size2.toString()}/${fileType}.${extension}`;
}
function getFileTypeIconUriByExtension(type, size2, extension) {
  const found = Object.keys(fileTypeMap).find((key) => fileTypeMap[key] === type);
  if (found) {
    return `${baseUri}/${size2.toString()}/${type}.${extension}`;
  } else if (type === "jpg" || type === "png") {
    type = "photo";
    return `${baseUri}/${size2.toString()}/${type}.${extension}`;
  } else {
    return null;
  }
}

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file/strings.js
var strings2 = {
  modifiedSubtitle: "Modified",
  sizeSubtitle: "Size"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file/mgt-file.js
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata5 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter12 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtFile = class MgtFile2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles6;
  }
  get strings() {
    return strings2;
  }
  /**
   * allows developer to provide query for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get fileQuery() {
    return this._fileQuery;
  }
  set fileQuery(value) {
    if (value === this._fileQuery) {
      return;
    }
    this._fileQuery = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide site id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get siteId() {
    return this._siteId;
  }
  set siteId(value) {
    if (value === this._siteId) {
      return;
    }
    this._siteId = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide drive id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get driveId() {
    return this._driveId;
  }
  set driveId(value) {
    if (value === this._driveId) {
      return;
    }
    this._driveId = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide group id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    if (value === this._groupId) {
      return;
    }
    this._groupId = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide list id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get listId() {
    return this._listId;
  }
  set listId(value) {
    if (value === this._listId) {
      return;
    }
    this._listId = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide user id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get userId() {
    return this._userId;
  }
  set userId(value) {
    if (value === this._userId) {
      return;
    }
    this._userId = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide item id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get itemId() {
    return this._itemId;
  }
  set itemId(value) {
    if (value === this._itemId) {
      return;
    }
    this._itemId = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide item path for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get itemPath() {
    return this._itemPath;
  }
  set itemPath(value) {
    if (value === this._itemPath) {
      return;
    }
    this._itemPath = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide insight type for a file
   * can be trending, used, or shared
   *
   * @type {OfficeGraphInsightString}
   * @memberof MgtFile
   */
  get insightType() {
    return this._insightType;
  }
  set insightType(value) {
    if (value === this._insightType) {
      return;
    }
    this._insightType = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide insight id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get insightId() {
    return this._insightId;
  }
  set insightId(value) {
    if (value === this._insightId) {
      return;
    }
    this._insightId = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide DriveItem object
   *
   * @type {MicrosoftGraph.DriveItem}
   * @memberof MgtFile
   */
  get fileDetails() {
    return this._fileDetails;
  }
  set fileDetails(value) {
    if (value === this._fileDetails) {
      return;
    }
    this._fileDetails = value;
    this.requestStateUpdate();
  }
  /**
   * allows developer to provide file type icon url
   *
   * @type {string}
   * @memberof MgtFile
   */
  get fileIcon() {
    return this._fileIcon;
  }
  set fileIcon(value) {
    if (value === this._fileIcon) {
      return;
    }
    this._fileIcon = value;
    this.requestStateUpdate();
  }
  /**
   * Get the scopes required for file
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtFile
   */
  static get requiredScopes() {
    return [.../* @__PURE__ */ new Set(["files.read", "files.read.all", "sites.read.all"])];
  }
  constructor() {
    super();
    this.line1Property = "name";
    this.line2Property = "lastModifiedDateTime";
    this.line3Property = "size";
    this.view = ViewType.threelines;
  }
  render() {
    if (!this.driveItem && this.isLoadingState) {
      return this.renderLoading();
    }
    if (!this.driveItem) {
      return this.renderNoData();
    }
    const file = this.driveItem;
    let fileTemplate;
    fileTemplate = this.renderTemplate("default", { file });
    if (!fileTemplate) {
      const fileDetailsTemplate = this.renderDetails(file);
      const fileTypeIconTemplate = this.renderFileTypeIcon();
      fileTemplate = html`
        <div class="item">
          ${fileTypeIconTemplate} ${fileDetailsTemplate}
        </div>
      `;
    }
    return html`
      <span dir=${this.direction}>
        ${fileTemplate}
      </span>
    `;
  }
  /**
   * Render the loading state
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtFile
   */
  renderLoading() {
    return this.renderTemplate("loading", null) || html``;
  }
  /**
   * Render the state when no data is available
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtFile
   */
  renderNoData() {
    return this.renderTemplate("no-data", null) || html``;
  }
  /**
   * Render the file type icon
   *
   * @protected
   * @param {string} [iconSrc]
   * @memberof MgtFile
   */
  renderFileTypeIcon() {
    if (!this.fileIcon && !this.driveItem.name) {
      return html``;
    }
    let fileIconSrc;
    if (this.fileIcon) {
      fileIconSrc = this.fileIcon;
    } else {
      const re = /(?:\.([^.]+))?$/;
      const fileType = this.driveItem.package === void 0 && this.driveItem.folder === void 0 ? re.exec(this.driveItem.name)[1] ? re.exec(this.driveItem.name)[1].toLowerCase() : "null" : this.driveItem.package !== void 0 ? this.driveItem.package.type === "oneNote" ? "onetoc" : "folder" : "folder";
      fileIconSrc = getFileTypeIconUriByExtension(fileType, 48, "svg");
    }
    return html`
      <div class="item__file-type-icon">
        ${fileIconSrc ? html`
              <img src=${fileIconSrc} alt="File icon" />
            ` : html`
              ${getSvg(SvgIcon.File)}
            `}
      </div>
    `;
  }
  /**
   * Render the file details
   *
   * @protected
   * @param {MicrosoftGraph.DriveItem} [driveItem]
   * @memberof MgtFile
   */
  renderDetails(driveItem) {
    if (!driveItem || this.view === ViewType.image) {
      return html``;
    }
    const details = [];
    if (this.view > ViewType.image) {
      const text = this.getTextFromProperty(driveItem, this.line1Property);
      if (text) {
        details.push(html`
          <div class="line1" aria-label="${text}">${text}</div>
        `);
      }
    }
    if (this.view > ViewType.oneline) {
      const text = this.getTextFromProperty(driveItem, this.line2Property);
      if (text) {
        details.push(html`
          <div class="line2" aria-label="${text}">${text}</div>
        `);
      }
    }
    if (this.view > ViewType.twolines) {
      const text = this.getTextFromProperty(driveItem, this.line3Property);
      if (text) {
        details.push(html`
          <div class="line3" aria-label="${text}">${text}</div>
        `);
      }
    }
    return html`
      <div class="item__details">
        ${details}
      </div>
    `;
  }
  /**
   * load state into the component.
   *
   * @protected
   * @returns
   * @memberof MgtFile
   */
  loadState() {
    return __awaiter12(this, void 0, void 0, function* () {
      if (this.fileDetails) {
        this.driveItem = this.fileDetails;
        return;
      }
      const provider = Providers.globalProvider;
      if (!provider || provider.state === ProviderState.Loading) {
        return;
      }
      if (provider.state === ProviderState.SignedOut) {
        this.driveItem = null;
        return;
      }
      const graph = provider.graph.forComponent(this);
      let driveItem;
      const getFromMyDrive = !this.driveId && !this.siteId && !this.groupId && !this.listId && !this.userId;
      if (
        // return null when a combination of provided properties are required
        this.driveId && !this.itemId && !this.itemPath || this.siteId && !this.itemId && !this.itemPath || this.groupId && !this.itemId && !this.itemPath || this.listId && !this.siteId && !this.itemId || this.insightType && !this.insightId || this.userId && !this.itemId && !this.itemPath && !this.insightType && !this.insightId
      ) {
        driveItem = null;
      } else if (this.fileQuery) {
        driveItem = yield getDriveItemByQuery(graph, this.fileQuery);
      } else if (this.itemId && getFromMyDrive) {
        driveItem = yield getMyDriveItemById(graph, this.itemId);
      } else if (this.itemPath && getFromMyDrive) {
        driveItem = yield getMyDriveItemByPath(graph, this.itemPath);
      } else if (this.userId) {
        if (this.itemId) {
          driveItem = yield getUserDriveItemById(graph, this.userId, this.itemId);
        } else if (this.itemPath) {
          driveItem = yield getUserDriveItemByPath(graph, this.userId, this.itemPath);
        } else if (this.insightType && this.insightId) {
          driveItem = yield getUserInsightsDriveItemById(graph, this.userId, this.insightType, this.insightId);
        }
      } else if (this.driveId) {
        if (this.itemId) {
          driveItem = yield getDriveItemById(graph, this.driveId, this.itemId);
        } else if (this.itemPath) {
          driveItem = yield getDriveItemByPath(graph, this.driveId, this.itemPath);
        }
      } else if (this.siteId && !this.listId) {
        if (this.itemId) {
          driveItem = yield getSiteDriveItemById(graph, this.siteId, this.itemId);
        } else if (this.itemPath) {
          driveItem = yield getSiteDriveItemByPath(graph, this.siteId, this.itemPath);
        }
      } else if (this.listId) {
        driveItem = yield getListDriveItemById(graph, this.siteId, this.listId, this.itemId);
      } else if (this.groupId) {
        if (this.itemId) {
          driveItem = yield getGroupDriveItemById(graph, this.groupId, this.itemId);
        } else if (this.itemPath) {
          driveItem = yield getGroupDriveItemByPath(graph, this.groupId, this.itemPath);
        }
      } else if (this.insightType && !this.userId) {
        driveItem = yield getMyInsightsDriveItemById(graph, this.insightType, this.insightId);
      }
      this.driveItem = driveItem;
    });
  }
  getTextFromProperty(driveItem, properties) {
    if (!properties || properties.length === 0) {
      return null;
    }
    const propertyList = properties.trim().split(",");
    let text;
    let i = 0;
    while (!text && i < propertyList.length) {
      const current = propertyList[i].trim();
      switch (current) {
        case "size":
          let size2;
          if (driveItem.size) {
            size2 = this.formatBytes(driveItem.size);
          } else {
            size2 = "0";
          }
          text = `${this.strings.sizeSubtitle}: ${size2}`;
          break;
        case "lastModifiedDateTime":
          let relativeDateString;
          let lastModifiedString;
          if (driveItem.lastModifiedDateTime) {
            const lastModifiedDateTime = new Date(driveItem.lastModifiedDateTime);
            relativeDateString = getRelativeDisplayDate(lastModifiedDateTime);
            lastModifiedString = `${this.strings.modifiedSubtitle} ${relativeDateString}`;
          } else {
            lastModifiedString = "";
          }
          text = lastModifiedString;
          break;
        default:
          text = driveItem[current];
      }
      i++;
    }
    return text;
  }
  formatBytes(bytes, decimals = 2) {
    if (bytes === 0)
      return "0 Bytes";
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
  }
};
__decorate5([
  property({
    attribute: "file-query"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "fileQuery", null);
__decorate5([
  property({
    attribute: "site-id"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "siteId", null);
__decorate5([
  property({
    attribute: "drive-id"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "driveId", null);
__decorate5([
  property({
    attribute: "group-id"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "groupId", null);
__decorate5([
  property({
    attribute: "list-id"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "listId", null);
__decorate5([
  property({
    attribute: "user-id"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "userId", null);
__decorate5([
  property({
    attribute: "item-id"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "itemId", null);
__decorate5([
  property({
    attribute: "item-path"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "itemPath", null);
__decorate5([
  property({
    attribute: "insight-type"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "insightType", null);
__decorate5([
  property({
    attribute: "insight-id"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "insightId", null);
__decorate5([
  property({
    type: Object
  }),
  __metadata5("design:type", Object),
  __metadata5("design:paramtypes", [Object])
], MgtFile.prototype, "fileDetails", null);
__decorate5([
  property({
    attribute: "file-icon"
  }),
  __metadata5("design:type", String),
  __metadata5("design:paramtypes", [String])
], MgtFile.prototype, "fileIcon", null);
__decorate5([
  property({ type: Object }),
  __metadata5("design:type", Object)
], MgtFile.prototype, "driveItem", void 0);
__decorate5([
  property({ attribute: "line1-property" }),
  __metadata5("design:type", String)
], MgtFile.prototype, "line1Property", void 0);
__decorate5([
  property({ attribute: "line2-property" }),
  __metadata5("design:type", String)
], MgtFile.prototype, "line2Property", void 0);
__decorate5([
  property({ attribute: "line3-property" }),
  __metadata5("design:type", String)
], MgtFile.prototype, "line3Property", void 0);
__decorate5([
  property({
    attribute: "view",
    converter: (value) => {
      if (!value || value.length === 0) {
        return ViewType.threelines;
      }
      value = value.toLowerCase();
      if (typeof ViewType[value] === "undefined") {
        return ViewType.threelines;
      } else {
        return ViewType[value];
      }
    }
  }),
  __metadata5("design:type", Number)
], MgtFile.prototype, "view", void 0);
MgtFile = __decorate5([
  customElement("mgt-file"),
  __metadata5("design:paramtypes", [])
], MgtFile);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file-list/mgt-file-upload/mgt-file-upload-css.js
var styles7 = [
  css`
.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--file-item-background-color--hover:rgba(0, 0, 0, 0.1);--file-item-background-color--active:rgba(0, 0, 0, 0.05);--file-upload-button-background-color:#f3f2f1;--file-upload-dialog-background-color:rgba(0, 0, 0, 0.1);--file-upload-dialog-content-background-color:white;--file-upload-dialog-content-color:#323130;--file-upload-dialog-primarybutton-color:white;--file-upload-dialog-primarybutton-background-color:#006cbe}.mgt-dark{--file-item-background-color--hover:#0078d4;--file-item-background-color--active:#238ada;--file-upload-button-background-color:#006cbe;--file-upload-dialog-background-color:rgba(0, 0, 0, 0.3);--file-upload-dialog-content-background-color:#4a4a4a;--file-upload-dialog-content-color:white;--file-upload-dialog-primarybutton-color:white;--file-upload-dialog-primarybutton-background-color:#006cbe}:host .file-upload-area-button{width:100%}:host .file-upload-area-button div{float:var(--file-upload-button-float,right);text-align:center;display:table;margin-top:39px;margin-right:16px;margin-left:16px}:host .file-upload-area-button fluent-button.file-upload-button{color:var(--file-upload-button-color,inherit);vertical-align:middle;display:table-cell;background-color:var(--file-upload-button-background-color,#f3f2f1);width:120px;height:32px;cursor:pointer;font-size:var(--default-font-size);font-family:var(--default-font-family);position:relative}:host .file-upload-area-button fluent-button.file-upload-button:hover{background-color:var(--file-item-background-color--hover,rgba(0,0,0,.1))}:host .file-upload-area-button input{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}:host .file-upload-table{margin:var(--file-item-margin,0)}:host .file-upload-table .file-upload-cell{padding:1px 0 1px 1px;display:table-cell;width:50%;vertical-align:middle;position:relative}:host .file-upload-table .file-upload-cell .file-upload-filename{max-width:250px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host .file-upload-table .file-upload-cell .file-upload-status{position:absolute;top:12px;left:16px}:host .file-upload-table .file-upload-cell fluent-progress.file-upload-bar{width:180px;margin-top:10px}:host .file-upload-table .file-upload-cell .file-upload-cancel{cursor:pointer;margin-left:20px}:host .file-upload-table .file-upload-cell .file-upload-name{width:auto}:host .file-upload-table .file-upload-cell .cancel-icon{fill:var(--file-upload-button-color,var(--color,inherit))}:host .file-upload-table.upload{display:table;width:260px}:host .mgt-file-item{--file-background-color:transparent}:host .upload-icon{fill:var(--file-upload-button-color,var(--color,inherit));height:12px}:host .file-upload-Template{clear:both}:host .file-upload-Template .file-upload-folder-tab{padding-left:20px}:host #file-upload-border{display:none}:host #file-upload-border.visible{border:var(--file-upload-border,dashed #0078d4 1px);background-color:var(--file-upload-background-color,rgba(0,120,212,.1));position:absolute;top:0;bottom:0;left:0;right:0;z-index:1;display:inline-block}:host .file-upload-dialog{display:none}:host .file-upload-dialog .file-upload-dialog-content{background-color:var(--file-upload-dialog-content-background-color,#fff);margin:auto;padding:24px;width:294px;height:auto;margin-top:165px;font-size:var(--default-font-size);font-family:var(--default-font-family);box-shadow:var(--file-list-box-shadow,0 3.2px 7.2px rgba(0,0,0,.132),0 .6px 1.8px rgba(0,0,0,.108));line-height:20px}:host .file-upload-dialog .file-upload-dialog-content div{color:var(--file-upload-dialog-content-color,#323130)}:host .file-upload-dialog .file-upload-dialog-check-wrapper{margin-top:12px}:host .file-upload-dialog fluent-checkbox.file-upload-dialog-check{--neutral-fill-input-rest:$file-upload-dialog-content-color}:host .file-upload-dialog fluent-checkbox.file-upload-dialog-check span{color:var(--file-upload-dialog-content-color,#323130)}:host .file-upload-dialog .file-upload-dialog-content-text{margin-bottom:36px}:host .file-upload-dialog .file-upload-dialog-title{margin-top:0}:host .file-upload-dialog .file-upload-dialog-editor{text-align:right}:host .file-upload-dialog .file-upload-dialog-close{float:right;cursor:pointer}:host .file-upload-dialog .file-upload-dialog-close svg{fill:var(--file-upload-button-color,var(--color,inherit));padding-right:5px}:host .file-upload-dialog .file-upload-dialog-ok{height:32px;min-width:60px;border:1px solid var(--file-upload-dialog-primarybutton-background-color,#006cbe);background-color:var(--file-upload-dialog-primarybutton-background-color,#006cbe);color:var(--file-upload-dialog-primarybutton-color,#fff);font-size:var(--default-font-size);margin-right:5px}:host .file-upload-dialog .file-upload-dialog-cancel{height:32px;min-width:82px;border:1px solid #8a8886;background-color:var(--file-upload-dialog-content-background-color,#fff);color:var(--file-upload-dialog-content-color,#323130);font-size:var(--default-font-size)}:host .file-upload-dialog.visible{position:absolute;z-index:1;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:var(--file-upload-dialog-background-color,rgba(0,0,0,.1));display:inline-block}:host fluent-checkbox.file-upload-dialog-check.hide{display:none}:host .file-upload-dialog-success{border-top:var(--file-item-border-top,none);border-left:var(--file-item-border-left,none);border-right:var(--file-item-border-right,none);border-bottom:var(--file-item-border-bottom,none);border-radius:var(--file-item-border-radius,2px);cursor:pointer}:host .file-upload-dialog-success.focused,:host .file-upload-dialog-success:hover{background-color:var(--file-item-background-color--hover,rgba(0,0,0,.1))}:host .file-upload-dialog-success.focused mgt-file,:host .file-upload-dialog-success:hover mgt-file{--file-background-color:$file-item-background-color--hover}:host .file-upload-dialog-success.selected,:host .file-upload-dialog-success:active{background-color:var(--file-item-background-color--active,rgba(0,0,0,.05))}:host .file-upload-dialog-success.selected mgt-file,:host .file-upload-dialog-success:active mgt-file{--file-background-color:$file-item-background-color--active}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file-list/mgt-file-upload/strings.js
var strings3 = {
  failUploadFile: "File upload fail.",
  cancelUploadFile: "File cancel.",
  buttonUploadFile: "Upload Files",
  maximumFilesTitle: "Maximum files",
  maximumFiles: "Sorry, the maximum number of files you can upload at once is {MaxNumber}. Do you want to upload the first {MaxNumber} files or reselect?",
  maximumFileSizeTitle: "Maximum files size",
  maximumFileSize: 'Sorry, the maximum file size to upload is {FileSize}. The file "{FileName}" has ',
  fileTypeTitle: "File type",
  fileType: 'Sorry, the format of following file "{FileName}" cannot be uploaded.',
  checkAgain: "Don't show again",
  checkApplyAll: "Apply to all",
  buttonOk: "OK",
  buttonCancel: "Cancel",
  buttonUpload: "Upload",
  buttonKeep: "Keep",
  buttonReplace: "Replace",
  buttonReselect: "Reselect",
  fileReplaceTitle: "Replace file",
  fileReplace: 'Do you want to replace the file "{FileName}" or keep file with new name?'
};

// node_modules/@fluentui/web-components/node_modules/tslib/tslib.es6.js
function __decorate6(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

// node_modules/@microsoft/fast-element/dist/esm/platform.js
var $global = function() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  try {
    return new Function("return this")();
  } catch (_a) {
    return {};
  }
}();
if ($global.trustedTypes === void 0) {
  $global.trustedTypes = { createPolicy: (n, r) => r };
}
var propConfig = {
  configurable: false,
  enumerable: false,
  writable: false
};
if ($global.FAST === void 0) {
  Reflect.defineProperty($global, "FAST", Object.assign({ value: /* @__PURE__ */ Object.create(null) }, propConfig));
}
var FAST = $global.FAST;
if (FAST.getById === void 0) {
  const storage = /* @__PURE__ */ Object.create(null);
  Reflect.defineProperty(FAST, "getById", Object.assign({ value(id, initialize) {
    let found = storage[id];
    if (found === void 0) {
      found = initialize ? storage[id] = initialize() : null;
    }
    return found;
  } }, propConfig));
}
var emptyArray = Object.freeze([]);
function createMetadataLocator() {
  const metadataLookup = /* @__PURE__ */ new WeakMap();
  return function(target) {
    let metadata = metadataLookup.get(target);
    if (metadata === void 0) {
      let currentTarget = Reflect.getPrototypeOf(target);
      while (metadata === void 0 && currentTarget !== null) {
        metadata = metadataLookup.get(currentTarget);
        currentTarget = Reflect.getPrototypeOf(currentTarget);
      }
      metadata = metadata === void 0 ? [] : metadata.slice(0);
      metadataLookup.set(target, metadata);
    }
    return metadata;
  };
}

// node_modules/@microsoft/fast-element/dist/esm/dom.js
var updateQueue = $global.FAST.getById(1, () => {
  const tasks = [];
  const pendingErrors = [];
  function throwFirstError() {
    if (pendingErrors.length) {
      throw pendingErrors.shift();
    }
  }
  function tryRunTask(task) {
    try {
      task.call();
    } catch (error) {
      pendingErrors.push(error);
      setTimeout(throwFirstError, 0);
    }
  }
  function process2() {
    const capacity = 1024;
    let index = 0;
    while (index < tasks.length) {
      tryRunTask(tasks[index]);
      index++;
      if (index > capacity) {
        for (let scan = 0, newLength = tasks.length - index; scan < newLength; scan++) {
          tasks[scan] = tasks[scan + index];
        }
        tasks.length -= index;
        index = 0;
      }
    }
    tasks.length = 0;
  }
  function enqueue(callable) {
    if (tasks.length < 1) {
      $global.requestAnimationFrame(process2);
    }
    tasks.push(callable);
  }
  return Object.freeze({
    enqueue,
    process: process2
  });
});
var fastHTMLPolicy = $global.trustedTypes.createPolicy("fast-html", {
  createHTML: (html3) => html3
});
var htmlPolicy = fastHTMLPolicy;
var marker = `fast-${Math.random().toString(36).substring(2, 8)}`;
var _interpolationStart = `${marker}{`;
var _interpolationEnd = `}${marker}`;
var DOM = Object.freeze({
  /**
   * Indicates whether the DOM supports the adoptedStyleSheets feature.
   */
  supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) && "replace" in CSSStyleSheet.prototype,
  /**
   * Sets the HTML trusted types policy used by the templating engine.
   * @param policy - The policy to set for HTML.
   * @remarks
   * This API can only be called once, for security reasons. It should be
   * called by the application developer at the start of their program.
   */
  setHTMLPolicy(policy) {
    if (htmlPolicy !== fastHTMLPolicy) {
      throw new Error("The HTML policy can only be set once.");
    }
    htmlPolicy = policy;
  },
  /**
   * Turns a string into trusted HTML using the configured trusted types policy.
   * @param html - The string to turn into trusted HTML.
   * @remarks
   * Used internally by the template engine when creating templates
   * and setting innerHTML.
   */
  createHTML(html3) {
    return htmlPolicy.createHTML(html3);
  },
  /**
   * Determines if the provided node is a template marker used by the runtime.
   * @param node - The node to test.
   */
  isMarker(node) {
    return node && node.nodeType === 8 && node.data.startsWith(marker);
  },
  /**
   * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.
   * @param node - The marker node to extract the index from.
   */
  extractDirectiveIndexFromMarker(node) {
    return parseInt(node.data.replace(`${marker}:`, ""));
  },
  /**
   * Creates a placeholder string suitable for marking out a location *within*
   * an attribute value or HTML content.
   * @param index - The directive index to create the placeholder for.
   * @remarks
   * Used internally by binding directives.
   */
  createInterpolationPlaceholder(index) {
    return `${_interpolationStart}${index}${_interpolationEnd}`;
  },
  /**
   * Creates a placeholder that manifests itself as an attribute on an
   * element.
   * @param attributeName - The name of the custom attribute.
   * @param index - The directive index to create the placeholder for.
   * @remarks
   * Used internally by attribute directives such as `ref`, `slotted`, and `children`.
   */
  createCustomAttributePlaceholder(attributeName, index) {
    return `${attributeName}="${this.createInterpolationPlaceholder(index)}"`;
  },
  /**
   * Creates a placeholder that manifests itself as a marker within the DOM structure.
   * @param index - The directive index to create the placeholder for.
   * @remarks
   * Used internally by structural directives such as `repeat`.
   */
  createBlockPlaceholder(index) {
    return `<!--${marker}:${index}-->`;
  },
  /**
   * Schedules DOM update work in the next async batch.
   * @param callable - The callable function or object to queue.
   */
  queueUpdate: updateQueue.enqueue,
  /**
   * Immediately processes all work previously scheduled
   * through queueUpdate.
   * @remarks
   * This also forces nextUpdate promises
   * to resolve.
   */
  processUpdates: updateQueue.process,
  /**
   * Resolves with the next DOM update.
   */
  nextUpdate() {
    return new Promise(updateQueue.enqueue);
  },
  /**
   * Sets an attribute value on an element.
   * @param element - The element to set the attribute value on.
   * @param attributeName - The attribute name to set.
   * @param value - The value of the attribute to set.
   * @remarks
   * If the value is `null` or `undefined`, the attribute is removed, otherwise
   * it is set to the provided value using the standard `setAttribute` API.
   */
  setAttribute(element, attributeName, value) {
    if (value === null || value === void 0) {
      element.removeAttribute(attributeName);
    } else {
      element.setAttribute(attributeName, value);
    }
  },
  /**
   * Sets a boolean attribute value.
   * @param element - The element to set the boolean attribute value on.
   * @param attributeName - The attribute name to set.
   * @param value - The value of the attribute to set.
   * @remarks
   * If the value is true, the attribute is added; otherwise it is removed.
   */
  setBooleanAttribute(element, attributeName, value) {
    value ? element.setAttribute(attributeName, "") : element.removeAttribute(attributeName);
  },
  /**
   * Removes all the child nodes of the provided parent node.
   * @param parent - The node to remove the children from.
   */
  removeChildNodes(parent2) {
    for (let child = parent2.firstChild; child !== null; child = parent2.firstChild) {
      parent2.removeChild(child);
    }
  },
  /**
   * Creates a TreeWalker configured to walk a template fragment.
   * @param fragment - The fragment to walk.
   */
  createTemplateWalker(fragment) {
    return document.createTreeWalker(
      fragment,
      133,
      // element, text, comment
      null,
      false
    );
  }
});

// node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js
var SubscriberSet = class {
  /**
   * Creates an instance of SubscriberSet for the specified source.
   * @param source - The object source that subscribers will receive notifications from.
   * @param initialSubscriber - An initial subscriber to changes.
   */
  constructor(source, initialSubscriber) {
    this.sub1 = void 0;
    this.sub2 = void 0;
    this.spillover = void 0;
    this.source = source;
    this.sub1 = initialSubscriber;
  }
  /**
   * Checks whether the provided subscriber has been added to this set.
   * @param subscriber - The subscriber to test for inclusion in this set.
   */
  has(subscriber) {
    return this.spillover === void 0 ? this.sub1 === subscriber || this.sub2 === subscriber : this.spillover.indexOf(subscriber) !== -1;
  }
  /**
   * Subscribes to notification of changes in an object's state.
   * @param subscriber - The object that is subscribing for change notification.
   */
  subscribe(subscriber) {
    const spillover = this.spillover;
    if (spillover === void 0) {
      if (this.has(subscriber)) {
        return;
      }
      if (this.sub1 === void 0) {
        this.sub1 = subscriber;
        return;
      }
      if (this.sub2 === void 0) {
        this.sub2 = subscriber;
        return;
      }
      this.spillover = [this.sub1, this.sub2, subscriber];
      this.sub1 = void 0;
      this.sub2 = void 0;
    } else {
      const index = spillover.indexOf(subscriber);
      if (index === -1) {
        spillover.push(subscriber);
      }
    }
  }
  /**
   * Unsubscribes from notification of changes in an object's state.
   * @param subscriber - The object that is unsubscribing from change notification.
   */
  unsubscribe(subscriber) {
    const spillover = this.spillover;
    if (spillover === void 0) {
      if (this.sub1 === subscriber) {
        this.sub1 = void 0;
      } else if (this.sub2 === subscriber) {
        this.sub2 = void 0;
      }
    } else {
      const index = spillover.indexOf(subscriber);
      if (index !== -1) {
        spillover.splice(index, 1);
      }
    }
  }
  /**
   * Notifies all subscribers.
   * @param args - Data passed along to subscribers during notification.
   */
  notify(args) {
    const spillover = this.spillover;
    const source = this.source;
    if (spillover === void 0) {
      const sub1 = this.sub1;
      const sub2 = this.sub2;
      if (sub1 !== void 0) {
        sub1.handleChange(source, args);
      }
      if (sub2 !== void 0) {
        sub2.handleChange(source, args);
      }
    } else {
      for (let i = 0, ii = spillover.length; i < ii; ++i) {
        spillover[i].handleChange(source, args);
      }
    }
  }
};
var PropertyChangeNotifier = class {
  /**
   * Creates an instance of PropertyChangeNotifier for the specified source.
   * @param source - The object source that subscribers will receive notifications from.
   */
  constructor(source) {
    this.subscribers = {};
    this.sourceSubscribers = null;
    this.source = source;
  }
  /**
   * Notifies all subscribers, based on the specified property.
   * @param propertyName - The property name, passed along to subscribers during notification.
   */
  notify(propertyName) {
    var _a;
    const subscribers = this.subscribers[propertyName];
    if (subscribers !== void 0) {
      subscribers.notify(propertyName);
    }
    (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);
  }
  /**
   * Subscribes to notification of changes in an object's state.
   * @param subscriber - The object that is subscribing for change notification.
   * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.
   */
  subscribe(subscriber, propertyToWatch) {
    var _a;
    if (propertyToWatch) {
      let subscribers = this.subscribers[propertyToWatch];
      if (subscribers === void 0) {
        this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);
      }
      subscribers.subscribe(subscriber);
    } else {
      this.sourceSubscribers = (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);
      this.sourceSubscribers.subscribe(subscriber);
    }
  }
  /**
   * Unsubscribes from notification of changes in an object's state.
   * @param subscriber - The object that is unsubscribing from change notification.
   * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.
   */
  unsubscribe(subscriber, propertyToUnwatch) {
    var _a;
    if (propertyToUnwatch) {
      const subscribers = this.subscribers[propertyToUnwatch];
      if (subscribers !== void 0) {
        subscribers.unsubscribe(subscriber);
      }
    } else {
      (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);
    }
  }
};

// node_modules/@microsoft/fast-element/dist/esm/observation/observable.js
var Observable = FAST.getById(2, () => {
  const volatileRegex = /(:|&&|\|\||if)/;
  const notifierLookup = /* @__PURE__ */ new WeakMap();
  const queueUpdate = DOM.queueUpdate;
  let watcher = void 0;
  let createArrayObserver = (array) => {
    throw new Error("Must call enableArrayObservation before observing arrays.");
  };
  function getNotifier(source) {
    let found = source.$fastController || notifierLookup.get(source);
    if (found === void 0) {
      if (Array.isArray(source)) {
        found = createArrayObserver(source);
      } else {
        notifierLookup.set(source, found = new PropertyChangeNotifier(source));
      }
    }
    return found;
  }
  const getAccessors = createMetadataLocator();
  class DefaultObservableAccessor {
    constructor(name) {
      this.name = name;
      this.field = `_${name}`;
      this.callback = `${name}Changed`;
    }
    getValue(source) {
      if (watcher !== void 0) {
        watcher.watch(source, this.name);
      }
      return source[this.field];
    }
    setValue(source, newValue) {
      const field = this.field;
      const oldValue = source[field];
      if (oldValue !== newValue) {
        source[field] = newValue;
        const callback = source[this.callback];
        if (typeof callback === "function") {
          callback.call(source, oldValue, newValue);
        }
        getNotifier(source).notify(this.name);
      }
    }
  }
  class BindingObserverImplementation extends SubscriberSet {
    constructor(binding, initialSubscriber, isVolatileBinding = false) {
      super(binding, initialSubscriber);
      this.binding = binding;
      this.isVolatileBinding = isVolatileBinding;
      this.needsRefresh = true;
      this.needsQueue = true;
      this.first = this;
      this.last = null;
      this.propertySource = void 0;
      this.propertyName = void 0;
      this.notifier = void 0;
      this.next = void 0;
    }
    observe(source, context) {
      if (this.needsRefresh && this.last !== null) {
        this.disconnect();
      }
      const previousWatcher = watcher;
      watcher = this.needsRefresh ? this : void 0;
      this.needsRefresh = this.isVolatileBinding;
      const result2 = this.binding(source, context);
      watcher = previousWatcher;
      return result2;
    }
    disconnect() {
      if (this.last !== null) {
        let current = this.first;
        while (current !== void 0) {
          current.notifier.unsubscribe(this, current.propertyName);
          current = current.next;
        }
        this.last = null;
        this.needsRefresh = this.needsQueue = true;
      }
    }
    watch(propertySource, propertyName) {
      const prev = this.last;
      const notifier = getNotifier(propertySource);
      const current = prev === null ? this.first : {};
      current.propertySource = propertySource;
      current.propertyName = propertyName;
      current.notifier = notifier;
      notifier.subscribe(this, propertyName);
      if (prev !== null) {
        if (!this.needsRefresh) {
          let prevValue;
          watcher = void 0;
          prevValue = prev.propertySource[prev.propertyName];
          watcher = this;
          if (propertySource === prevValue) {
            this.needsRefresh = true;
          }
        }
        prev.next = current;
      }
      this.last = current;
    }
    handleChange() {
      if (this.needsQueue) {
        this.needsQueue = false;
        queueUpdate(this);
      }
    }
    call() {
      if (this.last !== null) {
        this.needsQueue = true;
        this.notify(this);
      }
    }
    records() {
      let next = this.first;
      return {
        next: () => {
          const current = next;
          if (current === void 0) {
            return { value: void 0, done: true };
          } else {
            next = next.next;
            return {
              value: current,
              done: false
            };
          }
        },
        [Symbol.iterator]: function() {
          return this;
        }
      };
    }
  }
  return Object.freeze({
    /**
     * @internal
     * @param factory - The factory used to create array observers.
     */
    setArrayObserverFactory(factory) {
      createArrayObserver = factory;
    },
    /**
     * Gets a notifier for an object or Array.
     * @param source - The object or Array to get the notifier for.
     */
    getNotifier,
    /**
     * Records a property change for a source object.
     * @param source - The object to record the change against.
     * @param propertyName - The property to track as changed.
     */
    track(source, propertyName) {
      if (watcher !== void 0) {
        watcher.watch(source, propertyName);
      }
    },
    /**
     * Notifies watchers that the currently executing property getter or function is volatile
     * with respect to its observable dependencies.
     */
    trackVolatile() {
      if (watcher !== void 0) {
        watcher.needsRefresh = true;
      }
    },
    /**
     * Notifies subscribers of a source object of changes.
     * @param source - the object to notify of changes.
     * @param args - The change args to pass to subscribers.
     */
    notify(source, args) {
      getNotifier(source).notify(args);
    },
    /**
     * Defines an observable property on an object or prototype.
     * @param target - The target object to define the observable on.
     * @param nameOrAccessor - The name of the property to define as observable;
     * or a custom accessor that specifies the property name and accessor implementation.
     */
    defineProperty(target, nameOrAccessor) {
      if (typeof nameOrAccessor === "string") {
        nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);
      }
      getAccessors(target).push(nameOrAccessor);
      Reflect.defineProperty(target, nameOrAccessor.name, {
        enumerable: true,
        get: function() {
          return nameOrAccessor.getValue(this);
        },
        set: function(newValue) {
          nameOrAccessor.setValue(this, newValue);
        }
      });
    },
    /**
     * Finds all the observable accessors defined on the target,
     * including its prototype chain.
     * @param target - The target object to search for accessor on.
     */
    getAccessors,
    /**
     * Creates a {@link BindingObserver} that can watch the
     * provided {@link Binding} for changes.
     * @param binding - The binding to observe.
     * @param initialSubscriber - An initial subscriber to changes in the binding value.
     * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.
     */
    binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {
      return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);
    },
    /**
     * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated
     * on every evaluation of the value.
     * @param binding - The binding to inspect.
     */
    isVolatileBinding(binding) {
      return volatileRegex.test(binding.toString());
    }
  });
});
function observable(target, nameOrAccessor) {
  Observable.defineProperty(target, nameOrAccessor);
}
var contextEvent = FAST.getById(3, () => {
  let current = null;
  return {
    get() {
      return current;
    },
    set(event) {
      current = event;
    }
  };
});
var ExecutionContext = class {
  constructor() {
    this.index = 0;
    this.length = 0;
    this.parent = null;
    this.parentContext = null;
  }
  /**
   * The current event within an event handler.
   */
  get event() {
    return contextEvent.get();
  }
  /**
   * Indicates whether the current item within a repeat context
   * has an even index.
   */
  get isEven() {
    return this.index % 2 === 0;
  }
  /**
   * Indicates whether the current item within a repeat context
   * has an odd index.
   */
  get isOdd() {
    return this.index % 2 !== 0;
  }
  /**
   * Indicates whether the current item within a repeat context
   * is the first item in the collection.
   */
  get isFirst() {
    return this.index === 0;
  }
  /**
   * Indicates whether the current item within a repeat context
   * is somewhere in the middle of the collection.
   */
  get isInMiddle() {
    return !this.isFirst && !this.isLast;
  }
  /**
   * Indicates whether the current item within a repeat context
   * is the last item in the collection.
   */
  get isLast() {
    return this.index === this.length - 1;
  }
  /**
   * Sets the event for the current execution context.
   * @param event - The event to set.
   * @internal
   */
  static setEvent(event) {
    contextEvent.set(event);
  }
};
Observable.defineProperty(ExecutionContext.prototype, "index");
Observable.defineProperty(ExecutionContext.prototype, "length");
var defaultExecutionContext = Object.seal(new ExecutionContext());

// node_modules/@microsoft/fast-element/dist/esm/templating/html-directive.js
var HTMLDirective = class {
  constructor() {
    this.targetIndex = 0;
  }
};
var TargetedHTMLDirective = class extends HTMLDirective {
  constructor() {
    super(...arguments);
    this.createPlaceholder = DOM.createInterpolationPlaceholder;
  }
};
var AttachedBehaviorHTMLDirective = class extends HTMLDirective {
  /**
   *
   * @param name - The name of the behavior; used as a custom attribute on the element.
   * @param behavior - The behavior to instantiate and attach to the element.
   * @param options - Options to pass to the behavior during creation.
   */
  constructor(name, behavior, options) {
    super();
    this.name = name;
    this.behavior = behavior;
    this.options = options;
  }
  /**
   * Creates a placeholder string based on the directive's index within the template.
   * @param index - The index of the directive within the template.
   * @remarks
   * Creates a custom attribute placeholder.
   */
  createPlaceholder(index) {
    return DOM.createCustomAttributePlaceholder(this.name, index);
  }
  /**
   * Creates a behavior for the provided target node.
   * @param target - The node instance to create the behavior for.
   * @remarks
   * Creates an instance of the `behavior` type this directive was constructed with
   * and passes the target and options to that `behavior`'s constructor.
   */
  createBehavior(target) {
    return new this.behavior(target, this.options);
  }
};

// node_modules/@microsoft/fast-element/dist/esm/templating/binding.js
function normalBind(source, context) {
  this.source = source;
  this.context = context;
  if (this.bindingObserver === null) {
    this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);
  }
  this.updateTarget(this.bindingObserver.observe(source, context));
}
function triggerBind(source, context) {
  this.source = source;
  this.context = context;
  this.target.addEventListener(this.targetName, this);
}
function normalUnbind() {
  this.bindingObserver.disconnect();
  this.source = null;
  this.context = null;
}
function contentUnbind() {
  this.bindingObserver.disconnect();
  this.source = null;
  this.context = null;
  const view = this.target.$fastView;
  if (view !== void 0 && view.isComposed) {
    view.unbind();
    view.needsBindOnly = true;
  }
}
function triggerUnbind() {
  this.target.removeEventListener(this.targetName, this);
  this.source = null;
  this.context = null;
}
function updateAttributeTarget(value) {
  DOM.setAttribute(this.target, this.targetName, value);
}
function updateBooleanAttributeTarget(value) {
  DOM.setBooleanAttribute(this.target, this.targetName, value);
}
function updateContentTarget(value) {
  if (value === null || value === void 0) {
    value = "";
  }
  if (value.create) {
    this.target.textContent = "";
    let view = this.target.$fastView;
    if (view === void 0) {
      view = value.create();
    } else {
      if (this.target.$fastTemplate !== value) {
        if (view.isComposed) {
          view.remove();
          view.unbind();
        }
        view = value.create();
      }
    }
    if (!view.isComposed) {
      view.isComposed = true;
      view.bind(this.source, this.context);
      view.insertBefore(this.target);
      this.target.$fastView = view;
      this.target.$fastTemplate = value;
    } else if (view.needsBindOnly) {
      view.needsBindOnly = false;
      view.bind(this.source, this.context);
    }
  } else {
    const view = this.target.$fastView;
    if (view !== void 0 && view.isComposed) {
      view.isComposed = false;
      view.remove();
      if (view.needsBindOnly) {
        view.needsBindOnly = false;
      } else {
        view.unbind();
      }
    }
    this.target.textContent = value;
  }
}
function updatePropertyTarget(value) {
  this.target[this.targetName] = value;
}
function updateClassTarget(value) {
  const classVersions = this.classVersions || /* @__PURE__ */ Object.create(null);
  const target = this.target;
  let version = this.version || 0;
  if (value !== null && value !== void 0 && value.length) {
    const names = value.split(/\s+/);
    for (let i = 0, ii = names.length; i < ii; ++i) {
      const currentName = names[i];
      if (currentName === "") {
        continue;
      }
      classVersions[currentName] = version;
      target.classList.add(currentName);
    }
  }
  this.classVersions = classVersions;
  this.version = version + 1;
  if (version === 0) {
    return;
  }
  version -= 1;
  for (const name in classVersions) {
    if (classVersions[name] === version) {
      target.classList.remove(name);
    }
  }
}
var HTMLBindingDirective = class extends TargetedHTMLDirective {
  /**
   * Creates an instance of BindingDirective.
   * @param binding - A binding that returns the data used to update the DOM.
   */
  constructor(binding) {
    super();
    this.binding = binding;
    this.bind = normalBind;
    this.unbind = normalUnbind;
    this.updateTarget = updateAttributeTarget;
    this.isBindingVolatile = Observable.isVolatileBinding(this.binding);
  }
  /**
   * Gets/sets the name of the attribute or property that this
   * binding is targeting.
   */
  get targetName() {
    return this.originalTargetName;
  }
  set targetName(value) {
    this.originalTargetName = value;
    if (value === void 0) {
      return;
    }
    switch (value[0]) {
      case ":":
        this.cleanedTargetName = value.substr(1);
        this.updateTarget = updatePropertyTarget;
        if (this.cleanedTargetName === "innerHTML") {
          const binding = this.binding;
          this.binding = (s, c) => DOM.createHTML(binding(s, c));
        }
        break;
      case "?":
        this.cleanedTargetName = value.substr(1);
        this.updateTarget = updateBooleanAttributeTarget;
        break;
      case "@":
        this.cleanedTargetName = value.substr(1);
        this.bind = triggerBind;
        this.unbind = triggerUnbind;
        break;
      default:
        this.cleanedTargetName = value;
        if (value === "class") {
          this.updateTarget = updateClassTarget;
        }
        break;
    }
  }
  /**
   * Makes this binding target the content of an element rather than
   * a particular attribute or property.
   */
  targetAtContent() {
    this.updateTarget = updateContentTarget;
    this.unbind = contentUnbind;
  }
  /**
   * Creates the runtime BindingBehavior instance based on the configuration
   * information stored in the BindingDirective.
   * @param target - The target node that the binding behavior should attach to.
   */
  createBehavior(target) {
    return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);
  }
};
var BindingBehavior = class {
  /**
   * Creates an instance of BindingBehavior.
   * @param target - The target of the data updates.
   * @param binding - The binding that returns the latest value for an update.
   * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.
   * @param bind - The operation to perform during binding.
   * @param unbind - The operation to perform during unbinding.
   * @param updateTarget - The operation to perform when updating.
   * @param targetName - The name of the target attribute or property to update.
   */
  constructor(target, binding, isBindingVolatile, bind2, unbind, updateTarget, targetName) {
    this.source = null;
    this.context = null;
    this.bindingObserver = null;
    this.target = target;
    this.binding = binding;
    this.isBindingVolatile = isBindingVolatile;
    this.bind = bind2;
    this.unbind = unbind;
    this.updateTarget = updateTarget;
    this.targetName = targetName;
  }
  /** @internal */
  handleChange() {
    this.updateTarget(this.bindingObserver.observe(this.source, this.context));
  }
  /** @internal */
  handleEvent(event) {
    ExecutionContext.setEvent(event);
    const result2 = this.binding(this.source, this.context);
    ExecutionContext.setEvent(null);
    if (result2 !== true) {
      event.preventDefault();
    }
  }
};

// node_modules/@microsoft/fast-element/dist/esm/templating/compiler.js
var sharedContext = null;
var CompilationContext = class {
  addFactory(factory) {
    factory.targetIndex = this.targetIndex;
    this.behaviorFactories.push(factory);
  }
  captureContentBinding(directive2) {
    directive2.targetAtContent();
    this.addFactory(directive2);
  }
  reset() {
    this.behaviorFactories = [];
    this.targetIndex = -1;
  }
  release() {
    sharedContext = this;
  }
  static borrow(directives) {
    const shareable = sharedContext || new CompilationContext();
    shareable.directives = directives;
    shareable.reset();
    sharedContext = null;
    return shareable;
  }
};
function createAggregateBinding(parts) {
  if (parts.length === 1) {
    return parts[0];
  }
  let targetName;
  const partCount = parts.length;
  const finalParts = parts.map((x) => {
    if (typeof x === "string") {
      return () => x;
    }
    targetName = x.targetName || targetName;
    return x.binding;
  });
  const binding = (scope, context) => {
    let output = "";
    for (let i = 0; i < partCount; ++i) {
      output += finalParts[i](scope, context);
    }
    return output;
  };
  const directive2 = new HTMLBindingDirective(binding);
  directive2.targetName = targetName;
  return directive2;
}
var interpolationEndLength = _interpolationEnd.length;
function parseContent(context, value) {
  const valueParts = value.split(_interpolationStart);
  if (valueParts.length === 1) {
    return null;
  }
  const bindingParts = [];
  for (let i = 0, ii = valueParts.length; i < ii; ++i) {
    const current = valueParts[i];
    const index = current.indexOf(_interpolationEnd);
    let literal;
    if (index === -1) {
      literal = current;
    } else {
      const directiveIndex = parseInt(current.substring(0, index));
      bindingParts.push(context.directives[directiveIndex]);
      literal = current.substring(index + interpolationEndLength);
    }
    if (literal !== "") {
      bindingParts.push(literal);
    }
  }
  return bindingParts;
}
function compileAttributes(context, node, includeBasicValues = false) {
  const attributes = node.attributes;
  for (let i = 0, ii = attributes.length; i < ii; ++i) {
    const attr2 = attributes[i];
    const attrValue = attr2.value;
    const parseResult = parseContent(context, attrValue);
    let result2 = null;
    if (parseResult === null) {
      if (includeBasicValues) {
        result2 = new HTMLBindingDirective(() => attrValue);
        result2.targetName = attr2.name;
      }
    } else {
      result2 = createAggregateBinding(parseResult);
    }
    if (result2 !== null) {
      node.removeAttributeNode(attr2);
      i--;
      ii--;
      context.addFactory(result2);
    }
  }
}
function compileContent(context, node, walker) {
  const parseResult = parseContent(context, node.textContent);
  if (parseResult !== null) {
    let lastNode = node;
    for (let i = 0, ii = parseResult.length; i < ii; ++i) {
      const currentPart = parseResult[i];
      const currentNode = i === 0 ? node : lastNode.parentNode.insertBefore(document.createTextNode(""), lastNode.nextSibling);
      if (typeof currentPart === "string") {
        currentNode.textContent = currentPart;
      } else {
        currentNode.textContent = " ";
        context.captureContentBinding(currentPart);
      }
      lastNode = currentNode;
      context.targetIndex++;
      if (currentNode !== node) {
        walker.nextNode();
      }
    }
    context.targetIndex--;
  }
}
function compileTemplate(template2, directives) {
  const fragment = template2.content;
  document.adoptNode(fragment);
  const context = CompilationContext.borrow(directives);
  compileAttributes(context, template2, true);
  const hostBehaviorFactories = context.behaviorFactories;
  context.reset();
  const walker = DOM.createTemplateWalker(fragment);
  let node;
  while (node = walker.nextNode()) {
    context.targetIndex++;
    switch (node.nodeType) {
      case 1:
        compileAttributes(context, node);
        break;
      case 3:
        compileContent(context, node, walker);
        break;
      case 8:
        if (DOM.isMarker(node)) {
          context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);
        }
    }
  }
  let targetOffset = 0;
  if (
    // If the first node in a fragment is a marker, that means it's an unstable first node,
    // because something like a when, repeat, etc. could add nodes before the marker.
    // To mitigate this, we insert a stable first node. However, if we insert a node,
    // that will alter the result of the TreeWalker. So, we also need to offset the target index.
    DOM.isMarker(fragment.firstChild) || // Or if there is only one node and a directive, it means the template's content
    // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by
    // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.
    fragment.childNodes.length === 1 && directives.length
  ) {
    fragment.insertBefore(document.createComment(""), fragment.firstChild);
    targetOffset = -1;
  }
  const viewBehaviorFactories = context.behaviorFactories;
  context.release();
  return {
    fragment,
    viewBehaviorFactories,
    hostBehaviorFactories,
    targetOffset
  };
}

// node_modules/@microsoft/fast-element/dist/esm/templating/view.js
var range = document.createRange();
var HTMLView = class {
  /**
   * Constructs an instance of HTMLView.
   * @param fragment - The html fragment that contains the nodes for this view.
   * @param behaviors - The behaviors to be applied to this view.
   */
  constructor(fragment, behaviors) {
    this.fragment = fragment;
    this.behaviors = behaviors;
    this.source = null;
    this.context = null;
    this.firstChild = fragment.firstChild;
    this.lastChild = fragment.lastChild;
  }
  /**
   * Appends the view's DOM nodes to the referenced node.
   * @param node - The parent node to append the view's DOM nodes to.
   */
  appendTo(node) {
    node.appendChild(this.fragment);
  }
  /**
   * Inserts the view's DOM nodes before the referenced node.
   * @param node - The node to insert the view's DOM before.
   */
  insertBefore(node) {
    if (this.fragment.hasChildNodes()) {
      node.parentNode.insertBefore(this.fragment, node);
    } else {
      const end = this.lastChild;
      if (node.previousSibling === end)
        return;
      const parentNode = node.parentNode;
      let current = this.firstChild;
      let next;
      while (current !== end) {
        next = current.nextSibling;
        parentNode.insertBefore(current, node);
        current = next;
      }
      parentNode.insertBefore(end, node);
    }
  }
  /**
   * Removes the view's DOM nodes.
   * The nodes are not disposed and the view can later be re-inserted.
   */
  remove() {
    const fragment = this.fragment;
    const end = this.lastChild;
    let current = this.firstChild;
    let next;
    while (current !== end) {
      next = current.nextSibling;
      fragment.appendChild(current);
      current = next;
    }
    fragment.appendChild(end);
  }
  /**
   * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.
   * Once a view has been disposed, it cannot be inserted or bound again.
   */
  dispose() {
    const parent2 = this.firstChild.parentNode;
    const end = this.lastChild;
    let current = this.firstChild;
    let next;
    while (current !== end) {
      next = current.nextSibling;
      parent2.removeChild(current);
      current = next;
    }
    parent2.removeChild(end);
    const behaviors = this.behaviors;
    const oldSource = this.source;
    for (let i = 0, ii = behaviors.length; i < ii; ++i) {
      behaviors[i].unbind(oldSource);
    }
  }
  /**
   * Binds a view's behaviors to its binding source.
   * @param source - The binding source for the view's binding behaviors.
   * @param context - The execution context to run the behaviors within.
   */
  bind(source, context) {
    const behaviors = this.behaviors;
    if (this.source === source) {
      return;
    } else if (this.source !== null) {
      const oldSource = this.source;
      this.source = source;
      this.context = context;
      for (let i = 0, ii = behaviors.length; i < ii; ++i) {
        const current = behaviors[i];
        current.unbind(oldSource);
        current.bind(source, context);
      }
    } else {
      this.source = source;
      this.context = context;
      for (let i = 0, ii = behaviors.length; i < ii; ++i) {
        behaviors[i].bind(source, context);
      }
    }
  }
  /**
   * Unbinds a view's behaviors from its binding source.
   */
  unbind() {
    if (this.source === null) {
      return;
    }
    const behaviors = this.behaviors;
    const oldSource = this.source;
    for (let i = 0, ii = behaviors.length; i < ii; ++i) {
      behaviors[i].unbind(oldSource);
    }
    this.source = null;
  }
  /**
   * Efficiently disposes of a contiguous range of synthetic view instances.
   * @param views - A contiguous range of views to be disposed.
   */
  static disposeContiguousBatch(views) {
    if (views.length === 0) {
      return;
    }
    range.setStartBefore(views[0].firstChild);
    range.setEndAfter(views[views.length - 1].lastChild);
    range.deleteContents();
    for (let i = 0, ii = views.length; i < ii; ++i) {
      const view = views[i];
      const behaviors = view.behaviors;
      const oldSource = view.source;
      for (let j = 0, jj = behaviors.length; j < jj; ++j) {
        behaviors[j].unbind(oldSource);
      }
    }
  }
};

// node_modules/@microsoft/fast-element/dist/esm/templating/template.js
var ViewTemplate = class {
  /**
   * Creates an instance of ViewTemplate.
   * @param html - The html representing what this template will instantiate, including placeholders for directives.
   * @param directives - The directives that will be connected to placeholders in the html.
   */
  constructor(html3, directives) {
    this.behaviorCount = 0;
    this.hasHostBehaviors = false;
    this.fragment = null;
    this.targetOffset = 0;
    this.viewBehaviorFactories = null;
    this.hostBehaviorFactories = null;
    this.html = html3;
    this.directives = directives;
  }
  /**
   * Creates an HTMLView instance based on this template definition.
   * @param hostBindingTarget - The element that host behaviors will be bound to.
   */
  create(hostBindingTarget) {
    if (this.fragment === null) {
      let template2;
      const html3 = this.html;
      if (typeof html3 === "string") {
        template2 = document.createElement("template");
        template2.innerHTML = DOM.createHTML(html3);
        const fec = template2.content.firstElementChild;
        if (fec !== null && fec.tagName === "TEMPLATE") {
          template2 = fec;
        }
      } else {
        template2 = html3;
      }
      const result2 = compileTemplate(template2, this.directives);
      this.fragment = result2.fragment;
      this.viewBehaviorFactories = result2.viewBehaviorFactories;
      this.hostBehaviorFactories = result2.hostBehaviorFactories;
      this.targetOffset = result2.targetOffset;
      this.behaviorCount = this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;
      this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;
    }
    const fragment = this.fragment.cloneNode(true);
    const viewFactories = this.viewBehaviorFactories;
    const behaviors = new Array(this.behaviorCount);
    const walker = DOM.createTemplateWalker(fragment);
    let behaviorIndex = 0;
    let targetIndex = this.targetOffset;
    let node = walker.nextNode();
    for (let ii = viewFactories.length; behaviorIndex < ii; ++behaviorIndex) {
      const factory = viewFactories[behaviorIndex];
      const factoryIndex = factory.targetIndex;
      while (node !== null) {
        if (targetIndex === factoryIndex) {
          behaviors[behaviorIndex] = factory.createBehavior(node);
          break;
        } else {
          node = walker.nextNode();
          targetIndex++;
        }
      }
    }
    if (this.hasHostBehaviors) {
      const hostFactories = this.hostBehaviorFactories;
      for (let i = 0, ii = hostFactories.length; i < ii; ++i, ++behaviorIndex) {
        behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);
      }
    }
    return new HTMLView(fragment, behaviors);
  }
  /**
   * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.
   * @param source - The data source to bind the template to.
   * @param host - The Element where the template will be rendered.
   * @param hostBindingTarget - An HTML element to target the host bindings at if different from the
   * host that the template is being attached to.
   */
  render(source, host, hostBindingTarget) {
    if (typeof host === "string") {
      host = document.getElementById(host);
    }
    if (hostBindingTarget === void 0) {
      hostBindingTarget = host;
    }
    const view = this.create(hostBindingTarget);
    view.bind(source, defaultExecutionContext);
    view.appendTo(host);
    return view;
  }
};
var lastAttributeNameRegex = (
  /* eslint-disable-next-line no-control-regex */
  /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/
);
function html2(strings17, ...values2) {
  const directives = [];
  let html3 = "";
  for (let i = 0, ii = strings17.length - 1; i < ii; ++i) {
    const currentString = strings17[i];
    let value = values2[i];
    html3 += currentString;
    if (value instanceof ViewTemplate) {
      const template2 = value;
      value = () => template2;
    }
    if (typeof value === "function") {
      value = new HTMLBindingDirective(value);
    }
    if (value instanceof TargetedHTMLDirective) {
      const match = lastAttributeNameRegex.exec(currentString);
      if (match !== null) {
        value.targetName = match[2];
      }
    }
    if (value instanceof HTMLDirective) {
      html3 += value.createPlaceholder(directives.length);
      directives.push(value);
    } else {
      html3 += value;
    }
  }
  html3 += strings17[strings17.length - 1];
  return new ViewTemplate(html3, directives);
}

// node_modules/@microsoft/fast-element/dist/esm/styles/element-styles.js
var ElementStyles = class {
  constructor() {
    this.targets = /* @__PURE__ */ new WeakSet();
  }
  /** @internal */
  addStylesTo(target) {
    this.targets.add(target);
  }
  /** @internal */
  removeStylesFrom(target) {
    this.targets.delete(target);
  }
  /** @internal */
  isAttachedTo(target) {
    return this.targets.has(target);
  }
  /**
   * Associates behaviors with this set of styles.
   * @param behaviors - The behaviors to associate.
   */
  withBehaviors(...behaviors) {
    this.behaviors = this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);
    return this;
  }
};
ElementStyles.create = (() => {
  if (DOM.supportsAdoptedStyleSheets) {
    const styleSheetCache = /* @__PURE__ */ new Map();
    return (styles23) => (
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      new AdoptedStyleSheetsStyles(styles23, styleSheetCache)
    );
  }
  return (styles23) => new StyleElementStyles(styles23);
})();
function reduceStyles(styles23) {
  return styles23.map((x) => x instanceof ElementStyles ? reduceStyles(x.styles) : [x]).reduce((prev, curr) => prev.concat(curr), []);
}
function reduceBehaviors(styles23) {
  return styles23.map((x) => x instanceof ElementStyles ? x.behaviors : null).reduce((prev, curr) => {
    if (curr === null) {
      return prev;
    }
    if (prev === null) {
      prev = [];
    }
    return prev.concat(curr);
  }, null);
}
var AdoptedStyleSheetsStyles = class extends ElementStyles {
  constructor(styles23, styleSheetCache) {
    super();
    this.styles = styles23;
    this.styleSheetCache = styleSheetCache;
    this._styleSheets = void 0;
    this.behaviors = reduceBehaviors(styles23);
  }
  get styleSheets() {
    if (this._styleSheets === void 0) {
      const styles23 = this.styles;
      const styleSheetCache = this.styleSheetCache;
      this._styleSheets = reduceStyles(styles23).map((x) => {
        if (x instanceof CSSStyleSheet) {
          return x;
        }
        let sheet = styleSheetCache.get(x);
        if (sheet === void 0) {
          sheet = new CSSStyleSheet();
          sheet.replaceSync(x);
          styleSheetCache.set(x, sheet);
        }
        return sheet;
      });
    }
    return this._styleSheets;
  }
  addStylesTo(target) {
    target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...this.styleSheets];
    super.addStylesTo(target);
  }
  removeStylesFrom(target) {
    const sourceSheets = this.styleSheets;
    target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x) => sourceSheets.indexOf(x) === -1);
    super.removeStylesFrom(target);
  }
};
var styleClassId = 0;
function getNextStyleClass() {
  return `fast-style-class-${++styleClassId}`;
}
var StyleElementStyles = class extends ElementStyles {
  constructor(styles23) {
    super();
    this.styles = styles23;
    this.behaviors = null;
    this.behaviors = reduceBehaviors(styles23);
    this.styleSheets = reduceStyles(styles23);
    this.styleClass = getNextStyleClass();
  }
  addStylesTo(target) {
    const styleSheets = this.styleSheets;
    const styleClass = this.styleClass;
    target = this.normalizeTarget(target);
    for (let i = 0; i < styleSheets.length; i++) {
      const element = document.createElement("style");
      element.innerHTML = styleSheets[i];
      element.className = styleClass;
      target.append(element);
    }
    super.addStylesTo(target);
  }
  removeStylesFrom(target) {
    target = this.normalizeTarget(target);
    const styles23 = target.querySelectorAll(`.${this.styleClass}`);
    for (let i = 0, ii = styles23.length; i < ii; ++i) {
      target.removeChild(styles23[i]);
    }
    super.removeStylesFrom(target);
  }
  isAttachedTo(target) {
    return super.isAttachedTo(this.normalizeTarget(target));
  }
  normalizeTarget(target) {
    return target === document ? document.body : target;
  }
};

// node_modules/@microsoft/fast-element/dist/esm/components/attributes.js
var AttributeConfiguration = Object.freeze({
  /**
   * Locates all attribute configurations associated with a type.
   */
  locate: createMetadataLocator()
});
var booleanConverter = {
  toView(value) {
    return value ? "true" : "false";
  },
  fromView(value) {
    if (value === null || value === void 0 || value === "false" || value === false || value === 0) {
      return false;
    }
    return true;
  }
};
var nullableNumberConverter = {
  toView(value) {
    if (value === null || value === void 0) {
      return null;
    }
    const number = value * 1;
    return isNaN(number) ? null : number.toString();
  },
  fromView(value) {
    if (value === null || value === void 0) {
      return null;
    }
    const number = value * 1;
    return isNaN(number) ? null : number;
  }
};
var AttributeDefinition = class {
  /**
   * Creates an instance of AttributeDefinition.
   * @param Owner - The class constructor that owns this attribute.
   * @param name - The name of the property associated with the attribute.
   * @param attribute - The name of the attribute in HTML.
   * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.
   * @param converter - A {@link ValueConverter} that integrates with the property getter/setter
   * to convert values to and from a DOM string.
   */
  constructor(Owner, name, attribute = name.toLowerCase(), mode = "reflect", converter) {
    this.guards = /* @__PURE__ */ new Set();
    this.Owner = Owner;
    this.name = name;
    this.attribute = attribute;
    this.mode = mode;
    this.converter = converter;
    this.fieldName = `_${name}`;
    this.callbackName = `${name}Changed`;
    this.hasCallback = this.callbackName in Owner.prototype;
    if (mode === "boolean" && converter === void 0) {
      this.converter = booleanConverter;
    }
  }
  /**
   * Sets the value of the attribute/property on the source element.
   * @param source - The source element to access.
   * @param value - The value to set the attribute/property to.
   */
  setValue(source, newValue) {
    const oldValue = source[this.fieldName];
    const converter = this.converter;
    if (converter !== void 0) {
      newValue = converter.fromView(newValue);
    }
    if (oldValue !== newValue) {
      source[this.fieldName] = newValue;
      this.tryReflectToAttribute(source);
      if (this.hasCallback) {
        source[this.callbackName](oldValue, newValue);
      }
      source.$fastController.notify(this.name);
    }
  }
  /**
   * Gets the value of the attribute/property on the source element.
   * @param source - The source element to access.
   */
  getValue(source) {
    Observable.track(source, this.name);
    return source[this.fieldName];
  }
  /** @internal */
  onAttributeChangedCallback(element, value) {
    if (this.guards.has(element)) {
      return;
    }
    this.guards.add(element);
    this.setValue(element, value);
    this.guards.delete(element);
  }
  tryReflectToAttribute(element) {
    const mode = this.mode;
    const guards = this.guards;
    if (guards.has(element) || mode === "fromView") {
      return;
    }
    DOM.queueUpdate(() => {
      guards.add(element);
      const latestValue = element[this.fieldName];
      switch (mode) {
        case "reflect":
          const converter = this.converter;
          DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);
          break;
        case "boolean":
          DOM.setBooleanAttribute(element, this.attribute, latestValue);
          break;
      }
      guards.delete(element);
    });
  }
  /**
   * Collects all attribute definitions associated with the owner.
   * @param Owner - The class constructor to collect attribute for.
   * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.
   * @internal
   */
  static collect(Owner, ...attributeLists) {
    const attributes = [];
    attributeLists.push(AttributeConfiguration.locate(Owner));
    for (let i = 0, ii = attributeLists.length; i < ii; ++i) {
      const list = attributeLists[i];
      if (list === void 0) {
        continue;
      }
      for (let j = 0, jj = list.length; j < jj; ++j) {
        const config = list[j];
        if (typeof config === "string") {
          attributes.push(new AttributeDefinition(Owner, config));
        } else {
          attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));
        }
      }
    }
    return attributes;
  }
};
function attr(configOrTarget, prop) {
  let config;
  function decorator($target, $prop) {
    if (arguments.length > 1) {
      config.property = $prop;
    }
    AttributeConfiguration.locate($target.constructor).push(config);
  }
  if (arguments.length > 1) {
    config = {};
    decorator(configOrTarget, prop);
    return;
  }
  config = configOrTarget === void 0 ? {} : configOrTarget;
  return decorator;
}

// node_modules/@microsoft/fast-element/dist/esm/components/fast-definitions.js
var defaultShadowOptions = { mode: "open" };
var defaultElementOptions = {};
var fastRegistry = FAST.getById(4, () => {
  const typeToDefinition = /* @__PURE__ */ new Map();
  return Object.freeze({
    register(definition) {
      if (typeToDefinition.has(definition.type)) {
        return false;
      }
      typeToDefinition.set(definition.type, definition);
      return true;
    },
    getByType(key) {
      return typeToDefinition.get(key);
    }
  });
});
var FASTElementDefinition = class {
  /**
   * Creates an instance of FASTElementDefinition.
   * @param type - The type this definition is being created for.
   * @param nameOrConfig - The name of the element to define or a config object
   * that describes the element to define.
   */
  constructor(type, nameOrConfig = type.definition) {
    if (typeof nameOrConfig === "string") {
      nameOrConfig = { name: nameOrConfig };
    }
    this.type = type;
    this.name = nameOrConfig.name;
    this.template = nameOrConfig.template;
    const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);
    const observedAttributes = new Array(attributes.length);
    const propertyLookup = {};
    const attributeLookup = {};
    for (let i = 0, ii = attributes.length; i < ii; ++i) {
      const current = attributes[i];
      observedAttributes[i] = current.attribute;
      propertyLookup[current.name] = current;
      attributeLookup[current.attribute] = current;
    }
    this.attributes = attributes;
    this.observedAttributes = observedAttributes;
    this.propertyLookup = propertyLookup;
    this.attributeLookup = attributeLookup;
    this.shadowOptions = nameOrConfig.shadowOptions === void 0 ? defaultShadowOptions : nameOrConfig.shadowOptions === null ? void 0 : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);
    this.elementOptions = nameOrConfig.elementOptions === void 0 ? defaultElementOptions : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);
    this.styles = nameOrConfig.styles === void 0 ? void 0 : Array.isArray(nameOrConfig.styles) ? ElementStyles.create(nameOrConfig.styles) : nameOrConfig.styles instanceof ElementStyles ? nameOrConfig.styles : ElementStyles.create([nameOrConfig.styles]);
  }
  /**
   * Indicates if this element has been defined in at least one registry.
   */
  get isDefined() {
    return !!fastRegistry.getByType(this.type);
  }
  /**
   * Defines a custom element based on this definition.
   * @param registry - The element registry to define the element in.
   */
  define(registry = customElements) {
    const type = this.type;
    if (fastRegistry.register(this)) {
      const attributes = this.attributes;
      const proto = type.prototype;
      for (let i = 0, ii = attributes.length; i < ii; ++i) {
        Observable.defineProperty(proto, attributes[i]);
      }
      Reflect.defineProperty(type, "observedAttributes", {
        value: this.observedAttributes,
        enumerable: true
      });
    }
    if (!registry.get(this.name)) {
      registry.define(this.name, type, this.elementOptions);
    }
    return this;
  }
};
FASTElementDefinition.forType = fastRegistry.getByType;

// node_modules/@microsoft/fast-element/dist/esm/components/controller.js
var shadowRoots = /* @__PURE__ */ new WeakMap();
var defaultEventOptions = {
  bubbles: true,
  composed: true,
  cancelable: true
};
function getShadowRoot(element) {
  return element.shadowRoot || shadowRoots.get(element) || null;
}
var Controller = class extends PropertyChangeNotifier {
  /**
   * Creates a Controller to control the specified element.
   * @param element - The element to be controlled by this controller.
   * @param definition - The element definition metadata that instructs this
   * controller in how to handle rendering and other platform integrations.
   * @internal
   */
  constructor(element, definition) {
    super(element);
    this.boundObservables = null;
    this.behaviors = null;
    this.needsInitialization = true;
    this._template = null;
    this._styles = null;
    this._isConnected = false;
    this.$fastController = this;
    this.view = null;
    this.element = element;
    this.definition = definition;
    const shadowOptions = definition.shadowOptions;
    if (shadowOptions !== void 0) {
      const shadowRoot = element.attachShadow(shadowOptions);
      if (shadowOptions.mode === "closed") {
        shadowRoots.set(element, shadowRoot);
      }
    }
    const accessors = Observable.getAccessors(element);
    if (accessors.length > 0) {
      const boundObservables = this.boundObservables = /* @__PURE__ */ Object.create(null);
      for (let i = 0, ii = accessors.length; i < ii; ++i) {
        const propertyName = accessors[i].name;
        const value = element[propertyName];
        if (value !== void 0) {
          delete element[propertyName];
          boundObservables[propertyName] = value;
        }
      }
    }
  }
  /**
   * Indicates whether or not the custom element has been
   * connected to the document.
   */
  get isConnected() {
    Observable.track(this, "isConnected");
    return this._isConnected;
  }
  setIsConnected(value) {
    this._isConnected = value;
    Observable.notify(this, "isConnected");
  }
  /**
   * Gets/sets the template used to render the component.
   * @remarks
   * This value can only be accurately read after connect but can be set at any time.
   */
  get template() {
    return this._template;
  }
  set template(value) {
    if (this._template === value) {
      return;
    }
    this._template = value;
    if (!this.needsInitialization) {
      this.renderTemplate(value);
    }
  }
  /**
   * Gets/sets the primary styles used for the component.
   * @remarks
   * This value can only be accurately read after connect but can be set at any time.
   */
  get styles() {
    return this._styles;
  }
  set styles(value) {
    if (this._styles === value) {
      return;
    }
    if (this._styles !== null) {
      this.removeStyles(this._styles);
    }
    this._styles = value;
    if (!this.needsInitialization && value !== null) {
      this.addStyles(value);
    }
  }
  /**
   * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.
   * @param styles - The styles to add.
   */
  addStyles(styles23) {
    const target = getShadowRoot(this.element) || this.element.getRootNode();
    if (styles23 instanceof HTMLStyleElement) {
      target.append(styles23);
    } else if (!styles23.isAttachedTo(target)) {
      const sourceBehaviors = styles23.behaviors;
      styles23.addStylesTo(target);
      if (sourceBehaviors !== null) {
        this.addBehaviors(sourceBehaviors);
      }
    }
  }
  /**
   * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.
   * @param styles - the styles to remove.
   */
  removeStyles(styles23) {
    const target = getShadowRoot(this.element) || this.element.getRootNode();
    if (styles23 instanceof HTMLStyleElement) {
      target.removeChild(styles23);
    } else if (styles23.isAttachedTo(target)) {
      const sourceBehaviors = styles23.behaviors;
      styles23.removeStylesFrom(target);
      if (sourceBehaviors !== null) {
        this.removeBehaviors(sourceBehaviors);
      }
    }
  }
  /**
   * Adds behaviors to this element.
   * @param behaviors - The behaviors to add.
   */
  addBehaviors(behaviors) {
    const targetBehaviors = this.behaviors || (this.behaviors = /* @__PURE__ */ new Map());
    const length = behaviors.length;
    const behaviorsToBind = [];
    for (let i = 0; i < length; ++i) {
      const behavior = behaviors[i];
      if (targetBehaviors.has(behavior)) {
        targetBehaviors.set(behavior, targetBehaviors.get(behavior) + 1);
      } else {
        targetBehaviors.set(behavior, 1);
        behaviorsToBind.push(behavior);
      }
    }
    if (this._isConnected) {
      const element = this.element;
      for (let i = 0; i < behaviorsToBind.length; ++i) {
        behaviorsToBind[i].bind(element, defaultExecutionContext);
      }
    }
  }
  /**
   * Removes behaviors from this element.
   * @param behaviors - The behaviors to remove.
   * @param force - Forces unbinding of behaviors.
   */
  removeBehaviors(behaviors, force = false) {
    const targetBehaviors = this.behaviors;
    if (targetBehaviors === null) {
      return;
    }
    const length = behaviors.length;
    const behaviorsToUnbind = [];
    for (let i = 0; i < length; ++i) {
      const behavior = behaviors[i];
      if (targetBehaviors.has(behavior)) {
        const count = targetBehaviors.get(behavior) - 1;
        count === 0 || force ? targetBehaviors.delete(behavior) && behaviorsToUnbind.push(behavior) : targetBehaviors.set(behavior, count);
      }
    }
    if (this._isConnected) {
      const element = this.element;
      for (let i = 0; i < behaviorsToUnbind.length; ++i) {
        behaviorsToUnbind[i].unbind(element);
      }
    }
  }
  /**
   * Runs connected lifecycle behavior on the associated element.
   */
  onConnectedCallback() {
    if (this._isConnected) {
      return;
    }
    const element = this.element;
    if (this.needsInitialization) {
      this.finishInitialization();
    } else if (this.view !== null) {
      this.view.bind(element, defaultExecutionContext);
    }
    const behaviors = this.behaviors;
    if (behaviors !== null) {
      for (const [behavior] of behaviors) {
        behavior.bind(element, defaultExecutionContext);
      }
    }
    this.setIsConnected(true);
  }
  /**
   * Runs disconnected lifecycle behavior on the associated element.
   */
  onDisconnectedCallback() {
    if (!this._isConnected) {
      return;
    }
    this.setIsConnected(false);
    const view = this.view;
    if (view !== null) {
      view.unbind();
    }
    const behaviors = this.behaviors;
    if (behaviors !== null) {
      const element = this.element;
      for (const [behavior] of behaviors) {
        behavior.unbind(element);
      }
    }
  }
  /**
   * Runs the attribute changed callback for the associated element.
   * @param name - The name of the attribute that changed.
   * @param oldValue - The previous value of the attribute.
   * @param newValue - The new value of the attribute.
   */
  onAttributeChangedCallback(name, oldValue, newValue) {
    const attrDef = this.definition.attributeLookup[name];
    if (attrDef !== void 0) {
      attrDef.onAttributeChangedCallback(this.element, newValue);
    }
  }
  /**
   * Emits a custom HTML event.
   * @param type - The type name of the event.
   * @param detail - The event detail object to send with the event.
   * @param options - The event options. By default bubbles and composed.
   * @remarks
   * Only emits events if connected.
   */
  emit(type, detail, options) {
    if (this._isConnected) {
      return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));
    }
    return false;
  }
  finishInitialization() {
    const element = this.element;
    const boundObservables = this.boundObservables;
    if (boundObservables !== null) {
      const propertyNames = Object.keys(boundObservables);
      for (let i = 0, ii = propertyNames.length; i < ii; ++i) {
        const propertyName = propertyNames[i];
        element[propertyName] = boundObservables[propertyName];
      }
      this.boundObservables = null;
    }
    const definition = this.definition;
    if (this._template === null) {
      if (this.element.resolveTemplate) {
        this._template = this.element.resolveTemplate();
      } else if (definition.template) {
        this._template = definition.template || null;
      }
    }
    if (this._template !== null) {
      this.renderTemplate(this._template);
    }
    if (this._styles === null) {
      if (this.element.resolveStyles) {
        this._styles = this.element.resolveStyles();
      } else if (definition.styles) {
        this._styles = definition.styles || null;
      }
    }
    if (this._styles !== null) {
      this.addStyles(this._styles);
    }
    this.needsInitialization = false;
  }
  renderTemplate(template2) {
    const element = this.element;
    const host = getShadowRoot(element) || element;
    if (this.view !== null) {
      this.view.dispose();
      this.view = null;
    } else if (!this.needsInitialization) {
      DOM.removeChildNodes(host);
    }
    if (template2) {
      this.view = template2.render(element, host, element);
    }
  }
  /**
   * Locates or creates a controller for the specified element.
   * @param element - The element to return the controller for.
   * @remarks
   * The specified element must have a {@link FASTElementDefinition}
   * registered either through the use of the {@link customElement}
   * decorator or a call to `FASTElement.define`.
   */
  static forCustomElement(element) {
    const controller = element.$fastController;
    if (controller !== void 0) {
      return controller;
    }
    const definition = FASTElementDefinition.forType(element.constructor);
    if (definition === void 0) {
      throw new Error("Missing FASTElement definition.");
    }
    return element.$fastController = new Controller(element, definition);
  }
};

// node_modules/@microsoft/fast-element/dist/esm/components/fast-element.js
function createFASTElement(BaseType) {
  return class extends BaseType {
    constructor() {
      super();
      Controller.forCustomElement(this);
    }
    $emit(type, detail, options) {
      return this.$fastController.emit(type, detail, options);
    }
    connectedCallback() {
      this.$fastController.onConnectedCallback();
    }
    disconnectedCallback() {
      this.$fastController.onDisconnectedCallback();
    }
    attributeChangedCallback(name, oldValue, newValue) {
      this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);
    }
  };
}
var FASTElement = Object.assign(createFASTElement(HTMLElement), {
  /**
   * Creates a new FASTElement base class inherited from the
   * provided base type.
   * @param BaseType - The base element type to inherit from.
   */
  from(BaseType) {
    return createFASTElement(BaseType);
  },
  /**
   * Defines a platform custom element based on the provided type and definition.
   * @param type - The custom element type to define.
   * @param nameOrDef - The name of the element to define or a definition object
   * that describes the element to define.
   */
  define(type, nameOrDef) {
    return new FASTElementDefinition(type, nameOrDef).define().type;
  }
});
function customElement2(nameOrDef) {
  return function(type) {
    new FASTElementDefinition(type, nameOrDef).define();
  };
}

// node_modules/@microsoft/fast-element/dist/esm/styles/css-directive.js
var CSSDirective = class {
  /**
   * Creates a CSS fragment to interpolate into the CSS document.
   * @returns - the string to interpolate into CSS
   */
  createCSS() {
    return "";
  }
  /**
   * Creates a behavior to bind to the host element.
   * @returns - the behavior to bind to the host element, or undefined.
   */
  createBehavior() {
    return void 0;
  }
};

// node_modules/@microsoft/fast-element/dist/esm/styles/css.js
function collectStyles(strings17, values2) {
  const styles23 = [];
  let cssString = "";
  const behaviors = [];
  for (let i = 0, ii = strings17.length - 1; i < ii; ++i) {
    cssString += strings17[i];
    let value = values2[i];
    if (value instanceof CSSDirective) {
      const behavior = value.createBehavior();
      value = value.createCSS();
      if (behavior) {
        behaviors.push(behavior);
      }
    }
    if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {
      if (cssString.trim() !== "") {
        styles23.push(cssString);
        cssString = "";
      }
      styles23.push(value);
    } else {
      cssString += value;
    }
  }
  cssString += strings17[strings17.length - 1];
  if (cssString.trim() !== "") {
    styles23.push(cssString);
  }
  return {
    styles: styles23,
    behaviors
  };
}
function css2(strings17, ...values2) {
  const { styles: styles23, behaviors } = collectStyles(strings17, values2);
  const elementStyles = ElementStyles.create(styles23);
  if (behaviors.length) {
    elementStyles.withBehaviors(...behaviors);
  }
  return elementStyles;
}

// node_modules/@microsoft/fast-element/dist/esm/observation/array-change-records.js
function newSplice(index, removed, addedCount) {
  return {
    index,
    removed,
    addedCount
  };
}
var EDIT_LEAVE = 0;
var EDIT_UPDATE = 1;
var EDIT_ADD = 2;
var EDIT_DELETE = 3;
function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  const rowCount = oldEnd - oldStart + 1;
  const columnCount = currentEnd - currentStart + 1;
  const distances = new Array(rowCount);
  let north;
  let west;
  for (let i = 0; i < rowCount; ++i) {
    distances[i] = new Array(columnCount);
    distances[i][0] = i;
  }
  for (let j = 0; j < columnCount; ++j) {
    distances[0][j] = j;
  }
  for (let i = 1; i < rowCount; ++i) {
    for (let j = 1; j < columnCount; ++j) {
      if (current[currentStart + j - 1] === old[oldStart + i - 1]) {
        distances[i][j] = distances[i - 1][j - 1];
      } else {
        north = distances[i - 1][j] + 1;
        west = distances[i][j - 1] + 1;
        distances[i][j] = north < west ? north : west;
      }
    }
  }
  return distances;
}
function spliceOperationsFromEditDistances(distances) {
  let i = distances.length - 1;
  let j = distances[0].length - 1;
  let current = distances[i][j];
  const edits = [];
  while (i > 0 || j > 0) {
    if (i === 0) {
      edits.push(EDIT_ADD);
      j--;
      continue;
    }
    if (j === 0) {
      edits.push(EDIT_DELETE);
      i--;
      continue;
    }
    const northWest = distances[i - 1][j - 1];
    const west = distances[i - 1][j];
    const north = distances[i][j - 1];
    let min2;
    if (west < north) {
      min2 = west < northWest ? west : northWest;
    } else {
      min2 = north < northWest ? north : northWest;
    }
    if (min2 === northWest) {
      if (northWest === current) {
        edits.push(EDIT_LEAVE);
      } else {
        edits.push(EDIT_UPDATE);
        current = northWest;
      }
      i--;
      j--;
    } else if (min2 === west) {
      edits.push(EDIT_DELETE);
      i--;
      current = west;
    } else {
      edits.push(EDIT_ADD);
      j--;
      current = north;
    }
  }
  edits.reverse();
  return edits;
}
function sharedPrefix(current, old, searchLength) {
  for (let i = 0; i < searchLength; ++i) {
    if (current[i] !== old[i]) {
      return i;
    }
  }
  return searchLength;
}
function sharedSuffix(current, old, searchLength) {
  let index1 = current.length;
  let index2 = old.length;
  let count = 0;
  while (count < searchLength && current[--index1] === old[--index2]) {
    count++;
  }
  return count;
}
function intersect(start1, end1, start2, end2) {
  if (end1 < start2 || end2 < start1) {
    return -1;
  }
  if (end1 === start2 || end2 === start1) {
    return 0;
  }
  if (start1 < start2) {
    if (end1 < end2) {
      return end1 - start2;
    }
    return end2 - start2;
  }
  if (end2 < end1) {
    return end2 - start1;
  }
  return end1 - start1;
}
function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  let prefixCount = 0;
  let suffixCount = 0;
  const minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
  if (currentStart === 0 && oldStart === 0) {
    prefixCount = sharedPrefix(current, old, minLength);
  }
  if (currentEnd === current.length && oldEnd === old.length) {
    suffixCount = sharedSuffix(current, old, minLength - prefixCount);
  }
  currentStart += prefixCount;
  oldStart += prefixCount;
  currentEnd -= suffixCount;
  oldEnd -= suffixCount;
  if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {
    return emptyArray;
  }
  if (currentStart === currentEnd) {
    const splice5 = newSplice(currentStart, [], 0);
    while (oldStart < oldEnd) {
      splice5.removed.push(old[oldStart++]);
    }
    return [splice5];
  } else if (oldStart === oldEnd) {
    return [newSplice(currentStart, [], currentEnd - currentStart)];
  }
  const ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
  const splices = [];
  let splice4 = void 0;
  let index = currentStart;
  let oldIndex = oldStart;
  for (let i = 0; i < ops.length; ++i) {
    switch (ops[i]) {
      case EDIT_LEAVE:
        if (splice4 !== void 0) {
          splices.push(splice4);
          splice4 = void 0;
        }
        index++;
        oldIndex++;
        break;
      case EDIT_UPDATE:
        if (splice4 === void 0) {
          splice4 = newSplice(index, [], 0);
        }
        splice4.addedCount++;
        index++;
        splice4.removed.push(old[oldIndex]);
        oldIndex++;
        break;
      case EDIT_ADD:
        if (splice4 === void 0) {
          splice4 = newSplice(index, [], 0);
        }
        splice4.addedCount++;
        index++;
        break;
      case EDIT_DELETE:
        if (splice4 === void 0) {
          splice4 = newSplice(index, [], 0);
        }
        splice4.removed.push(old[oldIndex]);
        oldIndex++;
        break;
    }
  }
  if (splice4 !== void 0) {
    splices.push(splice4);
  }
  return splices;
}
var $push = Array.prototype.push;
function mergeSplice(splices, index, removed, addedCount) {
  const splice4 = newSplice(index, removed, addedCount);
  let inserted = false;
  let insertionOffset = 0;
  for (let i = 0; i < splices.length; i++) {
    const current = splices[i];
    current.index += insertionOffset;
    if (inserted) {
      continue;
    }
    const intersectCount = intersect(splice4.index, splice4.index + splice4.removed.length, current.index, current.index + current.addedCount);
    if (intersectCount >= 0) {
      splices.splice(i, 1);
      i--;
      insertionOffset -= current.addedCount - current.removed.length;
      splice4.addedCount += current.addedCount - intersectCount;
      const deleteCount = splice4.removed.length + current.removed.length - intersectCount;
      if (!splice4.addedCount && !deleteCount) {
        inserted = true;
      } else {
        let currentRemoved = current.removed;
        if (splice4.index < current.index) {
          const prepend = splice4.removed.slice(0, current.index - splice4.index);
          $push.apply(prepend, currentRemoved);
          currentRemoved = prepend;
        }
        if (splice4.index + splice4.removed.length > current.index + current.addedCount) {
          const append = splice4.removed.slice(current.index + current.addedCount - splice4.index);
          $push.apply(currentRemoved, append);
        }
        splice4.removed = currentRemoved;
        if (current.index < splice4.index) {
          splice4.index = current.index;
        }
      }
    } else if (splice4.index < current.index) {
      inserted = true;
      splices.splice(i, 0, splice4);
      i++;
      const offset = splice4.addedCount - splice4.removed.length;
      current.index += offset;
      insertionOffset += offset;
    }
  }
  if (!inserted) {
    splices.push(splice4);
  }
}
function createInitialSplices(changeRecords) {
  const splices = [];
  for (let i = 0, ii = changeRecords.length; i < ii; i++) {
    const record = changeRecords[i];
    mergeSplice(splices, record.index, record.removed, record.addedCount);
  }
  return splices;
}
function projectArraySplices(array, changeRecords) {
  let splices = [];
  const initialSplices = createInitialSplices(changeRecords);
  for (let i = 0, ii = initialSplices.length; i < ii; ++i) {
    const splice4 = initialSplices[i];
    if (splice4.addedCount === 1 && splice4.removed.length === 1) {
      if (splice4.removed[0] !== array[splice4.index]) {
        splices.push(splice4);
      }
      continue;
    }
    splices = splices.concat(calcSplices(array, splice4.index, splice4.index + splice4.addedCount, splice4.removed, 0, splice4.removed.length));
  }
  return splices;
}

// node_modules/@microsoft/fast-element/dist/esm/observation/array-observer.js
var arrayObservationEnabled = false;
function adjustIndex(changeRecord, array) {
  let index = changeRecord.index;
  const arrayLength = array.length;
  if (index > arrayLength) {
    index = arrayLength - changeRecord.addedCount;
  } else if (index < 0) {
    index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;
  }
  if (index < 0) {
    index = 0;
  }
  changeRecord.index = index;
  return changeRecord;
}
var ArrayObserver = class extends SubscriberSet {
  constructor(source) {
    super(source);
    this.oldCollection = void 0;
    this.splices = void 0;
    this.needsQueue = true;
    this.call = this.flush;
    Reflect.defineProperty(source, "$fastController", {
      value: this,
      enumerable: false
    });
  }
  subscribe(subscriber) {
    this.flush();
    super.subscribe(subscriber);
  }
  addSplice(splice4) {
    if (this.splices === void 0) {
      this.splices = [splice4];
    } else {
      this.splices.push(splice4);
    }
    if (this.needsQueue) {
      this.needsQueue = false;
      DOM.queueUpdate(this);
    }
  }
  reset(oldCollection) {
    this.oldCollection = oldCollection;
    if (this.needsQueue) {
      this.needsQueue = false;
      DOM.queueUpdate(this);
    }
  }
  flush() {
    const splices = this.splices;
    const oldCollection = this.oldCollection;
    if (splices === void 0 && oldCollection === void 0) {
      return;
    }
    this.needsQueue = true;
    this.splices = void 0;
    this.oldCollection = void 0;
    const finalSplices = oldCollection === void 0 ? projectArraySplices(this.source, splices) : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);
    this.notify(finalSplices);
  }
};
function enableArrayObservation() {
  if (arrayObservationEnabled) {
    return;
  }
  arrayObservationEnabled = true;
  Observable.setArrayObserverFactory((collection) => {
    return new ArrayObserver(collection);
  });
  const proto = Array.prototype;
  if (proto.$fastPatch) {
    return;
  }
  Reflect.defineProperty(proto, "$fastPatch", {
    value: 1,
    enumerable: false
  });
  const pop = proto.pop;
  const push = proto.push;
  const reverse2 = proto.reverse;
  const shift = proto.shift;
  const sort = proto.sort;
  const splice4 = proto.splice;
  const unshift = proto.unshift;
  proto.pop = function() {
    const notEmpty = this.length > 0;
    const methodCallResult = pop.apply(this, arguments);
    const o = this.$fastController;
    if (o !== void 0 && notEmpty) {
      o.addSplice(newSplice(this.length, [methodCallResult], 0));
    }
    return methodCallResult;
  };
  proto.push = function() {
    const methodCallResult = push.apply(this, arguments);
    const o = this.$fastController;
    if (o !== void 0) {
      o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));
    }
    return methodCallResult;
  };
  proto.reverse = function() {
    let oldArray;
    const o = this.$fastController;
    if (o !== void 0) {
      o.flush();
      oldArray = this.slice();
    }
    const methodCallResult = reverse2.apply(this, arguments);
    if (o !== void 0) {
      o.reset(oldArray);
    }
    return methodCallResult;
  };
  proto.shift = function() {
    const notEmpty = this.length > 0;
    const methodCallResult = shift.apply(this, arguments);
    const o = this.$fastController;
    if (o !== void 0 && notEmpty) {
      o.addSplice(newSplice(0, [methodCallResult], 0));
    }
    return methodCallResult;
  };
  proto.sort = function() {
    let oldArray;
    const o = this.$fastController;
    if (o !== void 0) {
      o.flush();
      oldArray = this.slice();
    }
    const methodCallResult = sort.apply(this, arguments);
    if (o !== void 0) {
      o.reset(oldArray);
    }
    return methodCallResult;
  };
  proto.splice = function() {
    const methodCallResult = splice4.apply(this, arguments);
    const o = this.$fastController;
    if (o !== void 0) {
      o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));
    }
    return methodCallResult;
  };
  proto.unshift = function() {
    const methodCallResult = unshift.apply(this, arguments);
    const o = this.$fastController;
    if (o !== void 0) {
      o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));
    }
    return methodCallResult;
  };
}

// node_modules/@microsoft/fast-element/dist/esm/templating/ref.js
var RefBehavior = class {
  /**
   * Creates an instance of RefBehavior.
   * @param target - The element to reference.
   * @param propertyName - The name of the property to assign the reference to.
   */
  constructor(target, propertyName) {
    this.target = target;
    this.propertyName = propertyName;
  }
  /**
   * Bind this behavior to the source.
   * @param source - The source to bind to.
   * @param context - The execution context that the binding is operating within.
   */
  bind(source) {
    source[this.propertyName] = this.target;
  }
  /**
   * Unbinds this behavior from the source.
   * @param source - The source to unbind from.
   */
  /* eslint-disable-next-line @typescript-eslint/no-empty-function */
  unbind() {
  }
};
function ref(propertyName) {
  return new AttachedBehaviorHTMLDirective("fast-ref", RefBehavior, propertyName);
}

// node_modules/@microsoft/fast-element/dist/esm/templating/when.js
function when(binding, templateOrTemplateBinding) {
  const getTemplate = typeof templateOrTemplateBinding === "function" ? templateOrTemplateBinding : () => templateOrTemplateBinding;
  return (source, context) => binding(source, context) ? getTemplate(source, context) : null;
}

// node_modules/@microsoft/fast-element/dist/esm/templating/repeat.js
var defaultRepeatOptions = Object.freeze({
  positioning: false,
  recycle: true
});
function bindWithoutPositioning(view, items, index, context) {
  view.bind(items[index], context);
}
function bindWithPositioning(view, items, index, context) {
  const childContext = Object.create(context);
  childContext.index = index;
  childContext.length = items.length;
  view.bind(items[index], childContext);
}
var RepeatBehavior = class {
  /**
   * Creates an instance of RepeatBehavior.
   * @param location - The location in the DOM to render the repeat.
   * @param itemsBinding - The array to render.
   * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.
   * @param templateBinding - The template to render for each item.
   * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.
   * @param options - Options used to turn on special repeat features.
   */
  constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {
    this.location = location;
    this.itemsBinding = itemsBinding;
    this.templateBinding = templateBinding;
    this.options = options;
    this.source = null;
    this.views = [];
    this.items = null;
    this.itemsObserver = null;
    this.originalContext = void 0;
    this.childContext = void 0;
    this.bindView = bindWithoutPositioning;
    this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);
    this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);
    if (options.positioning) {
      this.bindView = bindWithPositioning;
    }
  }
  /**
   * Bind this behavior to the source.
   * @param source - The source to bind to.
   * @param context - The execution context that the binding is operating within.
   */
  bind(source, context) {
    this.source = source;
    this.originalContext = context;
    this.childContext = Object.create(context);
    this.childContext.parent = source;
    this.childContext.parentContext = this.originalContext;
    this.items = this.itemsBindingObserver.observe(source, this.originalContext);
    this.template = this.templateBindingObserver.observe(source, this.originalContext);
    this.observeItems(true);
    this.refreshAllViews();
  }
  /**
   * Unbinds this behavior from the source.
   * @param source - The source to unbind from.
   */
  unbind() {
    this.source = null;
    this.items = null;
    if (this.itemsObserver !== null) {
      this.itemsObserver.unsubscribe(this);
    }
    this.unbindAllViews();
    this.itemsBindingObserver.disconnect();
    this.templateBindingObserver.disconnect();
  }
  /** @internal */
  handleChange(source, args) {
    if (source === this.itemsBinding) {
      this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);
      this.observeItems();
      this.refreshAllViews();
    } else if (source === this.templateBinding) {
      this.template = this.templateBindingObserver.observe(this.source, this.originalContext);
      this.refreshAllViews(true);
    } else {
      this.updateViews(args);
    }
  }
  observeItems(force = false) {
    if (!this.items) {
      this.items = emptyArray;
      return;
    }
    const oldObserver = this.itemsObserver;
    const newObserver = this.itemsObserver = Observable.getNotifier(this.items);
    const hasNewObserver = oldObserver !== newObserver;
    if (hasNewObserver && oldObserver !== null) {
      oldObserver.unsubscribe(this);
    }
    if (hasNewObserver || force) {
      newObserver.subscribe(this);
    }
  }
  updateViews(splices) {
    const childContext = this.childContext;
    const views = this.views;
    const bindView = this.bindView;
    const items = this.items;
    const template2 = this.template;
    const recycle = this.options.recycle;
    const leftoverViews = [];
    let leftoverIndex = 0;
    let availableViews = 0;
    for (let i = 0, ii = splices.length; i < ii; ++i) {
      const splice4 = splices[i];
      const removed = splice4.removed;
      let removeIndex = 0;
      let addIndex = splice4.index;
      const end = addIndex + splice4.addedCount;
      const removedViews = views.splice(splice4.index, removed.length);
      const totalAvailableViews = availableViews = leftoverViews.length + removedViews.length;
      for (; addIndex < end; ++addIndex) {
        const neighbor = views[addIndex];
        const location = neighbor ? neighbor.firstChild : this.location;
        let view;
        if (recycle && availableViews > 0) {
          if (removeIndex <= totalAvailableViews && removedViews.length > 0) {
            view = removedViews[removeIndex];
            removeIndex++;
          } else {
            view = leftoverViews[leftoverIndex];
            leftoverIndex++;
          }
          availableViews--;
        } else {
          view = template2.create();
        }
        views.splice(addIndex, 0, view);
        bindView(view, items, addIndex, childContext);
        view.insertBefore(location);
      }
      if (removedViews[removeIndex]) {
        leftoverViews.push(...removedViews.slice(removeIndex));
      }
    }
    for (let i = leftoverIndex, ii = leftoverViews.length; i < ii; ++i) {
      leftoverViews[i].dispose();
    }
    if (this.options.positioning) {
      for (let i = 0, ii = views.length; i < ii; ++i) {
        const currentContext = views[i].context;
        currentContext.length = ii;
        currentContext.index = i;
      }
    }
  }
  refreshAllViews(templateChanged = false) {
    const items = this.items;
    const childContext = this.childContext;
    const template2 = this.template;
    const location = this.location;
    const bindView = this.bindView;
    let itemsLength = items.length;
    let views = this.views;
    let viewsLength = views.length;
    if (itemsLength === 0 || templateChanged || !this.options.recycle) {
      HTMLView.disposeContiguousBatch(views);
      viewsLength = 0;
    }
    if (viewsLength === 0) {
      this.views = views = new Array(itemsLength);
      for (let i = 0; i < itemsLength; ++i) {
        const view = template2.create();
        bindView(view, items, i, childContext);
        views[i] = view;
        view.insertBefore(location);
      }
    } else {
      let i = 0;
      for (; i < itemsLength; ++i) {
        if (i < viewsLength) {
          const view = views[i];
          bindView(view, items, i, childContext);
        } else {
          const view = template2.create();
          bindView(view, items, i, childContext);
          views.push(view);
          view.insertBefore(location);
        }
      }
      const removed = views.splice(i, viewsLength - i);
      for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {
        removed[i].dispose();
      }
    }
  }
  unbindAllViews() {
    const views = this.views;
    for (let i = 0, ii = views.length; i < ii; ++i) {
      views[i].unbind();
    }
  }
};
var RepeatDirective = class extends HTMLDirective {
  /**
   * Creates an instance of RepeatDirective.
   * @param itemsBinding - The binding that provides the array to render.
   * @param templateBinding - The template binding used to obtain a template to render for each item in the array.
   * @param options - Options used to turn on special repeat features.
   */
  constructor(itemsBinding, templateBinding, options) {
    super();
    this.itemsBinding = itemsBinding;
    this.templateBinding = templateBinding;
    this.options = options;
    this.createPlaceholder = DOM.createBlockPlaceholder;
    enableArrayObservation();
    this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);
    this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);
  }
  /**
   * Creates a behavior for the provided target node.
   * @param target - The node instance to create the behavior for.
   */
  createBehavior(target) {
    return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);
  }
};

// node_modules/@microsoft/fast-element/dist/esm/templating/node-observation.js
function elements(selector) {
  if (selector) {
    return function(value, index, array) {
      return value.nodeType === 1 && value.matches(selector);
    };
  }
  return function(value, index, array) {
    return value.nodeType === 1;
  };
}
var NodeObservationBehavior = class {
  /**
   * Creates an instance of NodeObservationBehavior.
   * @param target - The target to assign the nodes property on.
   * @param options - The options to use in configuring node observation.
   */
  constructor(target, options) {
    this.target = target;
    this.options = options;
    this.source = null;
  }
  /**
   * Bind this behavior to the source.
   * @param source - The source to bind to.
   * @param context - The execution context that the binding is operating within.
   */
  bind(source) {
    const name = this.options.property;
    this.shouldUpdate = Observable.getAccessors(source).some((x) => x.name === name);
    this.source = source;
    this.updateTarget(this.computeNodes());
    if (this.shouldUpdate) {
      this.observe();
    }
  }
  /**
   * Unbinds this behavior from the source.
   * @param source - The source to unbind from.
   */
  unbind() {
    this.updateTarget(emptyArray);
    this.source = null;
    if (this.shouldUpdate) {
      this.disconnect();
    }
  }
  /** @internal */
  handleEvent() {
    this.updateTarget(this.computeNodes());
  }
  computeNodes() {
    let nodes = this.getNodes();
    if (this.options.filter !== void 0) {
      nodes = nodes.filter(this.options.filter);
    }
    return nodes;
  }
  updateTarget(value) {
    this.source[this.options.property] = value;
  }
};

// node_modules/@microsoft/fast-element/dist/esm/templating/slotted.js
var SlottedBehavior = class extends NodeObservationBehavior {
  /**
   * Creates an instance of SlottedBehavior.
   * @param target - The slot element target to observe.
   * @param options - The options to use when observing the slot.
   */
  constructor(target, options) {
    super(target, options);
  }
  /**
   * Begins observation of the nodes.
   */
  observe() {
    this.target.addEventListener("slotchange", this);
  }
  /**
   * Disconnects observation of the nodes.
   */
  disconnect() {
    this.target.removeEventListener("slotchange", this);
  }
  /**
   * Retrieves the nodes that should be assigned to the target.
   */
  getNodes() {
    return this.target.assignedNodes(this.options);
  }
};
function slotted(propertyOrOptions) {
  if (typeof propertyOrOptions === "string") {
    propertyOrOptions = { property: propertyOrOptions };
  }
  return new AttachedBehaviorHTMLDirective("fast-slotted", SlottedBehavior, propertyOrOptions);
}

// node_modules/@microsoft/fast-element/dist/esm/templating/children.js
var ChildrenBehavior = class extends NodeObservationBehavior {
  /**
   * Creates an instance of ChildrenBehavior.
   * @param target - The element target to observe children on.
   * @param options - The options to use when observing the element children.
   */
  constructor(target, options) {
    super(target, options);
    this.observer = null;
    options.childList = true;
  }
  /**
   * Begins observation of the nodes.
   */
  observe() {
    if (this.observer === null) {
      this.observer = new MutationObserver(this.handleEvent.bind(this));
    }
    this.observer.observe(this.target, this.options);
  }
  /**
   * Disconnects observation of the nodes.
   */
  disconnect() {
    this.observer.disconnect();
  }
  /**
   * Retrieves the nodes that should be assigned to the target.
   */
  getNodes() {
    if ("subtree" in this.options) {
      return Array.from(this.target.querySelectorAll(this.options.selector));
    }
    return Array.from(this.target.childNodes);
  }
};
function children(propertyOrOptions) {
  if (typeof propertyOrOptions === "string") {
    propertyOrOptions = {
      property: propertyOrOptions
    };
  }
  return new AttachedBehaviorHTMLDirective("fast-children", ChildrenBehavior, propertyOrOptions);
}

// node_modules/@microsoft/fast-foundation/dist/esm/patterns/start-end.js
var StartEnd = class {
  handleStartContentChange() {
    this.startContainer.classList.toggle("start", this.start.assignedNodes().length > 0);
  }
  handleEndContentChange() {
    this.endContainer.classList.toggle("end", this.end.assignedNodes().length > 0);
  }
};
var endTemplate = html2`
    <span part="end" ${ref("endContainer")}>
        <slot
            name="end"
            ${ref("end")}
            @slotchange="${(x) => x.handleEndContentChange()}"
        ></slot>
    </span>
`;
var startTemplate = html2`
    <span part="start" ${ref("startContainer")}>
        <slot
            name="start"
            ${ref("start")}
            @slotchange="${(x) => x.handleStartContentChange()}"
        ></slot>
    </span>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/accordion-item/accordion-item.template.js
var AccordionItemTemplate = html2`
    <template
        class="${(x) => x.expanded ? "expanded" : ""}"
        slot="item"
    >
        <div
            class="heading"
            part="heading"
            role="heading"
            aria-level="${(x) => x.headinglevel}"
        >
            <button
                class="button"
                part="button"
                ${ref("expandbutton")}
                aria-expanded="${(x) => x.expanded}"
                aria-controls="${(x) => x.id}-panel"
                id="${(x) => x.id}"
                @click="${(x, c) => x.clickHandler(c.event)}"
            >
                <span class="heading">
                    <slot name="heading" part="heading"></slot>
                </span>
            </button>
            ${startTemplate}
            ${endTemplate}
            <span class="icon" part="icon" aria-hidden="true">
                <slot name="expanded-icon" part="expanded-icon">
                    <svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                            d="M3.78 3h12.44c.43 0 .78.35.78.78v12.44c0 .43-.35.78-.78.78H3.78a.78.78 0 01-.78-.78V3.78c0-.43.35-.78.78-.78zm12.44-1H3.78C2.8 2 2 2.8 2 3.78v12.44C2 17.2 2.8 18 3.78 18h12.44c.98 0 1.78-.8 1.78-1.78V3.78C18 2.8 17.2 2 16.22 2zM14 9H6v2h8V9z"
                        />
                    </svg>
                </slot>
                <slot name="collapsed-icon" part="collapsed-icon">
                    <svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                            d="M16.22 3H3.78a.78.78 0 00-.78.78v12.44c0 .43.35.78.78.78h12.44c.43 0 .78-.35.78-.78V3.78a.78.78 0 00-.78-.78zM3.78 2h12.44C17.2 2 18 2.8 18 3.78v12.44c0 .98-.8 1.78-1.78 1.78H3.78C2.8 18 2 17.2 2 16.22V3.78C2 2.8 2.8 2 3.78 2zM11 9h3v2h-3v3H9v-3H6V9h3V6h2v3z"
                        />
                    </svg>
                </slot>
            <span>
        </div>
        <div
            class="region"
            part="region"
            id="${(x) => x.id}-panel"
            role="region"
            aria-labelledby="${(x) => x.id}"
        >
            <slot></slot>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/node_modules/tslib/tslib.es6.js
function __decorate7(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/apply-mixins.js
function applyMixins(derivedCtor, ...baseCtors) {
  baseCtors.forEach((baseCtor) => {
    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {
      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));
    });
    if (baseCtor.attributes) {
      const existing = derivedCtor.attributes || [];
      derivedCtor.attributes = existing.concat(baseCtor.attributes);
    }
  });
}

// node_modules/@microsoft/fast-foundation/dist/esm/accordion-item/accordion-item.js
var AccordionItem = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.headinglevel = 2;
    this.expanded = false;
    this.clickHandler = (e) => {
      this.expanded = !this.expanded;
      this.change();
    };
    this.change = () => {
      this.$emit("change");
    };
  }
};
__decorate7([
  attr({
    attribute: "heading-level",
    mode: "fromView",
    converter: nullableNumberConverter
  })
], AccordionItem.prototype, "headinglevel", void 0);
__decorate7([
  attr({ mode: "boolean" })
], AccordionItem.prototype, "expanded", void 0);
__decorate7([
  attr
], AccordionItem.prototype, "id", void 0);
applyMixins(AccordionItem, StartEnd);

// node_modules/@microsoft/fast-foundation/dist/esm/accordion/accordion.template.js
var AccordionTemplate = html2`
    <template>
        <slot name="item" part="item" ${slotted("accordionItems")}></slot>
    </template>
`;

// node_modules/@microsoft/fast-web-utilities/dist/aria.js
var Orientation;
(function(Orientation2) {
  Orientation2["horizontal"] = "horizontal";
  Orientation2["vertical"] = "vertical";
})(Orientation || (Orientation = {}));

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result2 = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result2;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/_baseToNumber.js
var NAN = 0 / 0;
function baseToNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  return +value;
}
var baseToNumber_default = baseToNumber;

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array, iteratee2) {
  var index = -1, length = array == null ? 0 : array.length, result2 = Array(length);
  while (++index < length) {
    result2[index] = iteratee2(array[index], index, array);
  }
  return result2;
}
var arrayMap_default = arrayMap;

// node_modules/lodash-es/isArray.js
var isArray = Array.isArray;
var isArray_default = isArray;

// node_modules/lodash-es/_baseToString.js
var INFINITY = 1 / 0;
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_default(value)) {
    return arrayMap_default(value, baseToString) + "";
  }
  if (isSymbol_default(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result2 = value + "";
  return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
}
var baseToString_default = baseToString;

// node_modules/lodash-es/_createMathOperation.js
function createMathOperation(operator, defaultValue) {
  return function(value, other) {
    var result2;
    if (value === void 0 && other === void 0) {
      return defaultValue;
    }
    if (value !== void 0) {
      result2 = value;
    }
    if (other !== void 0) {
      if (result2 === void 0) {
        return other;
      }
      if (typeof value == "string" || typeof other == "string") {
        value = baseToString_default(value);
        other = baseToString_default(other);
      } else {
        value = baseToNumber_default(value);
        other = baseToNumber_default(other);
      }
      result2 = operator(value, other);
    }
    return result2;
  };
}
var createMathOperation_default = createMathOperation;

// node_modules/lodash-es/add.js
var add = createMathOperation_default(function(augend, addend) {
  return augend + addend;
}, 0);
var add_default = add;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/toNumber.js
var NAN2 = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN2;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN2 : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/toFinite.js
var INFINITY2 = 1 / 0;
var MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_default(value);
  if (value === INFINITY2 || value === -INFINITY2) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_default = toFinite;

// node_modules/lodash-es/toInteger.js
function toInteger(value) {
  var result2 = toFinite_default(value), remainder = result2 % 1;
  return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
}
var toInteger_default = toInteger;

// node_modules/lodash-es/after.js
var FUNC_ERROR_TEXT = "Expected a function";
function after(n, func) {
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = toInteger_default(n);
  return function() {
    if (--n < 1) {
      return func.apply(this, arguments);
    }
  };
}
var after_default = after;

// node_modules/lodash-es/identity.js
function identity(value) {
  return value;
}
var identity_default = identity;

// node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;

// node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto2 = Function.prototype;
var objectProto3 = Object.prototype;
var funcToString2 = funcProto2.toString;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value)) {
    return false;
  }
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/lodash-es/_WeakMap.js
var WeakMap2 = getNative_default(root_default, "WeakMap");
var WeakMap_default = WeakMap2;

// node_modules/lodash-es/_metaMap.js
var metaMap = WeakMap_default && new WeakMap_default();
var metaMap_default = metaMap;

// node_modules/lodash-es/_baseSetData.js
var baseSetData = !metaMap_default ? identity_default : function(func, data) {
  metaMap_default.set(func, data);
  return func;
};
var baseSetData_default = baseSetData;

// node_modules/lodash-es/_baseCreate.js
var objectCreate = Object.create;
var baseCreate = function() {
  function object() {
  }
  return function(proto) {
    if (!isObject_default(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result2 = new object();
    object.prototype = void 0;
    return result2;
  };
}();
var baseCreate_default = baseCreate;

// node_modules/lodash-es/_createCtor.js
function createCtor(Ctor) {
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0:
        return new Ctor();
      case 1:
        return new Ctor(args[0]);
      case 2:
        return new Ctor(args[0], args[1]);
      case 3:
        return new Ctor(args[0], args[1], args[2]);
      case 4:
        return new Ctor(args[0], args[1], args[2], args[3]);
      case 5:
        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate_default(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
    return isObject_default(result2) ? result2 : thisBinding;
  };
}
var createCtor_default = createCtor;

// node_modules/lodash-es/_createBind.js
var WRAP_BIND_FLAG = 1;
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor_default(func);
  function wrapper() {
    var fn = this && this !== root_default && this instanceof wrapper ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}
var createBind_default = createBind;

// node_modules/lodash-es/_apply.js
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var apply_default = apply;

// node_modules/lodash-es/_composeArgs.js
var nativeMax = Math.max;
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array(leftLength + rangeLength), isUncurried = !isCurried;
  while (++leftIndex < leftLength) {
    result2[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result2[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result2[leftIndex++] = args[argsIndex++];
  }
  return result2;
}
var composeArgs_default = composeArgs;

// node_modules/lodash-es/_composeArgsRight.js
var nativeMax2 = Math.max;
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array(rangeLength + rightLength), isUncurried = !isCurried;
  while (++argsIndex < rangeLength) {
    result2[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result2[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result2[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result2;
}
var composeArgsRight_default = composeArgsRight;

// node_modules/lodash-es/_countHolders.js
function countHolders(array, placeholder) {
  var length = array.length, result2 = 0;
  while (length--) {
    if (array[length] === placeholder) {
      ++result2;
    }
  }
  return result2;
}
var countHolders_default = countHolders;

// node_modules/lodash-es/_baseLodash.js
function baseLodash() {
}
var baseLodash_default = baseLodash;

// node_modules/lodash-es/_LazyWrapper.js
var MAX_ARRAY_LENGTH = 4294967295;
function LazyWrapper(value) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__dir__ = 1;
  this.__filtered__ = false;
  this.__iteratees__ = [];
  this.__takeCount__ = MAX_ARRAY_LENGTH;
  this.__views__ = [];
}
LazyWrapper.prototype = baseCreate_default(baseLodash_default.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;
var LazyWrapper_default = LazyWrapper;

// node_modules/lodash-es/noop.js
function noop() {
}
var noop_default = noop;

// node_modules/lodash-es/_getData.js
var getData = !metaMap_default ? noop_default : function(func) {
  return metaMap_default.get(func);
};
var getData_default = getData;

// node_modules/lodash-es/_realNames.js
var realNames = {};
var realNames_default = realNames;

// node_modules/lodash-es/_getFuncName.js
var objectProto4 = Object.prototype;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
function getFuncName(func) {
  var result2 = func.name + "", array = realNames_default[result2], length = hasOwnProperty3.call(realNames_default, result2) ? array.length : 0;
  while (length--) {
    var data = array[length], otherFunc = data.func;
    if (otherFunc == null || otherFunc == func) {
      return data.name;
    }
  }
  return result2;
}
var getFuncName_default = getFuncName;

// node_modules/lodash-es/_LodashWrapper.js
function LodashWrapper(value, chainAll) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__chain__ = !!chainAll;
  this.__index__ = 0;
  this.__values__ = void 0;
}
LodashWrapper.prototype = baseCreate_default(baseLodash_default.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;
var LodashWrapper_default = LodashWrapper;

// node_modules/lodash-es/_copyArray.js
function copyArray(source, array) {
  var index = -1, length = source.length;
  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}
var copyArray_default = copyArray;

// node_modules/lodash-es/_wrapperClone.js
function wrapperClone(wrapper) {
  if (wrapper instanceof LazyWrapper_default) {
    return wrapper.clone();
  }
  var result2 = new LodashWrapper_default(wrapper.__wrapped__, wrapper.__chain__);
  result2.__actions__ = copyArray_default(wrapper.__actions__);
  result2.__index__ = wrapper.__index__;
  result2.__values__ = wrapper.__values__;
  return result2;
}
var wrapperClone_default = wrapperClone;

// node_modules/lodash-es/wrapperLodash.js
var objectProto5 = Object.prototype;
var hasOwnProperty4 = objectProto5.hasOwnProperty;
function lodash(value) {
  if (isObjectLike_default(value) && !isArray_default(value) && !(value instanceof LazyWrapper_default)) {
    if (value instanceof LodashWrapper_default) {
      return value;
    }
    if (hasOwnProperty4.call(value, "__wrapped__")) {
      return wrapperClone_default(value);
    }
  }
  return new LodashWrapper_default(value);
}
lodash.prototype = baseLodash_default.prototype;
lodash.prototype.constructor = lodash;
var wrapperLodash_default = lodash;

// node_modules/lodash-es/_isLaziable.js
function isLaziable(func) {
  var funcName = getFuncName_default(func), other = wrapperLodash_default[funcName];
  if (typeof other != "function" || !(funcName in LazyWrapper_default.prototype)) {
    return false;
  }
  if (func === other) {
    return true;
  }
  var data = getData_default(other);
  return !!data && func === data[0];
}
var isLaziable_default = isLaziable;

// node_modules/lodash-es/_shortOut.js
var HOT_COUNT = 800;
var HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var shortOut_default = shortOut;

// node_modules/lodash-es/_setData.js
var setData = shortOut_default(baseSetData_default);
var setData_default = setData;

// node_modules/lodash-es/_getWrapDetails.js
var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/;
var reSplitDetails = /,? & /;
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}
var getWrapDetails_default = getWrapDetails;

// node_modules/lodash-es/_insertWrapDetails.js
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
function insertWrapDetails(source, details) {
  var length = details.length;
  if (!length) {
    return source;
  }
  var lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
  details = details.join(length > 2 ? ", " : " ");
  return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
}
var insertWrapDetails_default = insertWrapDetails;

// node_modules/lodash-es/constant.js
function constant(value) {
  return function() {
    return value;
  };
}
var constant_default = constant;

// node_modules/lodash-es/_defineProperty.js
var defineProperty = function() {
  try {
    var func = getNative_default(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var defineProperty_default = defineProperty;

// node_modules/lodash-es/_baseSetToString.js
var baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
  return defineProperty_default(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant_default(string),
    "writable": true
  });
};
var baseSetToString_default = baseSetToString;

// node_modules/lodash-es/_setToString.js
var setToString = shortOut_default(baseSetToString_default);
var setToString_default = setToString;

// node_modules/lodash-es/_arrayEach.js
function arrayEach(array, iteratee2) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (iteratee2(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}
var arrayEach_default = arrayEach;

// node_modules/lodash-es/_baseFindIndex.js
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}
var baseFindIndex_default = baseFindIndex;

// node_modules/lodash-es/_baseIsNaN.js
function baseIsNaN(value) {
  return value !== value;
}
var baseIsNaN_default = baseIsNaN;

// node_modules/lodash-es/_strictIndexOf.js
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1, length = array.length;
  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}
var strictIndexOf_default = strictIndexOf;

// node_modules/lodash-es/_baseIndexOf.js
function baseIndexOf(array, value, fromIndex) {
  return value === value ? strictIndexOf_default(array, value, fromIndex) : baseFindIndex_default(array, baseIsNaN_default, fromIndex);
}
var baseIndexOf_default = baseIndexOf;

// node_modules/lodash-es/_arrayIncludes.js
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf_default(array, value, 0) > -1;
}
var arrayIncludes_default = arrayIncludes;

// node_modules/lodash-es/_updateWrapDetails.js
var WRAP_BIND_FLAG2 = 1;
var WRAP_BIND_KEY_FLAG = 2;
var WRAP_CURRY_FLAG = 8;
var WRAP_CURRY_RIGHT_FLAG = 16;
var WRAP_PARTIAL_FLAG = 32;
var WRAP_PARTIAL_RIGHT_FLAG = 64;
var WRAP_ARY_FLAG = 128;
var WRAP_REARG_FLAG = 256;
var WRAP_FLIP_FLAG = 512;
var wrapFlags = [
  ["ary", WRAP_ARY_FLAG],
  ["bind", WRAP_BIND_FLAG2],
  ["bindKey", WRAP_BIND_KEY_FLAG],
  ["curry", WRAP_CURRY_FLAG],
  ["curryRight", WRAP_CURRY_RIGHT_FLAG],
  ["flip", WRAP_FLIP_FLAG],
  ["partial", WRAP_PARTIAL_FLAG],
  ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
  ["rearg", WRAP_REARG_FLAG]
];
function updateWrapDetails(details, bitmask) {
  arrayEach_default(wrapFlags, function(pair) {
    var value = "_." + pair[0];
    if (bitmask & pair[1] && !arrayIncludes_default(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}
var updateWrapDetails_default = updateWrapDetails;

// node_modules/lodash-es/_setWrapToString.js
function setWrapToString(wrapper, reference, bitmask) {
  var source = reference + "";
  return setToString_default(wrapper, insertWrapDetails_default(source, updateWrapDetails_default(getWrapDetails_default(source), bitmask)));
}
var setWrapToString_default = setWrapToString;

// node_modules/lodash-es/_createRecurry.js
var WRAP_BIND_FLAG3 = 1;
var WRAP_BIND_KEY_FLAG2 = 2;
var WRAP_CURRY_BOUND_FLAG = 4;
var WRAP_CURRY_FLAG2 = 8;
var WRAP_PARTIAL_FLAG2 = 32;
var WRAP_PARTIAL_RIGHT_FLAG2 = 64;
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG2, newHolders = isCurry ? holders : void 0, newHoldersRight = isCurry ? void 0 : holders, newPartials = isCurry ? partials : void 0, newPartialsRight = isCurry ? void 0 : partials;
  bitmask |= isCurry ? WRAP_PARTIAL_FLAG2 : WRAP_PARTIAL_RIGHT_FLAG2;
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG2 : WRAP_PARTIAL_FLAG2);
  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    bitmask &= ~(WRAP_BIND_FLAG3 | WRAP_BIND_KEY_FLAG2);
  }
  var newData = [
    func,
    bitmask,
    thisArg,
    newPartials,
    newHolders,
    newPartialsRight,
    newHoldersRight,
    argPos,
    ary2,
    arity
  ];
  var result2 = wrapFunc.apply(void 0, newData);
  if (isLaziable_default(func)) {
    setData_default(result2, newData);
  }
  result2.placeholder = placeholder;
  return setWrapToString_default(result2, func, bitmask);
}
var createRecurry_default = createRecurry;

// node_modules/lodash-es/_getHolder.js
function getHolder(func) {
  var object = func;
  return object.placeholder;
}
var getHolder_default = getHolder;

// node_modules/lodash-es/_isIndex.js
var MAX_SAFE_INTEGER = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var isIndex_default = isIndex;

// node_modules/lodash-es/_reorder.js
var nativeMin = Math.min;
function reorder(array, indexes) {
  var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray_default(array);
  while (length--) {
    var index = indexes[length];
    array[length] = isIndex_default(index, arrLength) ? oldArray[index] : void 0;
  }
  return array;
}
var reorder_default = reorder;

// node_modules/lodash-es/_replaceHolders.js
var PLACEHOLDER = "__lodash_placeholder__";
function replaceHolders(array, placeholder) {
  var index = -1, length = array.length, resIndex = 0, result2 = [];
  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result2[resIndex++] = index;
    }
  }
  return result2;
}
var replaceHolders_default = replaceHolders;

// node_modules/lodash-es/_createHybrid.js
var WRAP_BIND_FLAG4 = 1;
var WRAP_BIND_KEY_FLAG3 = 2;
var WRAP_CURRY_FLAG3 = 8;
var WRAP_CURRY_RIGHT_FLAG2 = 16;
var WRAP_ARY_FLAG2 = 128;
var WRAP_FLIP_FLAG2 = 512;
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG2, isBind = bitmask & WRAP_BIND_FLAG4, isBindKey = bitmask & WRAP_BIND_KEY_FLAG3, isCurried = bitmask & (WRAP_CURRY_FLAG3 | WRAP_CURRY_RIGHT_FLAG2), isFlip = bitmask & WRAP_FLIP_FLAG2, Ctor = isBindKey ? void 0 : createCtor_default(func);
  function wrapper() {
    var length = arguments.length, args = Array(length), index = length;
    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder_default(wrapper), holdersCount = countHolders_default(args, placeholder);
    }
    if (partials) {
      args = composeArgs_default(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight_default(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders_default(args, placeholder);
      return createRecurry_default(
        func,
        bitmask,
        createHybrid,
        wrapper.placeholder,
        thisArg,
        args,
        newHolders,
        argPos,
        ary2,
        arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
    length = args.length;
    if (argPos) {
      args = reorder_default(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary2 < length) {
      args.length = ary2;
    }
    if (this && this !== root_default && this instanceof wrapper) {
      fn = Ctor || createCtor_default(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}
var createHybrid_default = createHybrid;

// node_modules/lodash-es/_createCurry.js
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor_default(func);
  function wrapper() {
    var length = arguments.length, args = Array(length), index = length, placeholder = getHolder_default(wrapper);
    while (index--) {
      args[index] = arguments[index];
    }
    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders_default(args, placeholder);
    length -= holders.length;
    if (length < arity) {
      return createRecurry_default(
        func,
        bitmask,
        createHybrid_default,
        wrapper.placeholder,
        void 0,
        args,
        holders,
        void 0,
        void 0,
        arity - length
      );
    }
    var fn = this && this !== root_default && this instanceof wrapper ? Ctor : func;
    return apply_default(fn, this, args);
  }
  return wrapper;
}
var createCurry_default = createCurry;

// node_modules/lodash-es/_createPartial.js
var WRAP_BIND_FLAG5 = 1;
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG5, Ctor = createCtor_default(func);
  function wrapper() {
    var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root_default && this instanceof wrapper ? Ctor : func;
    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply_default(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}
var createPartial_default = createPartial;

// node_modules/lodash-es/_mergeData.js
var PLACEHOLDER2 = "__lodash_placeholder__";
var WRAP_BIND_FLAG6 = 1;
var WRAP_BIND_KEY_FLAG4 = 2;
var WRAP_CURRY_BOUND_FLAG2 = 4;
var WRAP_CURRY_FLAG4 = 8;
var WRAP_ARY_FLAG3 = 128;
var WRAP_REARG_FLAG2 = 256;
var nativeMin2 = Math.min;
function mergeData(data, source) {
  var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG6 | WRAP_BIND_KEY_FLAG4 | WRAP_ARY_FLAG3);
  var isCombo = srcBitmask == WRAP_ARY_FLAG3 && bitmask == WRAP_CURRY_FLAG4 || srcBitmask == WRAP_ARY_FLAG3 && bitmask == WRAP_REARG_FLAG2 && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG3 | WRAP_REARG_FLAG2) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG4;
  if (!(isCommon || isCombo)) {
    return data;
  }
  if (srcBitmask & WRAP_BIND_FLAG6) {
    data[2] = source[2];
    newBitmask |= bitmask & WRAP_BIND_FLAG6 ? 0 : WRAP_CURRY_BOUND_FLAG2;
  }
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs_default(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders_default(data[3], PLACEHOLDER2) : source[4];
  }
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight_default(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders_default(data[5], PLACEHOLDER2) : source[6];
  }
  value = source[7];
  if (value) {
    data[7] = value;
  }
  if (srcBitmask & WRAP_ARY_FLAG3) {
    data[8] = data[8] == null ? source[8] : nativeMin2(data[8], source[8]);
  }
  if (data[9] == null) {
    data[9] = source[9];
  }
  data[0] = source[0];
  data[1] = newBitmask;
  return data;
}
var mergeData_default = mergeData;

// node_modules/lodash-es/_createWrap.js
var FUNC_ERROR_TEXT2 = "Expected a function";
var WRAP_BIND_FLAG7 = 1;
var WRAP_BIND_KEY_FLAG5 = 2;
var WRAP_CURRY_FLAG5 = 8;
var WRAP_CURRY_RIGHT_FLAG3 = 16;
var WRAP_PARTIAL_FLAG3 = 32;
var WRAP_PARTIAL_RIGHT_FLAG3 = 64;
var nativeMax3 = Math.max;
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG5;
  if (!isBindKey && typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT2);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(WRAP_PARTIAL_FLAG3 | WRAP_PARTIAL_RIGHT_FLAG3);
    partials = holders = void 0;
  }
  ary2 = ary2 === void 0 ? ary2 : nativeMax3(toInteger_default(ary2), 0);
  arity = arity === void 0 ? arity : toInteger_default(arity);
  length -= holders ? holders.length : 0;
  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG3) {
    var partialsRight = partials, holdersRight = holders;
    partials = holders = void 0;
  }
  var data = isBindKey ? void 0 : getData_default(func);
  var newData = [
    func,
    bitmask,
    thisArg,
    partials,
    holders,
    partialsRight,
    holdersRight,
    argPos,
    ary2,
    arity
  ];
  if (data) {
    mergeData_default(newData, data);
  }
  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] === void 0 ? isBindKey ? 0 : func.length : nativeMax3(newData[9] - length, 0);
  if (!arity && bitmask & (WRAP_CURRY_FLAG5 | WRAP_CURRY_RIGHT_FLAG3)) {
    bitmask &= ~(WRAP_CURRY_FLAG5 | WRAP_CURRY_RIGHT_FLAG3);
  }
  if (!bitmask || bitmask == WRAP_BIND_FLAG7) {
    var result2 = createBind_default(func, bitmask, thisArg);
  } else if (bitmask == WRAP_CURRY_FLAG5 || bitmask == WRAP_CURRY_RIGHT_FLAG3) {
    result2 = createCurry_default(func, bitmask, arity);
  } else if ((bitmask == WRAP_PARTIAL_FLAG3 || bitmask == (WRAP_BIND_FLAG7 | WRAP_PARTIAL_FLAG3)) && !holders.length) {
    result2 = createPartial_default(func, bitmask, thisArg, partials);
  } else {
    result2 = createHybrid_default.apply(void 0, newData);
  }
  var setter = data ? baseSetData_default : setData_default;
  return setWrapToString_default(setter(result2, newData), func, bitmask);
}
var createWrap_default = createWrap;

// node_modules/lodash-es/ary.js
var WRAP_ARY_FLAG4 = 128;
function ary(func, n, guard) {
  n = guard ? void 0 : n;
  n = func && n == null ? func.length : n;
  return createWrap_default(func, WRAP_ARY_FLAG4, void 0, void 0, void 0, void 0, n);
}
var ary_default = ary;

// node_modules/lodash-es/_baseAssignValue.js
function baseAssignValue(object, key, value) {
  if (key == "__proto__" && defineProperty_default) {
    defineProperty_default(object, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object[key] = value;
  }
}
var baseAssignValue_default = baseAssignValue;

// node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/lodash-es/_assignValue.js
var objectProto6 = Object.prototype;
var hasOwnProperty5 = objectProto6.hasOwnProperty;
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty5.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) {
    baseAssignValue_default(object, key, value);
  }
}
var assignValue_default = assignValue;

// node_modules/lodash-es/_copyObject.js
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1, length = props.length;
  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue_default(object, key, newValue);
    } else {
      assignValue_default(object, key, newValue);
    }
  }
  return object;
}
var copyObject_default = copyObject;

// node_modules/lodash-es/_overRest.js
var nativeMax4 = Math.max;
function overRest(func, start, transform2) {
  start = nativeMax4(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index = -1, length = nativeMax4(args.length - start, 0), array = Array(length);
    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform2(array);
    return apply_default(func, this, otherArgs);
  };
}
var overRest_default = overRest;

// node_modules/lodash-es/_baseRest.js
function baseRest(func, start) {
  return setToString_default(overRest_default(func, start, identity_default), func + "");
}
var baseRest_default = baseRest;

// node_modules/lodash-es/isLength.js
var MAX_SAFE_INTEGER2 = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
}
var isLength_default = isLength;

// node_modules/lodash-es/isArrayLike.js
function isArrayLike(value) {
  return value != null && isLength_default(value.length) && !isFunction_default(value);
}
var isArrayLike_default = isArrayLike;

// node_modules/lodash-es/_isIterateeCall.js
function isIterateeCall(value, index, object) {
  if (!isObject_default(object)) {
    return false;
  }
  var type = typeof index;
  if (type == "number" ? isArrayLike_default(object) && isIndex_default(index, object.length) : type == "string" && index in object) {
    return eq_default(object[index], value);
  }
  return false;
}
var isIterateeCall_default = isIterateeCall;

// node_modules/lodash-es/_createAssigner.js
function createAssigner(assigner) {
  return baseRest_default(function(object, sources) {
    var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}
var createAssigner_default = createAssigner;

// node_modules/lodash-es/_isPrototype.js
var objectProto7 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto7;
  return value === proto;
}
var isPrototype_default = isPrototype;

// node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee2) {
  var index = -1, result2 = Array(n);
  while (++index < n) {
    result2[index] = iteratee2(index);
  }
  return result2;
}
var baseTimes_default = baseTimes;

// node_modules/lodash-es/_baseIsArguments.js
var argsTag = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
}
var baseIsArguments_default = baseIsArguments;

// node_modules/lodash-es/isArguments.js
var objectProto8 = Object.prototype;
var hasOwnProperty6 = objectProto8.hasOwnProperty;
var propertyIsEnumerable = objectProto8.propertyIsEnumerable;
var isArguments = baseIsArguments_default(function() {
  return arguments;
}()) ? baseIsArguments_default : function(value) {
  return isObjectLike_default(value) && hasOwnProperty6.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
var isArguments_default = isArguments;

// node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return false;
}
var stubFalse_default = stubFalse;

// node_modules/lodash-es/isBuffer.js
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer2 = moduleExports ? root_default.Buffer : void 0;
var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse_default;
var isBuffer_default = isBuffer;

// node_modules/lodash-es/_baseIsTypedArray.js
var argsTag2 = "[object Arguments]";
var arrayTag = "[object Array]";
var boolTag = "[object Boolean]";
var dateTag = "[object Date]";
var errorTag = "[object Error]";
var funcTag2 = "[object Function]";
var mapTag = "[object Map]";
var numberTag = "[object Number]";
var objectTag = "[object Object]";
var regexpTag = "[object RegExp]";
var setTag = "[object Set]";
var stringTag = "[object String]";
var weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]";
var dataViewTag = "[object DataView]";
var float32Tag = "[object Float32Array]";
var float64Tag = "[object Float64Array]";
var int8Tag = "[object Int8Array]";
var int16Tag = "[object Int16Array]";
var int32Tag = "[object Int32Array]";
var uint8Tag = "[object Uint8Array]";
var uint8ClampedTag = "[object Uint8ClampedArray]";
var uint16Tag = "[object Uint16Array]";
var uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value) {
  return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
}
var baseIsTypedArray_default = baseIsTypedArray;

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/lodash-es/_nodeUtil.js
var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
var freeProcess = moduleExports2 && freeGlobal_default.process;
var nodeUtil = function() {
  try {
    var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeUtil_default = nodeUtil;

// node_modules/lodash-es/isTypedArray.js
var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
var isTypedArray_default = isTypedArray;

// node_modules/lodash-es/_arrayLikeKeys.js
var objectProto9 = Object.prototype;
var hasOwnProperty7 = objectProto9.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes_default(value.length, String) : [], length = result2.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty7.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex_default(key, length)))) {
      result2.push(key);
    }
  }
  return result2;
}
var arrayLikeKeys_default = arrayLikeKeys;

// node_modules/lodash-es/_overArg.js
function overArg(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var overArg_default = overArg;

// node_modules/lodash-es/_nativeKeys.js
var nativeKeys = overArg_default(Object.keys, Object);
var nativeKeys_default = nativeKeys;

// node_modules/lodash-es/_baseKeys.js
var objectProto10 = Object.prototype;
var hasOwnProperty8 = objectProto10.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype_default(object)) {
    return nativeKeys_default(object);
  }
  var result2 = [];
  for (var key in Object(object)) {
    if (hasOwnProperty8.call(object, key) && key != "constructor") {
      result2.push(key);
    }
  }
  return result2;
}
var baseKeys_default = baseKeys;

// node_modules/lodash-es/keys.js
function keys(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
}
var keys_default = keys;

// node_modules/lodash-es/assign.js
var objectProto11 = Object.prototype;
var hasOwnProperty9 = objectProto11.hasOwnProperty;
var assign = createAssigner_default(function(object, source) {
  if (isPrototype_default(source) || isArrayLike_default(source)) {
    copyObject_default(source, keys_default(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty9.call(source, key)) {
      assignValue_default(object, key, source[key]);
    }
  }
});
var assign_default = assign;

// node_modules/lodash-es/_nativeKeysIn.js
function nativeKeysIn(object) {
  var result2 = [];
  if (object != null) {
    for (var key in Object(object)) {
      result2.push(key);
    }
  }
  return result2;
}
var nativeKeysIn_default = nativeKeysIn;

// node_modules/lodash-es/_baseKeysIn.js
var objectProto12 = Object.prototype;
var hasOwnProperty10 = objectProto12.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject_default(object)) {
    return nativeKeysIn_default(object);
  }
  var isProto = isPrototype_default(object), result2 = [];
  for (var key in object) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty10.call(object, key)))) {
      result2.push(key);
    }
  }
  return result2;
}
var baseKeysIn_default = baseKeysIn;

// node_modules/lodash-es/keysIn.js
function keysIn(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
}
var keysIn_default = keysIn;

// node_modules/lodash-es/assignIn.js
var assignIn = createAssigner_default(function(object, source) {
  copyObject_default(source, keysIn_default(source), object);
});
var assignIn_default = assignIn;

// node_modules/lodash-es/assignInWith.js
var assignInWith = createAssigner_default(function(object, source, srcIndex, customizer) {
  copyObject_default(source, keysIn_default(source), object, customizer);
});
var assignInWith_default = assignInWith;

// node_modules/lodash-es/assignWith.js
var assignWith = createAssigner_default(function(object, source, srcIndex, customizer) {
  copyObject_default(source, keys_default(source), object, customizer);
});
var assignWith_default = assignWith;

// node_modules/lodash-es/_isKey.js
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
var reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_default(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var isKey_default = isKey;

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result2 = this.has(key) && delete this.__data__[key];
  this.size -= result2 ? 1 : 0;
  return result2;
}
var hashDelete_default = hashDelete;

// node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto13 = Object.prototype;
var hasOwnProperty11 = objectProto13.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result2 = data[key];
    return result2 === HASH_UNDEFINED ? void 0 : result2;
  }
  return hasOwnProperty11.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/lodash-es/_hashHas.js
var objectProto14 = Object.prototype;
var hasOwnProperty12 = objectProto14.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty12.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
  return this;
}
var hashSet_default = hashSet;

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_default(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var listCacheSet_default = listCacheSet;

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/lodash-es/_getMapData.js
function getMapData(map2, key) {
  var data = map2.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result2 = getMapData_default(this, key)["delete"](key);
  this.size -= result2 ? 1 : 0;
  return result2;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size2 = data.size;
  data.set(key, value);
  this.size += data.size == size2 ? 0 : 1;
  return this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/lodash-es/memoize.js
var FUNC_ERROR_TEXT3 = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT3);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache3 = memoized.cache;
    if (cache3.has(key)) {
      return cache3.get(key);
    }
    var result2 = func.apply(this, args);
    memoized.cache = cache3.set(key, result2) || cache3;
    return result2;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
memoize.Cache = MapCache_default;
var memoize_default = memoize;

// node_modules/lodash-es/_memoizeCapped.js
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result2 = memoize_default(func, function(key) {
    if (cache3.size === MAX_MEMOIZE_SIZE) {
      cache3.clear();
    }
    return key;
  });
  var cache3 = result2.cache;
  return result2;
}
var memoizeCapped_default = memoizeCapped;

// node_modules/lodash-es/_stringToPath.js
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string) {
  var result2 = [];
  if (string.charCodeAt(0) === 46) {
    result2.push("");
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
  });
  return result2;
});
var stringToPath_default = stringToPath;

// node_modules/lodash-es/toString.js
function toString(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString;

// node_modules/lodash-es/_castPath.js
function castPath(value, object) {
  if (isArray_default(value)) {
    return value;
  }
  return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
}
var castPath_default = castPath;

// node_modules/lodash-es/_toKey.js
var INFINITY3 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_default(value)) {
    return value;
  }
  var result2 = value + "";
  return result2 == "0" && 1 / value == -INFINITY3 ? "-0" : result2;
}
var toKey_default = toKey;

// node_modules/lodash-es/_baseGet.js
function baseGet(object, path) {
  path = castPath_default(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey_default(path[index++])];
  }
  return index && index == length ? object : void 0;
}
var baseGet_default = baseGet;

// node_modules/lodash-es/get.js
function get(object, path, defaultValue) {
  var result2 = object == null ? void 0 : baseGet_default(object, path);
  return result2 === void 0 ? defaultValue : result2;
}
var get_default = get;

// node_modules/lodash-es/_baseAt.js
function baseAt(object, paths) {
  var index = -1, length = paths.length, result2 = Array(length), skip = object == null;
  while (++index < length) {
    result2[index] = skip ? void 0 : get_default(object, paths[index]);
  }
  return result2;
}
var baseAt_default = baseAt;

// node_modules/lodash-es/_arrayPush.js
function arrayPush(array, values2) {
  var index = -1, length = values2.length, offset = array.length;
  while (++index < length) {
    array[offset + index] = values2[index];
  }
  return array;
}
var arrayPush_default = arrayPush;

// node_modules/lodash-es/_isFlattenable.js
var spreadableSymbol = Symbol_default ? Symbol_default.isConcatSpreadable : void 0;
function isFlattenable(value) {
  return isArray_default(value) || isArguments_default(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
var isFlattenable_default = isFlattenable;

// node_modules/lodash-es/_baseFlatten.js
function baseFlatten(array, depth, predicate, isStrict, result2) {
  var index = -1, length = array.length;
  predicate || (predicate = isFlattenable_default);
  result2 || (result2 = []);
  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        baseFlatten(value, depth - 1, predicate, isStrict, result2);
      } else {
        arrayPush_default(result2, value);
      }
    } else if (!isStrict) {
      result2[result2.length] = value;
    }
  }
  return result2;
}
var baseFlatten_default = baseFlatten;

// node_modules/lodash-es/flatten.js
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten_default(array, 1) : [];
}
var flatten_default = flatten;

// node_modules/lodash-es/_flatRest.js
function flatRest(func) {
  return setToString_default(overRest_default(func, void 0, flatten_default), func + "");
}
var flatRest_default = flatRest;

// node_modules/lodash-es/at.js
var at = flatRest_default(baseAt_default);
var at_default = at;

// node_modules/lodash-es/_getPrototype.js
var getPrototype = overArg_default(Object.getPrototypeOf, Object);
var getPrototype_default = getPrototype;

// node_modules/lodash-es/isPlainObject.js
var objectTag2 = "[object Object]";
var funcProto3 = Function.prototype;
var objectProto15 = Object.prototype;
var funcToString3 = funcProto3.toString;
var hasOwnProperty13 = objectProto15.hasOwnProperty;
var objectCtorString = funcToString3.call(Object);
function isPlainObject(value) {
  if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag2) {
    return false;
  }
  var proto = getPrototype_default(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty13.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
}
var isPlainObject_default = isPlainObject;

// node_modules/lodash-es/isError.js
var domExcTag = "[object DOMException]";
var errorTag2 = "[object Error]";
function isError(value) {
  if (!isObjectLike_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == errorTag2 || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject_default(value);
}
var isError_default = isError;

// node_modules/lodash-es/attempt.js
var attempt = baseRest_default(function(func, args) {
  try {
    return apply_default(func, void 0, args);
  } catch (e) {
    return isError_default(e) ? e : new Error(e);
  }
});
var attempt_default = attempt;

// node_modules/lodash-es/before.js
var FUNC_ERROR_TEXT4 = "Expected a function";
function before(n, func) {
  var result2;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT4);
  }
  n = toInteger_default(n);
  return function() {
    if (--n > 0) {
      result2 = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = void 0;
    }
    return result2;
  };
}
var before_default = before;

// node_modules/lodash-es/bind.js
var WRAP_BIND_FLAG8 = 1;
var WRAP_PARTIAL_FLAG4 = 32;
var bind = baseRest_default(function(func, thisArg, partials) {
  var bitmask = WRAP_BIND_FLAG8;
  if (partials.length) {
    var holders = replaceHolders_default(partials, getHolder_default(bind));
    bitmask |= WRAP_PARTIAL_FLAG4;
  }
  return createWrap_default(func, bitmask, thisArg, partials, holders);
});
bind.placeholder = {};
var bind_default = bind;

// node_modules/lodash-es/bindAll.js
var bindAll = flatRest_default(function(object, methodNames) {
  arrayEach_default(methodNames, function(key) {
    key = toKey_default(key);
    baseAssignValue_default(object, key, bind_default(object[key], object));
  });
  return object;
});
var bindAll_default = bindAll;

// node_modules/lodash-es/bindKey.js
var WRAP_BIND_FLAG9 = 1;
var WRAP_BIND_KEY_FLAG6 = 2;
var WRAP_PARTIAL_FLAG5 = 32;
var bindKey = baseRest_default(function(object, key, partials) {
  var bitmask = WRAP_BIND_FLAG9 | WRAP_BIND_KEY_FLAG6;
  if (partials.length) {
    var holders = replaceHolders_default(partials, getHolder_default(bindKey));
    bitmask |= WRAP_PARTIAL_FLAG5;
  }
  return createWrap_default(key, bitmask, object, partials, holders);
});
bindKey.placeholder = {};
var bindKey_default = bindKey;

// node_modules/lodash-es/_baseSlice.js
function baseSlice(array, start, end) {
  var index = -1, length = array.length;
  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result2 = Array(length);
  while (++index < length) {
    result2[index] = array[index + start];
  }
  return result2;
}
var baseSlice_default = baseSlice;

// node_modules/lodash-es/_castSlice.js
function castSlice(array, start, end) {
  var length = array.length;
  end = end === void 0 ? length : end;
  return !start && end >= length ? array : baseSlice_default(array, start, end);
}
var castSlice_default = castSlice;

// node_modules/lodash-es/_hasUnicode.js
var rsAstralRange = "\\ud800-\\udfff";
var rsComboMarksRange = "\\u0300-\\u036f";
var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
var rsComboSymbolsRange = "\\u20d0-\\u20ff";
var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
var rsVarRange = "\\ufe0e\\ufe0f";
var rsZWJ = "\\u200d";
var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
var hasUnicode_default = hasUnicode;

// node_modules/lodash-es/_asciiToArray.js
function asciiToArray(string) {
  return string.split("");
}
var asciiToArray_default = asciiToArray;

// node_modules/lodash-es/_unicodeToArray.js
var rsAstralRange2 = "\\ud800-\\udfff";
var rsComboMarksRange2 = "\\u0300-\\u036f";
var reComboHalfMarksRange2 = "\\ufe20-\\ufe2f";
var rsComboSymbolsRange2 = "\\u20d0-\\u20ff";
var rsComboRange2 = rsComboMarksRange2 + reComboHalfMarksRange2 + rsComboSymbolsRange2;
var rsVarRange2 = "\\ufe0e\\ufe0f";
var rsAstral = "[" + rsAstralRange2 + "]";
var rsCombo = "[" + rsComboRange2 + "]";
var rsFitz = "\\ud83c[\\udffb-\\udfff]";
var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
var rsNonAstral = "[^" + rsAstralRange2 + "]";
var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
var rsZWJ2 = "\\u200d";
var reOptMod = rsModifier + "?";
var rsOptVar = "[" + rsVarRange2 + "]?";
var rsOptJoin = "(?:" + rsZWJ2 + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
var rsSeq = rsOptVar + reOptMod + rsOptJoin;
var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
var unicodeToArray_default = unicodeToArray;

// node_modules/lodash-es/_stringToArray.js
function stringToArray(string) {
  return hasUnicode_default(string) ? unicodeToArray_default(string) : asciiToArray_default(string);
}
var stringToArray_default = stringToArray;

// node_modules/lodash-es/_createCaseFirst.js
function createCaseFirst(methodName) {
  return function(string) {
    string = toString_default(string);
    var strSymbols = hasUnicode_default(string) ? stringToArray_default(string) : void 0;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice_default(strSymbols, 1).join("") : string.slice(1);
    return chr[methodName]() + trailing;
  };
}
var createCaseFirst_default = createCaseFirst;

// node_modules/lodash-es/upperFirst.js
var upperFirst = createCaseFirst_default("toUpperCase");
var upperFirst_default = upperFirst;

// node_modules/lodash-es/capitalize.js
function capitalize(string) {
  return upperFirst_default(toString_default(string).toLowerCase());
}
var capitalize_default = capitalize;

// node_modules/lodash-es/_arrayReduce.js
function arrayReduce(array, iteratee2, accumulator, initAccum) {
  var index = -1, length = array == null ? 0 : array.length;
  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee2(accumulator, array[index], index, array);
  }
  return accumulator;
}
var arrayReduce_default = arrayReduce;

// node_modules/lodash-es/_basePropertyOf.js
function basePropertyOf(object) {
  return function(key) {
    return object == null ? void 0 : object[key];
  };
}
var basePropertyOf_default = basePropertyOf;

// node_modules/lodash-es/_deburrLetter.js
var deburredLetters = {
  // Latin-1 Supplement block.
  "À": "A",
  "Á": "A",
  "Â": "A",
  "Ã": "A",
  "Ä": "A",
  "Å": "A",
  "à": "a",
  "á": "a",
  "â": "a",
  "ã": "a",
  "ä": "a",
  "å": "a",
  "Ç": "C",
  "ç": "c",
  "Ð": "D",
  "ð": "d",
  "È": "E",
  "É": "E",
  "Ê": "E",
  "Ë": "E",
  "è": "e",
  "é": "e",
  "ê": "e",
  "ë": "e",
  "Ì": "I",
  "Í": "I",
  "Î": "I",
  "Ï": "I",
  "ì": "i",
  "í": "i",
  "î": "i",
  "ï": "i",
  "Ñ": "N",
  "ñ": "n",
  "Ò": "O",
  "Ó": "O",
  "Ô": "O",
  "Õ": "O",
  "Ö": "O",
  "Ø": "O",
  "ò": "o",
  "ó": "o",
  "ô": "o",
  "õ": "o",
  "ö": "o",
  "ø": "o",
  "Ù": "U",
  "Ú": "U",
  "Û": "U",
  "Ü": "U",
  "ù": "u",
  "ú": "u",
  "û": "u",
  "ü": "u",
  "Ý": "Y",
  "ý": "y",
  "ÿ": "y",
  "Æ": "Ae",
  "æ": "ae",
  "Þ": "Th",
  "þ": "th",
  "ß": "ss",
  // Latin Extended-A block.
  "Ā": "A",
  "Ă": "A",
  "Ą": "A",
  "ā": "a",
  "ă": "a",
  "ą": "a",
  "Ć": "C",
  "Ĉ": "C",
  "Ċ": "C",
  "Č": "C",
  "ć": "c",
  "ĉ": "c",
  "ċ": "c",
  "č": "c",
  "Ď": "D",
  "Đ": "D",
  "ď": "d",
  "đ": "d",
  "Ē": "E",
  "Ĕ": "E",
  "Ė": "E",
  "Ę": "E",
  "Ě": "E",
  "ē": "e",
  "ĕ": "e",
  "ė": "e",
  "ę": "e",
  "ě": "e",
  "Ĝ": "G",
  "Ğ": "G",
  "Ġ": "G",
  "Ģ": "G",
  "ĝ": "g",
  "ğ": "g",
  "ġ": "g",
  "ģ": "g",
  "Ĥ": "H",
  "Ħ": "H",
  "ĥ": "h",
  "ħ": "h",
  "Ĩ": "I",
  "Ī": "I",
  "Ĭ": "I",
  "Į": "I",
  "İ": "I",
  "ĩ": "i",
  "ī": "i",
  "ĭ": "i",
  "į": "i",
  "ı": "i",
  "Ĵ": "J",
  "ĵ": "j",
  "Ķ": "K",
  "ķ": "k",
  "ĸ": "k",
  "Ĺ": "L",
  "Ļ": "L",
  "Ľ": "L",
  "Ŀ": "L",
  "Ł": "L",
  "ĺ": "l",
  "ļ": "l",
  "ľ": "l",
  "ŀ": "l",
  "ł": "l",
  "Ń": "N",
  "Ņ": "N",
  "Ň": "N",
  "Ŋ": "N",
  "ń": "n",
  "ņ": "n",
  "ň": "n",
  "ŋ": "n",
  "Ō": "O",
  "Ŏ": "O",
  "Ő": "O",
  "ō": "o",
  "ŏ": "o",
  "ő": "o",
  "Ŕ": "R",
  "Ŗ": "R",
  "Ř": "R",
  "ŕ": "r",
  "ŗ": "r",
  "ř": "r",
  "Ś": "S",
  "Ŝ": "S",
  "Ş": "S",
  "Š": "S",
  "ś": "s",
  "ŝ": "s",
  "ş": "s",
  "š": "s",
  "Ţ": "T",
  "Ť": "T",
  "Ŧ": "T",
  "ţ": "t",
  "ť": "t",
  "ŧ": "t",
  "Ũ": "U",
  "Ū": "U",
  "Ŭ": "U",
  "Ů": "U",
  "Ű": "U",
  "Ų": "U",
  "ũ": "u",
  "ū": "u",
  "ŭ": "u",
  "ů": "u",
  "ű": "u",
  "ų": "u",
  "Ŵ": "W",
  "ŵ": "w",
  "Ŷ": "Y",
  "ŷ": "y",
  "Ÿ": "Y",
  "Ź": "Z",
  "Ż": "Z",
  "Ž": "Z",
  "ź": "z",
  "ż": "z",
  "ž": "z",
  "Ĳ": "IJ",
  "ĳ": "ij",
  "Œ": "Oe",
  "œ": "oe",
  "ŉ": "'n",
  "ſ": "s"
};
var deburrLetter = basePropertyOf_default(deburredLetters);
var deburrLetter_default = deburrLetter;

// node_modules/lodash-es/deburr.js
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var rsComboMarksRange3 = "\\u0300-\\u036f";
var reComboHalfMarksRange3 = "\\ufe20-\\ufe2f";
var rsComboSymbolsRange3 = "\\u20d0-\\u20ff";
var rsComboRange3 = rsComboMarksRange3 + reComboHalfMarksRange3 + rsComboSymbolsRange3;
var rsCombo2 = "[" + rsComboRange3 + "]";
var reComboMark = RegExp(rsCombo2, "g");
function deburr(string) {
  string = toString_default(string);
  return string && string.replace(reLatin, deburrLetter_default).replace(reComboMark, "");
}
var deburr_default = deburr;

// node_modules/lodash-es/_asciiWords.js
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}
var asciiWords_default = asciiWords;

// node_modules/lodash-es/_hasUnicodeWord.js
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}
var hasUnicodeWord_default = hasUnicodeWord;

// node_modules/lodash-es/_unicodeWords.js
var rsAstralRange3 = "\\ud800-\\udfff";
var rsComboMarksRange4 = "\\u0300-\\u036f";
var reComboHalfMarksRange4 = "\\ufe20-\\ufe2f";
var rsComboSymbolsRange4 = "\\u20d0-\\u20ff";
var rsComboRange4 = rsComboMarksRange4 + reComboHalfMarksRange4 + rsComboSymbolsRange4;
var rsDingbatRange = "\\u2700-\\u27bf";
var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
var rsPunctuationRange = "\\u2000-\\u206f";
var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
var rsVarRange3 = "\\ufe0e\\ufe0f";
var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
var rsApos = "['’]";
var rsBreak = "[" + rsBreakRange + "]";
var rsCombo3 = "[" + rsComboRange4 + "]";
var rsDigits = "\\d+";
var rsDingbat = "[" + rsDingbatRange + "]";
var rsLower = "[" + rsLowerRange + "]";
var rsMisc = "[^" + rsAstralRange3 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
var rsFitz2 = "\\ud83c[\\udffb-\\udfff]";
var rsModifier2 = "(?:" + rsCombo3 + "|" + rsFitz2 + ")";
var rsNonAstral2 = "[^" + rsAstralRange3 + "]";
var rsRegional2 = "(?:\\ud83c[\\udde6-\\uddff]){2}";
var rsSurrPair2 = "[\\ud800-\\udbff][\\udc00-\\udfff]";
var rsUpper = "[" + rsUpperRange + "]";
var rsZWJ3 = "\\u200d";
var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
var reOptMod2 = rsModifier2 + "?";
var rsOptVar2 = "[" + rsVarRange3 + "]?";
var rsOptJoin2 = "(?:" + rsZWJ3 + "(?:" + [rsNonAstral2, rsRegional2, rsSurrPair2].join("|") + ")" + rsOptVar2 + reOptMod2 + ")*";
var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
var rsSeq2 = rsOptVar2 + reOptMod2 + rsOptJoin2;
var rsEmoji = "(?:" + [rsDingbat, rsRegional2, rsSurrPair2].join("|") + ")" + rsSeq2;
var reUnicodeWord = RegExp([
  rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
  rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
  rsUpper + "+" + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join("|"), "g");
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}
var unicodeWords_default = unicodeWords;

// node_modules/lodash-es/words.js
function words(string, pattern, guard) {
  string = toString_default(string);
  pattern = guard ? void 0 : pattern;
  if (pattern === void 0) {
    return hasUnicodeWord_default(string) ? unicodeWords_default(string) : asciiWords_default(string);
  }
  return string.match(pattern) || [];
}
var words_default = words;

// node_modules/lodash-es/_createCompounder.js
var rsApos2 = "['’]";
var reApos = RegExp(rsApos2, "g");
function createCompounder(callback) {
  return function(string) {
    return arrayReduce_default(words_default(deburr_default(string).replace(reApos, "")), callback, "");
  };
}
var createCompounder_default = createCompounder;

// node_modules/lodash-es/camelCase.js
var camelCase = createCompounder_default(function(result2, word, index) {
  word = word.toLowerCase();
  return result2 + (index ? capitalize_default(word) : word);
});
var camelCase_default = camelCase;

// node_modules/lodash-es/castArray.js
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray_default(value) ? value : [value];
}
var castArray_default = castArray;

// node_modules/lodash-es/_createRound.js
var nativeIsFinite = root_default.isFinite;
var nativeMin3 = Math.min;
function createRound(methodName) {
  var func = Math[methodName];
  return function(number, precision) {
    number = toNumber_default(number);
    precision = precision == null ? 0 : nativeMin3(toInteger_default(precision), 292);
    if (precision && nativeIsFinite(number)) {
      var pair = (toString_default(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
      pair = (toString_default(value) + "e").split("e");
      return +(pair[0] + "e" + (+pair[1] - precision));
    }
    return func(number);
  };
}
var createRound_default = createRound;

// node_modules/lodash-es/ceil.js
var ceil = createRound_default("ceil");
var ceil_default = ceil;

// node_modules/lodash-es/chain.js
function chain(value) {
  var result2 = wrapperLodash_default(value);
  result2.__chain__ = true;
  return result2;
}
var chain_default = chain;

// node_modules/lodash-es/chunk.js
var nativeCeil = Math.ceil;
var nativeMax5 = Math.max;
function chunk(array, size2, guard) {
  if (guard ? isIterateeCall_default(array, size2, guard) : size2 === void 0) {
    size2 = 1;
  } else {
    size2 = nativeMax5(toInteger_default(size2), 0);
  }
  var length = array == null ? 0 : array.length;
  if (!length || size2 < 1) {
    return [];
  }
  var index = 0, resIndex = 0, result2 = Array(nativeCeil(length / size2));
  while (index < length) {
    result2[resIndex++] = baseSlice_default(array, index, index += size2);
  }
  return result2;
}
var chunk_default = chunk;

// node_modules/lodash-es/_baseClamp.js
function baseClamp(number, lower, upper) {
  if (number === number) {
    if (upper !== void 0) {
      number = number <= upper ? number : upper;
    }
    if (lower !== void 0) {
      number = number >= lower ? number : lower;
    }
  }
  return number;
}
var baseClamp_default = baseClamp;

// node_modules/lodash-es/clamp.js
function clamp(number, lower, upper) {
  if (upper === void 0) {
    upper = lower;
    lower = void 0;
  }
  if (upper !== void 0) {
    upper = toNumber_default(upper);
    upper = upper === upper ? upper : 0;
  }
  if (lower !== void 0) {
    lower = toNumber_default(lower);
    lower = lower === lower ? lower : 0;
  }
  return baseClamp_default(toNumber_default(number), lower, upper);
}
var clamp_default = clamp;

// node_modules/lodash-es/_stackClear.js
function stackClear() {
  this.__data__ = new ListCache_default();
  this.size = 0;
}
var stackClear_default = stackClear;

// node_modules/lodash-es/_stackDelete.js
function stackDelete(key) {
  var data = this.__data__, result2 = data["delete"](key);
  this.size = data.size;
  return result2;
}
var stackDelete_default = stackDelete;

// node_modules/lodash-es/_stackGet.js
function stackGet(key) {
  return this.__data__.get(key);
}
var stackGet_default = stackGet;

// node_modules/lodash-es/_stackHas.js
function stackHas(key) {
  return this.__data__.has(key);
}
var stackHas_default = stackHas;

// node_modules/lodash-es/_stackSet.js
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache_default) {
    var pairs = data.__data__;
    if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache_default(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
var stackSet_default = stackSet;

// node_modules/lodash-es/_Stack.js
function Stack(entries) {
  var data = this.__data__ = new ListCache_default(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear_default;
Stack.prototype["delete"] = stackDelete_default;
Stack.prototype.get = stackGet_default;
Stack.prototype.has = stackHas_default;
Stack.prototype.set = stackSet_default;
var Stack_default = Stack;

// node_modules/lodash-es/_baseAssign.js
function baseAssign(object, source) {
  return object && copyObject_default(source, keys_default(source), object);
}
var baseAssign_default = baseAssign;

// node_modules/lodash-es/_baseAssignIn.js
function baseAssignIn(object, source) {
  return object && copyObject_default(source, keysIn_default(source), object);
}
var baseAssignIn_default = baseAssignIn;

// node_modules/lodash-es/_cloneBuffer.js
var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
var Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result2);
  return result2;
}
var cloneBuffer_default = cloneBuffer;

// node_modules/lodash-es/_arrayFilter.js
function arrayFilter(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result2[resIndex++] = value;
    }
  }
  return result2;
}
var arrayFilter_default = arrayFilter;

// node_modules/lodash-es/stubArray.js
function stubArray() {
  return [];
}
var stubArray_default = stubArray;

// node_modules/lodash-es/_getSymbols.js
var objectProto16 = Object.prototype;
var propertyIsEnumerable2 = objectProto16.propertyIsEnumerable;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable2.call(object, symbol);
  });
};
var getSymbols_default = getSymbols;

// node_modules/lodash-es/_copySymbols.js
function copySymbols(source, object) {
  return copyObject_default(source, getSymbols_default(source), object);
}
var copySymbols_default = copySymbols;

// node_modules/lodash-es/_getSymbolsIn.js
var nativeGetSymbols2 = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object) {
  var result2 = [];
  while (object) {
    arrayPush_default(result2, getSymbols_default(object));
    object = getPrototype_default(object);
  }
  return result2;
};
var getSymbolsIn_default = getSymbolsIn;

// node_modules/lodash-es/_copySymbolsIn.js
function copySymbolsIn(source, object) {
  return copyObject_default(source, getSymbolsIn_default(source), object);
}
var copySymbolsIn_default = copySymbolsIn;

// node_modules/lodash-es/_baseGetAllKeys.js
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result2 = keysFunc(object);
  return isArray_default(object) ? result2 : arrayPush_default(result2, symbolsFunc(object));
}
var baseGetAllKeys_default = baseGetAllKeys;

// node_modules/lodash-es/_getAllKeys.js
function getAllKeys(object) {
  return baseGetAllKeys_default(object, keys_default, getSymbols_default);
}
var getAllKeys_default = getAllKeys;

// node_modules/lodash-es/_getAllKeysIn.js
function getAllKeysIn(object) {
  return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
}
var getAllKeysIn_default = getAllKeysIn;

// node_modules/lodash-es/_DataView.js
var DataView = getNative_default(root_default, "DataView");
var DataView_default = DataView;

// node_modules/lodash-es/_Promise.js
var Promise2 = getNative_default(root_default, "Promise");
var Promise_default = Promise2;

// node_modules/lodash-es/_Set.js
var Set2 = getNative_default(root_default, "Set");
var Set_default = Set2;

// node_modules/lodash-es/_getTag.js
var mapTag2 = "[object Map]";
var objectTag3 = "[object Object]";
var promiseTag = "[object Promise]";
var setTag2 = "[object Set]";
var weakMapTag2 = "[object WeakMap]";
var dataViewTag2 = "[object DataView]";
var dataViewCtorString = toSource_default(DataView_default);
var mapCtorString = toSource_default(Map_default);
var promiseCtorString = toSource_default(Promise_default);
var setCtorString = toSource_default(Set_default);
var weakMapCtorString = toSource_default(WeakMap_default);
var getTag = baseGetTag_default;
if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
  getTag = function(value) {
    var result2 = baseGetTag_default(value), Ctor = result2 == objectTag3 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag2;
        case mapCtorString:
          return mapTag2;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag2;
        case weakMapCtorString:
          return weakMapTag2;
      }
    }
    return result2;
  };
}
var getTag_default = getTag;

// node_modules/lodash-es/_initCloneArray.js
var objectProto17 = Object.prototype;
var hasOwnProperty14 = objectProto17.hasOwnProperty;
function initCloneArray(array) {
  var length = array.length, result2 = new array.constructor(length);
  if (length && typeof array[0] == "string" && hasOwnProperty14.call(array, "index")) {
    result2.index = array.index;
    result2.input = array.input;
  }
  return result2;
}
var initCloneArray_default = initCloneArray;

// node_modules/lodash-es/_Uint8Array.js
var Uint8Array = root_default.Uint8Array;
var Uint8Array_default = Uint8Array;

// node_modules/lodash-es/_cloneArrayBuffer.js
function cloneArrayBuffer(arrayBuffer) {
  var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array_default(result2).set(new Uint8Array_default(arrayBuffer));
  return result2;
}
var cloneArrayBuffer_default = cloneArrayBuffer;

// node_modules/lodash-es/_cloneDataView.js
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var cloneDataView_default = cloneDataView;

// node_modules/lodash-es/_cloneRegExp.js
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result2.lastIndex = regexp.lastIndex;
  return result2;
}
var cloneRegExp_default = cloneRegExp;

// node_modules/lodash-es/_cloneSymbol.js
var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
var symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
var cloneSymbol_default = cloneSymbol;

// node_modules/lodash-es/_cloneTypedArray.js
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var cloneTypedArray_default = cloneTypedArray;

// node_modules/lodash-es/_initCloneByTag.js
var boolTag2 = "[object Boolean]";
var dateTag2 = "[object Date]";
var mapTag3 = "[object Map]";
var numberTag2 = "[object Number]";
var regexpTag2 = "[object RegExp]";
var setTag3 = "[object Set]";
var stringTag2 = "[object String]";
var symbolTag2 = "[object Symbol]";
var arrayBufferTag2 = "[object ArrayBuffer]";
var dataViewTag3 = "[object DataView]";
var float32Tag2 = "[object Float32Array]";
var float64Tag2 = "[object Float64Array]";
var int8Tag2 = "[object Int8Array]";
var int16Tag2 = "[object Int16Array]";
var int32Tag2 = "[object Int32Array]";
var uint8Tag2 = "[object Uint8Array]";
var uint8ClampedTag2 = "[object Uint8ClampedArray]";
var uint16Tag2 = "[object Uint16Array]";
var uint32Tag2 = "[object Uint32Array]";
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag2:
      return cloneArrayBuffer_default(object);
    case boolTag2:
    case dateTag2:
      return new Ctor(+object);
    case dataViewTag3:
      return cloneDataView_default(object, isDeep);
    case float32Tag2:
    case float64Tag2:
    case int8Tag2:
    case int16Tag2:
    case int32Tag2:
    case uint8Tag2:
    case uint8ClampedTag2:
    case uint16Tag2:
    case uint32Tag2:
      return cloneTypedArray_default(object, isDeep);
    case mapTag3:
      return new Ctor();
    case numberTag2:
    case stringTag2:
      return new Ctor(object);
    case regexpTag2:
      return cloneRegExp_default(object);
    case setTag3:
      return new Ctor();
    case symbolTag2:
      return cloneSymbol_default(object);
  }
}
var initCloneByTag_default = initCloneByTag;

// node_modules/lodash-es/_initCloneObject.js
function initCloneObject(object) {
  return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
}
var initCloneObject_default = initCloneObject;

// node_modules/lodash-es/_baseIsMap.js
var mapTag4 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike_default(value) && getTag_default(value) == mapTag4;
}
var baseIsMap_default = baseIsMap;

// node_modules/lodash-es/isMap.js
var nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
var isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
var isMap_default = isMap;

// node_modules/lodash-es/_baseIsSet.js
var setTag4 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike_default(value) && getTag_default(value) == setTag4;
}
var baseIsSet_default = baseIsSet;

// node_modules/lodash-es/isSet.js
var nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
var isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
var isSet_default = isSet;

// node_modules/lodash-es/_baseClone.js
var CLONE_DEEP_FLAG = 1;
var CLONE_FLAT_FLAG = 2;
var CLONE_SYMBOLS_FLAG = 4;
var argsTag3 = "[object Arguments]";
var arrayTag2 = "[object Array]";
var boolTag3 = "[object Boolean]";
var dateTag3 = "[object Date]";
var errorTag3 = "[object Error]";
var funcTag3 = "[object Function]";
var genTag2 = "[object GeneratorFunction]";
var mapTag5 = "[object Map]";
var numberTag3 = "[object Number]";
var objectTag4 = "[object Object]";
var regexpTag3 = "[object RegExp]";
var setTag5 = "[object Set]";
var stringTag3 = "[object String]";
var symbolTag3 = "[object Symbol]";
var weakMapTag3 = "[object WeakMap]";
var arrayBufferTag3 = "[object ArrayBuffer]";
var dataViewTag4 = "[object DataView]";
var float32Tag3 = "[object Float32Array]";
var float64Tag3 = "[object Float64Array]";
var int8Tag3 = "[object Int8Array]";
var int16Tag3 = "[object Int16Array]";
var int32Tag3 = "[object Int32Array]";
var uint8Tag3 = "[object Uint8Array]";
var uint8ClampedTag3 = "[object Uint8ClampedArray]";
var uint16Tag3 = "[object Uint16Array]";
var uint32Tag3 = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag4] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag3] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
cloneableTags[errorTag3] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer) {
    result2 = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result2 !== void 0) {
    return result2;
  }
  if (!isObject_default(value)) {
    return value;
  }
  var isArr = isArray_default(value);
  if (isArr) {
    result2 = initCloneArray_default(value);
    if (!isDeep) {
      return copyArray_default(value, result2);
    }
  } else {
    var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
    if (isBuffer_default(value)) {
      return cloneBuffer_default(value, isDeep);
    }
    if (tag == objectTag4 || tag == argsTag3 || isFunc && !object) {
      result2 = isFlat || isFunc ? {} : initCloneObject_default(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result2, value)) : copySymbols_default(value, baseAssign_default(result2, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result2 = initCloneByTag_default(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack_default());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result2);
  if (isSet_default(value)) {
    value.forEach(function(subValue) {
      result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap_default(value)) {
    value.forEach(function(subValue, key2) {
      result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
  var props = isArr ? void 0 : keysFunc(value);
  arrayEach_default(props || value, function(subValue, key2) {
    if (props) {
      key2 = subValue;
      subValue = value[key2];
    }
    assignValue_default(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  });
  return result2;
}
var baseClone_default = baseClone;

// node_modules/lodash-es/clone.js
var CLONE_SYMBOLS_FLAG2 = 4;
function clone(value) {
  return baseClone_default(value, CLONE_SYMBOLS_FLAG2);
}
var clone_default = clone;

// node_modules/lodash-es/cloneDeep.js
var CLONE_DEEP_FLAG2 = 1;
var CLONE_SYMBOLS_FLAG3 = 4;
function cloneDeep(value) {
  return baseClone_default(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG3);
}
var cloneDeep_default = cloneDeep;

// node_modules/lodash-es/cloneDeepWith.js
var CLONE_DEEP_FLAG3 = 1;
var CLONE_SYMBOLS_FLAG4 = 4;
function cloneDeepWith(value, customizer) {
  customizer = typeof customizer == "function" ? customizer : void 0;
  return baseClone_default(value, CLONE_DEEP_FLAG3 | CLONE_SYMBOLS_FLAG4, customizer);
}
var cloneDeepWith_default = cloneDeepWith;

// node_modules/lodash-es/cloneWith.js
var CLONE_SYMBOLS_FLAG5 = 4;
function cloneWith(value, customizer) {
  customizer = typeof customizer == "function" ? customizer : void 0;
  return baseClone_default(value, CLONE_SYMBOLS_FLAG5, customizer);
}
var cloneWith_default = cloneWith;

// node_modules/lodash-es/commit.js
function wrapperCommit() {
  return new LodashWrapper_default(this.value(), this.__chain__);
}
var commit_default = wrapperCommit;

// node_modules/lodash-es/compact.js
function compact(array) {
  var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
  while (++index < length) {
    var value = array[index];
    if (value) {
      result2[resIndex++] = value;
    }
  }
  return result2;
}
var compact_default = compact;

// node_modules/lodash-es/concat.js
function concat() {
  var length = arguments.length;
  if (!length) {
    return [];
  }
  var args = Array(length - 1), array = arguments[0], index = length;
  while (index--) {
    args[index - 1] = arguments[index];
  }
  return arrayPush_default(isArray_default(array) ? copyArray_default(array) : [array], baseFlatten_default(args, 1));
}
var concat_default = concat;

// node_modules/lodash-es/_setCacheAdd.js
var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED3);
  return this;
}
var setCacheAdd_default = setCacheAdd;

// node_modules/lodash-es/_setCacheHas.js
function setCacheHas(value) {
  return this.__data__.has(value);
}
var setCacheHas_default = setCacheHas;

// node_modules/lodash-es/_SetCache.js
function SetCache(values2) {
  var index = -1, length = values2 == null ? 0 : values2.length;
  this.__data__ = new MapCache_default();
  while (++index < length) {
    this.add(values2[index]);
  }
}
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
SetCache.prototype.has = setCacheHas_default;
var SetCache_default = SetCache;

// node_modules/lodash-es/_arraySome.js
function arraySome(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}
var arraySome_default = arraySome;

// node_modules/lodash-es/_cacheHas.js
function cacheHas(cache3, key) {
  return cache3.has(key);
}
var cacheHas_default = cacheHas;

// node_modules/lodash-es/_equalArrays.js
var COMPARE_PARTIAL_FLAG = 1;
var COMPARE_UNORDERED_FLAG = 2;
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
  stack.set(array, other);
  stack.set(other, array);
  while (++index < arrLength) {
    var arrValue = array[index], othValue = other[index];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result2 = false;
      break;
    }
    if (seen) {
      if (!arraySome_default(other, function(othValue2, othIndex) {
        if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result2 = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result2 = false;
      break;
    }
  }
  stack["delete"](array);
  stack["delete"](other);
  return result2;
}
var equalArrays_default = equalArrays;

// node_modules/lodash-es/_mapToArray.js
function mapToArray(map2) {
  var index = -1, result2 = Array(map2.size);
  map2.forEach(function(value, key) {
    result2[++index] = [key, value];
  });
  return result2;
}
var mapToArray_default = mapToArray;

// node_modules/lodash-es/_setToArray.js
function setToArray(set2) {
  var index = -1, result2 = Array(set2.size);
  set2.forEach(function(value) {
    result2[++index] = value;
  });
  return result2;
}
var setToArray_default = setToArray;

// node_modules/lodash-es/_equalByTag.js
var COMPARE_PARTIAL_FLAG2 = 1;
var COMPARE_UNORDERED_FLAG2 = 2;
var boolTag4 = "[object Boolean]";
var dateTag4 = "[object Date]";
var errorTag4 = "[object Error]";
var mapTag6 = "[object Map]";
var numberTag4 = "[object Number]";
var regexpTag4 = "[object RegExp]";
var setTag6 = "[object Set]";
var stringTag4 = "[object String]";
var symbolTag4 = "[object Symbol]";
var arrayBufferTag4 = "[object ArrayBuffer]";
var dataViewTag5 = "[object DataView]";
var symbolProto3 = Symbol_default ? Symbol_default.prototype : void 0;
var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag5:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag4:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
        return false;
      }
      return true;
    case boolTag4:
    case dateTag4:
    case numberTag4:
      return eq_default(+object, +other);
    case errorTag4:
      return object.name == other.name && object.message == other.message;
    case regexpTag4:
    case stringTag4:
      return object == other + "";
    case mapTag6:
      var convert = mapToArray_default;
    case setTag6:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
      convert || (convert = setToArray_default);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG2;
      stack.set(object, other);
      var result2 = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object);
      return result2;
    case symbolTag4:
      if (symbolValueOf2) {
        return symbolValueOf2.call(object) == symbolValueOf2.call(other);
      }
  }
  return false;
}
var equalByTag_default = equalByTag;

// node_modules/lodash-es/_equalObjects.js
var COMPARE_PARTIAL_FLAG3 = 1;
var objectProto18 = Object.prototype;
var hasOwnProperty15 = objectProto18.hasOwnProperty;
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty15.call(other, key))) {
      return false;
    }
  }
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result2 = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key], othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result2 = false;
      break;
    }
    skipCtor || (skipCtor = key == "constructor");
  }
  if (result2 && !skipCtor) {
    var objCtor = object.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result2 = false;
    }
  }
  stack["delete"](object);
  stack["delete"](other);
  return result2;
}
var equalObjects_default = equalObjects;

// node_modules/lodash-es/_baseIsEqualDeep.js
var COMPARE_PARTIAL_FLAG4 = 1;
var argsTag4 = "[object Arguments]";
var arrayTag3 = "[object Array]";
var objectTag5 = "[object Object]";
var objectProto19 = Object.prototype;
var hasOwnProperty16 = objectProto19.hasOwnProperty;
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag3 : getTag_default(object), othTag = othIsArr ? arrayTag3 : getTag_default(other);
  objTag = objTag == argsTag4 ? objectTag5 : objTag;
  othTag = othTag == argsTag4 ? objectTag5 : othTag;
  var objIsObj = objTag == objectTag5, othIsObj = othTag == objectTag5, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer_default(object)) {
    if (!isBuffer_default(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack_default());
    return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
    var objIsWrapped = objIsObj && hasOwnProperty16.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty16.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack_default());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack_default());
  return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
}
var baseIsEqualDeep_default = baseIsEqualDeep;

// node_modules/lodash-es/_baseIsEqual.js
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
}
var baseIsEqual_default = baseIsEqual;

// node_modules/lodash-es/_baseIsMatch.js
var COMPARE_PARTIAL_FLAG5 = 1;
var COMPARE_UNORDERED_FLAG3 = 2;
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length, length = index, noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0], objValue = object[key], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack_default();
      if (customizer) {
        var result2 = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result2 === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result2)) {
        return false;
      }
    }
  }
  return true;
}
var baseIsMatch_default = baseIsMatch;

// node_modules/lodash-es/_isStrictComparable.js
function isStrictComparable(value) {
  return value === value && !isObject_default(value);
}
var isStrictComparable_default = isStrictComparable;

// node_modules/lodash-es/_getMatchData.js
function getMatchData(object) {
  var result2 = keys_default(object), length = result2.length;
  while (length--) {
    var key = result2[length], value = object[key];
    result2[length] = [key, value, isStrictComparable_default(value)];
  }
  return result2;
}
var getMatchData_default = getMatchData;

// node_modules/lodash-es/_matchesStrictComparable.js
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
  };
}
var matchesStrictComparable_default = matchesStrictComparable;

// node_modules/lodash-es/_baseMatches.js
function baseMatches(source) {
  var matchData = getMatchData_default(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch_default(object, source, matchData);
  };
}
var baseMatches_default = baseMatches;

// node_modules/lodash-es/_baseHasIn.js
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}
var baseHasIn_default = baseHasIn;

// node_modules/lodash-es/_hasPath.js
function hasPath(object, path, hasFunc) {
  path = castPath_default(path, object);
  var index = -1, length = path.length, result2 = false;
  while (++index < length) {
    var key = toKey_default(path[index]);
    if (!(result2 = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result2 || ++index != length) {
    return result2;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength_default(length) && isIndex_default(key, length) && (isArray_default(object) || isArguments_default(object));
}
var hasPath_default = hasPath;

// node_modules/lodash-es/hasIn.js
function hasIn(object, path) {
  return object != null && hasPath_default(object, path, baseHasIn_default);
}
var hasIn_default = hasIn;

// node_modules/lodash-es/_baseMatchesProperty.js
var COMPARE_PARTIAL_FLAG6 = 1;
var COMPARE_UNORDERED_FLAG4 = 2;
function baseMatchesProperty(path, srcValue) {
  if (isKey_default(path) && isStrictComparable_default(srcValue)) {
    return matchesStrictComparable_default(toKey_default(path), srcValue);
  }
  return function(object) {
    var objValue = get_default(object, path);
    return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
  };
}
var baseMatchesProperty_default = baseMatchesProperty;

// node_modules/lodash-es/_baseProperty.js
function baseProperty(key) {
  return function(object) {
    return object == null ? void 0 : object[key];
  };
}
var baseProperty_default = baseProperty;

// node_modules/lodash-es/_basePropertyDeep.js
function basePropertyDeep(path) {
  return function(object) {
    return baseGet_default(object, path);
  };
}
var basePropertyDeep_default = basePropertyDeep;

// node_modules/lodash-es/property.js
function property2(path) {
  return isKey_default(path) ? baseProperty_default(toKey_default(path)) : basePropertyDeep_default(path);
}
var property_default = property2;

// node_modules/lodash-es/_baseIteratee.js
function baseIteratee(value) {
  if (typeof value == "function") {
    return value;
  }
  if (value == null) {
    return identity_default;
  }
  if (typeof value == "object") {
    return isArray_default(value) ? baseMatchesProperty_default(value[0], value[1]) : baseMatches_default(value);
  }
  return property_default(value);
}
var baseIteratee_default = baseIteratee;

// node_modules/lodash-es/cond.js
var FUNC_ERROR_TEXT5 = "Expected a function";
function cond(pairs) {
  var length = pairs == null ? 0 : pairs.length, toIteratee = baseIteratee_default;
  pairs = !length ? [] : arrayMap_default(pairs, function(pair) {
    if (typeof pair[1] != "function") {
      throw new TypeError(FUNC_ERROR_TEXT5);
    }
    return [toIteratee(pair[0]), pair[1]];
  });
  return baseRest_default(function(args) {
    var index = -1;
    while (++index < length) {
      var pair = pairs[index];
      if (apply_default(pair[0], this, args)) {
        return apply_default(pair[1], this, args);
      }
    }
  });
}
var cond_default = cond;

// node_modules/lodash-es/_baseConformsTo.js
function baseConformsTo(object, source, props) {
  var length = props.length;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (length--) {
    var key = props[length], predicate = source[key], value = object[key];
    if (value === void 0 && !(key in object) || !predicate(value)) {
      return false;
    }
  }
  return true;
}
var baseConformsTo_default = baseConformsTo;

// node_modules/lodash-es/_baseConforms.js
function baseConforms(source) {
  var props = keys_default(source);
  return function(object) {
    return baseConformsTo_default(object, source, props);
  };
}
var baseConforms_default = baseConforms;

// node_modules/lodash-es/conforms.js
var CLONE_DEEP_FLAG4 = 1;
function conforms(source) {
  return baseConforms_default(baseClone_default(source, CLONE_DEEP_FLAG4));
}
var conforms_default = conforms;

// node_modules/lodash-es/conformsTo.js
function conformsTo(object, source) {
  return source == null || baseConformsTo_default(object, source, keys_default(source));
}
var conformsTo_default = conformsTo;

// node_modules/lodash-es/_arrayAggregator.js
function arrayAggregator(array, setter, iteratee2, accumulator) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee2(value), array);
  }
  return accumulator;
}
var arrayAggregator_default = arrayAggregator;

// node_modules/lodash-es/_createBaseFor.js
function createBaseFor(fromRight) {
  return function(object, iteratee2, keysFunc) {
    var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee2(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
var createBaseFor_default = createBaseFor;

// node_modules/lodash-es/_baseFor.js
var baseFor = createBaseFor_default();
var baseFor_default = baseFor;

// node_modules/lodash-es/_baseForOwn.js
function baseForOwn(object, iteratee2) {
  return object && baseFor_default(object, iteratee2, keys_default);
}
var baseForOwn_default = baseForOwn;

// node_modules/lodash-es/_createBaseEach.js
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee2) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike_default(collection)) {
      return eachFunc(collection, iteratee2);
    }
    var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
    while (fromRight ? index-- : ++index < length) {
      if (iteratee2(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}
var createBaseEach_default = createBaseEach;

// node_modules/lodash-es/_baseEach.js
var baseEach = createBaseEach_default(baseForOwn_default);
var baseEach_default = baseEach;

// node_modules/lodash-es/_baseAggregator.js
function baseAggregator(collection, setter, iteratee2, accumulator) {
  baseEach_default(collection, function(value, key, collection2) {
    setter(accumulator, value, iteratee2(value), collection2);
  });
  return accumulator;
}
var baseAggregator_default = baseAggregator;

// node_modules/lodash-es/_createAggregator.js
function createAggregator(setter, initializer) {
  return function(collection, iteratee2) {
    var func = isArray_default(collection) ? arrayAggregator_default : baseAggregator_default, accumulator = initializer ? initializer() : {};
    return func(collection, setter, baseIteratee_default(iteratee2, 2), accumulator);
  };
}
var createAggregator_default = createAggregator;

// node_modules/lodash-es/countBy.js
var objectProto20 = Object.prototype;
var hasOwnProperty17 = objectProto20.hasOwnProperty;
var countBy = createAggregator_default(function(result2, value, key) {
  if (hasOwnProperty17.call(result2, key)) {
    ++result2[key];
  } else {
    baseAssignValue_default(result2, key, 1);
  }
});
var countBy_default = countBy;

// node_modules/lodash-es/create.js
function create(prototype, properties) {
  var result2 = baseCreate_default(prototype);
  return properties == null ? result2 : baseAssign_default(result2, properties);
}
var create_default = create;

// node_modules/lodash-es/curry.js
var WRAP_CURRY_FLAG6 = 8;
function curry(func, arity, guard) {
  arity = guard ? void 0 : arity;
  var result2 = createWrap_default(func, WRAP_CURRY_FLAG6, void 0, void 0, void 0, void 0, void 0, arity);
  result2.placeholder = curry.placeholder;
  return result2;
}
curry.placeholder = {};
var curry_default = curry;

// node_modules/lodash-es/curryRight.js
var WRAP_CURRY_RIGHT_FLAG4 = 16;
function curryRight(func, arity, guard) {
  arity = guard ? void 0 : arity;
  var result2 = createWrap_default(func, WRAP_CURRY_RIGHT_FLAG4, void 0, void 0, void 0, void 0, void 0, arity);
  result2.placeholder = curryRight.placeholder;
  return result2;
}
curryRight.placeholder = {};
var curryRight_default = curryRight;

// node_modules/lodash-es/now.js
var now = function() {
  return root_default.Date.now();
};
var now_default = now;

// node_modules/lodash-es/debounce.js
var FUNC_ERROR_TEXT6 = "Expected a function";
var nativeMax6 = Math.max;
var nativeMin4 = Math.min;
function debounce2(func, wait, options) {
  var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT6);
  }
  wait = toNumber_default(wait) || 0;
  if (isObject_default(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax6(toNumber_default(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result2 = func.apply(thisArg, args);
    return result2;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result2;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin4(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now_default();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result2;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result2 : trailingEdge(now_default());
  }
  function debounced() {
    var time = now_default(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result2;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_default = debounce2;

// node_modules/lodash-es/defaultTo.js
function defaultTo(value, defaultValue) {
  return value == null || value !== value ? defaultValue : value;
}
var defaultTo_default = defaultTo;

// node_modules/lodash-es/defaults.js
var objectProto21 = Object.prototype;
var hasOwnProperty18 = objectProto21.hasOwnProperty;
var defaults = baseRest_default(function(object, sources) {
  object = Object(object);
  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : void 0;
  if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
    length = 1;
  }
  while (++index < length) {
    var source = sources[index];
    var props = keysIn_default(source);
    var propsIndex = -1;
    var propsLength = props.length;
    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];
      if (value === void 0 || eq_default(value, objectProto21[key]) && !hasOwnProperty18.call(object, key)) {
        object[key] = source[key];
      }
    }
  }
  return object;
});
var defaults_default = defaults;

// node_modules/lodash-es/_assignMergeValue.js
function assignMergeValue(object, key, value) {
  if (value !== void 0 && !eq_default(object[key], value) || value === void 0 && !(key in object)) {
    baseAssignValue_default(object, key, value);
  }
}
var assignMergeValue_default = assignMergeValue;

// node_modules/lodash-es/isArrayLikeObject.js
function isArrayLikeObject(value) {
  return isObjectLike_default(value) && isArrayLike_default(value);
}
var isArrayLikeObject_default = isArrayLikeObject;

// node_modules/lodash-es/_safeGet.js
function safeGet(object, key) {
  if (key === "constructor" && typeof object[key] === "function") {
    return;
  }
  if (key == "__proto__") {
    return;
  }
  return object[key];
}
var safeGet_default = safeGet;

// node_modules/lodash-es/toPlainObject.js
function toPlainObject(value) {
  return copyObject_default(value, keysIn_default(value));
}
var toPlainObject_default = toPlainObject;

// node_modules/lodash-es/_baseMergeDeep.js
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet_default(object, key), srcValue = safeGet_default(source, key), stacked = stack.get(srcValue);
  if (stacked) {
    assignMergeValue_default(object, key, stacked);
    return;
  }
  var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
  var isCommon = newValue === void 0;
  if (isCommon) {
    var isArr = isArray_default(srcValue), isBuff = !isArr && isBuffer_default(srcValue), isTyped = !isArr && !isBuff && isTypedArray_default(srcValue);
    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray_default(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject_default(objValue)) {
        newValue = copyArray_default(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer_default(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray_default(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject_default(srcValue) || isArguments_default(srcValue)) {
      newValue = objValue;
      if (isArguments_default(objValue)) {
        newValue = toPlainObject_default(objValue);
      } else if (!isObject_default(objValue) || isFunction_default(objValue)) {
        newValue = initCloneObject_default(srcValue);
      }
    } else {
      isCommon = false;
    }
  }
  if (isCommon) {
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack["delete"](srcValue);
  }
  assignMergeValue_default(object, key, newValue);
}
var baseMergeDeep_default = baseMergeDeep;

// node_modules/lodash-es/_baseMerge.js
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor_default(source, function(srcValue, key) {
    stack || (stack = new Stack_default());
    if (isObject_default(srcValue)) {
      baseMergeDeep_default(object, source, key, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet_default(object, key), srcValue, key + "", object, source, stack) : void 0;
      if (newValue === void 0) {
        newValue = srcValue;
      }
      assignMergeValue_default(object, key, newValue);
    }
  }, keysIn_default);
}
var baseMerge_default = baseMerge;

// node_modules/lodash-es/_customDefaultsMerge.js
function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
  if (isObject_default(objValue) && isObject_default(srcValue)) {
    stack.set(srcValue, objValue);
    baseMerge_default(objValue, srcValue, void 0, customDefaultsMerge, stack);
    stack["delete"](srcValue);
  }
  return objValue;
}
var customDefaultsMerge_default = customDefaultsMerge;

// node_modules/lodash-es/mergeWith.js
var mergeWith = createAssigner_default(function(object, source, srcIndex, customizer) {
  baseMerge_default(object, source, srcIndex, customizer);
});
var mergeWith_default = mergeWith;

// node_modules/lodash-es/defaultsDeep.js
var defaultsDeep = baseRest_default(function(args) {
  args.push(void 0, customDefaultsMerge_default);
  return apply_default(mergeWith_default, void 0, args);
});
var defaultsDeep_default = defaultsDeep;

// node_modules/lodash-es/_baseDelay.js
var FUNC_ERROR_TEXT7 = "Expected a function";
function baseDelay(func, wait, args) {
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT7);
  }
  return setTimeout(function() {
    func.apply(void 0, args);
  }, wait);
}
var baseDelay_default = baseDelay;

// node_modules/lodash-es/defer.js
var defer = baseRest_default(function(func, args) {
  return baseDelay_default(func, 1, args);
});
var defer_default = defer;

// node_modules/lodash-es/delay.js
var delay = baseRest_default(function(func, wait, args) {
  return baseDelay_default(func, toNumber_default(wait) || 0, args);
});
var delay_default = delay;

// node_modules/lodash-es/_arrayIncludesWith.js
function arrayIncludesWith(array, value, comparator) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}
var arrayIncludesWith_default = arrayIncludesWith;

// node_modules/lodash-es/_baseDifference.js
var LARGE_ARRAY_SIZE2 = 200;
function baseDifference(array, values2, iteratee2, comparator) {
  var index = -1, includes2 = arrayIncludes_default, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
  if (!length) {
    return result2;
  }
  if (iteratee2) {
    values2 = arrayMap_default(values2, baseUnary_default(iteratee2));
  }
  if (comparator) {
    includes2 = arrayIncludesWith_default;
    isCommon = false;
  } else if (values2.length >= LARGE_ARRAY_SIZE2) {
    includes2 = cacheHas_default;
    isCommon = false;
    values2 = new SetCache_default(values2);
  }
  outer:
    while (++index < length) {
      var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values2[valuesIndex] === computed) {
            continue outer;
          }
        }
        result2.push(value);
      } else if (!includes2(values2, computed, comparator)) {
        result2.push(value);
      }
    }
  return result2;
}
var baseDifference_default = baseDifference;

// node_modules/lodash-es/difference.js
var difference = baseRest_default(function(array, values2) {
  return isArrayLikeObject_default(array) ? baseDifference_default(array, baseFlatten_default(values2, 1, isArrayLikeObject_default, true)) : [];
});
var difference_default = difference;

// node_modules/lodash-es/last.js
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : void 0;
}
var last_default = last;

// node_modules/lodash-es/differenceBy.js
var differenceBy = baseRest_default(function(array, values2) {
  var iteratee2 = last_default(values2);
  if (isArrayLikeObject_default(iteratee2)) {
    iteratee2 = void 0;
  }
  return isArrayLikeObject_default(array) ? baseDifference_default(array, baseFlatten_default(values2, 1, isArrayLikeObject_default, true), baseIteratee_default(iteratee2, 2)) : [];
});
var differenceBy_default = differenceBy;

// node_modules/lodash-es/differenceWith.js
var differenceWith = baseRest_default(function(array, values2) {
  var comparator = last_default(values2);
  if (isArrayLikeObject_default(comparator)) {
    comparator = void 0;
  }
  return isArrayLikeObject_default(array) ? baseDifference_default(array, baseFlatten_default(values2, 1, isArrayLikeObject_default, true), void 0, comparator) : [];
});
var differenceWith_default = differenceWith;

// node_modules/lodash-es/divide.js
var divide = createMathOperation_default(function(dividend, divisor) {
  return dividend / divisor;
}, 1);
var divide_default = divide;

// node_modules/lodash-es/drop.js
function drop(array, n, guard) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  n = guard || n === void 0 ? 1 : toInteger_default(n);
  return baseSlice_default(array, n < 0 ? 0 : n, length);
}
var drop_default = drop;

// node_modules/lodash-es/dropRight.js
function dropRight(array, n, guard) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  n = guard || n === void 0 ? 1 : toInteger_default(n);
  n = length - n;
  return baseSlice_default(array, 0, n < 0 ? 0 : n);
}
var dropRight_default = dropRight;

// node_modules/lodash-es/_baseWhile.js
function baseWhile(array, predicate, isDrop, fromRight) {
  var length = array.length, index = fromRight ? length : -1;
  while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
  }
  return isDrop ? baseSlice_default(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice_default(array, fromRight ? index + 1 : 0, fromRight ? length : index);
}
var baseWhile_default = baseWhile;

// node_modules/lodash-es/dropRightWhile.js
function dropRightWhile(array, predicate) {
  return array && array.length ? baseWhile_default(array, baseIteratee_default(predicate, 3), true, true) : [];
}
var dropRightWhile_default = dropRightWhile;

// node_modules/lodash-es/dropWhile.js
function dropWhile(array, predicate) {
  return array && array.length ? baseWhile_default(array, baseIteratee_default(predicate, 3), true) : [];
}
var dropWhile_default = dropWhile;

// node_modules/lodash-es/_castFunction.js
function castFunction(value) {
  return typeof value == "function" ? value : identity_default;
}
var castFunction_default = castFunction;

// node_modules/lodash-es/forEach.js
function forEach(collection, iteratee2) {
  var func = isArray_default(collection) ? arrayEach_default : baseEach_default;
  return func(collection, castFunction_default(iteratee2));
}
var forEach_default = forEach;

// node_modules/lodash-es/_arrayEachRight.js
function arrayEachRight(array, iteratee2) {
  var length = array == null ? 0 : array.length;
  while (length--) {
    if (iteratee2(array[length], length, array) === false) {
      break;
    }
  }
  return array;
}
var arrayEachRight_default = arrayEachRight;

// node_modules/lodash-es/_baseForRight.js
var baseForRight = createBaseFor_default(true);
var baseForRight_default = baseForRight;

// node_modules/lodash-es/_baseForOwnRight.js
function baseForOwnRight(object, iteratee2) {
  return object && baseForRight_default(object, iteratee2, keys_default);
}
var baseForOwnRight_default = baseForOwnRight;

// node_modules/lodash-es/_baseEachRight.js
var baseEachRight = createBaseEach_default(baseForOwnRight_default, true);
var baseEachRight_default = baseEachRight;

// node_modules/lodash-es/forEachRight.js
function forEachRight(collection, iteratee2) {
  var func = isArray_default(collection) ? arrayEachRight_default : baseEachRight_default;
  return func(collection, castFunction_default(iteratee2));
}
var forEachRight_default = forEachRight;

// node_modules/lodash-es/endsWith.js
function endsWith(string, target, position) {
  string = toString_default(string);
  target = baseToString_default(target);
  var length = string.length;
  position = position === void 0 ? length : baseClamp_default(toInteger_default(position), 0, length);
  var end = position;
  position -= target.length;
  return position >= 0 && string.slice(position, end) == target;
}
var endsWith_default = endsWith;

// node_modules/lodash-es/_baseToPairs.js
function baseToPairs(object, props) {
  return arrayMap_default(props, function(key) {
    return [key, object[key]];
  });
}
var baseToPairs_default = baseToPairs;

// node_modules/lodash-es/_setToPairs.js
function setToPairs(set2) {
  var index = -1, result2 = Array(set2.size);
  set2.forEach(function(value) {
    result2[++index] = [value, value];
  });
  return result2;
}
var setToPairs_default = setToPairs;

// node_modules/lodash-es/_createToPairs.js
var mapTag7 = "[object Map]";
var setTag7 = "[object Set]";
function createToPairs(keysFunc) {
  return function(object) {
    var tag = getTag_default(object);
    if (tag == mapTag7) {
      return mapToArray_default(object);
    }
    if (tag == setTag7) {
      return setToPairs_default(object);
    }
    return baseToPairs_default(object, keysFunc(object));
  };
}
var createToPairs_default = createToPairs;

// node_modules/lodash-es/toPairs.js
var toPairs = createToPairs_default(keys_default);
var toPairs_default = toPairs;

// node_modules/lodash-es/toPairsIn.js
var toPairsIn = createToPairs_default(keysIn_default);
var toPairsIn_default = toPairsIn;

// node_modules/lodash-es/_escapeHtmlChar.js
var htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var escapeHtmlChar = basePropertyOf_default(htmlEscapes);
var escapeHtmlChar_default = escapeHtmlChar;

// node_modules/lodash-es/escape.js
var reUnescapedHtml = /[&<>"']/g;
var reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
function escape(string) {
  string = toString_default(string);
  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar_default) : string;
}
var escape_default = escape;

// node_modules/lodash-es/escapeRegExp.js
var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
var reHasRegExpChar = RegExp(reRegExpChar2.source);
function escapeRegExp(string) {
  string = toString_default(string);
  return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar2, "\\$&") : string;
}
var escapeRegExp_default = escapeRegExp;

// node_modules/lodash-es/_arrayEvery.js
function arrayEvery(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}
var arrayEvery_default = arrayEvery;

// node_modules/lodash-es/_baseEvery.js
function baseEvery(collection, predicate) {
  var result2 = true;
  baseEach_default(collection, function(value, index, collection2) {
    result2 = !!predicate(value, index, collection2);
    return result2;
  });
  return result2;
}
var baseEvery_default = baseEvery;

// node_modules/lodash-es/every.js
function every(collection, predicate, guard) {
  var func = isArray_default(collection) ? arrayEvery_default : baseEvery_default;
  if (guard && isIterateeCall_default(collection, predicate, guard)) {
    predicate = void 0;
  }
  return func(collection, baseIteratee_default(predicate, 3));
}
var every_default = every;

// node_modules/lodash-es/toLength.js
var MAX_ARRAY_LENGTH2 = 4294967295;
function toLength(value) {
  return value ? baseClamp_default(toInteger_default(value), 0, MAX_ARRAY_LENGTH2) : 0;
}
var toLength_default = toLength;

// node_modules/lodash-es/_baseFill.js
function baseFill(array, value, start, end) {
  var length = array.length;
  start = toInteger_default(start);
  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end === void 0 || end > length ? length : toInteger_default(end);
  if (end < 0) {
    end += length;
  }
  end = start > end ? 0 : toLength_default(end);
  while (start < end) {
    array[start++] = value;
  }
  return array;
}
var baseFill_default = baseFill;

// node_modules/lodash-es/fill.js
function fill(array, value, start, end) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  if (start && typeof start != "number" && isIterateeCall_default(array, value, start)) {
    start = 0;
    end = length;
  }
  return baseFill_default(array, value, start, end);
}
var fill_default = fill;

// node_modules/lodash-es/_baseFilter.js
function baseFilter(collection, predicate) {
  var result2 = [];
  baseEach_default(collection, function(value, index, collection2) {
    if (predicate(value, index, collection2)) {
      result2.push(value);
    }
  });
  return result2;
}
var baseFilter_default = baseFilter;

// node_modules/lodash-es/filter.js
function filter(collection, predicate) {
  var func = isArray_default(collection) ? arrayFilter_default : baseFilter_default;
  return func(collection, baseIteratee_default(predicate, 3));
}
var filter_default = filter;

// node_modules/lodash-es/_createFind.js
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike_default(collection)) {
      var iteratee2 = baseIteratee_default(predicate, 3);
      collection = keys_default(collection);
      predicate = function(key) {
        return iteratee2(iterable[key], key, iterable);
      };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee2 ? collection[index] : index] : void 0;
  };
}
var createFind_default = createFind;

// node_modules/lodash-es/findIndex.js
var nativeMax7 = Math.max;
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger_default(fromIndex);
  if (index < 0) {
    index = nativeMax7(length + index, 0);
  }
  return baseFindIndex_default(array, baseIteratee_default(predicate, 3), index);
}
var findIndex_default = findIndex;

// node_modules/lodash-es/find.js
var find = createFind_default(findIndex_default);
var find_default = find;

// node_modules/lodash-es/_baseFindKey.js
function baseFindKey(collection, predicate, eachFunc) {
  var result2;
  eachFunc(collection, function(value, key, collection2) {
    if (predicate(value, key, collection2)) {
      result2 = key;
      return false;
    }
  });
  return result2;
}
var baseFindKey_default = baseFindKey;

// node_modules/lodash-es/findKey.js
function findKey(object, predicate) {
  return baseFindKey_default(object, baseIteratee_default(predicate, 3), baseForOwn_default);
}
var findKey_default = findKey;

// node_modules/lodash-es/findLastIndex.js
var nativeMax8 = Math.max;
var nativeMin5 = Math.min;
function findLastIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length - 1;
  if (fromIndex !== void 0) {
    index = toInteger_default(fromIndex);
    index = fromIndex < 0 ? nativeMax8(length + index, 0) : nativeMin5(index, length - 1);
  }
  return baseFindIndex_default(array, baseIteratee_default(predicate, 3), index, true);
}
var findLastIndex_default = findLastIndex;

// node_modules/lodash-es/findLast.js
var findLast = createFind_default(findLastIndex_default);
var findLast_default = findLast;

// node_modules/lodash-es/findLastKey.js
function findLastKey(object, predicate) {
  return baseFindKey_default(object, baseIteratee_default(predicate, 3), baseForOwnRight_default);
}
var findLastKey_default = findLastKey;

// node_modules/lodash-es/head.js
function head(array) {
  return array && array.length ? array[0] : void 0;
}
var head_default = head;

// node_modules/lodash-es/_baseMap.js
function baseMap(collection, iteratee2) {
  var index = -1, result2 = isArrayLike_default(collection) ? Array(collection.length) : [];
  baseEach_default(collection, function(value, key, collection2) {
    result2[++index] = iteratee2(value, key, collection2);
  });
  return result2;
}
var baseMap_default = baseMap;

// node_modules/lodash-es/map.js
function map(collection, iteratee2) {
  var func = isArray_default(collection) ? arrayMap_default : baseMap_default;
  return func(collection, baseIteratee_default(iteratee2, 3));
}
var map_default = map;

// node_modules/lodash-es/flatMap.js
function flatMap(collection, iteratee2) {
  return baseFlatten_default(map_default(collection, iteratee2), 1);
}
var flatMap_default = flatMap;

// node_modules/lodash-es/flatMapDeep.js
var INFINITY4 = 1 / 0;
function flatMapDeep(collection, iteratee2) {
  return baseFlatten_default(map_default(collection, iteratee2), INFINITY4);
}
var flatMapDeep_default = flatMapDeep;

// node_modules/lodash-es/flatMapDepth.js
function flatMapDepth(collection, iteratee2, depth) {
  depth = depth === void 0 ? 1 : toInteger_default(depth);
  return baseFlatten_default(map_default(collection, iteratee2), depth);
}
var flatMapDepth_default = flatMapDepth;

// node_modules/lodash-es/flattenDeep.js
var INFINITY5 = 1 / 0;
function flattenDeep(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten_default(array, INFINITY5) : [];
}
var flattenDeep_default = flattenDeep;

// node_modules/lodash-es/flattenDepth.js
function flattenDepth(array, depth) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  depth = depth === void 0 ? 1 : toInteger_default(depth);
  return baseFlatten_default(array, depth);
}
var flattenDepth_default = flattenDepth;

// node_modules/lodash-es/flip.js
var WRAP_FLIP_FLAG3 = 512;
function flip(func) {
  return createWrap_default(func, WRAP_FLIP_FLAG3);
}
var flip_default = flip;

// node_modules/lodash-es/floor.js
var floor = createRound_default("floor");
var floor_default = floor;

// node_modules/lodash-es/_createFlow.js
var FUNC_ERROR_TEXT8 = "Expected a function";
var WRAP_CURRY_FLAG7 = 8;
var WRAP_PARTIAL_FLAG6 = 32;
var WRAP_ARY_FLAG5 = 128;
var WRAP_REARG_FLAG3 = 256;
function createFlow(fromRight) {
  return flatRest_default(function(funcs) {
    var length = funcs.length, index = length, prereq = LodashWrapper_default.prototype.thru;
    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      var func = funcs[index];
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT8);
      }
      if (prereq && !wrapper && getFuncName_default(func) == "wrapper") {
        var wrapper = new LodashWrapper_default([], true);
      }
    }
    index = wrapper ? index : length;
    while (++index < length) {
      func = funcs[index];
      var funcName = getFuncName_default(func), data = funcName == "wrapper" ? getData_default(func) : void 0;
      if (data && isLaziable_default(data[0]) && data[1] == (WRAP_ARY_FLAG5 | WRAP_CURRY_FLAG7 | WRAP_PARTIAL_FLAG6 | WRAP_REARG_FLAG3) && !data[4].length && data[9] == 1) {
        wrapper = wrapper[getFuncName_default(data[0])].apply(wrapper, data[3]);
      } else {
        wrapper = func.length == 1 && isLaziable_default(func) ? wrapper[funcName]() : wrapper.thru(func);
      }
    }
    return function() {
      var args = arguments, value = args[0];
      if (wrapper && args.length == 1 && isArray_default(value)) {
        return wrapper.plant(value).value();
      }
      var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
      while (++index2 < length) {
        result2 = funcs[index2].call(this, result2);
      }
      return result2;
    };
  });
}
var createFlow_default = createFlow;

// node_modules/lodash-es/flow.js
var flow = createFlow_default();
var flow_default = flow;

// node_modules/lodash-es/flowRight.js
var flowRight = createFlow_default(true);
var flowRight_default = flowRight;

// node_modules/lodash-es/forIn.js
function forIn(object, iteratee2) {
  return object == null ? object : baseFor_default(object, castFunction_default(iteratee2), keysIn_default);
}
var forIn_default = forIn;

// node_modules/lodash-es/forInRight.js
function forInRight(object, iteratee2) {
  return object == null ? object : baseForRight_default(object, castFunction_default(iteratee2), keysIn_default);
}
var forInRight_default = forInRight;

// node_modules/lodash-es/forOwn.js
function forOwn(object, iteratee2) {
  return object && baseForOwn_default(object, castFunction_default(iteratee2));
}
var forOwn_default = forOwn;

// node_modules/lodash-es/forOwnRight.js
function forOwnRight(object, iteratee2) {
  return object && baseForOwnRight_default(object, castFunction_default(iteratee2));
}
var forOwnRight_default = forOwnRight;

// node_modules/lodash-es/fromPairs.js
function fromPairs(pairs) {
  var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
  while (++index < length) {
    var pair = pairs[index];
    result2[pair[0]] = pair[1];
  }
  return result2;
}
var fromPairs_default = fromPairs;

// node_modules/lodash-es/_baseFunctions.js
function baseFunctions(object, props) {
  return arrayFilter_default(props, function(key) {
    return isFunction_default(object[key]);
  });
}
var baseFunctions_default = baseFunctions;

// node_modules/lodash-es/functions.js
function functions(object) {
  return object == null ? [] : baseFunctions_default(object, keys_default(object));
}
var functions_default = functions;

// node_modules/lodash-es/functionsIn.js
function functionsIn(object) {
  return object == null ? [] : baseFunctions_default(object, keysIn_default(object));
}
var functionsIn_default = functionsIn;

// node_modules/lodash-es/groupBy.js
var objectProto22 = Object.prototype;
var hasOwnProperty19 = objectProto22.hasOwnProperty;
var groupBy = createAggregator_default(function(result2, value, key) {
  if (hasOwnProperty19.call(result2, key)) {
    result2[key].push(value);
  } else {
    baseAssignValue_default(result2, key, [value]);
  }
});
var groupBy_default = groupBy;

// node_modules/lodash-es/_baseGt.js
function baseGt(value, other) {
  return value > other;
}
var baseGt_default = baseGt;

// node_modules/lodash-es/_createRelationalOperation.js
function createRelationalOperation(operator) {
  return function(value, other) {
    if (!(typeof value == "string" && typeof other == "string")) {
      value = toNumber_default(value);
      other = toNumber_default(other);
    }
    return operator(value, other);
  };
}
var createRelationalOperation_default = createRelationalOperation;

// node_modules/lodash-es/gt.js
var gt = createRelationalOperation_default(baseGt_default);
var gt_default = gt;

// node_modules/lodash-es/gte.js
var gte = createRelationalOperation_default(function(value, other) {
  return value >= other;
});
var gte_default = gte;

// node_modules/lodash-es/_baseHas.js
var objectProto23 = Object.prototype;
var hasOwnProperty20 = objectProto23.hasOwnProperty;
function baseHas(object, key) {
  return object != null && hasOwnProperty20.call(object, key);
}
var baseHas_default = baseHas;

// node_modules/lodash-es/has.js
function has(object, path) {
  return object != null && hasPath_default(object, path, baseHas_default);
}
var has_default = has;

// node_modules/lodash-es/_baseInRange.js
var nativeMax9 = Math.max;
var nativeMin6 = Math.min;
function baseInRange(number, start, end) {
  return number >= nativeMin6(start, end) && number < nativeMax9(start, end);
}
var baseInRange_default = baseInRange;

// node_modules/lodash-es/inRange.js
function inRange(number, start, end) {
  start = toFinite_default(start);
  if (end === void 0) {
    end = start;
    start = 0;
  } else {
    end = toFinite_default(end);
  }
  number = toNumber_default(number);
  return baseInRange_default(number, start, end);
}
var inRange_default = inRange;

// node_modules/lodash-es/isString.js
var stringTag5 = "[object String]";
function isString(value) {
  return typeof value == "string" || !isArray_default(value) && isObjectLike_default(value) && baseGetTag_default(value) == stringTag5;
}
var isString_default = isString;

// node_modules/lodash-es/_baseValues.js
function baseValues(object, props) {
  return arrayMap_default(props, function(key) {
    return object[key];
  });
}
var baseValues_default = baseValues;

// node_modules/lodash-es/values.js
function values(object) {
  return object == null ? [] : baseValues_default(object, keys_default(object));
}
var values_default = values;

// node_modules/lodash-es/includes.js
var nativeMax10 = Math.max;
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike_default(collection) ? collection : values_default(collection);
  fromIndex = fromIndex && !guard ? toInteger_default(fromIndex) : 0;
  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax10(length + fromIndex, 0);
  }
  return isString_default(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf_default(collection, value, fromIndex) > -1;
}
var includes_default = includes;

// node_modules/lodash-es/indexOf.js
var nativeMax11 = Math.max;
function indexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger_default(fromIndex);
  if (index < 0) {
    index = nativeMax11(length + index, 0);
  }
  return baseIndexOf_default(array, value, index);
}
var indexOf_default = indexOf;

// node_modules/lodash-es/initial.js
function initial(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseSlice_default(array, 0, -1) : [];
}
var initial_default = initial;

// node_modules/lodash-es/_baseIntersection.js
var nativeMin7 = Math.min;
function baseIntersection(arrays, iteratee2, comparator) {
  var includes2 = comparator ? arrayIncludesWith_default : arrayIncludes_default, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result2 = [];
  while (othIndex--) {
    var array = arrays[othIndex];
    if (othIndex && iteratee2) {
      array = arrayMap_default(array, baseUnary_default(iteratee2));
    }
    maxLength = nativeMin7(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache_default(othIndex && array) : void 0;
  }
  array = arrays[0];
  var index = -1, seen = caches[0];
  outer:
    while (++index < length && result2.length < maxLength) {
      var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (!(seen ? cacheHas_default(seen, computed) : includes2(result2, computed, comparator))) {
        othIndex = othLength;
        while (--othIndex) {
          var cache3 = caches[othIndex];
          if (!(cache3 ? cacheHas_default(cache3, computed) : includes2(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(computed);
        }
        result2.push(value);
      }
    }
  return result2;
}
var baseIntersection_default = baseIntersection;

// node_modules/lodash-es/_castArrayLikeObject.js
function castArrayLikeObject(value) {
  return isArrayLikeObject_default(value) ? value : [];
}
var castArrayLikeObject_default = castArrayLikeObject;

// node_modules/lodash-es/intersection.js
var intersection = baseRest_default(function(arrays) {
  var mapped = arrayMap_default(arrays, castArrayLikeObject_default);
  return mapped.length && mapped[0] === arrays[0] ? baseIntersection_default(mapped) : [];
});
var intersection_default = intersection;

// node_modules/lodash-es/intersectionBy.js
var intersectionBy = baseRest_default(function(arrays) {
  var iteratee2 = last_default(arrays), mapped = arrayMap_default(arrays, castArrayLikeObject_default);
  if (iteratee2 === last_default(mapped)) {
    iteratee2 = void 0;
  } else {
    mapped.pop();
  }
  return mapped.length && mapped[0] === arrays[0] ? baseIntersection_default(mapped, baseIteratee_default(iteratee2, 2)) : [];
});
var intersectionBy_default = intersectionBy;

// node_modules/lodash-es/intersectionWith.js
var intersectionWith = baseRest_default(function(arrays) {
  var comparator = last_default(arrays), mapped = arrayMap_default(arrays, castArrayLikeObject_default);
  comparator = typeof comparator == "function" ? comparator : void 0;
  if (comparator) {
    mapped.pop();
  }
  return mapped.length && mapped[0] === arrays[0] ? baseIntersection_default(mapped, void 0, comparator) : [];
});
var intersectionWith_default = intersectionWith;

// node_modules/lodash-es/_baseInverter.js
function baseInverter(object, setter, iteratee2, accumulator) {
  baseForOwn_default(object, function(value, key, object2) {
    setter(accumulator, iteratee2(value), key, object2);
  });
  return accumulator;
}
var baseInverter_default = baseInverter;

// node_modules/lodash-es/_createInverter.js
function createInverter(setter, toIteratee) {
  return function(object, iteratee2) {
    return baseInverter_default(object, setter, toIteratee(iteratee2), {});
  };
}
var createInverter_default = createInverter;

// node_modules/lodash-es/invert.js
var objectProto24 = Object.prototype;
var nativeObjectToString3 = objectProto24.toString;
var invert = createInverter_default(function(result2, value, key) {
  if (value != null && typeof value.toString != "function") {
    value = nativeObjectToString3.call(value);
  }
  result2[value] = key;
}, constant_default(identity_default));
var invert_default = invert;

// node_modules/lodash-es/invertBy.js
var objectProto25 = Object.prototype;
var hasOwnProperty21 = objectProto25.hasOwnProperty;
var nativeObjectToString4 = objectProto25.toString;
var invertBy = createInverter_default(function(result2, value, key) {
  if (value != null && typeof value.toString != "function") {
    value = nativeObjectToString4.call(value);
  }
  if (hasOwnProperty21.call(result2, value)) {
    result2[value].push(key);
  } else {
    result2[value] = [key];
  }
}, baseIteratee_default);
var invertBy_default = invertBy;

// node_modules/lodash-es/_parent.js
function parent(object, path) {
  return path.length < 2 ? object : baseGet_default(object, baseSlice_default(path, 0, -1));
}
var parent_default = parent;

// node_modules/lodash-es/_baseInvoke.js
function baseInvoke(object, path, args) {
  path = castPath_default(path, object);
  object = parent_default(object, path);
  var func = object == null ? object : object[toKey_default(last_default(path))];
  return func == null ? void 0 : apply_default(func, object, args);
}
var baseInvoke_default = baseInvoke;

// node_modules/lodash-es/invoke.js
var invoke = baseRest_default(baseInvoke_default);
var invoke_default = invoke;

// node_modules/lodash-es/invokeMap.js
var invokeMap = baseRest_default(function(collection, path, args) {
  var index = -1, isFunc = typeof path == "function", result2 = isArrayLike_default(collection) ? Array(collection.length) : [];
  baseEach_default(collection, function(value) {
    result2[++index] = isFunc ? apply_default(path, value, args) : baseInvoke_default(value, path, args);
  });
  return result2;
});
var invokeMap_default = invokeMap;

// node_modules/lodash-es/_baseIsArrayBuffer.js
var arrayBufferTag5 = "[object ArrayBuffer]";
function baseIsArrayBuffer(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == arrayBufferTag5;
}
var baseIsArrayBuffer_default = baseIsArrayBuffer;

// node_modules/lodash-es/isArrayBuffer.js
var nodeIsArrayBuffer = nodeUtil_default && nodeUtil_default.isArrayBuffer;
var isArrayBuffer = nodeIsArrayBuffer ? baseUnary_default(nodeIsArrayBuffer) : baseIsArrayBuffer_default;
var isArrayBuffer_default = isArrayBuffer;

// node_modules/lodash-es/isBoolean.js
var boolTag5 = "[object Boolean]";
function isBoolean(value) {
  return value === true || value === false || isObjectLike_default(value) && baseGetTag_default(value) == boolTag5;
}
var isBoolean_default = isBoolean;

// node_modules/lodash-es/_baseIsDate.js
var dateTag5 = "[object Date]";
function baseIsDate(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == dateTag5;
}
var baseIsDate_default = baseIsDate;

// node_modules/lodash-es/isDate.js
var nodeIsDate = nodeUtil_default && nodeUtil_default.isDate;
var isDate = nodeIsDate ? baseUnary_default(nodeIsDate) : baseIsDate_default;
var isDate_default = isDate;

// node_modules/lodash-es/isElement.js
function isElement(value) {
  return isObjectLike_default(value) && value.nodeType === 1 && !isPlainObject_default(value);
}
var isElement_default = isElement;

// node_modules/lodash-es/isEmpty.js
var mapTag8 = "[object Map]";
var setTag8 = "[object Set]";
var objectProto26 = Object.prototype;
var hasOwnProperty22 = objectProto26.hasOwnProperty;
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike_default(value) && (isArray_default(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer_default(value) || isTypedArray_default(value) || isArguments_default(value))) {
    return !value.length;
  }
  var tag = getTag_default(value);
  if (tag == mapTag8 || tag == setTag8) {
    return !value.size;
  }
  if (isPrototype_default(value)) {
    return !baseKeys_default(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty22.call(value, key)) {
      return false;
    }
  }
  return true;
}
var isEmpty_default = isEmpty;

// node_modules/lodash-es/isEqual.js
function isEqual(value, other) {
  return baseIsEqual_default(value, other);
}
var isEqual_default = isEqual;

// node_modules/lodash-es/isEqualWith.js
function isEqualWith(value, other, customizer) {
  customizer = typeof customizer == "function" ? customizer : void 0;
  var result2 = customizer ? customizer(value, other) : void 0;
  return result2 === void 0 ? baseIsEqual_default(value, other, void 0, customizer) : !!result2;
}
var isEqualWith_default = isEqualWith;

// node_modules/lodash-es/isFinite.js
var nativeIsFinite2 = root_default.isFinite;
function isFinite(value) {
  return typeof value == "number" && nativeIsFinite2(value);
}
var isFinite_default = isFinite;

// node_modules/lodash-es/isInteger.js
function isInteger(value) {
  return typeof value == "number" && value == toInteger_default(value);
}
var isInteger_default = isInteger;

// node_modules/lodash-es/isMatch.js
function isMatch(object, source) {
  return object === source || baseIsMatch_default(object, source, getMatchData_default(source));
}
var isMatch_default = isMatch;

// node_modules/lodash-es/isMatchWith.js
function isMatchWith(object, source, customizer) {
  customizer = typeof customizer == "function" ? customizer : void 0;
  return baseIsMatch_default(object, source, getMatchData_default(source), customizer);
}
var isMatchWith_default = isMatchWith;

// node_modules/lodash-es/isNumber.js
var numberTag5 = "[object Number]";
function isNumber(value) {
  return typeof value == "number" || isObjectLike_default(value) && baseGetTag_default(value) == numberTag5;
}
var isNumber_default = isNumber;

// node_modules/lodash-es/isNaN.js
function isNaN2(value) {
  return isNumber_default(value) && value != +value;
}
var isNaN_default = isNaN2;

// node_modules/lodash-es/_isMaskable.js
var isMaskable = coreJsData_default ? isFunction_default : stubFalse_default;
var isMaskable_default = isMaskable;

// node_modules/lodash-es/isNative.js
var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.";
function isNative(value) {
  if (isMaskable_default(value)) {
    throw new Error(CORE_ERROR_TEXT);
  }
  return baseIsNative_default(value);
}
var isNative_default = isNative;

// node_modules/lodash-es/isNil.js
function isNil(value) {
  return value == null;
}
var isNil_default = isNil;

// node_modules/lodash-es/isNull.js
function isNull(value) {
  return value === null;
}
var isNull_default = isNull;

// node_modules/lodash-es/_baseIsRegExp.js
var regexpTag5 = "[object RegExp]";
function baseIsRegExp(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == regexpTag5;
}
var baseIsRegExp_default = baseIsRegExp;

// node_modules/lodash-es/isRegExp.js
var nodeIsRegExp = nodeUtil_default && nodeUtil_default.isRegExp;
var isRegExp = nodeIsRegExp ? baseUnary_default(nodeIsRegExp) : baseIsRegExp_default;
var isRegExp_default = isRegExp;

// node_modules/lodash-es/isSafeInteger.js
var MAX_SAFE_INTEGER3 = 9007199254740991;
function isSafeInteger(value) {
  return isInteger_default(value) && value >= -MAX_SAFE_INTEGER3 && value <= MAX_SAFE_INTEGER3;
}
var isSafeInteger_default = isSafeInteger;

// node_modules/lodash-es/isUndefined.js
function isUndefined(value) {
  return value === void 0;
}
var isUndefined_default = isUndefined;

// node_modules/lodash-es/isWeakMap.js
var weakMapTag4 = "[object WeakMap]";
function isWeakMap(value) {
  return isObjectLike_default(value) && getTag_default(value) == weakMapTag4;
}
var isWeakMap_default = isWeakMap;

// node_modules/lodash-es/isWeakSet.js
var weakSetTag = "[object WeakSet]";
function isWeakSet(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == weakSetTag;
}
var isWeakSet_default = isWeakSet;

// node_modules/lodash-es/iteratee.js
var CLONE_DEEP_FLAG5 = 1;
function iteratee(func) {
  return baseIteratee_default(typeof func == "function" ? func : baseClone_default(func, CLONE_DEEP_FLAG5));
}
var iteratee_default = iteratee;

// node_modules/lodash-es/join.js
var arrayProto2 = Array.prototype;
var nativeJoin = arrayProto2.join;
function join(array, separator) {
  return array == null ? "" : nativeJoin.call(array, separator);
}
var join_default = join;

// node_modules/lodash-es/kebabCase.js
var kebabCase = createCompounder_default(function(result2, word, index) {
  return result2 + (index ? "-" : "") + word.toLowerCase();
});
var kebabCase_default = kebabCase;

// node_modules/lodash-es/keyBy.js
var keyBy = createAggregator_default(function(result2, value, key) {
  baseAssignValue_default(result2, key, value);
});
var keyBy_default = keyBy;

// node_modules/lodash-es/_strictLastIndexOf.js
function strictLastIndexOf(array, value, fromIndex) {
  var index = fromIndex + 1;
  while (index--) {
    if (array[index] === value) {
      return index;
    }
  }
  return index;
}
var strictLastIndexOf_default = strictLastIndexOf;

// node_modules/lodash-es/lastIndexOf.js
var nativeMax12 = Math.max;
var nativeMin8 = Math.min;
function lastIndexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length;
  if (fromIndex !== void 0) {
    index = toInteger_default(fromIndex);
    index = index < 0 ? nativeMax12(length + index, 0) : nativeMin8(index, length - 1);
  }
  return value === value ? strictLastIndexOf_default(array, value, index) : baseFindIndex_default(array, baseIsNaN_default, index, true);
}
var lastIndexOf_default = lastIndexOf;

// node_modules/lodash-es/lowerCase.js
var lowerCase = createCompounder_default(function(result2, word, index) {
  return result2 + (index ? " " : "") + word.toLowerCase();
});
var lowerCase_default = lowerCase;

// node_modules/lodash-es/lowerFirst.js
var lowerFirst = createCaseFirst_default("toLowerCase");
var lowerFirst_default = lowerFirst;

// node_modules/lodash-es/_baseLt.js
function baseLt(value, other) {
  return value < other;
}
var baseLt_default = baseLt;

// node_modules/lodash-es/lt.js
var lt = createRelationalOperation_default(baseLt_default);
var lt_default = lt;

// node_modules/lodash-es/lte.js
var lte = createRelationalOperation_default(function(value, other) {
  return value <= other;
});
var lte_default = lte;

// node_modules/lodash-es/mapKeys.js
function mapKeys(object, iteratee2) {
  var result2 = {};
  iteratee2 = baseIteratee_default(iteratee2, 3);
  baseForOwn_default(object, function(value, key, object2) {
    baseAssignValue_default(result2, iteratee2(value, key, object2), value);
  });
  return result2;
}
var mapKeys_default = mapKeys;

// node_modules/lodash-es/mapValues.js
function mapValues(object, iteratee2) {
  var result2 = {};
  iteratee2 = baseIteratee_default(iteratee2, 3);
  baseForOwn_default(object, function(value, key, object2) {
    baseAssignValue_default(result2, key, iteratee2(value, key, object2));
  });
  return result2;
}
var mapValues_default = mapValues;

// node_modules/lodash-es/matches.js
var CLONE_DEEP_FLAG6 = 1;
function matches(source) {
  return baseMatches_default(baseClone_default(source, CLONE_DEEP_FLAG6));
}
var matches_default = matches;

// node_modules/lodash-es/matchesProperty.js
var CLONE_DEEP_FLAG7 = 1;
function matchesProperty(path, srcValue) {
  return baseMatchesProperty_default(path, baseClone_default(srcValue, CLONE_DEEP_FLAG7));
}
var matchesProperty_default = matchesProperty;

// node_modules/lodash-es/_baseExtremum.js
function baseExtremum(array, iteratee2, comparator) {
  var index = -1, length = array.length;
  while (++index < length) {
    var value = array[index], current = iteratee2(value);
    if (current != null && (computed === void 0 ? current === current && !isSymbol_default(current) : comparator(current, computed))) {
      var computed = current, result2 = value;
    }
  }
  return result2;
}
var baseExtremum_default = baseExtremum;

// node_modules/lodash-es/max.js
function max(array) {
  return array && array.length ? baseExtremum_default(array, identity_default, baseGt_default) : void 0;
}
var max_default = max;

// node_modules/lodash-es/maxBy.js
function maxBy(array, iteratee2) {
  return array && array.length ? baseExtremum_default(array, baseIteratee_default(iteratee2, 2), baseGt_default) : void 0;
}
var maxBy_default = maxBy;

// node_modules/lodash-es/_baseSum.js
function baseSum(array, iteratee2) {
  var result2, index = -1, length = array.length;
  while (++index < length) {
    var current = iteratee2(array[index]);
    if (current !== void 0) {
      result2 = result2 === void 0 ? current : result2 + current;
    }
  }
  return result2;
}
var baseSum_default = baseSum;

// node_modules/lodash-es/_baseMean.js
var NAN3 = 0 / 0;
function baseMean(array, iteratee2) {
  var length = array == null ? 0 : array.length;
  return length ? baseSum_default(array, iteratee2) / length : NAN3;
}
var baseMean_default = baseMean;

// node_modules/lodash-es/mean.js
function mean(array) {
  return baseMean_default(array, identity_default);
}
var mean_default = mean;

// node_modules/lodash-es/meanBy.js
function meanBy(array, iteratee2) {
  return baseMean_default(array, baseIteratee_default(iteratee2, 2));
}
var meanBy_default = meanBy;

// node_modules/lodash-es/merge.js
var merge = createAssigner_default(function(object, source, srcIndex) {
  baseMerge_default(object, source, srcIndex);
});
var merge_default = merge;

// node_modules/lodash-es/method.js
var method = baseRest_default(function(path, args) {
  return function(object) {
    return baseInvoke_default(object, path, args);
  };
});
var method_default = method;

// node_modules/lodash-es/methodOf.js
var methodOf = baseRest_default(function(object, args) {
  return function(path) {
    return baseInvoke_default(object, path, args);
  };
});
var methodOf_default = methodOf;

// node_modules/lodash-es/min.js
function min(array) {
  return array && array.length ? baseExtremum_default(array, identity_default, baseLt_default) : void 0;
}
var min_default = min;

// node_modules/lodash-es/minBy.js
function minBy(array, iteratee2) {
  return array && array.length ? baseExtremum_default(array, baseIteratee_default(iteratee2, 2), baseLt_default) : void 0;
}
var minBy_default = minBy;

// node_modules/lodash-es/mixin.js
function mixin(object, source, options) {
  var props = keys_default(source), methodNames = baseFunctions_default(source, props);
  var chain2 = !(isObject_default(options) && "chain" in options) || !!options.chain, isFunc = isFunction_default(object);
  arrayEach_default(methodNames, function(methodName) {
    var func = source[methodName];
    object[methodName] = func;
    if (isFunc) {
      object.prototype[methodName] = function() {
        var chainAll = this.__chain__;
        if (chain2 || chainAll) {
          var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray_default(this.__actions__);
          actions.push({ "func": func, "args": arguments, "thisArg": object });
          result2.__chain__ = chainAll;
          return result2;
        }
        return func.apply(object, arrayPush_default([this.value()], arguments));
      };
    }
  });
  return object;
}
var mixin_default = mixin;

// node_modules/lodash-es/multiply.js
var multiply = createMathOperation_default(function(multiplier, multiplicand) {
  return multiplier * multiplicand;
}, 1);
var multiply_default = multiply;

// node_modules/lodash-es/negate.js
var FUNC_ERROR_TEXT9 = "Expected a function";
function negate(predicate) {
  if (typeof predicate != "function") {
    throw new TypeError(FUNC_ERROR_TEXT9);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0:
        return !predicate.call(this);
      case 1:
        return !predicate.call(this, args[0]);
      case 2:
        return !predicate.call(this, args[0], args[1]);
      case 3:
        return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}
var negate_default = negate;

// node_modules/lodash-es/_iteratorToArray.js
function iteratorToArray(iterator) {
  var data, result2 = [];
  while (!(data = iterator.next()).done) {
    result2.push(data.value);
  }
  return result2;
}
var iteratorToArray_default = iteratorToArray;

// node_modules/lodash-es/toArray.js
var mapTag9 = "[object Map]";
var setTag9 = "[object Set]";
var symIterator = Symbol_default ? Symbol_default.iterator : void 0;
function toArray(value) {
  if (!value) {
    return [];
  }
  if (isArrayLike_default(value)) {
    return isString_default(value) ? stringToArray_default(value) : copyArray_default(value);
  }
  if (symIterator && value[symIterator]) {
    return iteratorToArray_default(value[symIterator]());
  }
  var tag = getTag_default(value), func = tag == mapTag9 ? mapToArray_default : tag == setTag9 ? setToArray_default : values_default;
  return func(value);
}
var toArray_default = toArray;

// node_modules/lodash-es/next.js
function wrapperNext() {
  if (this.__values__ === void 0) {
    this.__values__ = toArray_default(this.value());
  }
  var done = this.__index__ >= this.__values__.length, value = done ? void 0 : this.__values__[this.__index__++];
  return { "done": done, "value": value };
}
var next_default = wrapperNext;

// node_modules/lodash-es/_baseNth.js
function baseNth(array, n) {
  var length = array.length;
  if (!length) {
    return;
  }
  n += n < 0 ? length : 0;
  return isIndex_default(n, length) ? array[n] : void 0;
}
var baseNth_default = baseNth;

// node_modules/lodash-es/nth.js
function nth(array, n) {
  return array && array.length ? baseNth_default(array, toInteger_default(n)) : void 0;
}
var nth_default = nth;

// node_modules/lodash-es/nthArg.js
function nthArg(n) {
  n = toInteger_default(n);
  return baseRest_default(function(args) {
    return baseNth_default(args, n);
  });
}
var nthArg_default = nthArg;

// node_modules/lodash-es/_baseUnset.js
function baseUnset(object, path) {
  path = castPath_default(path, object);
  object = parent_default(object, path);
  return object == null || delete object[toKey_default(last_default(path))];
}
var baseUnset_default = baseUnset;

// node_modules/lodash-es/_customOmitClone.js
function customOmitClone(value) {
  return isPlainObject_default(value) ? void 0 : value;
}
var customOmitClone_default = customOmitClone;

// node_modules/lodash-es/omit.js
var CLONE_DEEP_FLAG8 = 1;
var CLONE_FLAT_FLAG2 = 2;
var CLONE_SYMBOLS_FLAG6 = 4;
var omit = flatRest_default(function(object, paths) {
  var result2 = {};
  if (object == null) {
    return result2;
  }
  var isDeep = false;
  paths = arrayMap_default(paths, function(path) {
    path = castPath_default(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject_default(object, getAllKeysIn_default(object), result2);
  if (isDeep) {
    result2 = baseClone_default(result2, CLONE_DEEP_FLAG8 | CLONE_FLAT_FLAG2 | CLONE_SYMBOLS_FLAG6, customOmitClone_default);
  }
  var length = paths.length;
  while (length--) {
    baseUnset_default(result2, paths[length]);
  }
  return result2;
});
var omit_default = omit;

// node_modules/lodash-es/_baseSet.js
function baseSet(object, path, value, customizer) {
  if (!isObject_default(object)) {
    return object;
  }
  path = castPath_default(path, object);
  var index = -1, length = path.length, lastIndex = length - 1, nested = object;
  while (nested != null && ++index < length) {
    var key = toKey_default(path[index]), newValue = value;
    if (key === "__proto__" || key === "constructor" || key === "prototype") {
      return object;
    }
    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : void 0;
      if (newValue === void 0) {
        newValue = isObject_default(objValue) ? objValue : isIndex_default(path[index + 1]) ? [] : {};
      }
    }
    assignValue_default(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}
var baseSet_default = baseSet;

// node_modules/lodash-es/_basePickBy.js
function basePickBy(object, paths, predicate) {
  var index = -1, length = paths.length, result2 = {};
  while (++index < length) {
    var path = paths[index], value = baseGet_default(object, path);
    if (predicate(value, path)) {
      baseSet_default(result2, castPath_default(path, object), value);
    }
  }
  return result2;
}
var basePickBy_default = basePickBy;

// node_modules/lodash-es/pickBy.js
function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }
  var props = arrayMap_default(getAllKeysIn_default(object), function(prop) {
    return [prop];
  });
  predicate = baseIteratee_default(predicate);
  return basePickBy_default(object, props, function(value, path) {
    return predicate(value, path[0]);
  });
}
var pickBy_default = pickBy;

// node_modules/lodash-es/omitBy.js
function omitBy(object, predicate) {
  return pickBy_default(object, negate_default(baseIteratee_default(predicate)));
}
var omitBy_default = omitBy;

// node_modules/lodash-es/once.js
function once(func) {
  return before_default(2, func);
}
var once_default = once;

// node_modules/lodash-es/_baseSortBy.js
function baseSortBy(array, comparer) {
  var length = array.length;
  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}
var baseSortBy_default = baseSortBy;

// node_modules/lodash-es/_compareAscending.js
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol_default(value);
    var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol_default(other);
    if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
      return 1;
    }
    if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}
var compareAscending_default = compareAscending;

// node_modules/lodash-es/_compareMultiple.js
function compareMultiple(object, other, orders) {
  var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
  while (++index < length) {
    var result2 = compareAscending_default(objCriteria[index], othCriteria[index]);
    if (result2) {
      if (index >= ordersLength) {
        return result2;
      }
      var order = orders[index];
      return result2 * (order == "desc" ? -1 : 1);
    }
  }
  return object.index - other.index;
}
var compareMultiple_default = compareMultiple;

// node_modules/lodash-es/_baseOrderBy.js
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap_default(iteratees, function(iteratee2) {
      if (isArray_default(iteratee2)) {
        return function(value) {
          return baseGet_default(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
        };
      }
      return iteratee2;
    });
  } else {
    iteratees = [identity_default];
  }
  var index = -1;
  iteratees = arrayMap_default(iteratees, baseUnary_default(baseIteratee_default));
  var result2 = baseMap_default(collection, function(value, key, collection2) {
    var criteria = arrayMap_default(iteratees, function(iteratee2) {
      return iteratee2(value);
    });
    return { "criteria": criteria, "index": ++index, "value": value };
  });
  return baseSortBy_default(result2, function(object, other) {
    return compareMultiple_default(object, other, orders);
  });
}
var baseOrderBy_default = baseOrderBy;

// node_modules/lodash-es/orderBy.js
function orderBy(collection, iteratees, orders, guard) {
  if (collection == null) {
    return [];
  }
  if (!isArray_default(iteratees)) {
    iteratees = iteratees == null ? [] : [iteratees];
  }
  orders = guard ? void 0 : orders;
  if (!isArray_default(orders)) {
    orders = orders == null ? [] : [orders];
  }
  return baseOrderBy_default(collection, iteratees, orders);
}
var orderBy_default = orderBy;

// node_modules/lodash-es/_createOver.js
function createOver(arrayFunc) {
  return flatRest_default(function(iteratees) {
    iteratees = arrayMap_default(iteratees, baseUnary_default(baseIteratee_default));
    return baseRest_default(function(args) {
      var thisArg = this;
      return arrayFunc(iteratees, function(iteratee2) {
        return apply_default(iteratee2, thisArg, args);
      });
    });
  });
}
var createOver_default = createOver;

// node_modules/lodash-es/over.js
var over = createOver_default(arrayMap_default);
var over_default = over;

// node_modules/lodash-es/_castRest.js
var castRest = baseRest_default;
var castRest_default = castRest;

// node_modules/lodash-es/overArgs.js
var nativeMin9 = Math.min;
var overArgs = castRest_default(function(func, transforms) {
  transforms = transforms.length == 1 && isArray_default(transforms[0]) ? arrayMap_default(transforms[0], baseUnary_default(baseIteratee_default)) : arrayMap_default(baseFlatten_default(transforms, 1), baseUnary_default(baseIteratee_default));
  var funcsLength = transforms.length;
  return baseRest_default(function(args) {
    var index = -1, length = nativeMin9(args.length, funcsLength);
    while (++index < length) {
      args[index] = transforms[index].call(this, args[index]);
    }
    return apply_default(func, this, args);
  });
});
var overArgs_default = overArgs;

// node_modules/lodash-es/overEvery.js
var overEvery = createOver_default(arrayEvery_default);
var overEvery_default = overEvery;

// node_modules/lodash-es/overSome.js
var overSome = createOver_default(arraySome_default);
var overSome_default = overSome;

// node_modules/lodash-es/_baseRepeat.js
var MAX_SAFE_INTEGER4 = 9007199254740991;
var nativeFloor = Math.floor;
function baseRepeat(string, n) {
  var result2 = "";
  if (!string || n < 1 || n > MAX_SAFE_INTEGER4) {
    return result2;
  }
  do {
    if (n % 2) {
      result2 += string;
    }
    n = nativeFloor(n / 2);
    if (n) {
      string += string;
    }
  } while (n);
  return result2;
}
var baseRepeat_default = baseRepeat;

// node_modules/lodash-es/_asciiSize.js
var asciiSize = baseProperty_default("length");
var asciiSize_default = asciiSize;

// node_modules/lodash-es/_unicodeSize.js
var rsAstralRange4 = "\\ud800-\\udfff";
var rsComboMarksRange5 = "\\u0300-\\u036f";
var reComboHalfMarksRange5 = "\\ufe20-\\ufe2f";
var rsComboSymbolsRange5 = "\\u20d0-\\u20ff";
var rsComboRange5 = rsComboMarksRange5 + reComboHalfMarksRange5 + rsComboSymbolsRange5;
var rsVarRange4 = "\\ufe0e\\ufe0f";
var rsAstral2 = "[" + rsAstralRange4 + "]";
var rsCombo4 = "[" + rsComboRange5 + "]";
var rsFitz3 = "\\ud83c[\\udffb-\\udfff]";
var rsModifier3 = "(?:" + rsCombo4 + "|" + rsFitz3 + ")";
var rsNonAstral3 = "[^" + rsAstralRange4 + "]";
var rsRegional3 = "(?:\\ud83c[\\udde6-\\uddff]){2}";
var rsSurrPair3 = "[\\ud800-\\udbff][\\udc00-\\udfff]";
var rsZWJ4 = "\\u200d";
var reOptMod3 = rsModifier3 + "?";
var rsOptVar3 = "[" + rsVarRange4 + "]?";
var rsOptJoin3 = "(?:" + rsZWJ4 + "(?:" + [rsNonAstral3, rsRegional3, rsSurrPair3].join("|") + ")" + rsOptVar3 + reOptMod3 + ")*";
var rsSeq3 = rsOptVar3 + reOptMod3 + rsOptJoin3;
var rsSymbol2 = "(?:" + [rsNonAstral3 + rsCombo4 + "?", rsCombo4, rsRegional3, rsSurrPair3, rsAstral2].join("|") + ")";
var reUnicode2 = RegExp(rsFitz3 + "(?=" + rsFitz3 + ")|" + rsSymbol2 + rsSeq3, "g");
function unicodeSize(string) {
  var result2 = reUnicode2.lastIndex = 0;
  while (reUnicode2.test(string)) {
    ++result2;
  }
  return result2;
}
var unicodeSize_default = unicodeSize;

// node_modules/lodash-es/_stringSize.js
function stringSize(string) {
  return hasUnicode_default(string) ? unicodeSize_default(string) : asciiSize_default(string);
}
var stringSize_default = stringSize;

// node_modules/lodash-es/_createPadding.js
var nativeCeil2 = Math.ceil;
function createPadding(length, chars) {
  chars = chars === void 0 ? " " : baseToString_default(chars);
  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat_default(chars, length) : chars;
  }
  var result2 = baseRepeat_default(chars, nativeCeil2(length / stringSize_default(chars)));
  return hasUnicode_default(chars) ? castSlice_default(stringToArray_default(result2), 0, length).join("") : result2.slice(0, length);
}
var createPadding_default = createPadding;

// node_modules/lodash-es/pad.js
var nativeCeil3 = Math.ceil;
var nativeFloor2 = Math.floor;
function pad(string, length, chars) {
  string = toString_default(string);
  length = toInteger_default(length);
  var strLength = length ? stringSize_default(string) : 0;
  if (!length || strLength >= length) {
    return string;
  }
  var mid = (length - strLength) / 2;
  return createPadding_default(nativeFloor2(mid), chars) + string + createPadding_default(nativeCeil3(mid), chars);
}
var pad_default = pad;

// node_modules/lodash-es/padEnd.js
function padEnd(string, length, chars) {
  string = toString_default(string);
  length = toInteger_default(length);
  var strLength = length ? stringSize_default(string) : 0;
  return length && strLength < length ? string + createPadding_default(length - strLength, chars) : string;
}
var padEnd_default = padEnd;

// node_modules/lodash-es/padStart.js
function padStart(string, length, chars) {
  string = toString_default(string);
  length = toInteger_default(length);
  var strLength = length ? stringSize_default(string) : 0;
  return length && strLength < length ? createPadding_default(length - strLength, chars) + string : string;
}
var padStart_default = padStart;

// node_modules/lodash-es/parseInt.js
var reTrimStart2 = /^\s+/;
var nativeParseInt = root_default.parseInt;
function parseInt2(string, radix, guard) {
  if (guard || radix == null) {
    radix = 0;
  } else if (radix) {
    radix = +radix;
  }
  return nativeParseInt(toString_default(string).replace(reTrimStart2, ""), radix || 0);
}
var parseInt_default = parseInt2;

// node_modules/lodash-es/partial.js
var WRAP_PARTIAL_FLAG7 = 32;
var partial = baseRest_default(function(func, partials) {
  var holders = replaceHolders_default(partials, getHolder_default(partial));
  return createWrap_default(func, WRAP_PARTIAL_FLAG7, void 0, partials, holders);
});
partial.placeholder = {};
var partial_default = partial;

// node_modules/lodash-es/partialRight.js
var WRAP_PARTIAL_RIGHT_FLAG4 = 64;
var partialRight = baseRest_default(function(func, partials) {
  var holders = replaceHolders_default(partials, getHolder_default(partialRight));
  return createWrap_default(func, WRAP_PARTIAL_RIGHT_FLAG4, void 0, partials, holders);
});
partialRight.placeholder = {};
var partialRight_default = partialRight;

// node_modules/lodash-es/partition.js
var partition = createAggregator_default(function(result2, value, key) {
  result2[key ? 0 : 1].push(value);
}, function() {
  return [[], []];
});
var partition_default = partition;

// node_modules/lodash-es/_basePick.js
function basePick(object, paths) {
  return basePickBy_default(object, paths, function(value, path) {
    return hasIn_default(object, path);
  });
}
var basePick_default = basePick;

// node_modules/lodash-es/pick.js
var pick = flatRest_default(function(object, paths) {
  return object == null ? {} : basePick_default(object, paths);
});
var pick_default = pick;

// node_modules/lodash-es/plant.js
function wrapperPlant(value) {
  var result2, parent2 = this;
  while (parent2 instanceof baseLodash_default) {
    var clone2 = wrapperClone_default(parent2);
    clone2.__index__ = 0;
    clone2.__values__ = void 0;
    if (result2) {
      previous.__wrapped__ = clone2;
    } else {
      result2 = clone2;
    }
    var previous = clone2;
    parent2 = parent2.__wrapped__;
  }
  previous.__wrapped__ = value;
  return result2;
}
var plant_default = wrapperPlant;

// node_modules/lodash-es/propertyOf.js
function propertyOf(object) {
  return function(path) {
    return object == null ? void 0 : baseGet_default(object, path);
  };
}
var propertyOf_default = propertyOf;

// node_modules/lodash-es/_baseIndexOfWith.js
function baseIndexOfWith(array, value, fromIndex, comparator) {
  var index = fromIndex - 1, length = array.length;
  while (++index < length) {
    if (comparator(array[index], value)) {
      return index;
    }
  }
  return -1;
}
var baseIndexOfWith_default = baseIndexOfWith;

// node_modules/lodash-es/_basePullAll.js
var arrayProto3 = Array.prototype;
var splice2 = arrayProto3.splice;
function basePullAll(array, values2, iteratee2, comparator) {
  var indexOf2 = comparator ? baseIndexOfWith_default : baseIndexOf_default, index = -1, length = values2.length, seen = array;
  if (array === values2) {
    values2 = copyArray_default(values2);
  }
  if (iteratee2) {
    seen = arrayMap_default(array, baseUnary_default(iteratee2));
  }
  while (++index < length) {
    var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
    while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
      if (seen !== array) {
        splice2.call(seen, fromIndex, 1);
      }
      splice2.call(array, fromIndex, 1);
    }
  }
  return array;
}
var basePullAll_default = basePullAll;

// node_modules/lodash-es/pullAll.js
function pullAll(array, values2) {
  return array && array.length && values2 && values2.length ? basePullAll_default(array, values2) : array;
}
var pullAll_default = pullAll;

// node_modules/lodash-es/pull.js
var pull = baseRest_default(pullAll_default);
var pull_default = pull;

// node_modules/lodash-es/pullAllBy.js
function pullAllBy(array, values2, iteratee2) {
  return array && array.length && values2 && values2.length ? basePullAll_default(array, values2, baseIteratee_default(iteratee2, 2)) : array;
}
var pullAllBy_default = pullAllBy;

// node_modules/lodash-es/pullAllWith.js
function pullAllWith(array, values2, comparator) {
  return array && array.length && values2 && values2.length ? basePullAll_default(array, values2, void 0, comparator) : array;
}
var pullAllWith_default = pullAllWith;

// node_modules/lodash-es/_basePullAt.js
var arrayProto4 = Array.prototype;
var splice3 = arrayProto4.splice;
function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0, lastIndex = length - 1;
  while (length--) {
    var index = indexes[length];
    if (length == lastIndex || index !== previous) {
      var previous = index;
      if (isIndex_default(index)) {
        splice3.call(array, index, 1);
      } else {
        baseUnset_default(array, index);
      }
    }
  }
  return array;
}
var basePullAt_default = basePullAt;

// node_modules/lodash-es/pullAt.js
var pullAt = flatRest_default(function(array, indexes) {
  var length = array == null ? 0 : array.length, result2 = baseAt_default(array, indexes);
  basePullAt_default(array, arrayMap_default(indexes, function(index) {
    return isIndex_default(index, length) ? +index : index;
  }).sort(compareAscending_default));
  return result2;
});
var pullAt_default = pullAt;

// node_modules/lodash-es/_baseRandom.js
var nativeFloor3 = Math.floor;
var nativeRandom = Math.random;
function baseRandom(lower, upper) {
  return lower + nativeFloor3(nativeRandom() * (upper - lower + 1));
}
var baseRandom_default = baseRandom;

// node_modules/lodash-es/random.js
var freeParseFloat = parseFloat;
var nativeMin10 = Math.min;
var nativeRandom2 = Math.random;
function random(lower, upper, floating) {
  if (floating && typeof floating != "boolean" && isIterateeCall_default(lower, upper, floating)) {
    upper = floating = void 0;
  }
  if (floating === void 0) {
    if (typeof upper == "boolean") {
      floating = upper;
      upper = void 0;
    } else if (typeof lower == "boolean") {
      floating = lower;
      lower = void 0;
    }
  }
  if (lower === void 0 && upper === void 0) {
    lower = 0;
    upper = 1;
  } else {
    lower = toFinite_default(lower);
    if (upper === void 0) {
      upper = lower;
      lower = 0;
    } else {
      upper = toFinite_default(upper);
    }
  }
  if (lower > upper) {
    var temp = lower;
    lower = upper;
    upper = temp;
  }
  if (floating || lower % 1 || upper % 1) {
    var rand = nativeRandom2();
    return nativeMin10(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
  }
  return baseRandom_default(lower, upper);
}
var random_default = random;

// node_modules/lodash-es/_baseRange.js
var nativeCeil4 = Math.ceil;
var nativeMax13 = Math.max;
function baseRange(start, end, step, fromRight) {
  var index = -1, length = nativeMax13(nativeCeil4((end - start) / (step || 1)), 0), result2 = Array(length);
  while (length--) {
    result2[fromRight ? length : ++index] = start;
    start += step;
  }
  return result2;
}
var baseRange_default = baseRange;

// node_modules/lodash-es/_createRange.js
function createRange(fromRight) {
  return function(start, end, step) {
    if (step && typeof step != "number" && isIterateeCall_default(start, end, step)) {
      end = step = void 0;
    }
    start = toFinite_default(start);
    if (end === void 0) {
      end = start;
      start = 0;
    } else {
      end = toFinite_default(end);
    }
    step = step === void 0 ? start < end ? 1 : -1 : toFinite_default(step);
    return baseRange_default(start, end, step, fromRight);
  };
}
var createRange_default = createRange;

// node_modules/lodash-es/range.js
var range2 = createRange_default();
var range_default = range2;

// node_modules/lodash-es/rangeRight.js
var rangeRight = createRange_default(true);
var rangeRight_default = rangeRight;

// node_modules/lodash-es/rearg.js
var WRAP_REARG_FLAG4 = 256;
var rearg = flatRest_default(function(func, indexes) {
  return createWrap_default(func, WRAP_REARG_FLAG4, void 0, void 0, void 0, indexes);
});
var rearg_default = rearg;

// node_modules/lodash-es/_baseReduce.js
function baseReduce(collection, iteratee2, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection2) {
    accumulator = initAccum ? (initAccum = false, value) : iteratee2(accumulator, value, index, collection2);
  });
  return accumulator;
}
var baseReduce_default = baseReduce;

// node_modules/lodash-es/reduce.js
function reduce(collection, iteratee2, accumulator) {
  var func = isArray_default(collection) ? arrayReduce_default : baseReduce_default, initAccum = arguments.length < 3;
  return func(collection, baseIteratee_default(iteratee2, 4), accumulator, initAccum, baseEach_default);
}
var reduce_default = reduce;

// node_modules/lodash-es/_arrayReduceRight.js
function arrayReduceRight(array, iteratee2, accumulator, initAccum) {
  var length = array == null ? 0 : array.length;
  if (initAccum && length) {
    accumulator = array[--length];
  }
  while (length--) {
    accumulator = iteratee2(accumulator, array[length], length, array);
  }
  return accumulator;
}
var arrayReduceRight_default = arrayReduceRight;

// node_modules/lodash-es/reduceRight.js
function reduceRight(collection, iteratee2, accumulator) {
  var func = isArray_default(collection) ? arrayReduceRight_default : baseReduce_default, initAccum = arguments.length < 3;
  return func(collection, baseIteratee_default(iteratee2, 4), accumulator, initAccum, baseEachRight_default);
}
var reduceRight_default = reduceRight;

// node_modules/lodash-es/reject.js
function reject(collection, predicate) {
  var func = isArray_default(collection) ? arrayFilter_default : baseFilter_default;
  return func(collection, negate_default(baseIteratee_default(predicate, 3)));
}
var reject_default = reject;

// node_modules/lodash-es/remove.js
function remove(array, predicate) {
  var result2 = [];
  if (!(array && array.length)) {
    return result2;
  }
  var index = -1, indexes = [], length = array.length;
  predicate = baseIteratee_default(predicate, 3);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result2.push(value);
      indexes.push(index);
    }
  }
  basePullAt_default(array, indexes);
  return result2;
}
var remove_default = remove;

// node_modules/lodash-es/repeat.js
function repeat2(string, n, guard) {
  if (guard ? isIterateeCall_default(string, n, guard) : n === void 0) {
    n = 1;
  } else {
    n = toInteger_default(n);
  }
  return baseRepeat_default(toString_default(string), n);
}
var repeat_default = repeat2;

// node_modules/lodash-es/replace.js
function replace() {
  var args = arguments, string = toString_default(args[0]);
  return args.length < 3 ? string : string.replace(args[1], args[2]);
}
var replace_default = replace;

// node_modules/lodash-es/rest.js
var FUNC_ERROR_TEXT10 = "Expected a function";
function rest(func, start) {
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT10);
  }
  start = start === void 0 ? start : toInteger_default(start);
  return baseRest_default(func, start);
}
var rest_default = rest;

// node_modules/lodash-es/result.js
function result(object, path, defaultValue) {
  path = castPath_default(path, object);
  var index = -1, length = path.length;
  if (!length) {
    length = 1;
    object = void 0;
  }
  while (++index < length) {
    var value = object == null ? void 0 : object[toKey_default(path[index])];
    if (value === void 0) {
      index = length;
      value = defaultValue;
    }
    object = isFunction_default(value) ? value.call(object) : value;
  }
  return object;
}
var result_default = result;

// node_modules/lodash-es/reverse.js
var arrayProto5 = Array.prototype;
var nativeReverse = arrayProto5.reverse;
function reverse(array) {
  return array == null ? array : nativeReverse.call(array);
}
var reverse_default = reverse;

// node_modules/lodash-es/round.js
var round = createRound_default("round");
var round_default = round;

// node_modules/lodash-es/_arraySample.js
function arraySample(array) {
  var length = array.length;
  return length ? array[baseRandom_default(0, length - 1)] : void 0;
}
var arraySample_default = arraySample;

// node_modules/lodash-es/_baseSample.js
function baseSample(collection) {
  return arraySample_default(values_default(collection));
}
var baseSample_default = baseSample;

// node_modules/lodash-es/sample.js
function sample(collection) {
  var func = isArray_default(collection) ? arraySample_default : baseSample_default;
  return func(collection);
}
var sample_default = sample;

// node_modules/lodash-es/_shuffleSelf.js
function shuffleSelf(array, size2) {
  var index = -1, length = array.length, lastIndex = length - 1;
  size2 = size2 === void 0 ? length : size2;
  while (++index < size2) {
    var rand = baseRandom_default(index, lastIndex), value = array[rand];
    array[rand] = array[index];
    array[index] = value;
  }
  array.length = size2;
  return array;
}
var shuffleSelf_default = shuffleSelf;

// node_modules/lodash-es/_arraySampleSize.js
function arraySampleSize(array, n) {
  return shuffleSelf_default(copyArray_default(array), baseClamp_default(n, 0, array.length));
}
var arraySampleSize_default = arraySampleSize;

// node_modules/lodash-es/_baseSampleSize.js
function baseSampleSize(collection, n) {
  var array = values_default(collection);
  return shuffleSelf_default(array, baseClamp_default(n, 0, array.length));
}
var baseSampleSize_default = baseSampleSize;

// node_modules/lodash-es/sampleSize.js
function sampleSize(collection, n, guard) {
  if (guard ? isIterateeCall_default(collection, n, guard) : n === void 0) {
    n = 1;
  } else {
    n = toInteger_default(n);
  }
  var func = isArray_default(collection) ? arraySampleSize_default : baseSampleSize_default;
  return func(collection, n);
}
var sampleSize_default = sampleSize;

// node_modules/lodash-es/set.js
function set(object, path, value) {
  return object == null ? object : baseSet_default(object, path, value);
}
var set_default = set;

// node_modules/lodash-es/setWith.js
function setWith(object, path, value, customizer) {
  customizer = typeof customizer == "function" ? customizer : void 0;
  return object == null ? object : baseSet_default(object, path, value, customizer);
}
var setWith_default = setWith;

// node_modules/lodash-es/_arrayShuffle.js
function arrayShuffle(array) {
  return shuffleSelf_default(copyArray_default(array));
}
var arrayShuffle_default = arrayShuffle;

// node_modules/lodash-es/_baseShuffle.js
function baseShuffle(collection) {
  return shuffleSelf_default(values_default(collection));
}
var baseShuffle_default = baseShuffle;

// node_modules/lodash-es/shuffle.js
function shuffle(collection) {
  var func = isArray_default(collection) ? arrayShuffle_default : baseShuffle_default;
  return func(collection);
}
var shuffle_default = shuffle;

// node_modules/lodash-es/size.js
var mapTag10 = "[object Map]";
var setTag10 = "[object Set]";
function size(collection) {
  if (collection == null) {
    return 0;
  }
  if (isArrayLike_default(collection)) {
    return isString_default(collection) ? stringSize_default(collection) : collection.length;
  }
  var tag = getTag_default(collection);
  if (tag == mapTag10 || tag == setTag10) {
    return collection.size;
  }
  return baseKeys_default(collection).length;
}
var size_default = size;

// node_modules/lodash-es/slice.js
function slice(array, start, end) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  if (end && typeof end != "number" && isIterateeCall_default(array, start, end)) {
    start = 0;
    end = length;
  } else {
    start = start == null ? 0 : toInteger_default(start);
    end = end === void 0 ? length : toInteger_default(end);
  }
  return baseSlice_default(array, start, end);
}
var slice_default = slice;

// node_modules/lodash-es/snakeCase.js
var snakeCase = createCompounder_default(function(result2, word, index) {
  return result2 + (index ? "_" : "") + word.toLowerCase();
});
var snakeCase_default = snakeCase;

// node_modules/lodash-es/_baseSome.js
function baseSome(collection, predicate) {
  var result2;
  baseEach_default(collection, function(value, index, collection2) {
    result2 = predicate(value, index, collection2);
    return !result2;
  });
  return !!result2;
}
var baseSome_default = baseSome;

// node_modules/lodash-es/some.js
function some(collection, predicate, guard) {
  var func = isArray_default(collection) ? arraySome_default : baseSome_default;
  if (guard && isIterateeCall_default(collection, predicate, guard)) {
    predicate = void 0;
  }
  return func(collection, baseIteratee_default(predicate, 3));
}
var some_default = some;

// node_modules/lodash-es/sortBy.js
var sortBy = baseRest_default(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall_default(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall_default(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy_default(collection, baseFlatten_default(iteratees, 1), []);
});
var sortBy_default = sortBy;

// node_modules/lodash-es/_baseSortedIndexBy.js
var MAX_ARRAY_LENGTH3 = 4294967295;
var MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH3 - 1;
var nativeFloor4 = Math.floor;
var nativeMin11 = Math.min;
function baseSortedIndexBy(array, value, iteratee2, retHighest) {
  var low = 0, high = array == null ? 0 : array.length;
  if (high === 0) {
    return 0;
  }
  value = iteratee2(value);
  var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol_default(value), valIsUndefined = value === void 0;
  while (low < high) {
    var mid = nativeFloor4((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== void 0, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol_default(computed);
    if (valIsNaN) {
      var setLow = retHighest || othIsReflexive;
    } else if (valIsUndefined) {
      setLow = othIsReflexive && (retHighest || othIsDefined);
    } else if (valIsNull) {
      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
    } else if (valIsSymbol) {
      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
    } else if (othIsNull || othIsSymbol) {
      setLow = false;
    } else {
      setLow = retHighest ? computed <= value : computed < value;
    }
    if (setLow) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }
  return nativeMin11(high, MAX_ARRAY_INDEX);
}
var baseSortedIndexBy_default = baseSortedIndexBy;

// node_modules/lodash-es/_baseSortedIndex.js
var MAX_ARRAY_LENGTH4 = 4294967295;
var HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH4 >>> 1;
function baseSortedIndex(array, value, retHighest) {
  var low = 0, high = array == null ? low : array.length;
  if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    while (low < high) {
      var mid = low + high >>> 1, computed = array[mid];
      if (computed !== null && !isSymbol_default(computed) && (retHighest ? computed <= value : computed < value)) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return high;
  }
  return baseSortedIndexBy_default(array, value, identity_default, retHighest);
}
var baseSortedIndex_default = baseSortedIndex;

// node_modules/lodash-es/sortedIndex.js
function sortedIndex(array, value) {
  return baseSortedIndex_default(array, value);
}
var sortedIndex_default = sortedIndex;

// node_modules/lodash-es/sortedIndexBy.js
function sortedIndexBy(array, value, iteratee2) {
  return baseSortedIndexBy_default(array, value, baseIteratee_default(iteratee2, 2));
}
var sortedIndexBy_default = sortedIndexBy;

// node_modules/lodash-es/sortedIndexOf.js
function sortedIndexOf(array, value) {
  var length = array == null ? 0 : array.length;
  if (length) {
    var index = baseSortedIndex_default(array, value);
    if (index < length && eq_default(array[index], value)) {
      return index;
    }
  }
  return -1;
}
var sortedIndexOf_default = sortedIndexOf;

// node_modules/lodash-es/sortedLastIndex.js
function sortedLastIndex(array, value) {
  return baseSortedIndex_default(array, value, true);
}
var sortedLastIndex_default = sortedLastIndex;

// node_modules/lodash-es/sortedLastIndexBy.js
function sortedLastIndexBy(array, value, iteratee2) {
  return baseSortedIndexBy_default(array, value, baseIteratee_default(iteratee2, 2), true);
}
var sortedLastIndexBy_default = sortedLastIndexBy;

// node_modules/lodash-es/sortedLastIndexOf.js
function sortedLastIndexOf(array, value) {
  var length = array == null ? 0 : array.length;
  if (length) {
    var index = baseSortedIndex_default(array, value, true) - 1;
    if (eq_default(array[index], value)) {
      return index;
    }
  }
  return -1;
}
var sortedLastIndexOf_default = sortedLastIndexOf;

// node_modules/lodash-es/_baseSortedUniq.js
function baseSortedUniq(array, iteratee2) {
  var index = -1, length = array.length, resIndex = 0, result2 = [];
  while (++index < length) {
    var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
    if (!index || !eq_default(computed, seen)) {
      var seen = computed;
      result2[resIndex++] = value === 0 ? 0 : value;
    }
  }
  return result2;
}
var baseSortedUniq_default = baseSortedUniq;

// node_modules/lodash-es/sortedUniq.js
function sortedUniq(array) {
  return array && array.length ? baseSortedUniq_default(array) : [];
}
var sortedUniq_default = sortedUniq;

// node_modules/lodash-es/sortedUniqBy.js
function sortedUniqBy(array, iteratee2) {
  return array && array.length ? baseSortedUniq_default(array, baseIteratee_default(iteratee2, 2)) : [];
}
var sortedUniqBy_default = sortedUniqBy;

// node_modules/lodash-es/split.js
var MAX_ARRAY_LENGTH5 = 4294967295;
function split(string, separator, limit2) {
  if (limit2 && typeof limit2 != "number" && isIterateeCall_default(string, separator, limit2)) {
    separator = limit2 = void 0;
  }
  limit2 = limit2 === void 0 ? MAX_ARRAY_LENGTH5 : limit2 >>> 0;
  if (!limit2) {
    return [];
  }
  string = toString_default(string);
  if (string && (typeof separator == "string" || separator != null && !isRegExp_default(separator))) {
    separator = baseToString_default(separator);
    if (!separator && hasUnicode_default(string)) {
      return castSlice_default(stringToArray_default(string), 0, limit2);
    }
  }
  return string.split(separator, limit2);
}
var split_default = split;

// node_modules/lodash-es/spread.js
var FUNC_ERROR_TEXT11 = "Expected a function";
var nativeMax14 = Math.max;
function spread(func, start) {
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT11);
  }
  start = start == null ? 0 : nativeMax14(toInteger_default(start), 0);
  return baseRest_default(function(args) {
    var array = args[start], otherArgs = castSlice_default(args, 0, start);
    if (array) {
      arrayPush_default(otherArgs, array);
    }
    return apply_default(func, this, otherArgs);
  });
}
var spread_default = spread;

// node_modules/lodash-es/startCase.js
var startCase = createCompounder_default(function(result2, word, index) {
  return result2 + (index ? " " : "") + upperFirst_default(word);
});
var startCase_default = startCase;

// node_modules/lodash-es/startsWith.js
function startsWith(string, target, position) {
  string = toString_default(string);
  position = position == null ? 0 : baseClamp_default(toInteger_default(position), 0, string.length);
  target = baseToString_default(target);
  return string.slice(position, position + target.length) == target;
}
var startsWith_default = startsWith;

// node_modules/lodash-es/stubObject.js
function stubObject() {
  return {};
}
var stubObject_default = stubObject;

// node_modules/lodash-es/stubString.js
function stubString() {
  return "";
}
var stubString_default = stubString;

// node_modules/lodash-es/stubTrue.js
function stubTrue() {
  return true;
}
var stubTrue_default = stubTrue;

// node_modules/lodash-es/subtract.js
var subtract = createMathOperation_default(function(minuend, subtrahend) {
  return minuend - subtrahend;
}, 0);
var subtract_default = subtract;

// node_modules/lodash-es/sum.js
function sum(array) {
  return array && array.length ? baseSum_default(array, identity_default) : 0;
}
var sum_default = sum;

// node_modules/lodash-es/sumBy.js
function sumBy(array, iteratee2) {
  return array && array.length ? baseSum_default(array, baseIteratee_default(iteratee2, 2)) : 0;
}
var sumBy_default = sumBy;

// node_modules/lodash-es/tail.js
function tail(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseSlice_default(array, 1, length) : [];
}
var tail_default = tail;

// node_modules/lodash-es/take.js
function take(array, n, guard) {
  if (!(array && array.length)) {
    return [];
  }
  n = guard || n === void 0 ? 1 : toInteger_default(n);
  return baseSlice_default(array, 0, n < 0 ? 0 : n);
}
var take_default = take;

// node_modules/lodash-es/takeRight.js
function takeRight(array, n, guard) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  n = guard || n === void 0 ? 1 : toInteger_default(n);
  n = length - n;
  return baseSlice_default(array, n < 0 ? 0 : n, length);
}
var takeRight_default = takeRight;

// node_modules/lodash-es/takeRightWhile.js
function takeRightWhile(array, predicate) {
  return array && array.length ? baseWhile_default(array, baseIteratee_default(predicate, 3), false, true) : [];
}
var takeRightWhile_default = takeRightWhile;

// node_modules/lodash-es/takeWhile.js
function takeWhile(array, predicate) {
  return array && array.length ? baseWhile_default(array, baseIteratee_default(predicate, 3)) : [];
}
var takeWhile_default = takeWhile;

// node_modules/lodash-es/tap.js
function tap(value, interceptor) {
  interceptor(value);
  return value;
}
var tap_default = tap;

// node_modules/lodash-es/_customDefaultsAssignIn.js
var objectProto27 = Object.prototype;
var hasOwnProperty23 = objectProto27.hasOwnProperty;
function customDefaultsAssignIn(objValue, srcValue, key, object) {
  if (objValue === void 0 || eq_default(objValue, objectProto27[key]) && !hasOwnProperty23.call(object, key)) {
    return srcValue;
  }
  return objValue;
}
var customDefaultsAssignIn_default = customDefaultsAssignIn;

// node_modules/lodash-es/_escapeStringChar.js
var stringEscapes = {
  "\\": "\\",
  "'": "'",
  "\n": "n",
  "\r": "r",
  "\u2028": "u2028",
  "\u2029": "u2029"
};
function escapeStringChar(chr) {
  return "\\" + stringEscapes[chr];
}
var escapeStringChar_default = escapeStringChar;

// node_modules/lodash-es/_reInterpolate.js
var reInterpolate = /<%=([\s\S]+?)%>/g;
var reInterpolate_default = reInterpolate;

// node_modules/lodash-es/_reEscape.js
var reEscape = /<%-([\s\S]+?)%>/g;
var reEscape_default = reEscape;

// node_modules/lodash-es/_reEvaluate.js
var reEvaluate = /<%([\s\S]+?)%>/g;
var reEvaluate_default = reEvaluate;

// node_modules/lodash-es/templateSettings.js
var templateSettings = {
  /**
   * Used to detect `data` property values to be HTML-escaped.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  "escape": reEscape_default,
  /**
   * Used to detect code to be evaluated.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  "evaluate": reEvaluate_default,
  /**
   * Used to detect `data` property values to inject.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  "interpolate": reInterpolate_default,
  /**
   * Used to reference the data object in the template text.
   *
   * @memberOf _.templateSettings
   * @type {string}
   */
  "variable": "",
  /**
   * Used to import variables into the compiled template.
   *
   * @memberOf _.templateSettings
   * @type {Object}
   */
  "imports": {
    /**
     * A reference to the `lodash` function.
     *
     * @memberOf _.templateSettings.imports
     * @type {Function}
     */
    "_": { "escape": escape_default }
  }
};
var templateSettings_default = templateSettings;

// node_modules/lodash-es/template.js
var INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
var reEmptyStringLeading = /\b__p \+= '';/g;
var reEmptyStringMiddle = /\b(__p \+=) '' \+/g;
var reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
var reNoMatch = /($^)/;
var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
var objectProto28 = Object.prototype;
var hasOwnProperty24 = objectProto28.hasOwnProperty;
function template(string, options, guard) {
  var settings = templateSettings_default.imports._.templateSettings || templateSettings_default;
  if (guard && isIterateeCall_default(string, options, guard)) {
    options = void 0;
  }
  string = toString_default(string);
  options = assignInWith_default({}, options, settings, customDefaultsAssignIn_default);
  var imports = assignInWith_default({}, options.imports, settings.imports, customDefaultsAssignIn_default), importsKeys = keys_default(imports), importsValues = baseValues_default(imports, importsKeys);
  var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
  var reDelimiters = RegExp(
    (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate_default ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
    "g"
  );
  var sourceURL = hasOwnProperty24.call(options, "sourceURL") ? "//# sourceURL=" + (options.sourceURL + "").replace(/\s/g, " ") + "\n" : "";
  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    interpolateValue || (interpolateValue = esTemplateValue);
    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar_default);
    if (escapeValue) {
      isEscaping = true;
      source += "' +\n__e(" + escapeValue + ") +\n'";
    }
    if (evaluateValue) {
      isEvaluating = true;
      source += "';\n" + evaluateValue + ";\n__p += '";
    }
    if (interpolateValue) {
      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    }
    index = offset + match.length;
    return match;
  });
  source += "';\n";
  var variable = hasOwnProperty24.call(options, "variable") && options.variable;
  if (!variable) {
    source = "with (obj) {\n" + source + "\n}\n";
  } else if (reForbiddenIdentifierChars.test(variable)) {
    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
  }
  source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
  source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
  var result2 = attempt_default(function() {
    return Function(importsKeys, sourceURL + "return " + source).apply(void 0, importsValues);
  });
  result2.source = source;
  if (isError_default(result2)) {
    throw result2;
  }
  return result2;
}
var template_default = template;

// node_modules/lodash-es/throttle.js
var FUNC_ERROR_TEXT12 = "Expected a function";
function throttle(func, wait, options) {
  var leading = true, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT12);
  }
  if (isObject_default(options)) {
    leading = "leading" in options ? !!options.leading : leading;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  return debounce_default(func, wait, {
    "leading": leading,
    "maxWait": wait,
    "trailing": trailing
  });
}
var throttle_default = throttle;

// node_modules/lodash-es/thru.js
function thru(value, interceptor) {
  return interceptor(value);
}
var thru_default = thru;

// node_modules/lodash-es/times.js
var MAX_SAFE_INTEGER5 = 9007199254740991;
var MAX_ARRAY_LENGTH6 = 4294967295;
var nativeMin12 = Math.min;
function times(n, iteratee2) {
  n = toInteger_default(n);
  if (n < 1 || n > MAX_SAFE_INTEGER5) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH6, length = nativeMin12(n, MAX_ARRAY_LENGTH6);
  iteratee2 = castFunction_default(iteratee2);
  n -= MAX_ARRAY_LENGTH6;
  var result2 = baseTimes_default(length, iteratee2);
  while (++index < n) {
    iteratee2(index);
  }
  return result2;
}
var times_default = times;

// node_modules/lodash-es/toIterator.js
function wrapperToIterator() {
  return this;
}
var toIterator_default = wrapperToIterator;

// node_modules/lodash-es/_baseWrapperValue.js
function baseWrapperValue(value, actions) {
  var result2 = value;
  if (result2 instanceof LazyWrapper_default) {
    result2 = result2.value();
  }
  return arrayReduce_default(actions, function(result3, action) {
    return action.func.apply(action.thisArg, arrayPush_default([result3], action.args));
  }, result2);
}
var baseWrapperValue_default = baseWrapperValue;

// node_modules/lodash-es/wrapperValue.js
function wrapperValue() {
  return baseWrapperValue_default(this.__wrapped__, this.__actions__);
}
var wrapperValue_default = wrapperValue;

// node_modules/lodash-es/toLower.js
function toLower(value) {
  return toString_default(value).toLowerCase();
}
var toLower_default = toLower;

// node_modules/lodash-es/toPath.js
function toPath(value) {
  if (isArray_default(value)) {
    return arrayMap_default(value, toKey_default);
  }
  return isSymbol_default(value) ? [value] : copyArray_default(stringToPath_default(toString_default(value)));
}
var toPath_default = toPath;

// node_modules/lodash-es/toSafeInteger.js
var MAX_SAFE_INTEGER6 = 9007199254740991;
function toSafeInteger(value) {
  return value ? baseClamp_default(toInteger_default(value), -MAX_SAFE_INTEGER6, MAX_SAFE_INTEGER6) : value === 0 ? value : 0;
}
var toSafeInteger_default = toSafeInteger;

// node_modules/lodash-es/toUpper.js
function toUpper(value) {
  return toString_default(value).toUpperCase();
}
var toUpper_default = toUpper;

// node_modules/lodash-es/transform.js
function transform(object, iteratee2, accumulator) {
  var isArr = isArray_default(object), isArrLike = isArr || isBuffer_default(object) || isTypedArray_default(object);
  iteratee2 = baseIteratee_default(iteratee2, 4);
  if (accumulator == null) {
    var Ctor = object && object.constructor;
    if (isArrLike) {
      accumulator = isArr ? new Ctor() : [];
    } else if (isObject_default(object)) {
      accumulator = isFunction_default(Ctor) ? baseCreate_default(getPrototype_default(object)) : {};
    } else {
      accumulator = {};
    }
  }
  (isArrLike ? arrayEach_default : baseForOwn_default)(object, function(value, index, object2) {
    return iteratee2(accumulator, value, index, object2);
  });
  return accumulator;
}
var transform_default = transform;

// node_modules/lodash-es/_charsEndIndex.js
function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;
  while (index-- && baseIndexOf_default(chrSymbols, strSymbols[index], 0) > -1) {
  }
  return index;
}
var charsEndIndex_default = charsEndIndex;

// node_modules/lodash-es/_charsStartIndex.js
function charsStartIndex(strSymbols, chrSymbols) {
  var index = -1, length = strSymbols.length;
  while (++index < length && baseIndexOf_default(chrSymbols, strSymbols[index], 0) > -1) {
  }
  return index;
}
var charsStartIndex_default = charsStartIndex;

// node_modules/lodash-es/trim.js
function trim(string, chars, guard) {
  string = toString_default(string);
  if (string && (guard || chars === void 0)) {
    return baseTrim_default(string);
  }
  if (!string || !(chars = baseToString_default(chars))) {
    return string;
  }
  var strSymbols = stringToArray_default(string), chrSymbols = stringToArray_default(chars), start = charsStartIndex_default(strSymbols, chrSymbols), end = charsEndIndex_default(strSymbols, chrSymbols) + 1;
  return castSlice_default(strSymbols, start, end).join("");
}
var trim_default = trim;

// node_modules/lodash-es/trimEnd.js
function trimEnd(string, chars, guard) {
  string = toString_default(string);
  if (string && (guard || chars === void 0)) {
    return string.slice(0, trimmedEndIndex_default(string) + 1);
  }
  if (!string || !(chars = baseToString_default(chars))) {
    return string;
  }
  var strSymbols = stringToArray_default(string), end = charsEndIndex_default(strSymbols, stringToArray_default(chars)) + 1;
  return castSlice_default(strSymbols, 0, end).join("");
}
var trimEnd_default = trimEnd;

// node_modules/lodash-es/trimStart.js
var reTrimStart3 = /^\s+/;
function trimStart(string, chars, guard) {
  string = toString_default(string);
  if (string && (guard || chars === void 0)) {
    return string.replace(reTrimStart3, "");
  }
  if (!string || !(chars = baseToString_default(chars))) {
    return string;
  }
  var strSymbols = stringToArray_default(string), start = charsStartIndex_default(strSymbols, stringToArray_default(chars));
  return castSlice_default(strSymbols, start).join("");
}
var trimStart_default = trimStart;

// node_modules/lodash-es/truncate.js
var DEFAULT_TRUNC_LENGTH = 30;
var DEFAULT_TRUNC_OMISSION = "...";
var reFlags2 = /\w*$/;
function truncate(string, options) {
  var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
  if (isObject_default(options)) {
    var separator = "separator" in options ? options.separator : separator;
    length = "length" in options ? toInteger_default(options.length) : length;
    omission = "omission" in options ? baseToString_default(options.omission) : omission;
  }
  string = toString_default(string);
  var strLength = string.length;
  if (hasUnicode_default(string)) {
    var strSymbols = stringToArray_default(string);
    strLength = strSymbols.length;
  }
  if (length >= strLength) {
    return string;
  }
  var end = length - stringSize_default(omission);
  if (end < 1) {
    return omission;
  }
  var result2 = strSymbols ? castSlice_default(strSymbols, 0, end).join("") : string.slice(0, end);
  if (separator === void 0) {
    return result2 + omission;
  }
  if (strSymbols) {
    end += result2.length - end;
  }
  if (isRegExp_default(separator)) {
    if (string.slice(end).search(separator)) {
      var match, substring = result2;
      if (!separator.global) {
        separator = RegExp(separator.source, toString_default(reFlags2.exec(separator)) + "g");
      }
      separator.lastIndex = 0;
      while (match = separator.exec(substring)) {
        var newEnd = match.index;
      }
      result2 = result2.slice(0, newEnd === void 0 ? end : newEnd);
    }
  } else if (string.indexOf(baseToString_default(separator), end) != end) {
    var index = result2.lastIndexOf(separator);
    if (index > -1) {
      result2 = result2.slice(0, index);
    }
  }
  return result2 + omission;
}
var truncate_default = truncate;

// node_modules/lodash-es/unary.js
function unary(func) {
  return ary_default(func, 1);
}
var unary_default = unary;

// node_modules/lodash-es/_unescapeHtmlChar.js
var htmlUnescapes = {
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">",
  "&quot;": '"',
  "&#39;": "'"
};
var unescapeHtmlChar = basePropertyOf_default(htmlUnescapes);
var unescapeHtmlChar_default = unescapeHtmlChar;

// node_modules/lodash-es/unescape.js
var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;
var reHasEscapedHtml = RegExp(reEscapedHtml.source);
function unescape(string) {
  string = toString_default(string);
  return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar_default) : string;
}
var unescape_default = unescape;

// node_modules/lodash-es/_createSet.js
var INFINITY6 = 1 / 0;
var createSet = !(Set_default && 1 / setToArray_default(new Set_default([, -0]))[1] == INFINITY6) ? noop_default : function(values2) {
  return new Set_default(values2);
};
var createSet_default = createSet;

// node_modules/lodash-es/_baseUniq.js
var LARGE_ARRAY_SIZE3 = 200;
function baseUniq(array, iteratee2, comparator) {
  var index = -1, includes2 = arrayIncludes_default, length = array.length, isCommon = true, result2 = [], seen = result2;
  if (comparator) {
    isCommon = false;
    includes2 = arrayIncludesWith_default;
  } else if (length >= LARGE_ARRAY_SIZE3) {
    var set2 = iteratee2 ? null : createSet_default(array);
    if (set2) {
      return setToArray_default(set2);
    }
    isCommon = false;
    includes2 = cacheHas_default;
    seen = new SetCache_default();
  } else {
    seen = iteratee2 ? [] : result2;
  }
  outer:
    while (++index < length) {
      var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee2) {
          seen.push(computed);
        }
        result2.push(value);
      } else if (!includes2(seen, computed, comparator)) {
        if (seen !== result2) {
          seen.push(computed);
        }
        result2.push(value);
      }
    }
  return result2;
}
var baseUniq_default = baseUniq;

// node_modules/lodash-es/union.js
var union = baseRest_default(function(arrays) {
  return baseUniq_default(baseFlatten_default(arrays, 1, isArrayLikeObject_default, true));
});
var union_default = union;

// node_modules/lodash-es/unionBy.js
var unionBy = baseRest_default(function(arrays) {
  var iteratee2 = last_default(arrays);
  if (isArrayLikeObject_default(iteratee2)) {
    iteratee2 = void 0;
  }
  return baseUniq_default(baseFlatten_default(arrays, 1, isArrayLikeObject_default, true), baseIteratee_default(iteratee2, 2));
});
var unionBy_default = unionBy;

// node_modules/lodash-es/unionWith.js
var unionWith = baseRest_default(function(arrays) {
  var comparator = last_default(arrays);
  comparator = typeof comparator == "function" ? comparator : void 0;
  return baseUniq_default(baseFlatten_default(arrays, 1, isArrayLikeObject_default, true), void 0, comparator);
});
var unionWith_default = unionWith;

// node_modules/lodash-es/uniq.js
function uniq(array) {
  return array && array.length ? baseUniq_default(array) : [];
}
var uniq_default = uniq;

// node_modules/lodash-es/uniqBy.js
function uniqBy(array, iteratee2) {
  return array && array.length ? baseUniq_default(array, baseIteratee_default(iteratee2, 2)) : [];
}
var uniqBy_default = uniqBy;

// node_modules/lodash-es/uniqWith.js
function uniqWith(array, comparator) {
  comparator = typeof comparator == "function" ? comparator : void 0;
  return array && array.length ? baseUniq_default(array, void 0, comparator) : [];
}
var uniqWith_default = uniqWith;

// node_modules/lodash-es/uniqueId.js
var idCounter = 0;
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString_default(prefix) + id;
}
var uniqueId_default = uniqueId;

// node_modules/lodash-es/unset.js
function unset(object, path) {
  return object == null ? true : baseUnset_default(object, path);
}
var unset_default = unset;

// node_modules/lodash-es/unzip.js
var nativeMax15 = Math.max;
function unzip(array) {
  if (!(array && array.length)) {
    return [];
  }
  var length = 0;
  array = arrayFilter_default(array, function(group) {
    if (isArrayLikeObject_default(group)) {
      length = nativeMax15(group.length, length);
      return true;
    }
  });
  return baseTimes_default(length, function(index) {
    return arrayMap_default(array, baseProperty_default(index));
  });
}
var unzip_default = unzip;

// node_modules/lodash-es/unzipWith.js
function unzipWith(array, iteratee2) {
  if (!(array && array.length)) {
    return [];
  }
  var result2 = unzip_default(array);
  if (iteratee2 == null) {
    return result2;
  }
  return arrayMap_default(result2, function(group) {
    return apply_default(iteratee2, void 0, group);
  });
}
var unzipWith_default = unzipWith;

// node_modules/lodash-es/_baseUpdate.js
function baseUpdate(object, path, updater, customizer) {
  return baseSet_default(object, path, updater(baseGet_default(object, path)), customizer);
}
var baseUpdate_default = baseUpdate;

// node_modules/lodash-es/update.js
function update(object, path, updater) {
  return object == null ? object : baseUpdate_default(object, path, castFunction_default(updater));
}
var update_default = update;

// node_modules/lodash-es/updateWith.js
function updateWith(object, path, updater, customizer) {
  customizer = typeof customizer == "function" ? customizer : void 0;
  return object == null ? object : baseUpdate_default(object, path, castFunction_default(updater), customizer);
}
var updateWith_default = updateWith;

// node_modules/lodash-es/upperCase.js
var upperCase = createCompounder_default(function(result2, word, index) {
  return result2 + (index ? " " : "") + word.toUpperCase();
});
var upperCase_default = upperCase;

// node_modules/lodash-es/valuesIn.js
function valuesIn(object) {
  return object == null ? [] : baseValues_default(object, keysIn_default(object));
}
var valuesIn_default = valuesIn;

// node_modules/lodash-es/without.js
var without = baseRest_default(function(array, values2) {
  return isArrayLikeObject_default(array) ? baseDifference_default(array, values2) : [];
});
var without_default = without;

// node_modules/lodash-es/wrap.js
function wrap(value, wrapper) {
  return partial_default(castFunction_default(wrapper), value);
}
var wrap_default = wrap;

// node_modules/lodash-es/wrapperAt.js
var wrapperAt = flatRest_default(function(paths) {
  var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
    return baseAt_default(object, paths);
  };
  if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper_default) || !isIndex_default(start)) {
    return this.thru(interceptor);
  }
  value = value.slice(start, +start + (length ? 1 : 0));
  value.__actions__.push({
    "func": thru_default,
    "args": [interceptor],
    "thisArg": void 0
  });
  return new LodashWrapper_default(value, this.__chain__).thru(function(array) {
    if (length && !array.length) {
      array.push(void 0);
    }
    return array;
  });
});
var wrapperAt_default = wrapperAt;

// node_modules/lodash-es/wrapperChain.js
function wrapperChain() {
  return chain_default(this);
}
var wrapperChain_default = wrapperChain;

// node_modules/lodash-es/wrapperReverse.js
function wrapperReverse() {
  var value = this.__wrapped__;
  if (value instanceof LazyWrapper_default) {
    var wrapped = value;
    if (this.__actions__.length) {
      wrapped = new LazyWrapper_default(this);
    }
    wrapped = wrapped.reverse();
    wrapped.__actions__.push({
      "func": thru_default,
      "args": [reverse_default],
      "thisArg": void 0
    });
    return new LodashWrapper_default(wrapped, this.__chain__);
  }
  return this.thru(reverse_default);
}
var wrapperReverse_default = wrapperReverse;

// node_modules/lodash-es/_baseXor.js
function baseXor(arrays, iteratee2, comparator) {
  var length = arrays.length;
  if (length < 2) {
    return length ? baseUniq_default(arrays[0]) : [];
  }
  var index = -1, result2 = Array(length);
  while (++index < length) {
    var array = arrays[index], othIndex = -1;
    while (++othIndex < length) {
      if (othIndex != index) {
        result2[index] = baseDifference_default(result2[index] || array, arrays[othIndex], iteratee2, comparator);
      }
    }
  }
  return baseUniq_default(baseFlatten_default(result2, 1), iteratee2, comparator);
}
var baseXor_default = baseXor;

// node_modules/lodash-es/xor.js
var xor = baseRest_default(function(arrays) {
  return baseXor_default(arrayFilter_default(arrays, isArrayLikeObject_default));
});
var xor_default = xor;

// node_modules/lodash-es/xorBy.js
var xorBy = baseRest_default(function(arrays) {
  var iteratee2 = last_default(arrays);
  if (isArrayLikeObject_default(iteratee2)) {
    iteratee2 = void 0;
  }
  return baseXor_default(arrayFilter_default(arrays, isArrayLikeObject_default), baseIteratee_default(iteratee2, 2));
});
var xorBy_default = xorBy;

// node_modules/lodash-es/xorWith.js
var xorWith = baseRest_default(function(arrays) {
  var comparator = last_default(arrays);
  comparator = typeof comparator == "function" ? comparator : void 0;
  return baseXor_default(arrayFilter_default(arrays, isArrayLikeObject_default), void 0, comparator);
});
var xorWith_default = xorWith;

// node_modules/lodash-es/zip.js
var zip = baseRest_default(unzip_default);
var zip_default = zip;

// node_modules/lodash-es/_baseZipObject.js
function baseZipObject(props, values2, assignFunc) {
  var index = -1, length = props.length, valsLength = values2.length, result2 = {};
  while (++index < length) {
    var value = index < valsLength ? values2[index] : void 0;
    assignFunc(result2, props[index], value);
  }
  return result2;
}
var baseZipObject_default = baseZipObject;

// node_modules/lodash-es/zipObject.js
function zipObject(props, values2) {
  return baseZipObject_default(props || [], values2 || [], assignValue_default);
}
var zipObject_default = zipObject;

// node_modules/lodash-es/zipObjectDeep.js
function zipObjectDeep(props, values2) {
  return baseZipObject_default(props || [], values2 || [], baseSet_default);
}
var zipObjectDeep_default = zipObjectDeep;

// node_modules/lodash-es/zipWith.js
var zipWith = baseRest_default(function(arrays) {
  var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : void 0;
  iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : void 0;
  return unzipWith_default(arrays, iteratee2);
});
var zipWith_default = zipWith;

// node_modules/lodash-es/array.default.js
var array_default_default = {
  chunk: chunk_default,
  compact: compact_default,
  concat: concat_default,
  difference: difference_default,
  differenceBy: differenceBy_default,
  differenceWith: differenceWith_default,
  drop: drop_default,
  dropRight: dropRight_default,
  dropRightWhile: dropRightWhile_default,
  dropWhile: dropWhile_default,
  fill: fill_default,
  findIndex: findIndex_default,
  findLastIndex: findLastIndex_default,
  first: head_default,
  flatten: flatten_default,
  flattenDeep: flattenDeep_default,
  flattenDepth: flattenDepth_default,
  fromPairs: fromPairs_default,
  head: head_default,
  indexOf: indexOf_default,
  initial: initial_default,
  intersection: intersection_default,
  intersectionBy: intersectionBy_default,
  intersectionWith: intersectionWith_default,
  join: join_default,
  last: last_default,
  lastIndexOf: lastIndexOf_default,
  nth: nth_default,
  pull: pull_default,
  pullAll: pullAll_default,
  pullAllBy: pullAllBy_default,
  pullAllWith: pullAllWith_default,
  pullAt: pullAt_default,
  remove: remove_default,
  reverse: reverse_default,
  slice: slice_default,
  sortedIndex: sortedIndex_default,
  sortedIndexBy: sortedIndexBy_default,
  sortedIndexOf: sortedIndexOf_default,
  sortedLastIndex: sortedLastIndex_default,
  sortedLastIndexBy: sortedLastIndexBy_default,
  sortedLastIndexOf: sortedLastIndexOf_default,
  sortedUniq: sortedUniq_default,
  sortedUniqBy: sortedUniqBy_default,
  tail: tail_default,
  take: take_default,
  takeRight: takeRight_default,
  takeRightWhile: takeRightWhile_default,
  takeWhile: takeWhile_default,
  union: union_default,
  unionBy: unionBy_default,
  unionWith: unionWith_default,
  uniq: uniq_default,
  uniqBy: uniqBy_default,
  uniqWith: uniqWith_default,
  unzip: unzip_default,
  unzipWith: unzipWith_default,
  without: without_default,
  xor: xor_default,
  xorBy: xorBy_default,
  xorWith: xorWith_default,
  zip: zip_default,
  zipObject: zipObject_default,
  zipObjectDeep: zipObjectDeep_default,
  zipWith: zipWith_default
};

// node_modules/lodash-es/collection.default.js
var collection_default_default = {
  countBy: countBy_default,
  each: forEach_default,
  eachRight: forEachRight_default,
  every: every_default,
  filter: filter_default,
  find: find_default,
  findLast: findLast_default,
  flatMap: flatMap_default,
  flatMapDeep: flatMapDeep_default,
  flatMapDepth: flatMapDepth_default,
  forEach: forEach_default,
  forEachRight: forEachRight_default,
  groupBy: groupBy_default,
  includes: includes_default,
  invokeMap: invokeMap_default,
  keyBy: keyBy_default,
  map: map_default,
  orderBy: orderBy_default,
  partition: partition_default,
  reduce: reduce_default,
  reduceRight: reduceRight_default,
  reject: reject_default,
  sample: sample_default,
  sampleSize: sampleSize_default,
  shuffle: shuffle_default,
  size: size_default,
  some: some_default,
  sortBy: sortBy_default
};

// node_modules/lodash-es/date.default.js
var date_default_default = {
  now: now_default
};

// node_modules/lodash-es/function.default.js
var function_default_default = {
  after: after_default,
  ary: ary_default,
  before: before_default,
  bind: bind_default,
  bindKey: bindKey_default,
  curry: curry_default,
  curryRight: curryRight_default,
  debounce: debounce_default,
  defer: defer_default,
  delay: delay_default,
  flip: flip_default,
  memoize: memoize_default,
  negate: negate_default,
  once: once_default,
  overArgs: overArgs_default,
  partial: partial_default,
  partialRight: partialRight_default,
  rearg: rearg_default,
  rest: rest_default,
  spread: spread_default,
  throttle: throttle_default,
  unary: unary_default,
  wrap: wrap_default
};

// node_modules/lodash-es/lang.default.js
var lang_default_default = {
  castArray: castArray_default,
  clone: clone_default,
  cloneDeep: cloneDeep_default,
  cloneDeepWith: cloneDeepWith_default,
  cloneWith: cloneWith_default,
  conformsTo: conformsTo_default,
  eq: eq_default,
  gt: gt_default,
  gte: gte_default,
  isArguments: isArguments_default,
  isArray: isArray_default,
  isArrayBuffer: isArrayBuffer_default,
  isArrayLike: isArrayLike_default,
  isArrayLikeObject: isArrayLikeObject_default,
  isBoolean: isBoolean_default,
  isBuffer: isBuffer_default,
  isDate: isDate_default,
  isElement: isElement_default,
  isEmpty: isEmpty_default,
  isEqual: isEqual_default,
  isEqualWith: isEqualWith_default,
  isError: isError_default,
  isFinite: isFinite_default,
  isFunction: isFunction_default,
  isInteger: isInteger_default,
  isLength: isLength_default,
  isMap: isMap_default,
  isMatch: isMatch_default,
  isMatchWith: isMatchWith_default,
  isNaN: isNaN_default,
  isNative: isNative_default,
  isNil: isNil_default,
  isNull: isNull_default,
  isNumber: isNumber_default,
  isObject: isObject_default,
  isObjectLike: isObjectLike_default,
  isPlainObject: isPlainObject_default,
  isRegExp: isRegExp_default,
  isSafeInteger: isSafeInteger_default,
  isSet: isSet_default,
  isString: isString_default,
  isSymbol: isSymbol_default,
  isTypedArray: isTypedArray_default,
  isUndefined: isUndefined_default,
  isWeakMap: isWeakMap_default,
  isWeakSet: isWeakSet_default,
  lt: lt_default,
  lte: lte_default,
  toArray: toArray_default,
  toFinite: toFinite_default,
  toInteger: toInteger_default,
  toLength: toLength_default,
  toNumber: toNumber_default,
  toPlainObject: toPlainObject_default,
  toSafeInteger: toSafeInteger_default,
  toString: toString_default
};

// node_modules/lodash-es/math.default.js
var math_default_default = {
  add: add_default,
  ceil: ceil_default,
  divide: divide_default,
  floor: floor_default,
  max: max_default,
  maxBy: maxBy_default,
  mean: mean_default,
  meanBy: meanBy_default,
  min: min_default,
  minBy: minBy_default,
  multiply: multiply_default,
  round: round_default,
  subtract: subtract_default,
  sum: sum_default,
  sumBy: sumBy_default
};

// node_modules/lodash-es/number.default.js
var number_default_default = {
  clamp: clamp_default,
  inRange: inRange_default,
  random: random_default
};

// node_modules/lodash-es/object.default.js
var object_default_default = {
  assign: assign_default,
  assignIn: assignIn_default,
  assignInWith: assignInWith_default,
  assignWith: assignWith_default,
  at: at_default,
  create: create_default,
  defaults: defaults_default,
  defaultsDeep: defaultsDeep_default,
  entries: toPairs_default,
  entriesIn: toPairsIn_default,
  extend: assignIn_default,
  extendWith: assignInWith_default,
  findKey: findKey_default,
  findLastKey: findLastKey_default,
  forIn: forIn_default,
  forInRight: forInRight_default,
  forOwn: forOwn_default,
  forOwnRight: forOwnRight_default,
  functions: functions_default,
  functionsIn: functionsIn_default,
  get: get_default,
  has: has_default,
  hasIn: hasIn_default,
  invert: invert_default,
  invertBy: invertBy_default,
  invoke: invoke_default,
  keys: keys_default,
  keysIn: keysIn_default,
  mapKeys: mapKeys_default,
  mapValues: mapValues_default,
  merge: merge_default,
  mergeWith: mergeWith_default,
  omit: omit_default,
  omitBy: omitBy_default,
  pick: pick_default,
  pickBy: pickBy_default,
  result: result_default,
  set: set_default,
  setWith: setWith_default,
  toPairs: toPairs_default,
  toPairsIn: toPairsIn_default,
  transform: transform_default,
  unset: unset_default,
  update: update_default,
  updateWith: updateWith_default,
  values: values_default,
  valuesIn: valuesIn_default
};

// node_modules/lodash-es/seq.default.js
var seq_default_default = {
  at: wrapperAt_default,
  chain: chain_default,
  commit: commit_default,
  lodash: wrapperLodash_default,
  next: next_default,
  plant: plant_default,
  reverse: wrapperReverse_default,
  tap: tap_default,
  thru: thru_default,
  toIterator: toIterator_default,
  toJSON: wrapperValue_default,
  value: wrapperValue_default,
  valueOf: wrapperValue_default,
  wrapperChain: wrapperChain_default
};

// node_modules/lodash-es/string.default.js
var string_default_default = {
  camelCase: camelCase_default,
  capitalize: capitalize_default,
  deburr: deburr_default,
  endsWith: endsWith_default,
  escape: escape_default,
  escapeRegExp: escapeRegExp_default,
  kebabCase: kebabCase_default,
  lowerCase: lowerCase_default,
  lowerFirst: lowerFirst_default,
  pad: pad_default,
  padEnd: padEnd_default,
  padStart: padStart_default,
  parseInt: parseInt_default,
  repeat: repeat_default,
  replace: replace_default,
  snakeCase: snakeCase_default,
  split: split_default,
  startCase: startCase_default,
  startsWith: startsWith_default,
  template: template_default,
  templateSettings: templateSettings_default,
  toLower: toLower_default,
  toUpper: toUpper_default,
  trim: trim_default,
  trimEnd: trimEnd_default,
  trimStart: trimStart_default,
  truncate: truncate_default,
  unescape: unescape_default,
  upperCase: upperCase_default,
  upperFirst: upperFirst_default,
  words: words_default
};

// node_modules/lodash-es/util.default.js
var util_default_default = {
  attempt: attempt_default,
  bindAll: bindAll_default,
  cond: cond_default,
  conforms: conforms_default,
  constant: constant_default,
  defaultTo: defaultTo_default,
  flow: flow_default,
  flowRight: flowRight_default,
  identity: identity_default,
  iteratee: iteratee_default,
  matches: matches_default,
  matchesProperty: matchesProperty_default,
  method: method_default,
  methodOf: methodOf_default,
  mixin: mixin_default,
  noop: noop_default,
  nthArg: nthArg_default,
  over: over_default,
  overEvery: overEvery_default,
  overSome: overSome_default,
  property: property_default,
  propertyOf: propertyOf_default,
  range: range_default,
  rangeRight: rangeRight_default,
  stubArray: stubArray_default,
  stubFalse: stubFalse_default,
  stubObject: stubObject_default,
  stubString: stubString_default,
  stubTrue: stubTrue_default,
  times: times_default,
  toPath: toPath_default,
  uniqueId: uniqueId_default
};

// node_modules/lodash-es/_lazyClone.js
function lazyClone() {
  var result2 = new LazyWrapper_default(this.__wrapped__);
  result2.__actions__ = copyArray_default(this.__actions__);
  result2.__dir__ = this.__dir__;
  result2.__filtered__ = this.__filtered__;
  result2.__iteratees__ = copyArray_default(this.__iteratees__);
  result2.__takeCount__ = this.__takeCount__;
  result2.__views__ = copyArray_default(this.__views__);
  return result2;
}
var lazyClone_default = lazyClone;

// node_modules/lodash-es/_lazyReverse.js
function lazyReverse() {
  if (this.__filtered__) {
    var result2 = new LazyWrapper_default(this);
    result2.__dir__ = -1;
    result2.__filtered__ = true;
  } else {
    result2 = this.clone();
    result2.__dir__ *= -1;
  }
  return result2;
}
var lazyReverse_default = lazyReverse;

// node_modules/lodash-es/_getView.js
var nativeMax16 = Math.max;
var nativeMin13 = Math.min;
function getView(start, end, transforms) {
  var index = -1, length = transforms.length;
  while (++index < length) {
    var data = transforms[index], size2 = data.size;
    switch (data.type) {
      case "drop":
        start += size2;
        break;
      case "dropRight":
        end -= size2;
        break;
      case "take":
        end = nativeMin13(end, start + size2);
        break;
      case "takeRight":
        start = nativeMax16(start, end - size2);
        break;
    }
  }
  return { "start": start, "end": end };
}
var getView_default = getView;

// node_modules/lodash-es/_lazyValue.js
var LAZY_FILTER_FLAG = 1;
var LAZY_MAP_FLAG = 2;
var nativeMin14 = Math.min;
function lazyValue() {
  var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray_default(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView_default(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin14(length, this.__takeCount__);
  if (!isArr || !isRight && arrLength == length && takeCount == length) {
    return baseWrapperValue_default(array, this.__actions__);
  }
  var result2 = [];
  outer:
    while (length-- && resIndex < takeCount) {
      index += dir;
      var iterIndex = -1, value = array[index];
      while (++iterIndex < iterLength) {
        var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
        if (type == LAZY_MAP_FLAG) {
          value = computed;
        } else if (!computed) {
          if (type == LAZY_FILTER_FLAG) {
            continue outer;
          } else {
            break outer;
          }
        }
      }
      result2[resIndex++] = value;
    }
  return result2;
}
var lazyValue_default = lazyValue;

// node_modules/lodash-es/lodash.default.js
var VERSION = "4.17.21";
var WRAP_BIND_KEY_FLAG7 = 2;
var LAZY_FILTER_FLAG2 = 1;
var LAZY_WHILE_FLAG = 3;
var MAX_ARRAY_LENGTH7 = 4294967295;
var arrayProto6 = Array.prototype;
var objectProto29 = Object.prototype;
var hasOwnProperty25 = objectProto29.hasOwnProperty;
var symIterator2 = Symbol_default ? Symbol_default.iterator : void 0;
var nativeMax17 = Math.max;
var nativeMin15 = Math.min;
var mixin2 = function(func) {
  return function(object, source, options) {
    if (options == null) {
      var isObj = isObject_default(source), props = isObj && keys_default(source), methodNames = props && props.length && baseFunctions_default(source, props);
      if (!(methodNames ? methodNames.length : isObj)) {
        options = source;
        source = object;
        object = this;
      }
    }
    return func(object, source, options);
  };
}(mixin_default);
wrapperLodash_default.after = function_default_default.after;
wrapperLodash_default.ary = function_default_default.ary;
wrapperLodash_default.assign = object_default_default.assign;
wrapperLodash_default.assignIn = object_default_default.assignIn;
wrapperLodash_default.assignInWith = object_default_default.assignInWith;
wrapperLodash_default.assignWith = object_default_default.assignWith;
wrapperLodash_default.at = object_default_default.at;
wrapperLodash_default.before = function_default_default.before;
wrapperLodash_default.bind = function_default_default.bind;
wrapperLodash_default.bindAll = util_default_default.bindAll;
wrapperLodash_default.bindKey = function_default_default.bindKey;
wrapperLodash_default.castArray = lang_default_default.castArray;
wrapperLodash_default.chain = seq_default_default.chain;
wrapperLodash_default.chunk = array_default_default.chunk;
wrapperLodash_default.compact = array_default_default.compact;
wrapperLodash_default.concat = array_default_default.concat;
wrapperLodash_default.cond = util_default_default.cond;
wrapperLodash_default.conforms = util_default_default.conforms;
wrapperLodash_default.constant = util_default_default.constant;
wrapperLodash_default.countBy = collection_default_default.countBy;
wrapperLodash_default.create = object_default_default.create;
wrapperLodash_default.curry = function_default_default.curry;
wrapperLodash_default.curryRight = function_default_default.curryRight;
wrapperLodash_default.debounce = function_default_default.debounce;
wrapperLodash_default.defaults = object_default_default.defaults;
wrapperLodash_default.defaultsDeep = object_default_default.defaultsDeep;
wrapperLodash_default.defer = function_default_default.defer;
wrapperLodash_default.delay = function_default_default.delay;
wrapperLodash_default.difference = array_default_default.difference;
wrapperLodash_default.differenceBy = array_default_default.differenceBy;
wrapperLodash_default.differenceWith = array_default_default.differenceWith;
wrapperLodash_default.drop = array_default_default.drop;
wrapperLodash_default.dropRight = array_default_default.dropRight;
wrapperLodash_default.dropRightWhile = array_default_default.dropRightWhile;
wrapperLodash_default.dropWhile = array_default_default.dropWhile;
wrapperLodash_default.fill = array_default_default.fill;
wrapperLodash_default.filter = collection_default_default.filter;
wrapperLodash_default.flatMap = collection_default_default.flatMap;
wrapperLodash_default.flatMapDeep = collection_default_default.flatMapDeep;
wrapperLodash_default.flatMapDepth = collection_default_default.flatMapDepth;
wrapperLodash_default.flatten = array_default_default.flatten;
wrapperLodash_default.flattenDeep = array_default_default.flattenDeep;
wrapperLodash_default.flattenDepth = array_default_default.flattenDepth;
wrapperLodash_default.flip = function_default_default.flip;
wrapperLodash_default.flow = util_default_default.flow;
wrapperLodash_default.flowRight = util_default_default.flowRight;
wrapperLodash_default.fromPairs = array_default_default.fromPairs;
wrapperLodash_default.functions = object_default_default.functions;
wrapperLodash_default.functionsIn = object_default_default.functionsIn;
wrapperLodash_default.groupBy = collection_default_default.groupBy;
wrapperLodash_default.initial = array_default_default.initial;
wrapperLodash_default.intersection = array_default_default.intersection;
wrapperLodash_default.intersectionBy = array_default_default.intersectionBy;
wrapperLodash_default.intersectionWith = array_default_default.intersectionWith;
wrapperLodash_default.invert = object_default_default.invert;
wrapperLodash_default.invertBy = object_default_default.invertBy;
wrapperLodash_default.invokeMap = collection_default_default.invokeMap;
wrapperLodash_default.iteratee = util_default_default.iteratee;
wrapperLodash_default.keyBy = collection_default_default.keyBy;
wrapperLodash_default.keys = keys_default;
wrapperLodash_default.keysIn = object_default_default.keysIn;
wrapperLodash_default.map = collection_default_default.map;
wrapperLodash_default.mapKeys = object_default_default.mapKeys;
wrapperLodash_default.mapValues = object_default_default.mapValues;
wrapperLodash_default.matches = util_default_default.matches;
wrapperLodash_default.matchesProperty = util_default_default.matchesProperty;
wrapperLodash_default.memoize = function_default_default.memoize;
wrapperLodash_default.merge = object_default_default.merge;
wrapperLodash_default.mergeWith = object_default_default.mergeWith;
wrapperLodash_default.method = util_default_default.method;
wrapperLodash_default.methodOf = util_default_default.methodOf;
wrapperLodash_default.mixin = mixin2;
wrapperLodash_default.negate = negate_default;
wrapperLodash_default.nthArg = util_default_default.nthArg;
wrapperLodash_default.omit = object_default_default.omit;
wrapperLodash_default.omitBy = object_default_default.omitBy;
wrapperLodash_default.once = function_default_default.once;
wrapperLodash_default.orderBy = collection_default_default.orderBy;
wrapperLodash_default.over = util_default_default.over;
wrapperLodash_default.overArgs = function_default_default.overArgs;
wrapperLodash_default.overEvery = util_default_default.overEvery;
wrapperLodash_default.overSome = util_default_default.overSome;
wrapperLodash_default.partial = function_default_default.partial;
wrapperLodash_default.partialRight = function_default_default.partialRight;
wrapperLodash_default.partition = collection_default_default.partition;
wrapperLodash_default.pick = object_default_default.pick;
wrapperLodash_default.pickBy = object_default_default.pickBy;
wrapperLodash_default.property = util_default_default.property;
wrapperLodash_default.propertyOf = util_default_default.propertyOf;
wrapperLodash_default.pull = array_default_default.pull;
wrapperLodash_default.pullAll = array_default_default.pullAll;
wrapperLodash_default.pullAllBy = array_default_default.pullAllBy;
wrapperLodash_default.pullAllWith = array_default_default.pullAllWith;
wrapperLodash_default.pullAt = array_default_default.pullAt;
wrapperLodash_default.range = util_default_default.range;
wrapperLodash_default.rangeRight = util_default_default.rangeRight;
wrapperLodash_default.rearg = function_default_default.rearg;
wrapperLodash_default.reject = collection_default_default.reject;
wrapperLodash_default.remove = array_default_default.remove;
wrapperLodash_default.rest = function_default_default.rest;
wrapperLodash_default.reverse = array_default_default.reverse;
wrapperLodash_default.sampleSize = collection_default_default.sampleSize;
wrapperLodash_default.set = object_default_default.set;
wrapperLodash_default.setWith = object_default_default.setWith;
wrapperLodash_default.shuffle = collection_default_default.shuffle;
wrapperLodash_default.slice = array_default_default.slice;
wrapperLodash_default.sortBy = collection_default_default.sortBy;
wrapperLodash_default.sortedUniq = array_default_default.sortedUniq;
wrapperLodash_default.sortedUniqBy = array_default_default.sortedUniqBy;
wrapperLodash_default.split = string_default_default.split;
wrapperLodash_default.spread = function_default_default.spread;
wrapperLodash_default.tail = array_default_default.tail;
wrapperLodash_default.take = array_default_default.take;
wrapperLodash_default.takeRight = array_default_default.takeRight;
wrapperLodash_default.takeRightWhile = array_default_default.takeRightWhile;
wrapperLodash_default.takeWhile = array_default_default.takeWhile;
wrapperLodash_default.tap = seq_default_default.tap;
wrapperLodash_default.throttle = function_default_default.throttle;
wrapperLodash_default.thru = thru_default;
wrapperLodash_default.toArray = lang_default_default.toArray;
wrapperLodash_default.toPairs = object_default_default.toPairs;
wrapperLodash_default.toPairsIn = object_default_default.toPairsIn;
wrapperLodash_default.toPath = util_default_default.toPath;
wrapperLodash_default.toPlainObject = lang_default_default.toPlainObject;
wrapperLodash_default.transform = object_default_default.transform;
wrapperLodash_default.unary = function_default_default.unary;
wrapperLodash_default.union = array_default_default.union;
wrapperLodash_default.unionBy = array_default_default.unionBy;
wrapperLodash_default.unionWith = array_default_default.unionWith;
wrapperLodash_default.uniq = array_default_default.uniq;
wrapperLodash_default.uniqBy = array_default_default.uniqBy;
wrapperLodash_default.uniqWith = array_default_default.uniqWith;
wrapperLodash_default.unset = object_default_default.unset;
wrapperLodash_default.unzip = array_default_default.unzip;
wrapperLodash_default.unzipWith = array_default_default.unzipWith;
wrapperLodash_default.update = object_default_default.update;
wrapperLodash_default.updateWith = object_default_default.updateWith;
wrapperLodash_default.values = object_default_default.values;
wrapperLodash_default.valuesIn = object_default_default.valuesIn;
wrapperLodash_default.without = array_default_default.without;
wrapperLodash_default.words = string_default_default.words;
wrapperLodash_default.wrap = function_default_default.wrap;
wrapperLodash_default.xor = array_default_default.xor;
wrapperLodash_default.xorBy = array_default_default.xorBy;
wrapperLodash_default.xorWith = array_default_default.xorWith;
wrapperLodash_default.zip = array_default_default.zip;
wrapperLodash_default.zipObject = array_default_default.zipObject;
wrapperLodash_default.zipObjectDeep = array_default_default.zipObjectDeep;
wrapperLodash_default.zipWith = array_default_default.zipWith;
wrapperLodash_default.entries = object_default_default.toPairs;
wrapperLodash_default.entriesIn = object_default_default.toPairsIn;
wrapperLodash_default.extend = object_default_default.assignIn;
wrapperLodash_default.extendWith = object_default_default.assignInWith;
mixin2(wrapperLodash_default, wrapperLodash_default);
wrapperLodash_default.add = math_default_default.add;
wrapperLodash_default.attempt = util_default_default.attempt;
wrapperLodash_default.camelCase = string_default_default.camelCase;
wrapperLodash_default.capitalize = string_default_default.capitalize;
wrapperLodash_default.ceil = math_default_default.ceil;
wrapperLodash_default.clamp = number_default_default.clamp;
wrapperLodash_default.clone = lang_default_default.clone;
wrapperLodash_default.cloneDeep = lang_default_default.cloneDeep;
wrapperLodash_default.cloneDeepWith = lang_default_default.cloneDeepWith;
wrapperLodash_default.cloneWith = lang_default_default.cloneWith;
wrapperLodash_default.conformsTo = lang_default_default.conformsTo;
wrapperLodash_default.deburr = string_default_default.deburr;
wrapperLodash_default.defaultTo = util_default_default.defaultTo;
wrapperLodash_default.divide = math_default_default.divide;
wrapperLodash_default.endsWith = string_default_default.endsWith;
wrapperLodash_default.eq = lang_default_default.eq;
wrapperLodash_default.escape = string_default_default.escape;
wrapperLodash_default.escapeRegExp = string_default_default.escapeRegExp;
wrapperLodash_default.every = collection_default_default.every;
wrapperLodash_default.find = collection_default_default.find;
wrapperLodash_default.findIndex = array_default_default.findIndex;
wrapperLodash_default.findKey = object_default_default.findKey;
wrapperLodash_default.findLast = collection_default_default.findLast;
wrapperLodash_default.findLastIndex = array_default_default.findLastIndex;
wrapperLodash_default.findLastKey = object_default_default.findLastKey;
wrapperLodash_default.floor = math_default_default.floor;
wrapperLodash_default.forEach = collection_default_default.forEach;
wrapperLodash_default.forEachRight = collection_default_default.forEachRight;
wrapperLodash_default.forIn = object_default_default.forIn;
wrapperLodash_default.forInRight = object_default_default.forInRight;
wrapperLodash_default.forOwn = object_default_default.forOwn;
wrapperLodash_default.forOwnRight = object_default_default.forOwnRight;
wrapperLodash_default.get = object_default_default.get;
wrapperLodash_default.gt = lang_default_default.gt;
wrapperLodash_default.gte = lang_default_default.gte;
wrapperLodash_default.has = object_default_default.has;
wrapperLodash_default.hasIn = object_default_default.hasIn;
wrapperLodash_default.head = array_default_default.head;
wrapperLodash_default.identity = identity_default;
wrapperLodash_default.includes = collection_default_default.includes;
wrapperLodash_default.indexOf = array_default_default.indexOf;
wrapperLodash_default.inRange = number_default_default.inRange;
wrapperLodash_default.invoke = object_default_default.invoke;
wrapperLodash_default.isArguments = lang_default_default.isArguments;
wrapperLodash_default.isArray = isArray_default;
wrapperLodash_default.isArrayBuffer = lang_default_default.isArrayBuffer;
wrapperLodash_default.isArrayLike = lang_default_default.isArrayLike;
wrapperLodash_default.isArrayLikeObject = lang_default_default.isArrayLikeObject;
wrapperLodash_default.isBoolean = lang_default_default.isBoolean;
wrapperLodash_default.isBuffer = lang_default_default.isBuffer;
wrapperLodash_default.isDate = lang_default_default.isDate;
wrapperLodash_default.isElement = lang_default_default.isElement;
wrapperLodash_default.isEmpty = lang_default_default.isEmpty;
wrapperLodash_default.isEqual = lang_default_default.isEqual;
wrapperLodash_default.isEqualWith = lang_default_default.isEqualWith;
wrapperLodash_default.isError = lang_default_default.isError;
wrapperLodash_default.isFinite = lang_default_default.isFinite;
wrapperLodash_default.isFunction = lang_default_default.isFunction;
wrapperLodash_default.isInteger = lang_default_default.isInteger;
wrapperLodash_default.isLength = lang_default_default.isLength;
wrapperLodash_default.isMap = lang_default_default.isMap;
wrapperLodash_default.isMatch = lang_default_default.isMatch;
wrapperLodash_default.isMatchWith = lang_default_default.isMatchWith;
wrapperLodash_default.isNaN = lang_default_default.isNaN;
wrapperLodash_default.isNative = lang_default_default.isNative;
wrapperLodash_default.isNil = lang_default_default.isNil;
wrapperLodash_default.isNull = lang_default_default.isNull;
wrapperLodash_default.isNumber = lang_default_default.isNumber;
wrapperLodash_default.isObject = isObject_default;
wrapperLodash_default.isObjectLike = lang_default_default.isObjectLike;
wrapperLodash_default.isPlainObject = lang_default_default.isPlainObject;
wrapperLodash_default.isRegExp = lang_default_default.isRegExp;
wrapperLodash_default.isSafeInteger = lang_default_default.isSafeInteger;
wrapperLodash_default.isSet = lang_default_default.isSet;
wrapperLodash_default.isString = lang_default_default.isString;
wrapperLodash_default.isSymbol = lang_default_default.isSymbol;
wrapperLodash_default.isTypedArray = lang_default_default.isTypedArray;
wrapperLodash_default.isUndefined = lang_default_default.isUndefined;
wrapperLodash_default.isWeakMap = lang_default_default.isWeakMap;
wrapperLodash_default.isWeakSet = lang_default_default.isWeakSet;
wrapperLodash_default.join = array_default_default.join;
wrapperLodash_default.kebabCase = string_default_default.kebabCase;
wrapperLodash_default.last = last_default;
wrapperLodash_default.lastIndexOf = array_default_default.lastIndexOf;
wrapperLodash_default.lowerCase = string_default_default.lowerCase;
wrapperLodash_default.lowerFirst = string_default_default.lowerFirst;
wrapperLodash_default.lt = lang_default_default.lt;
wrapperLodash_default.lte = lang_default_default.lte;
wrapperLodash_default.max = math_default_default.max;
wrapperLodash_default.maxBy = math_default_default.maxBy;
wrapperLodash_default.mean = math_default_default.mean;
wrapperLodash_default.meanBy = math_default_default.meanBy;
wrapperLodash_default.min = math_default_default.min;
wrapperLodash_default.minBy = math_default_default.minBy;
wrapperLodash_default.stubArray = util_default_default.stubArray;
wrapperLodash_default.stubFalse = util_default_default.stubFalse;
wrapperLodash_default.stubObject = util_default_default.stubObject;
wrapperLodash_default.stubString = util_default_default.stubString;
wrapperLodash_default.stubTrue = util_default_default.stubTrue;
wrapperLodash_default.multiply = math_default_default.multiply;
wrapperLodash_default.nth = array_default_default.nth;
wrapperLodash_default.noop = util_default_default.noop;
wrapperLodash_default.now = date_default_default.now;
wrapperLodash_default.pad = string_default_default.pad;
wrapperLodash_default.padEnd = string_default_default.padEnd;
wrapperLodash_default.padStart = string_default_default.padStart;
wrapperLodash_default.parseInt = string_default_default.parseInt;
wrapperLodash_default.random = number_default_default.random;
wrapperLodash_default.reduce = collection_default_default.reduce;
wrapperLodash_default.reduceRight = collection_default_default.reduceRight;
wrapperLodash_default.repeat = string_default_default.repeat;
wrapperLodash_default.replace = string_default_default.replace;
wrapperLodash_default.result = object_default_default.result;
wrapperLodash_default.round = math_default_default.round;
wrapperLodash_default.sample = collection_default_default.sample;
wrapperLodash_default.size = collection_default_default.size;
wrapperLodash_default.snakeCase = string_default_default.snakeCase;
wrapperLodash_default.some = collection_default_default.some;
wrapperLodash_default.sortedIndex = array_default_default.sortedIndex;
wrapperLodash_default.sortedIndexBy = array_default_default.sortedIndexBy;
wrapperLodash_default.sortedIndexOf = array_default_default.sortedIndexOf;
wrapperLodash_default.sortedLastIndex = array_default_default.sortedLastIndex;
wrapperLodash_default.sortedLastIndexBy = array_default_default.sortedLastIndexBy;
wrapperLodash_default.sortedLastIndexOf = array_default_default.sortedLastIndexOf;
wrapperLodash_default.startCase = string_default_default.startCase;
wrapperLodash_default.startsWith = string_default_default.startsWith;
wrapperLodash_default.subtract = math_default_default.subtract;
wrapperLodash_default.sum = math_default_default.sum;
wrapperLodash_default.sumBy = math_default_default.sumBy;
wrapperLodash_default.template = string_default_default.template;
wrapperLodash_default.times = util_default_default.times;
wrapperLodash_default.toFinite = lang_default_default.toFinite;
wrapperLodash_default.toInteger = toInteger_default;
wrapperLodash_default.toLength = lang_default_default.toLength;
wrapperLodash_default.toLower = string_default_default.toLower;
wrapperLodash_default.toNumber = lang_default_default.toNumber;
wrapperLodash_default.toSafeInteger = lang_default_default.toSafeInteger;
wrapperLodash_default.toString = lang_default_default.toString;
wrapperLodash_default.toUpper = string_default_default.toUpper;
wrapperLodash_default.trim = string_default_default.trim;
wrapperLodash_default.trimEnd = string_default_default.trimEnd;
wrapperLodash_default.trimStart = string_default_default.trimStart;
wrapperLodash_default.truncate = string_default_default.truncate;
wrapperLodash_default.unescape = string_default_default.unescape;
wrapperLodash_default.uniqueId = util_default_default.uniqueId;
wrapperLodash_default.upperCase = string_default_default.upperCase;
wrapperLodash_default.upperFirst = string_default_default.upperFirst;
wrapperLodash_default.each = collection_default_default.forEach;
wrapperLodash_default.eachRight = collection_default_default.forEachRight;
wrapperLodash_default.first = array_default_default.head;
mixin2(wrapperLodash_default, function() {
  var source = {};
  baseForOwn_default(wrapperLodash_default, function(func, methodName) {
    if (!hasOwnProperty25.call(wrapperLodash_default.prototype, methodName)) {
      source[methodName] = func;
    }
  });
  return source;
}(), { "chain": false });
wrapperLodash_default.VERSION = VERSION;
(wrapperLodash_default.templateSettings = string_default_default.templateSettings).imports._ = wrapperLodash_default;
arrayEach_default(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
  wrapperLodash_default[methodName].placeholder = wrapperLodash_default;
});
arrayEach_default(["drop", "take"], function(methodName, index) {
  LazyWrapper_default.prototype[methodName] = function(n) {
    n = n === void 0 ? 1 : nativeMax17(toInteger_default(n), 0);
    var result2 = this.__filtered__ && !index ? new LazyWrapper_default(this) : this.clone();
    if (result2.__filtered__) {
      result2.__takeCount__ = nativeMin15(n, result2.__takeCount__);
    } else {
      result2.__views__.push({
        "size": nativeMin15(n, MAX_ARRAY_LENGTH7),
        "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
      });
    }
    return result2;
  };
  LazyWrapper_default.prototype[methodName + "Right"] = function(n) {
    return this.reverse()[methodName](n).reverse();
  };
});
arrayEach_default(["filter", "map", "takeWhile"], function(methodName, index) {
  var type = index + 1, isFilter = type == LAZY_FILTER_FLAG2 || type == LAZY_WHILE_FLAG;
  LazyWrapper_default.prototype[methodName] = function(iteratee2) {
    var result2 = this.clone();
    result2.__iteratees__.push({
      "iteratee": baseIteratee_default(iteratee2, 3),
      "type": type
    });
    result2.__filtered__ = result2.__filtered__ || isFilter;
    return result2;
  };
});
arrayEach_default(["head", "last"], function(methodName, index) {
  var takeName = "take" + (index ? "Right" : "");
  LazyWrapper_default.prototype[methodName] = function() {
    return this[takeName](1).value()[0];
  };
});
arrayEach_default(["initial", "tail"], function(methodName, index) {
  var dropName = "drop" + (index ? "" : "Right");
  LazyWrapper_default.prototype[methodName] = function() {
    return this.__filtered__ ? new LazyWrapper_default(this) : this[dropName](1);
  };
});
LazyWrapper_default.prototype.compact = function() {
  return this.filter(identity_default);
};
LazyWrapper_default.prototype.find = function(predicate) {
  return this.filter(predicate).head();
};
LazyWrapper_default.prototype.findLast = function(predicate) {
  return this.reverse().find(predicate);
};
LazyWrapper_default.prototype.invokeMap = baseRest_default(function(path, args) {
  if (typeof path == "function") {
    return new LazyWrapper_default(this);
  }
  return this.map(function(value) {
    return baseInvoke_default(value, path, args);
  });
});
LazyWrapper_default.prototype.reject = function(predicate) {
  return this.filter(negate_default(baseIteratee_default(predicate)));
};
LazyWrapper_default.prototype.slice = function(start, end) {
  start = toInteger_default(start);
  var result2 = this;
  if (result2.__filtered__ && (start > 0 || end < 0)) {
    return new LazyWrapper_default(result2);
  }
  if (start < 0) {
    result2 = result2.takeRight(-start);
  } else if (start) {
    result2 = result2.drop(start);
  }
  if (end !== void 0) {
    end = toInteger_default(end);
    result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
  }
  return result2;
};
LazyWrapper_default.prototype.takeRightWhile = function(predicate) {
  return this.reverse().takeWhile(predicate).reverse();
};
LazyWrapper_default.prototype.toArray = function() {
  return this.take(MAX_ARRAY_LENGTH7);
};
baseForOwn_default(LazyWrapper_default.prototype, function(func, methodName) {
  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = wrapperLodash_default[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
  if (!lodashFunc) {
    return;
  }
  wrapperLodash_default.prototype[methodName] = function() {
    var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper_default, iteratee2 = args[0], useLazy = isLazy || isArray_default(value);
    var interceptor = function(value2) {
      var result3 = lodashFunc.apply(wrapperLodash_default, arrayPush_default([value2], args));
      return isTaker && chainAll ? result3[0] : result3;
    };
    if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
      isLazy = useLazy = false;
    }
    var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
    if (!retUnwrapped && useLazy) {
      value = onlyLazy ? value : new LazyWrapper_default(this);
      var result2 = func.apply(value, args);
      result2.__actions__.push({ "func": thru_default, "args": [interceptor], "thisArg": void 0 });
      return new LodashWrapper_default(result2, chainAll);
    }
    if (isUnwrapped && onlyLazy) {
      return func.apply(this, args);
    }
    result2 = this.thru(interceptor);
    return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
  };
});
arrayEach_default(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
  var func = arrayProto6[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
  wrapperLodash_default.prototype[methodName] = function() {
    var args = arguments;
    if (retUnwrapped && !this.__chain__) {
      var value = this.value();
      return func.apply(isArray_default(value) ? value : [], args);
    }
    return this[chainName](function(value2) {
      return func.apply(isArray_default(value2) ? value2 : [], args);
    });
  };
});
baseForOwn_default(LazyWrapper_default.prototype, function(func, methodName) {
  var lodashFunc = wrapperLodash_default[methodName];
  if (lodashFunc) {
    var key = lodashFunc.name + "";
    if (!hasOwnProperty25.call(realNames_default, key)) {
      realNames_default[key] = [];
    }
    realNames_default[key].push({ "name": methodName, "func": lodashFunc });
  }
});
realNames_default[createHybrid_default(void 0, WRAP_BIND_KEY_FLAG7).name] = [{
  "name": "wrapper",
  "func": void 0
}];
LazyWrapper_default.prototype.clone = lazyClone_default;
LazyWrapper_default.prototype.reverse = lazyReverse_default;
LazyWrapper_default.prototype.value = lazyValue_default;
wrapperLodash_default.prototype.at = seq_default_default.at;
wrapperLodash_default.prototype.chain = seq_default_default.wrapperChain;
wrapperLodash_default.prototype.commit = seq_default_default.commit;
wrapperLodash_default.prototype.next = seq_default_default.next;
wrapperLodash_default.prototype.plant = seq_default_default.plant;
wrapperLodash_default.prototype.reverse = seq_default_default.reverse;
wrapperLodash_default.prototype.toJSON = wrapperLodash_default.prototype.valueOf = wrapperLodash_default.prototype.value = seq_default_default.value;
wrapperLodash_default.prototype.first = wrapperLodash_default.prototype.head;
if (symIterator2) {
  wrapperLodash_default.prototype[symIterator2] = seq_default_default.toIterator;
}

// node_modules/exenv-es6/dist/can-use-dom.js
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}

// node_modules/@microsoft/fast-web-utilities/dist/dom.js
function isHTMLElement(...args) {
  return args.every((arg) => arg instanceof HTMLElement);
}
function getDisplayedNodes(rootNode, selector) {
  if (!isHTMLElement(rootNode)) {
    return;
  }
  const nodes = Array.from(rootNode.querySelectorAll(selector));
  return nodes.filter((node) => node.offsetParent !== null);
}
function getNonce() {
  const node = document.querySelector('meta[property="csp-nonce"]');
  if (node) {
    return node.getAttribute("content");
  } else {
    return null;
  }
}
var _canUseFocusVisible;
function canUseFocusVisible() {
  if (isBoolean_default(_canUseFocusVisible)) {
    return _canUseFocusVisible;
  }
  if (!canUseDOM()) {
    _canUseFocusVisible = false;
    return _canUseFocusVisible;
  }
  const styleElement = document.createElement("style");
  const styleNonce = getNonce();
  if (styleNonce !== null) {
    styleElement.setAttribute("nonce", styleNonce);
  }
  document.head.appendChild(styleElement);
  try {
    styleElement.sheet.insertRule("foo:focus-visible {color:inherit}", 0);
    _canUseFocusVisible = true;
  } catch (e) {
    _canUseFocusVisible = false;
  } finally {
    document.head.removeChild(styleElement);
  }
  return _canUseFocusVisible;
}

// node_modules/@microsoft/fast-web-utilities/dist/events.js
var eventFocus = "focus";
var eventFocusIn = "focusin";
var eventFocusOut = "focusout";
var eventKeyDown = "keydown";
var eventResize = "resize";
var eventScroll = "scroll";

// node_modules/@microsoft/fast-web-utilities/dist/key-codes.js
var KeyCodes;
(function(KeyCodes2) {
  KeyCodes2[KeyCodes2["alt"] = 18] = "alt";
  KeyCodes2[KeyCodes2["arrowDown"] = 40] = "arrowDown";
  KeyCodes2[KeyCodes2["arrowLeft"] = 37] = "arrowLeft";
  KeyCodes2[KeyCodes2["arrowRight"] = 39] = "arrowRight";
  KeyCodes2[KeyCodes2["arrowUp"] = 38] = "arrowUp";
  KeyCodes2[KeyCodes2["back"] = 8] = "back";
  KeyCodes2[KeyCodes2["backSlash"] = 220] = "backSlash";
  KeyCodes2[KeyCodes2["break"] = 19] = "break";
  KeyCodes2[KeyCodes2["capsLock"] = 20] = "capsLock";
  KeyCodes2[KeyCodes2["closeBracket"] = 221] = "closeBracket";
  KeyCodes2[KeyCodes2["colon"] = 186] = "colon";
  KeyCodes2[KeyCodes2["colon2"] = 59] = "colon2";
  KeyCodes2[KeyCodes2["comma"] = 188] = "comma";
  KeyCodes2[KeyCodes2["ctrl"] = 17] = "ctrl";
  KeyCodes2[KeyCodes2["delete"] = 46] = "delete";
  KeyCodes2[KeyCodes2["end"] = 35] = "end";
  KeyCodes2[KeyCodes2["enter"] = 13] = "enter";
  KeyCodes2[KeyCodes2["equals"] = 187] = "equals";
  KeyCodes2[KeyCodes2["equals2"] = 61] = "equals2";
  KeyCodes2[KeyCodes2["equals3"] = 107] = "equals3";
  KeyCodes2[KeyCodes2["escape"] = 27] = "escape";
  KeyCodes2[KeyCodes2["forwardSlash"] = 191] = "forwardSlash";
  KeyCodes2[KeyCodes2["function1"] = 112] = "function1";
  KeyCodes2[KeyCodes2["function10"] = 121] = "function10";
  KeyCodes2[KeyCodes2["function11"] = 122] = "function11";
  KeyCodes2[KeyCodes2["function12"] = 123] = "function12";
  KeyCodes2[KeyCodes2["function2"] = 113] = "function2";
  KeyCodes2[KeyCodes2["function3"] = 114] = "function3";
  KeyCodes2[KeyCodes2["function4"] = 115] = "function4";
  KeyCodes2[KeyCodes2["function5"] = 116] = "function5";
  KeyCodes2[KeyCodes2["function6"] = 117] = "function6";
  KeyCodes2[KeyCodes2["function7"] = 118] = "function7";
  KeyCodes2[KeyCodes2["function8"] = 119] = "function8";
  KeyCodes2[KeyCodes2["function9"] = 120] = "function9";
  KeyCodes2[KeyCodes2["home"] = 36] = "home";
  KeyCodes2[KeyCodes2["insert"] = 45] = "insert";
  KeyCodes2[KeyCodes2["menu"] = 93] = "menu";
  KeyCodes2[KeyCodes2["minus"] = 189] = "minus";
  KeyCodes2[KeyCodes2["minus2"] = 109] = "minus2";
  KeyCodes2[KeyCodes2["numLock"] = 144] = "numLock";
  KeyCodes2[KeyCodes2["numPad0"] = 96] = "numPad0";
  KeyCodes2[KeyCodes2["numPad1"] = 97] = "numPad1";
  KeyCodes2[KeyCodes2["numPad2"] = 98] = "numPad2";
  KeyCodes2[KeyCodes2["numPad3"] = 99] = "numPad3";
  KeyCodes2[KeyCodes2["numPad4"] = 100] = "numPad4";
  KeyCodes2[KeyCodes2["numPad5"] = 101] = "numPad5";
  KeyCodes2[KeyCodes2["numPad6"] = 102] = "numPad6";
  KeyCodes2[KeyCodes2["numPad7"] = 103] = "numPad7";
  KeyCodes2[KeyCodes2["numPad8"] = 104] = "numPad8";
  KeyCodes2[KeyCodes2["numPad9"] = 105] = "numPad9";
  KeyCodes2[KeyCodes2["numPadDivide"] = 111] = "numPadDivide";
  KeyCodes2[KeyCodes2["numPadDot"] = 110] = "numPadDot";
  KeyCodes2[KeyCodes2["numPadMinus"] = 109] = "numPadMinus";
  KeyCodes2[KeyCodes2["numPadMultiply"] = 106] = "numPadMultiply";
  KeyCodes2[KeyCodes2["numPadPlus"] = 107] = "numPadPlus";
  KeyCodes2[KeyCodes2["openBracket"] = 219] = "openBracket";
  KeyCodes2[KeyCodes2["pageDown"] = 34] = "pageDown";
  KeyCodes2[KeyCodes2["pageUp"] = 33] = "pageUp";
  KeyCodes2[KeyCodes2["period"] = 190] = "period";
  KeyCodes2[KeyCodes2["print"] = 44] = "print";
  KeyCodes2[KeyCodes2["quote"] = 222] = "quote";
  KeyCodes2[KeyCodes2["scrollLock"] = 145] = "scrollLock";
  KeyCodes2[KeyCodes2["shift"] = 16] = "shift";
  KeyCodes2[KeyCodes2["space"] = 32] = "space";
  KeyCodes2[KeyCodes2["tab"] = 9] = "tab";
  KeyCodes2[KeyCodes2["tilde"] = 192] = "tilde";
  KeyCodes2[KeyCodes2["windowsLeft"] = 91] = "windowsLeft";
  KeyCodes2[KeyCodes2["windowsOpera"] = 219] = "windowsOpera";
  KeyCodes2[KeyCodes2["windowsRight"] = 92] = "windowsRight";
})(KeyCodes || (KeyCodes = {}));
var keyCodeArrowDown = 40;
var keyCodeArrowLeft = 37;
var keyCodeArrowRight = 39;
var keyCodeArrowUp = 38;
var keyCodeEnd = 35;
var keyCodeEnter = 13;
var keyCodeEscape = 27;
var keyCodeFunction2 = 113;
var keyCodeHome = 36;
var keyCodePageDown = 34;
var keyCodePageUp = 33;
var keyCodeSpace = 32;
var keyCodeTab = 9;
var keyArrowDown = "ArrowDown";
var keyArrowLeft = "ArrowLeft";
var keyArrowRight = "ArrowRight";
var keyArrowUp = "ArrowUp";
var keyEnter = "Enter";
var ArrowKeys = {
  ArrowDown: keyArrowDown,
  ArrowLeft: keyArrowLeft,
  ArrowRight: keyArrowRight,
  ArrowUp: keyArrowUp
};

// node_modules/@microsoft/fast-web-utilities/dist/localization.js
var Direction;
(function(Direction2) {
  Direction2["ltr"] = "ltr";
  Direction2["rtl"] = "rtl";
})(Direction || (Direction = {}));

// node_modules/@microsoft/fast-web-utilities/dist/numbers.js
function wrapInBounds(min2, max2, value) {
  if (value < min2) {
    return max2;
  } else if (value > max2) {
    return min2;
  }
  return value;
}
function limit(min2, max2, value) {
  return Math.min(Math.max(value, min2), max2);
}

// node_modules/@microsoft/fast-web-utilities/dist/rtl-scroll-converter.js
var RtlScrollConverter = class {
  /**
   *  Gets the scrollLeft value of the provided element
   */
  static getScrollLeft(scrolledElement, direction2) {
    if (direction2 === Direction.rtl) {
      return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);
    }
    return scrolledElement.scrollLeft;
  }
  /**
   * Sets the scrollLeft value of the provided element
   */
  static setScrollLeft(scrolledElement, scrollValue, direction2) {
    if (direction2 === Direction.rtl) {
      RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, scrollValue);
      return;
    }
    scrolledElement.scrollLeft = scrollValue;
  }
  /**
   * The initial rtl scroll converter getter function, it calls the browser test to set the correct converter
   * functions and then invokes the getter
   */
  static initialGetRtlScrollConverter(scrolledElement) {
    RtlScrollConverter.initializeRtlScrollConverters();
    return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);
  }
  /**
   * The "direct" rtl get scroll converter does not need to tamper with the scrollLeft
   * values as the browser is already doing the right thing.  Content start = 0 and
   * scrolling left goes negative.
   */
  static directGetRtlScrollConverter(scrolledElement) {
    return scrolledElement.scrollLeft;
  }
  /**
   * The "inverted" get scroll converter is used when the browser reports scroll left
   * as a positive maximum scroll value at content start and then goes to zero as content
   * is scrolled left
   */
  static invertedGetRtlScrollConverter(scrolledElement) {
    return -Math.abs(scrolledElement.scrollLeft);
  }
  /**
   * The "reverse" get scroll converter is used when the browser reports scroll left
   * as 0 at content start and then goes positive as content is scrolled left
   */
  static reverseGetRtlScrollConverter(scrolledElement) {
    return scrolledElement.scrollLeft - (scrolledElement.scrollWidth - scrolledElement.clientWidth);
  }
  /**
   * The initial rtl scroll converter setter function, it calls the browser test to set the correct converter
   * functions and then invokes the setter
   */
  static initialSetRtlScrollConverter(scrolledElement, newScrollValue) {
    RtlScrollConverter.initializeRtlScrollConverters();
    RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, newScrollValue);
  }
  /**
   * The "direct" rtl set scroll converter does not need to tamper with the scrollLeft
   * values as the browser is already doing the right thing.  Content start = 0 and
   * scrolling left goes negative.
   */
  static directSetRtlScrollConverter(scrolledElement, newScrollValue) {
    scrolledElement.scrollLeft = newScrollValue;
  }
  /**
   * The "inverted" set scroll converter is used when the browser reports scroll left
   * as a positive maximum scroll value at content start and then goes to zero as content
   * is scrolled left
   */
  static invertedSetRtlScrollConverter(scrolledElement, newScrollValue) {
    scrolledElement.scrollLeft = Math.abs(newScrollValue);
  }
  /**
   * The "reverse" set scroll converter is used when the browser reports scroll left
   * as 0 at content start and then goes positive as content is scrolled left
   */
  static reverseSetRtlScrollConverter(scrolledElement, newScrollValue) {
    const maxScroll = scrolledElement.scrollWidth - scrolledElement.clientWidth;
    scrolledElement.scrollLeft = maxScroll + newScrollValue;
  }
  /**
   * detects the appropriate rtl scroll converter functions and assigns them
   * should only run once
   */
  static initializeRtlScrollConverters() {
    if (!canUseDOM()) {
      RtlScrollConverter.applyDirectScrollConverters();
      return;
    }
    const testElement = RtlScrollConverter.getTestElement();
    document.body.appendChild(testElement);
    RtlScrollConverter.checkForScrollType(testElement);
    document.body.removeChild(testElement);
  }
  /**
   * checks the provided test element to determine scroll type
   * and apply appropriate converters
   */
  static checkForScrollType(testElement) {
    if (RtlScrollConverter.isReverse(testElement)) {
      RtlScrollConverter.applyReverseScrollConverters();
    } else {
      if (RtlScrollConverter.isDirect(testElement)) {
        RtlScrollConverter.applyDirectScrollConverters();
      } else {
        RtlScrollConverter.applyInvertedScrollConverters();
      }
    }
  }
  /**
   * checks test element initial state for rtl "reverse" mode
   */
  static isReverse(testElement) {
    return testElement.scrollLeft > 0;
  }
  /**
   * checks test element for rtl "direct" mode
   */
  static isDirect(testElement) {
    testElement.scrollLeft = -1;
    return testElement.scrollLeft < 0;
  }
  /**
   * apply direct scroll conververters
   */
  static applyDirectScrollConverters() {
    RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.directSetRtlScrollConverter;
    RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.directGetRtlScrollConverter;
  }
  /**
   * apply inverted scroll conververters
   */
  static applyInvertedScrollConverters() {
    RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.invertedSetRtlScrollConverter;
    RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.invertedGetRtlScrollConverter;
  }
  /**
   * apply reverse scroll conververters
   */
  static applyReverseScrollConverters() {
    RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.reverseSetRtlScrollConverter;
    RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.reverseGetRtlScrollConverter;
  }
  /**
   * generate a test element for rtl testing
   */
  static getTestElement() {
    const testElement = document.createElement("div");
    testElement.appendChild(document.createTextNode("ABCD"));
    testElement.dir = "rtl";
    testElement.style.fontSize = "14px";
    testElement.style.width = "4px";
    testElement.style.height = "1px";
    testElement.style.position = "absolute";
    testElement.style.top = "-1000px";
    testElement.style.overflow = "scroll";
    return testElement;
  }
};
RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.initialGetRtlScrollConverter;
RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.initialSetRtlScrollConverter;

// node_modules/@microsoft/fast-web-utilities/dist/system-colors.js
var SystemColors;
(function(SystemColors2) {
  SystemColors2["Canvas"] = "Canvas";
  SystemColors2["CanvasText"] = "CanvasText";
  SystemColors2["LinkText"] = "LinkText";
  SystemColors2["VisitedText"] = "VisitedText";
  SystemColors2["ActiveText"] = "ActiveText";
  SystemColors2["ButtonFace"] = "ButtonFace";
  SystemColors2["ButtonText"] = "ButtonText";
  SystemColors2["Field"] = "Field";
  SystemColors2["FieldText"] = "FieldText";
  SystemColors2["Highlight"] = "Highlight";
  SystemColors2["HighlightText"] = "HighlightText";
  SystemColors2["GrayText"] = "GrayText";
})(SystemColors || (SystemColors = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/accordion/accordion.js
var AccordionExpandMode;
(function(AccordionExpandMode2) {
  AccordionExpandMode2["single"] = "single";
  AccordionExpandMode2["multi"] = "multi";
})(AccordionExpandMode || (AccordionExpandMode = {}));
var Accordion = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.expandmode = AccordionExpandMode.multi;
    this.activeItemIndex = 0;
    this.change = () => {
      this.$emit("change");
    };
    this.setItems = () => {
      this.accordionIds = this.getItemIds();
      this.accordionItems.forEach((item, index) => {
        if (item instanceof AccordionItem) {
          item.addEventListener("change", this.activeItemChange);
          if (this.isSingleExpandMode()) {
            this.activeItemIndex !== index ? item.expanded = false : item.expanded = true;
          }
        }
        const itemId = this.accordionIds[index];
        item.setAttribute("id", typeof itemId !== "string" ? `accordion-${index + 1}` : itemId);
        this.activeid = this.accordionIds[this.activeItemIndex];
        item.addEventListener("keydown", this.handleItemKeyDown);
        item.addEventListener("focus", this.handleItemFocus);
      });
    };
    this.removeItemListeners = (oldValue) => {
      oldValue.forEach((item, index) => {
        item.removeEventListener("change", this.activeItemChange);
        item.removeEventListener("keydown", this.handleItemKeyDown);
        item.removeEventListener("focus", this.handleItemFocus);
      });
    };
    this.activeItemChange = (event) => {
      const selectedItem = event.target;
      if (this.isSingleExpandMode()) {
        this.resetItems();
        event.target.expanded = true;
      }
      this.activeid = event.target.getAttribute("id");
      this.activeItemIndex = Array.from(this.accordionItems).indexOf(selectedItem);
      this.change();
    };
    this.handleItemKeyDown = (event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      const keyCode = event.keyCode;
      this.accordionIds = this.getItemIds();
      switch (keyCode) {
        case keyCodeArrowUp:
          event.preventDefault();
          this.adjust(-1);
          break;
        case keyCodeArrowDown:
          event.preventDefault();
          this.adjust(1);
          break;
        case keyCodeHome:
          this.activeItemIndex = 0;
          this.focusItem();
          break;
        case keyCodeEnd:
          this.activeItemIndex = this.accordionItems.length - 1;
          this.focusItem();
          break;
      }
    };
    this.handleItemFocus = (event) => {
      if (event.target === event.currentTarget) {
        const focusedItem = event.target;
        const focusedIndex = this.activeItemIndex = Array.from(this.accordionItems).indexOf(focusedItem);
        if (this.activeItemIndex !== focusedIndex && focusedIndex !== -1) {
          this.activeItemIndex = focusedIndex;
          this.activeid = this.accordionIds[this.activeItemIndex];
        }
      }
    };
  }
  /**
   * @internal
   */
  accordionItemsChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.removeItemListeners(oldValue);
      this.accordionIds = this.getItemIds();
      this.setItems();
    }
  }
  resetItems() {
    this.accordionItems.forEach((item, index) => {
      item.expanded = false;
    });
  }
  getItemIds() {
    return this.accordionItems.map((accordionItem) => {
      return accordionItem.getAttribute("id");
    });
  }
  isSingleExpandMode() {
    return this.expandmode === AccordionExpandMode.single;
  }
  adjust(adjustment) {
    this.activeItemIndex = wrapInBounds(0, this.accordionItems.length - 1, this.activeItemIndex + adjustment);
    this.focusItem();
  }
  focusItem() {
    const element = this.accordionItems[this.activeItemIndex];
    if (element instanceof AccordionItem) {
      element.expandbutton.focus();
    }
  }
};
__decorate7([
  attr({ attribute: "expand-mode" })
], Accordion.prototype, "expandmode", void 0);
__decorate7([
  observable
], Accordion.prototype, "accordionItems", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/anchor/anchor.template.js
var AnchorTemplate = html2`
    <a
        class="control"
        part="control"
        download="${(x) => x.download}"
        href="${(x) => x.href}"
        hreflang="${(x) => x.hreflang}"
        ping="${(x) => x.ping}"
        referrerpolicy="${(x) => x.referrerpolicy}"
        rel="${(x) => x.rel}"
        target="${(x) => x.target}"
        type="${(x) => x.type}"
        aria-atomic="${(x) => x.ariaAtomic}"
        aria-busy="${(x) => x.ariaBusy}"
        aria-controls="${(x) => x.ariaControls}"
        aria-current="${(x) => x.ariaCurrent}"
        aria-describedBy="${(x) => x.ariaDescribedby}"
        aria-details="${(x) => x.ariaDetails}"
        aria-disabled="${(x) => x.ariaDisabled}"
        aria-errormessage="${(x) => x.ariaErrormessage}"
        aria-expanded="${(x) => x.ariaExpanded}"
        aria-flowto="${(x) => x.ariaFlowto}"
        aria-haspopup="${(x) => x.ariaHaspopup}"
        aria-hidden="${(x) => x.ariaHidden}"
        aria-invalid="${(x) => x.ariaInvalid}"
        aria-keyshortcuts="${(x) => x.ariaKeyshortcuts}"
        aria-label="${(x) => x.ariaLabel}"
        aria-labelledby="${(x) => x.ariaLabelledby}"
        aria-live="${(x) => x.ariaLive}"
        aria-owns="${(x) => x.ariaOwns}"
        aria-relevant="${(x) => x.ariaRelevant}"
        aria-roledescription="${(x) => x.ariaRoledescription}"
        ${ref("control")}
    >
        ${startTemplate}
        <span class="content" part="content">
            <slot ${slotted("defaultSlottedContent")}></slot>
        </span>
        ${endTemplate}
    </a>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/patterns/aria-global.js
var ARIAGlobalStatesAndProperties = class {
};
__decorate7([
  attr({ attribute: "aria-atomic", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaAtomic", void 0);
__decorate7([
  attr({ attribute: "aria-busy", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaBusy", void 0);
__decorate7([
  attr({ attribute: "aria-controls", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaControls", void 0);
__decorate7([
  attr({ attribute: "aria-current", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaCurrent", void 0);
__decorate7([
  attr({ attribute: "aria-describedby", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaDescribedby", void 0);
__decorate7([
  attr({ attribute: "aria-details", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaDetails", void 0);
__decorate7([
  attr({ attribute: "aria-disabled", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaDisabled", void 0);
__decorate7([
  attr({ attribute: "aria-errormessage", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaErrormessage", void 0);
__decorate7([
  attr({ attribute: "aria-flowto", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaFlowto", void 0);
__decorate7([
  attr({ attribute: "aria-haspopup", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaHaspopup", void 0);
__decorate7([
  attr({ attribute: "aria-hidden", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaHidden", void 0);
__decorate7([
  attr({ attribute: "aria-invalid", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaInvalid", void 0);
__decorate7([
  attr({ attribute: "aria-keyshortcuts", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaKeyshortcuts", void 0);
__decorate7([
  attr({ attribute: "aria-label", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaLabel", void 0);
__decorate7([
  attr({ attribute: "aria-labelledby", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaLabelledby", void 0);
__decorate7([
  attr({ attribute: "aria-live", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaLive", void 0);
__decorate7([
  attr({ attribute: "aria-owns", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaOwns", void 0);
__decorate7([
  attr({ attribute: "aria-relevant", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaRelevant", void 0);
__decorate7([
  attr({ attribute: "aria-roledescription", mode: "fromView" })
], ARIAGlobalStatesAndProperties.prototype, "ariaRoledescription", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/anchor/anchor.js
var Anchor = class extends FASTElement {
};
__decorate7([
  attr
], Anchor.prototype, "download", void 0);
__decorate7([
  attr
], Anchor.prototype, "href", void 0);
__decorate7([
  attr
], Anchor.prototype, "hreflang", void 0);
__decorate7([
  attr
], Anchor.prototype, "ping", void 0);
__decorate7([
  attr
], Anchor.prototype, "referrerpolicy", void 0);
__decorate7([
  attr
], Anchor.prototype, "rel", void 0);
__decorate7([
  attr
], Anchor.prototype, "target", void 0);
__decorate7([
  attr
], Anchor.prototype, "type", void 0);
__decorate7([
  observable
], Anchor.prototype, "defaultSlottedContent", void 0);
var DelegatesARIALink = class {
};
__decorate7([
  attr({ attribute: "aria-expanded", mode: "fromView" })
], DelegatesARIALink.prototype, "ariaExpanded", void 0);
applyMixins(DelegatesARIALink, ARIAGlobalStatesAndProperties);
applyMixins(Anchor, StartEnd, DelegatesARIALink);

// node_modules/@microsoft/fast-foundation/dist/esm/anchored-region/anchored-region.template.js
var AnchoredRegionTemplate = html2`
    <template class="${(x) => x.initialLayoutComplete ? "loaded" : ""}">
        ${when((x) => x.initialLayoutComplete, html2`
                <slot></slot>
            `)}
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/composed-parent.js
function composedParent(element) {
  const parentNode = element.parentElement;
  if (parentNode) {
    return parentNode;
  } else {
    const rootNode = element.getRootNode();
    if (rootNode.host instanceof HTMLElement) {
      return rootNode.host;
    }
  }
  return null;
}

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/match-media-stylesheet-behavior.js
var MatchMediaBehavior = class {
  /**
   *
   * @param query - The media query to operate from.
   */
  constructor(query) {
    this.listenerCache = /* @__PURE__ */ new WeakMap();
    this.query = query;
  }
  /**
   * Binds the behavior to the element.
   * @param source - The element for which the behavior is bound.
   */
  bind(source) {
    const { query } = this;
    const listener = this.constructListener(source);
    listener.bind(query)();
    query.addListener(listener);
    this.listenerCache.set(source, listener);
  }
  /**
   * Unbinds the behavior from the element.
   * @param source - The element for which the behavior is unbinding.
   */
  unbind(source) {
    const listener = this.listenerCache.get(source);
    if (listener) {
      this.query.removeListener(listener);
      this.listenerCache.delete(source);
    }
  }
};
var MatchMediaStyleSheetBehavior = class extends MatchMediaBehavior {
  /**
   * Constructs a {@link MatchMediaStyleSheetBehavior} instance.
   * @param query - The media query to operate from.
   * @param styles - The styles to coordinate with the query.
   */
  constructor(query, styles23) {
    super(query);
    this.styles = styles23;
  }
  /**
   * Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for
   * a provided query.
   * @param query - The media query to operate from.
   *
   * @public
   * @example
   *
   * ```ts
   * import { css } from "@microsoft/fast-element";
   * import { MatchMediaStyleSheetBehavior } from "@microsoft/fast-foundation";
   *
   * const landscapeBehavior = MatchMediaStyleSheetBehavior.with(
   *   window.matchMedia("(orientation: landscape)")
   * );
   * const styles = css`
   *   :host {
   *     width: 200px;
   *     height: 400px;
   *   }
   * `
   * .withBehaviors(landscapeBehavior(css`
   *   :host {
   *     width: 400px;
   *     height: 200px;
   *   }
   * `))
   * ```
   */
  static with(query) {
    return (styles23) => {
      return new MatchMediaStyleSheetBehavior(query, styles23);
    };
  }
  /**
   * Constructs a match-media listener for a provided element.
   * @param source - the element for which to attach or detach styles.
   * @internal
   */
  constructListener(source) {
    let attached = false;
    const styles23 = this.styles;
    return function listener() {
      const { matches: matches3 } = this;
      if (matches3 && !attached) {
        source.$fastController.addStyles(styles23);
        attached = matches3;
      } else if (!matches3 && attached) {
        source.$fastController.removeStyles(styles23);
        attached = matches3;
      }
    };
  }
  /**
   * Unbinds the behavior from the element.
   * @param source - The element for which the behavior is unbinding.
   * @internal
   */
  unbind(source) {
    super.unbind(source);
    source.$fastController.removeStyles(this.styles);
  }
};
var forcedColorsStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(forced-colors)"));
var darkModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(prefers-color-scheme: dark)"));
var lightModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(prefers-color-scheme: light)"));

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/property-stylesheet-behavior.js
var PropertyStyleSheetBehavior = class {
  /**
   * Constructs a {@link PropertyStyleSheetBehavior} instance.
   * @param propertyName - The property name to operate from.
   * @param value - The property value to operate from.
   * @param styles - The styles to coordinate with the property.
   */
  constructor(propertyName, value, styles23) {
    this.propertyName = propertyName;
    this.value = value;
    this.styles = styles23;
  }
  /**
   * Binds the behavior to the element.
   * @param elementInstance - The element for which the property is applied.
   */
  bind(elementInstance) {
    Observable.getNotifier(elementInstance).subscribe(this, this.propertyName);
    this.handleChange(elementInstance, this.propertyName);
  }
  /**
   * Unbinds the behavior from the element.
   * @param source - The element for which the behavior is unbinding.
   * @internal
   */
  unbind(source) {
    Observable.getNotifier(source).unsubscribe(this, this.propertyName);
    source.$fastController.removeStyles(this.styles);
  }
  /**
   * Change event for the provided element.
   * @param source - the element for which to attach or detach styles.
   * @internal
   */
  handleChange(source, key) {
    if (source[key] === this.value) {
      source.$fastController.addStyles(this.styles);
    } else {
      source.$fastController.removeStyles(this.styles);
    }
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/disabled.js
var disabledCursor = "not-allowed";

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/display.js
var hidden = `:host([hidden]){display:none}`;
function display(displayValue) {
  return `${hidden}:host{display:${displayValue}}`;
}

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/focus.js
var focusVisible = canUseFocusVisible() ? "focus-visible" : "focus";

// node_modules/@microsoft/fast-foundation/dist/esm/custom-properties/manager.js
var hostSelector = ":host{}";
var CustomPropertyManagerBase = class {
  constructor() {
    this.queue = /* @__PURE__ */ new Set();
    this.customPropertyTarget = null;
    this._owner = null;
    this.ticking = false;
    this.cssCustomPropertyDefinitions = /* @__PURE__ */ new Map();
  }
  /**
   * {@inheritdoc CustomPropertyManager.owner}
   */
  get owner() {
    return this._owner;
  }
  /**
   * {@inheritdoc CustomPropertyManager.register}
   */
  register(def) {
    const cached = this.cssCustomPropertyDefinitions.get(def.name);
    if (cached) {
      cached.count += 1;
    } else {
      this.cssCustomPropertyDefinitions.set(def.name, Object.assign(Object.assign({}, def), { count: 1 }));
      this.set(def);
    }
  }
  /**
   * {@inheritdoc CustomPropertyManager.unregister}
   */
  unregister(name) {
    const cached = this.cssCustomPropertyDefinitions.get(name);
    if (cached) {
      cached.count -= 1;
      if (cached.count === 0) {
        this.cssCustomPropertyDefinitions.delete(name);
        this.remove(name);
      }
    }
  }
  /**
   * {@inheritdoc CustomPropertyManager.set}
   */
  set(definition) {
    if (this.owner) {
      this.customPropertyTarget ? this.customPropertyTarget.setProperty(`--${definition.name}`, this.owner.evaluate(definition)) : this.queue.add(this.set.bind(this, definition));
    }
  }
  /**
   * Removes a CSS custom property from the provider.
   * @param name - the name of the property to remove
   */
  remove(name) {
    this.customPropertyTarget ? this.customPropertyTarget.removeProperty(`--${name}`) : this.queue.add(this.remove.bind(this, name));
  }
  /**
   * {@inheritdoc CustomPropertyManager.setAll}
   */
  setAll() {
    if (this.ticking) {
      return;
    }
    this.ticking = true;
    DOM.queueUpdate(() => {
      this.ticking = false;
      this.cssCustomPropertyDefinitions.forEach((def) => {
        this.set(def);
      });
    });
  }
};
var ConstructableStylesCustomPropertyManager = class extends CustomPropertyManagerBase {
  constructor(sheet) {
    super();
    this.subscribers = /* @__PURE__ */ new Set();
    this.sheet = sheet;
    this.styles = ElementStyles.create([sheet]);
    this.customPropertyTarget = sheet.cssRules[sheet.insertRule(hostSelector)].style;
  }
  /**
   * {@inheritdoc CustomPropertyManager.subscribe}
   */
  subscribe(client) {
    this.subscribers.add(client);
    if (this.subscribers.size === 1) {
      this._owner = client;
    }
    client.cssCustomPropertyDefinitions.forEach((def) => {
      this.register(def);
    });
    client.$fastController.addStyles(this.styles);
  }
  /**
   * {@inheritdoc CustomPropertyManager.unsubscribe}
   */
  unsubscribe(client) {
    this.subscribers.delete(client);
    client.cssCustomPropertyDefinitions.forEach((def) => this.unregister(def.name));
    if (this.owner === client) {
      this._owner = this.subscribers.size ? this.subscribers.values().next().value : null;
    }
    if (!this.sheet.ownerNode && this.styles) {
      client.$fastController.removeStyles(this.styles);
    }
  }
  /**
   * {@inheritdoc CustomPropertyManager.isSubscribed}
   */
  isSubscribed(client) {
    return this.subscribers.has(client);
  }
};
var StyleElementCustomPropertyManager = class extends CustomPropertyManagerBase {
  constructor(style, client) {
    super();
    this._sheet = null;
    this.handleConnection = {
      handleChange: () => {
        var _a;
        this._sheet = this.styles.sheet;
        const key = this.sheet.insertRule(hostSelector);
        this.customPropertyTarget = this.sheet.rules[key].style;
        Observable.getNotifier((_a = this._owner) === null || _a === void 0 ? void 0 : _a.$fastController).unsubscribe(this.handleConnection, "isConnected");
      }
    };
    const controller = client.$fastController;
    controller.addStyles(style);
    this.styles = style;
    this._owner = client;
    client.isConnected ? this.handleConnection.handleChange() : Observable.getNotifier(controller).subscribe(this.handleConnection, "isConnected");
    client.cssCustomPropertyDefinitions.forEach((def) => {
      this.register(def);
    });
  }
  get sheet() {
    return this._sheet;
  }
  customPropertyTargetChanged(prev, next) {
    if (!prev && this.queue.size) {
      this.queue.forEach((fn) => fn());
      this.queue.clear();
    }
  }
};
__decorate7([
  observable
], StyleElementCustomPropertyManager.prototype, "customPropertyTarget", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/design-system-provider/design-system-provider.js
function isDesignSystemConsumer(element) {
  const provider = element.provider;
  return provider !== null && provider !== void 0 && DesignSystemProvider.isDesignSystemProvider(provider);
}
var designSystemConsumerBehavior = {
  bind(source) {
    source.provider = DesignSystemProvider.findProvider(source);
  },
  /* eslint-disable-next-line */
  unbind(source) {
  }
};
var DesignSystemProvider = class extends FASTElement {
  constructor() {
    super();
    this.isDesignSystemProvider = true;
    this.designSystem = {};
    this.useDefaults = false;
    this.provider = null;
    this.cssCustomPropertyDefinitions = /* @__PURE__ */ new Map();
    this.attributeChangeHandler = {
      handleChange: (source, key) => {
        const value = this[key];
        const manager = this.customPropertyManager;
        if (this.isValidDesignSystemValue(value)) {
          this.designSystem[key] = value;
          const property3 = this.designSystemProperties[key];
          if (property3 && property3.cssCustomProperty && manager) {
            manager.set({
              name: property3.cssCustomProperty,
              value
            });
          }
        } else {
          this.syncDesignSystemWithProvider();
          const property3 = this.designSystemProperties[key].cssCustomProperty;
          if (manager) {
            if (typeof property3 === "string") {
              manager.remove(property3);
            }
            manager.setAll();
          }
        }
      }
    };
    this.localDesignSystemChangeHandler = {
      handleChange: () => {
        const manager = this.customPropertyManager;
        if (manager && manager.owner === this) {
          manager.setAll();
        }
      }
    };
    this.providerDesignSystemChangeHandler = {
      handleChange: (source, key) => {
        if (source[key] !== this.designSystem[key] && !this.isValidDesignSystemValue(this[key])) {
          this.designSystem[key] = source[key];
        }
      }
    };
    if (!DOM.supportsAdoptedStyleSheets) {
      this.customPropertyManager = new StyleElementCustomPropertyManager(document.createElement("style"), this);
    } else {
      this.customPropertyManager = new ConstructableStylesCustomPropertyManager(new CSSStyleSheet());
    }
    if (this.designSystemProperties === void 0) {
      this.designSystemProperties = {};
    }
    this.$fastController.addBehaviors([designSystemConsumerBehavior]);
  }
  /**
   * Read all tag-names that are associated to
   * design-system-providers
   *
   * @public
   */
  static get tagNames() {
    return DesignSystemProvider._tagNames;
  }
  /**
   * Determines if an element is a DesignSystemProvider
   * @param el - The element to test
   *
   * @public
   */
  static isDesignSystemProvider(el) {
    return el.isDesignSystemProvider || DesignSystemProvider.tagNames.indexOf(el.tagName) !== -1;
  }
  /**
   * Finds the closest design-system-provider
   * to an element.
   *
   * @param el - The element from which to begin searching.
   * @public
   */
  static findProvider(el) {
    if (isDesignSystemConsumer(el)) {
      return el.provider;
    }
    let parent2 = composedParent(el);
    while (parent2 !== null) {
      if (DesignSystemProvider.isDesignSystemProvider(parent2)) {
        el.provider = parent2;
        return parent2;
      } else if (isDesignSystemConsumer(parent2)) {
        el.provider = parent2.provider;
        return parent2.provider;
      } else {
        parent2 = composedParent(parent2);
      }
    }
    return null;
  }
  /**
   * Registers a tag-name to be associated with
   * the design-system-provider class. All tag-names for DesignSystemProvider elements
   * must be registered for proper property resolution.
   *
   * @param tagName - the HTML Element tag name to register as a DesignSystemProvider.
   *
   * @public
   */
  static registerTagName(tagName) {
    const tagNameUpper = tagName.toUpperCase();
    if (DesignSystemProvider.tagNames.indexOf(tagNameUpper) === -1) {
      DesignSystemProvider._tagNames.push(tagNameUpper);
    }
  }
  useDefaultsChanged() {
    if (this.useDefaults) {
      const props = this.designSystemProperties;
      Object.keys(props).forEach((key) => {
        if (this[key] === void 0) {
          this[key] = props[key].default;
        }
      });
    }
  }
  providerChanged(prev, next) {
    if (prev instanceof HTMLElement) {
      const notifier = Observable.getNotifier(prev.designSystem);
      Observable.getAccessors(prev.designSystem).forEach((x) => {
        notifier.unsubscribe(this.providerDesignSystemChangeHandler, x.name);
      });
    }
    if (next instanceof HTMLElement && DesignSystemProvider.isDesignSystemProvider(next)) {
      const notifier = Observable.getNotifier(next.designSystem);
      const localAccessors = Observable.getAccessors(this.designSystem).reduce((prev2, next2) => {
        return Object.assign(Object.assign({}, prev2), { [next2.name]: next2 });
      }, {});
      const localNotifier = Observable.getNotifier(this.designSystem);
      Observable.getAccessors(next.designSystem).forEach((x) => {
        notifier.subscribe(this.providerDesignSystemChangeHandler, x.name);
        if (!localAccessors[x.name]) {
          observable(this.designSystem, x.name);
          localNotifier.subscribe(this.localDesignSystemChangeHandler, x.name);
        }
      });
      this.syncDesignSystemWithProvider();
    }
  }
  customPropertyManagerChanged(prev, next) {
    if (prev && prev.unsubscribe) {
      prev.unsubscribe(this);
    }
    if (next.subscribe) {
      next.subscribe(this);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (this.customPropertyManager.subscribe && this.customPropertyManager.isSubscribed && !this.customPropertyManager.isSubscribed(this)) {
      this.customPropertyManager.subscribe(this);
    }
    const selfNotifier = Observable.getNotifier(this);
    const designSystemNotifier = Observable.getNotifier(this.designSystem);
    Object.keys(this.designSystemProperties).forEach((property3) => {
      observable(this.designSystem, property3);
      selfNotifier.subscribe(this.attributeChangeHandler, property3);
      designSystemNotifier.subscribe(this.localDesignSystemChangeHandler, property3);
      const value = this[property3];
      if (this.isValidDesignSystemValue(value)) {
        this.designSystem[property3] = value;
        const { cssCustomProperty } = this.designSystemProperties[property3];
        if (typeof cssCustomProperty === "string" && this.customPropertyManager && this.customPropertyManager.owner === this) {
          this.customPropertyManager.set({
            name: cssCustomProperty,
            value: this[property3]
          });
        }
      }
    });
    if (Array.isArray(this.disconnectedCSSCustomPropertyRegistry)) {
      for (let i = 0; i < this.disconnectedCSSCustomPropertyRegistry.length; i++) {
        this.registerCSSCustomProperty(this.disconnectedCSSCustomPropertyRegistry[i]);
      }
      delete this.disconnectedCSSCustomPropertyRegistry;
    }
    if (Array.isArray(this.disconnectedRegistry)) {
      for (let i = 0; i < this.disconnectedRegistry.length; i++) {
        this.disconnectedRegistry[i](this);
      }
      delete this.disconnectedRegistry;
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.customPropertyManager.unsubscribe) {
      this.customPropertyManager.unsubscribe(this);
    }
  }
  /**
   * Register a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} with the DeignSystemProvider.
   * Registering a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} will create the CSS custom property.
   *
   * @param def - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
   * @public
   */
  registerCSSCustomProperty(def) {
    this.cssCustomPropertyDefinitions.set(def.name, def);
    this.customPropertyManager.register(def);
  }
  /**
   * Unregister a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} from the DeignSystemProvider.
   * If all registrations of the definition are unregistered, the CSS custom property will be removed.
   *
   * @param def - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
   * @public
   */
  unregisterCSSCustomProperty(def) {
    this.cssCustomPropertyDefinitions.delete(def.name);
    this.customPropertyManager.unregister(def.name);
  }
  /**
   * Evaluates a CSSCustomPropertyDefinition with the current design system.
   *
   * @public
   */
  evaluate(definition) {
    return typeof definition.value === "function" ? (
      // use spread on the designSystem object to circumvent memoization
      // done in the color recipes - we use the same *reference* in WC
      // for performance improvements but that throws off the recipes
      // We should look at making the recipes use simple args that
      // we can individually memoize.
      definition.value(Object.assign({}, this.designSystem))
    ) : definition.value;
  }
  /**
   * Synchronize the provider's design system with the local
   * overrides. Any value defined on the instance will take priority
   * over the value defined by the provider
   */
  syncDesignSystemWithProvider() {
    if (this.provider) {
      const localDSAccessors = Observable.getAccessors(this.designSystem).reduce((prev, next) => {
        prev[next.name] = next;
        return prev;
      }, {});
      Observable.getAccessors(this.provider.designSystem).forEach((x) => {
        var _a;
        if ((!this.designSystemProperties.hasOwnProperty(x.name) || !this.isValidDesignSystemValue(this[x.name])) && this.isValidDesignSystemValue((_a = this.provider) === null || _a === void 0 ? void 0 : _a.designSystem[x.name])) {
          if (!localDSAccessors[x.name]) {
            Observable.defineProperty(this.designSystem, x.name);
          }
          this.designSystem[x.name] = this.provider.designSystem[x.name];
        }
      });
    }
  }
  isValidDesignSystemValue(value) {
    return value !== void 0 && value !== null;
  }
};
DesignSystemProvider._tagNames = [];
__decorate7([
  attr({ attribute: "use-defaults", mode: "boolean" })
], DesignSystemProvider.prototype, "useDefaults", void 0);
__decorate7([
  observable
], DesignSystemProvider.prototype, "provider", void 0);
__decorate7([
  observable
], DesignSystemProvider.prototype, "customPropertyManager", void 0);
function defineDesignSystemProvider(nameOrDef) {
  return (providerCtor) => {
    customElement2(nameOrDef)(providerCtor);
    providerCtor.registerTagName(typeof nameOrDef === "string" ? nameOrDef : nameOrDef.name);
  };
}
var designSystemProvider = defineDesignSystemProvider;

// node_modules/@microsoft/fast-foundation/dist/esm/design-system-provider/design-system-property.js
function designSystemProperty(config) {
  const decorator = (source, prop, config2) => {
    const { cssCustomProperty, attribute } = config2;
    if (!source.designSystemProperties) {
      source.designSystemProperties = {};
    }
    if (attribute === false) {
      observable(source, prop);
    } else {
      if (config2.mode === void 0) {
        config2 = Object.assign(Object.assign({}, config2), { mode: "fromView" });
      }
      attr(config2)(source, prop);
    }
    source.designSystemProperties[prop] = {
      cssCustomProperty: cssCustomProperty === false ? false : typeof cssCustomProperty === "string" ? cssCustomProperty : typeof attribute === "string" ? attribute : prop,
      default: config2.default
    };
  };
  return (source, prop) => {
    decorator(source, prop, config);
  };
}

// node_modules/@microsoft/fast-foundation/dist/esm/design-system-provider/design-system-provider.template.js
var DesignSystemProviderTemplate = html2`
    <slot></slot>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/direction.js
var DirectionalStyleSheetBehavior = class {
  constructor(ltr2, rtl2) {
    this.cache = /* @__PURE__ */ new WeakMap();
    this.ltr = ltr2;
    this.rtl = rtl2;
  }
  /**
   * @internal
   */
  bind(source) {
    const provider = DesignSystemProvider.findProvider(source);
    if (provider !== null) {
      if (provider.$fastController && provider.$fastController.isConnected) {
        this.attach(source, provider);
      } else {
        if (!Array.isArray(provider.disconnectedRegistry)) {
          provider.disconnectedRegistry = [];
        }
        provider.disconnectedRegistry.push(this.attach.bind(this, source));
      }
    }
  }
  /**
   * @internal
   */
  unbind(source) {
    const cache3 = this.cache.get(source);
    if (cache3) {
      Observable.getNotifier(cache3[0].designSystem).unsubscribe(cache3[1]);
    }
  }
  attach(source, provider) {
    const subscriber = new DirectionalStyleSheetBehaviorSubscription(this.ltr, this.rtl, source);
    Observable.getNotifier(provider.designSystem).subscribe(subscriber, "direction");
    subscriber.attach(provider.designSystem["direction"]);
    this.cache.set(source, [provider, subscriber]);
  }
};
var DirectionalStyleSheetBehaviorSubscription = class {
  constructor(ltr2, rtl2, source) {
    this.ltr = ltr2;
    this.rtl = rtl2;
    this.source = source;
    this.attached = null;
  }
  handleChange(source) {
    this.attach(source.direction);
  }
  attach(direction2) {
    if (this.attached !== this[direction2]) {
      if (this.attached !== null) {
        this.source.$fastController.removeStyles(this.attached);
      }
      this.attached = this[direction2];
      if (this.attached !== null) {
        this.source.$fastController.addStyles(this.attached);
      }
    }
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/direction.js
var getDirection = (rootNode) => {
  const dirNode = rootNode.closest("[dir]");
  return dirNode !== null && dirNode.dir === "rtl" ? Direction.rtl : Direction.ltr;
};

// node_modules/@microsoft/fast-foundation/dist/esm/utilities/whitespace-filter.js
function whitespaceFilter(value, index, array) {
  return value.nodeType !== Node.TEXT_NODE ? true : typeof value.nodeValue === "string" && !!value.nodeValue.trim().length;
}

// node_modules/@microsoft/fast-foundation/dist/esm/anchored-region/intersection-service.js
var IntersectionService = class {
  constructor() {
    this.intersectionDetector = null;
    this.observedElements = /* @__PURE__ */ new Map();
    this.requestPosition = (target, callback) => {
      var _a;
      if (this.intersectionDetector === null) {
        return;
      }
      if (this.observedElements.has(target)) {
        (_a = this.observedElements.get(target)) === null || _a === void 0 ? void 0 : _a.push(callback);
        return;
      }
      this.observedElements.set(target, [callback]);
      this.intersectionDetector.observe(target);
    };
    this.cancelRequestPosition = (target, callback) => {
      const callbacks = this.observedElements.get(target);
      if (callbacks !== void 0) {
        const callBackIndex = callbacks.indexOf(callback);
        if (callBackIndex !== -1) {
          callbacks.splice(callBackIndex, 1);
        }
      }
    };
    this.initializeIntersectionDetector = () => {
      if (!$global.IntersectionObserver) {
        return;
      }
      this.intersectionDetector = new IntersectionObserver(this.handleIntersection, {
        root: null,
        rootMargin: "0px",
        threshold: [0, 1]
      });
    };
    this.handleIntersection = (entries) => {
      if (this.intersectionDetector === null) {
        return;
      }
      const pendingCallbacks = [];
      const pendingCallbackParams = [];
      entries.forEach((entry) => {
        var _a;
        (_a = this.intersectionDetector) === null || _a === void 0 ? void 0 : _a.unobserve(entry.target);
        const thisElementCallbacks = this.observedElements.get(entry.target);
        if (thisElementCallbacks !== void 0) {
          thisElementCallbacks.forEach((callback) => {
            let targetCallbackIndex = pendingCallbacks.indexOf(callback);
            if (targetCallbackIndex === -1) {
              targetCallbackIndex = pendingCallbacks.length;
              pendingCallbacks.push(callback);
              pendingCallbackParams.push([]);
            }
            pendingCallbackParams[targetCallbackIndex].push(entry);
          });
          this.observedElements.delete(entry.target);
        }
      });
      pendingCallbacks.forEach((callback, index) => {
        callback(pendingCallbackParams[index]);
      });
    };
    this.initializeIntersectionDetector();
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/anchored-region/anchored-region.js
var AnchoredRegion = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.anchor = "";
    this.viewport = "";
    this.horizontalPositioningMode = "uncontrolled";
    this.horizontalDefaultPosition = "unset";
    this.horizontalInset = false;
    this.horizontalScaling = "content";
    this.verticalPositioningMode = "uncontrolled";
    this.verticalDefaultPosition = "unset";
    this.verticalInset = false;
    this.verticalScaling = "content";
    this.fixedPlacement = false;
    this.autoUpdateMode = "anchor";
    this.anchorElement = null;
    this.viewportElement = null;
    this.initialLayoutComplete = false;
    this.resizeDetector = null;
    this.pendingPositioningUpdate = false;
    this.pendingLayoutUpdate = false;
    this.pendingReset = false;
    this.currentDirection = Direction.ltr;
    this.regionVisible = false;
    this.updateThreshold = 0.5;
    this.update = () => {
      if (this.viewportRect === null || this.regionDimension === null) {
        this.requestLayoutUpdate();
        return;
      }
      this.requestPositionUpdates();
    };
    this.updateAnchorOffset = (horizontalOffsetDelta, verticalOffsetDelta) => {
      this.anchorLeft = this.anchorLeft + horizontalOffsetDelta;
      this.anchorRight = this.anchorRight + horizontalOffsetDelta;
      this.anchorTop = this.anchorTop + verticalOffsetDelta;
      this.anchorBottom = this.anchorBottom + verticalOffsetDelta;
      this.updateLayout();
    };
    this.startObservers = () => {
      this.stopObservers();
      if (this.anchorElement === null) {
        return;
      }
      this.requestPositionUpdates();
      if (this.resizeDetector !== null) {
        this.resizeDetector.observe(this.anchorElement);
      }
    };
    this.requestPositionUpdates = () => {
      if (this.anchorElement === null || this.pendingPositioningUpdate) {
        return;
      }
      AnchoredRegion.intersectionService.requestPosition(this, this.handleIntersection);
      AnchoredRegion.intersectionService.requestPosition(this.anchorElement, this.handleIntersection);
      if (this.viewportElement !== null) {
        AnchoredRegion.intersectionService.requestPosition(this.viewportElement, this.handleIntersection);
      }
      this.pendingPositioningUpdate = true;
    };
    this.stopObservers = () => {
      if (this.pendingPositioningUpdate) {
        this.pendingPositioningUpdate = false;
        AnchoredRegion.intersectionService.cancelRequestPosition(this, this.handleIntersection);
        if (this.anchorElement !== null) {
          AnchoredRegion.intersectionService.cancelRequestPosition(this.anchorElement, this.handleIntersection);
        }
        if (this.viewportElement !== null) {
          AnchoredRegion.intersectionService.cancelRequestPosition(this.viewportElement, this.handleIntersection);
        }
      }
      if (this.resizeDetector !== null) {
        this.resizeDetector.disconnect();
      }
    };
    this.getViewport = () => {
      if (typeof this.viewport !== "string" || this.viewport === "") {
        return document.documentElement;
      }
      return document.getElementById(this.viewport);
    };
    this.getAnchor = () => {
      return document.getElementById(this.anchor);
    };
    this.handleIntersection = (entries) => {
      if (!this.pendingPositioningUpdate) {
        return;
      }
      this.pendingPositioningUpdate = false;
      if (!this.applyIntersectionEntries(entries) || this.regionRect === null) {
        return;
      }
      if (!this.initialLayoutComplete) {
        this.containingBlockHeight = this.regionRect.height;
        this.containingBlockWidth = this.regionRect.width;
      }
      this.updateRegionOffset(this.regionRect);
      this.updateLayout();
    };
    this.applyIntersectionEntries = (entries) => {
      let regionEntry = entries.find((x) => x.target === this);
      let anchorEntry = entries.find((x) => x.target === this.anchorElement);
      let viewportEntry = entries.find((x) => x.target === this.viewportElement);
      if (regionEntry === void 0 || viewportEntry === void 0 || anchorEntry === void 0) {
        return false;
      }
      if (this.regionRect === null || this.anchorRect === null || this.viewportRect === null || this.isRectDifferent(this.anchorRect, anchorEntry.boundingClientRect) || this.isRectDifferent(this.viewportRect, viewportEntry.boundingClientRect) || this.isRectDifferent(this.regionRect, regionEntry.boundingClientRect)) {
        this.regionRect = regionEntry.boundingClientRect;
        this.anchorRect = anchorEntry.boundingClientRect;
        this.viewportRect = viewportEntry.boundingClientRect;
        this.handleRegionIntersection(regionEntry);
        this.handleAnchorIntersection(anchorEntry);
        return true;
      }
      return false;
    };
    this.isRectDifferent = (rectA, rectB) => {
      if (Math.abs(rectA.top - rectB.top) > this.updateThreshold || Math.abs(rectA.right - rectB.right) > this.updateThreshold || Math.abs(rectA.bottom - rectB.bottom) > this.updateThreshold || Math.abs(rectA.left - rectB.left) > this.updateThreshold) {
        return true;
      }
      return false;
    };
    this.handleAnchorIntersection = (anchorEntry) => {
      this.anchorTop = anchorEntry.boundingClientRect.top;
      this.anchorRight = anchorEntry.boundingClientRect.right;
      this.anchorBottom = anchorEntry.boundingClientRect.bottom;
      this.anchorLeft = anchorEntry.boundingClientRect.left;
      this.anchorHeight = anchorEntry.boundingClientRect.height;
      this.anchorWidth = anchorEntry.boundingClientRect.width;
    };
    this.handleRegionIntersection = (regionEntry) => {
      const regionRect = regionEntry.boundingClientRect;
      this.regionDimension = {
        height: regionRect.height,
        width: regionRect.width
      };
    };
    this.handleResize = (entries) => {
      if (!this.initialLayoutComplete) {
        return;
      }
      this.update();
    };
    this.reset = () => {
      if (!this.pendingReset) {
        return;
      }
      this.pendingReset = false;
      if (this.anchorElement === null) {
        this.anchorElement = this.getAnchor();
      }
      if (this.viewportElement === null) {
        this.viewportElement = this.getViewport();
      }
      this.currentDirection = getDirection(this);
      this.startObservers();
    };
    this.updateLayout = () => {
      this.pendingLayoutUpdate = false;
      let desiredVerticalPosition = "undefined";
      let desiredHorizontalPosition = "undefined";
      if (this.horizontalPositioningMode !== "uncontrolled") {
        const horizontalOptions = this.getHorizontalPositioningOptions();
        if (this.horizontalDefaultPosition !== "unset") {
          let dirCorrectedHorizontalDefaultPosition = this.horizontalDefaultPosition;
          if (dirCorrectedHorizontalDefaultPosition === "start" || dirCorrectedHorizontalDefaultPosition === "end") {
            const newDirection = getDirection(this);
            if (newDirection !== this.currentDirection) {
              this.currentDirection = newDirection;
              this.initialize();
              return;
            }
            if (this.currentDirection === Direction.ltr) {
              dirCorrectedHorizontalDefaultPosition = dirCorrectedHorizontalDefaultPosition === "start" ? "left" : "right";
            } else {
              dirCorrectedHorizontalDefaultPosition = dirCorrectedHorizontalDefaultPosition === "start" ? "right" : "left";
            }
          }
          switch (dirCorrectedHorizontalDefaultPosition) {
            case "left":
              desiredHorizontalPosition = this.horizontalInset ? "insetLeft" : "left";
              break;
            case "right":
              desiredHorizontalPosition = this.horizontalInset ? "insetRight" : "right";
              break;
          }
        }
        const horizontalThreshold = this.horizontalThreshold !== void 0 ? this.horizontalThreshold : this.regionDimension.width;
        if (desiredHorizontalPosition === "undefined" || !(this.horizontalPositioningMode === "locktodefault") && this.getAvailableWidth(desiredHorizontalPosition) < horizontalThreshold) {
          desiredHorizontalPosition = this.getAvailableWidth(horizontalOptions[0]) > this.getAvailableWidth(horizontalOptions[1]) ? horizontalOptions[0] : horizontalOptions[1];
        }
      }
      if (this.verticalPositioningMode !== "uncontrolled") {
        const verticalOptions = this.getVerticalPositioningOptions();
        if (this.verticalDefaultPosition !== "unset") {
          switch (this.verticalDefaultPosition) {
            case "top":
              desiredVerticalPosition = this.verticalInset ? "insetTop" : "top";
              break;
            case "bottom":
              desiredVerticalPosition = this.verticalInset ? "insetBottom" : "bottom";
              break;
          }
        }
        const verticalThreshold = this.verticalThreshold !== void 0 ? this.verticalThreshold : this.regionDimension.height;
        if (desiredVerticalPosition === "undefined" || !(this.verticalPositioningMode === "locktodefault") && this.getAvailableHeight(desiredVerticalPosition) < verticalThreshold) {
          desiredVerticalPosition = this.getAvailableHeight(verticalOptions[0]) > this.getAvailableHeight(verticalOptions[1]) ? verticalOptions[0] : verticalOptions[1];
        }
      }
      const nextPositionerDimension = this.getNextRegionDimension(desiredHorizontalPosition, desiredVerticalPosition);
      const positionChanged = this.horizontalPosition !== desiredHorizontalPosition || this.verticalPosition !== desiredVerticalPosition;
      this.setHorizontalPosition(desiredHorizontalPosition, nextPositionerDimension);
      this.setVerticalPosition(desiredVerticalPosition, nextPositionerDimension);
      this.updateRegionStyle();
      if (!this.initialLayoutComplete) {
        this.initialLayoutComplete = true;
        this.requestPositionUpdates();
        return;
      }
      if (!this.regionVisible) {
        this.regionVisible = true;
        this.style.removeProperty("pointer-events");
        this.style.removeProperty("opacity");
        this.classList.toggle("loaded", true);
        this.$emit("loaded", this, { bubbles: false });
      }
      if (positionChanged) {
        this.requestPositionUpdates();
        this.$emit("positionchange", this, { bubbles: false });
      }
    };
    this.updateRegionStyle = () => {
      this.classList.toggle("top", this.verticalPosition === "top");
      this.classList.toggle("bottom", this.verticalPosition === "bottom");
      this.classList.toggle("inset-top", this.verticalPosition === "insetTop");
      this.classList.toggle("inset-bottom", this.verticalPosition === "insetBottom");
      this.classList.toggle("left", this.horizontalPosition === "left");
      this.classList.toggle("right", this.horizontalPosition === "right");
      this.classList.toggle("inset-left", this.horizontalPosition === "insetLeft");
      this.classList.toggle("inset-right", this.horizontalPosition === "insetRight");
      this.style.position = this.fixedPlacement ? "fixed" : "absolute";
      this.style.transformOrigin = `${this.yTransformOrigin} ${this.xTransformOrigin}`;
      if (this.horizontalPositioningMode === "uncontrolled") {
        this.style.width = "unset";
        this.style.right = "unset";
        this.style.left = "unset";
      } else {
        this.style.width = this.regionWidth;
        this.style.right = this.regionRight;
        this.style.left = this.regionLeft;
      }
      if (this.verticalPositioningMode === "uncontrolled") {
        this.style.height = "unset";
        this.style.top = "unset";
        this.style.bottom = "unset";
      } else {
        this.style.height = this.regionHeight;
        this.style.top = this.regionTop;
        this.style.bottom = this.regionBottom;
      }
    };
    this.setHorizontalPosition = (desiredHorizontalPosition, nextPositionerDimension) => {
      let right = null;
      let left = null;
      let xTransformOrigin = "left";
      switch (desiredHorizontalPosition) {
        case "left":
          xTransformOrigin = "right";
          right = this.containingBlockWidth - this.baseHorizontalOffset;
          break;
        case "insetLeft":
          xTransformOrigin = "right";
          right = this.containingBlockWidth - this.anchorWidth - this.baseHorizontalOffset;
          break;
        case "insetRight":
          xTransformOrigin = "left";
          left = this.baseHorizontalOffset;
          break;
        case "right":
          xTransformOrigin = "left";
          left = this.anchorWidth + this.baseHorizontalOffset;
          break;
      }
      this.xTransformOrigin = xTransformOrigin;
      this.regionRight = right === null ? "unset" : `${right}px`;
      this.regionLeft = left === null ? "unset" : `${left}px`;
      this.horizontalPosition = desiredHorizontalPosition;
      switch (this.horizontalScaling) {
        case "anchor":
          this.regionWidth = `${this.anchorWidth}px`;
          break;
        case "fill":
          this.regionWidth = `${nextPositionerDimension.width}px`;
          break;
        case "content":
          this.regionWidth = "unset";
          break;
      }
    };
    this.setVerticalPosition = (desiredVerticalPosition, nextPositionerDimension) => {
      let top = null;
      let bottom = null;
      let yTransformOrigin = "top";
      switch (desiredVerticalPosition) {
        case "top":
          yTransformOrigin = "bottom";
          bottom = this.containingBlockHeight - this.baseVerticalOffset;
          break;
        case "insetTop":
          yTransformOrigin = "bottom";
          bottom = this.containingBlockHeight - this.baseVerticalOffset - this.anchorHeight;
          break;
        case "insetBottom":
          yTransformOrigin = "top";
          top = this.baseVerticalOffset;
          break;
        case "bottom":
          yTransformOrigin = "top";
          top = this.baseVerticalOffset + this.anchorHeight;
          break;
      }
      this.yTransformOrigin = yTransformOrigin;
      this.regionTop = top === null ? "unset" : `${top}px`;
      this.regionBottom = bottom === null ? "unset" : `${bottom}px`;
      this.verticalPosition = desiredVerticalPosition;
      switch (this.verticalScaling) {
        case "anchor":
          this.regionHeight = `${this.anchorHeight}px`;
          break;
        case "fill":
          this.regionHeight = `${nextPositionerDimension.height}px`;
          break;
        case "content":
          this.regionHeight = "unset";
          break;
      }
    };
    this.updateRegionOffset = (regionRect) => {
      if (this.horizontalPositioningMode === "uncontrolled") {
        this.baseHorizontalOffset = this.anchorLeft - regionRect.left;
      } else {
        switch (this.horizontalPosition) {
          case "undefined":
            this.baseHorizontalOffset = this.anchorLeft - regionRect.left;
            break;
          case "left":
            this.baseHorizontalOffset = this.baseHorizontalOffset + (this.anchorLeft - regionRect.right);
            break;
          case "insetLeft":
            this.baseHorizontalOffset = this.baseHorizontalOffset + (this.anchorRight - regionRect.right);
            break;
          case "insetRight":
            this.baseHorizontalOffset = this.baseHorizontalOffset + (this.anchorLeft - regionRect.left);
            break;
          case "right":
            this.baseHorizontalOffset = this.baseHorizontalOffset + (this.anchorRight - regionRect.left);
            break;
        }
      }
      if (this.verticalPositioningMode === "uncontrolled") {
        this.baseVerticalOffset = this.anchorTop - regionRect.top;
      } else {
        switch (this.verticalPosition) {
          case "undefined":
            this.baseVerticalOffset = this.anchorTop - regionRect.top;
            break;
          case "top":
            this.baseVerticalOffset = this.baseVerticalOffset + (this.anchorTop - regionRect.bottom);
            break;
          case "insetTop":
            this.baseVerticalOffset = this.baseVerticalOffset + (this.anchorBottom - regionRect.bottom);
            break;
          case "insetBottom":
            this.baseVerticalOffset = this.baseVerticalOffset + (this.anchorTop - regionRect.top);
            break;
          case "bottom":
            this.baseVerticalOffset = this.baseVerticalOffset + (this.anchorBottom - regionRect.top);
            break;
        }
      }
    };
    this.getHorizontalPositioningOptions = () => {
      if (this.horizontalInset) {
        return ["insetLeft", "insetRight"];
      }
      return ["left", "right"];
    };
    this.getVerticalPositioningOptions = () => {
      if (this.verticalInset) {
        return ["insetTop", "insetBottom"];
      }
      return ["top", "bottom"];
    };
    this.getAvailableWidth = (positionOption) => {
      if (this.viewportRect !== null) {
        const spaceLeft = this.anchorLeft - this.viewportRect.left;
        const spaceRight = this.viewportRect.right - (this.anchorLeft + this.anchorWidth);
        switch (positionOption) {
          case "left":
            return spaceLeft;
          case "insetLeft":
            return spaceLeft + this.anchorWidth;
          case "insetRight":
            return spaceRight + this.anchorWidth;
          case "right":
            return spaceRight;
        }
      }
      return 0;
    };
    this.getAvailableHeight = (positionOption) => {
      if (this.viewportRect !== null) {
        const spaceAbove = this.anchorTop - this.viewportRect.top;
        const spaceBelow = this.viewportRect.bottom - (this.anchorTop + this.anchorHeight);
        switch (positionOption) {
          case "top":
            return spaceAbove;
          case "insetTop":
            return spaceAbove + this.anchorHeight;
          case "insetBottom":
            return spaceBelow + this.anchorHeight;
          case "bottom":
            return spaceBelow;
        }
      }
      return 0;
    };
    this.getNextRegionDimension = (desiredHorizontalPosition, desiredVerticalPosition) => {
      const newRegionDimension = {
        height: this.regionDimension.height,
        width: this.regionDimension.width
      };
      if (this.horizontalScaling === "fill") {
        newRegionDimension.width = this.getAvailableWidth(desiredHorizontalPosition);
      }
      if (this.verticalScaling === "fill") {
        newRegionDimension.height = this.getAvailableHeight(desiredVerticalPosition);
      }
      return newRegionDimension;
    };
    this.startAutoUpdateEventListeners = () => {
      window.addEventListener(eventResize, this.update);
      window.addEventListener(eventScroll, this.update, true);
      if (this.resizeDetector !== null && this.viewportElement !== null) {
        this.resizeDetector.observe(this.viewportElement);
      }
    };
    this.stopAutoUpdateEventListeners = () => {
      window.removeEventListener(eventResize, this.update);
      window.removeEventListener(eventScroll, this.update);
      if (this.resizeDetector !== null && this.viewportElement !== null) {
        this.resizeDetector.unobserve(this.viewportElement);
      }
    };
  }
  anchorChanged() {
    if (this.initialLayoutComplete) {
      this.anchorElement = this.getAnchor();
    }
  }
  viewportChanged() {
    if (this.initialLayoutComplete) {
      this.viewportElement = this.getViewport();
    }
  }
  horizontalPositioningModeChanged() {
    this.requestReset();
  }
  horizontalDefaultPositionChanged() {
    this.updateForAttributeChange();
  }
  horizontalInsetChanged() {
    this.updateForAttributeChange();
  }
  horizontalThresholdChanged() {
    this.updateForAttributeChange();
  }
  horizontalScalingChanged() {
    this.updateForAttributeChange();
  }
  verticalPositioningModeChanged() {
    this.requestReset();
  }
  verticalDefaultPositionChanged() {
    this.updateForAttributeChange();
  }
  verticalInsetChanged() {
    this.updateForAttributeChange();
  }
  verticalThresholdChanged() {
    this.updateForAttributeChange();
  }
  verticalScalingChanged() {
    this.updateForAttributeChange();
  }
  fixedPlacementChanged() {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      this.initialize();
    }
  }
  autoUpdateModeChanged(prevMode, newMode) {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      if (prevMode === "auto") {
        this.stopAutoUpdateEventListeners();
      }
      if (newMode === "auto") {
        this.startAutoUpdateEventListeners();
      }
    }
  }
  anchorElementChanged() {
    this.requestReset();
  }
  viewportElementChanged() {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      this.initialize();
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (this.autoUpdateMode === "auto") {
      this.startAutoUpdateEventListeners();
    }
    this.initialize();
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.autoUpdateMode === "auto") {
      this.stopAutoUpdateEventListeners();
    }
    this.stopObservers();
    this.disconnectResizeDetector();
  }
  /**
   * @internal
   */
  adoptedCallback() {
    this.initialize();
  }
  /**
   * destroys the instance's resize observer
   */
  disconnectResizeDetector() {
    if (this.resizeDetector !== null) {
      this.resizeDetector.disconnect();
      this.resizeDetector = null;
    }
  }
  /**
   * initializes the instance's resize observer
   */
  initializeResizeDetector() {
    this.disconnectResizeDetector();
    this.resizeDetector = new window.ResizeObserver(this.handleResize);
  }
  /**
   * react to attribute changes that don't require a reset
   */
  updateForAttributeChange() {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      this.update();
    }
  }
  /**
   * fully initializes the component
   */
  initialize() {
    this.initializeResizeDetector();
    if (this.anchorElement === null) {
      this.anchorElement = this.getAnchor();
    }
    this.requestReset();
  }
  /**
   * Request a layout update if there are currently no open requests
   */
  requestLayoutUpdate() {
    if (this.pendingLayoutUpdate === false && this.pendingReset === false) {
      this.pendingLayoutUpdate = true;
      DOM.queueUpdate(() => this.updateLayout());
    }
  }
  /**
   * Request a reset if there are currently no open requests
   */
  requestReset() {
    if (this.$fastController.isConnected && this.pendingReset === false) {
      this.pendingLayoutUpdate = false;
      this.setInitialState();
      DOM.queueUpdate(() => this.reset());
      this.pendingReset = true;
    }
  }
  /**
   * sets the starting configuration for component internal values
   */
  setInitialState() {
    this.initialLayoutComplete = false;
    this.regionVisible = false;
    this.regionTop = "0";
    this.regionRight = "0";
    this.regionBottom = "0";
    this.regionLeft = "0";
    this.regionWidth = "100%";
    this.regionHeight = "100%";
    this.xTransformOrigin = "left";
    this.yTransformOrigin = "top";
    this.viewportRect = null;
    this.regionRect = null;
    this.anchorRect = null;
    this.regionDimension = { height: 0, width: 0 };
    this.anchorTop = 0;
    this.anchorRight = 0;
    this.anchorBottom = 0;
    this.anchorLeft = 0;
    this.anchorHeight = 0;
    this.anchorWidth = 0;
    this.verticalPosition = "undefined";
    this.horizontalPosition = "undefined";
    this.baseHorizontalOffset = 0;
    this.baseVerticalOffset = 0;
    this.style.opacity = "0";
    this.style.pointerEvents = "none";
    this.updateRegionStyle();
  }
};
AnchoredRegion.intersectionService = new IntersectionService();
__decorate7([
  attr
], AnchoredRegion.prototype, "anchor", void 0);
__decorate7([
  attr
], AnchoredRegion.prototype, "viewport", void 0);
__decorate7([
  attr({ attribute: "horizontal-positioning-mode" })
], AnchoredRegion.prototype, "horizontalPositioningMode", void 0);
__decorate7([
  attr({ attribute: "horizontal-default-position" })
], AnchoredRegion.prototype, "horizontalDefaultPosition", void 0);
__decorate7([
  attr({ attribute: "horizontal-inset", mode: "boolean" })
], AnchoredRegion.prototype, "horizontalInset", void 0);
__decorate7([
  attr({ attribute: "horizontal-threshold" })
], AnchoredRegion.prototype, "horizontalThreshold", void 0);
__decorate7([
  attr({ attribute: "horizontal-scaling" })
], AnchoredRegion.prototype, "horizontalScaling", void 0);
__decorate7([
  attr({ attribute: "vertical-positioning-mode" })
], AnchoredRegion.prototype, "verticalPositioningMode", void 0);
__decorate7([
  attr({ attribute: "vertical-default-position" })
], AnchoredRegion.prototype, "verticalDefaultPosition", void 0);
__decorate7([
  attr({ attribute: "vertical-inset", mode: "boolean" })
], AnchoredRegion.prototype, "verticalInset", void 0);
__decorate7([
  attr({ attribute: "vertical-threshold" })
], AnchoredRegion.prototype, "verticalThreshold", void 0);
__decorate7([
  attr({ attribute: "vertical-scaling" })
], AnchoredRegion.prototype, "verticalScaling", void 0);
__decorate7([
  attr({ attribute: "fixed-placement", mode: "boolean" })
], AnchoredRegion.prototype, "fixedPlacement", void 0);
__decorate7([
  attr({ attribute: "auto-update-mode" })
], AnchoredRegion.prototype, "autoUpdateMode", void 0);
__decorate7([
  observable
], AnchoredRegion.prototype, "anchorElement", void 0);
__decorate7([
  observable
], AnchoredRegion.prototype, "viewportElement", void 0);
__decorate7([
  observable
], AnchoredRegion.prototype, "initialLayoutComplete", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/badge/badge.template.js
var BadgeTemplate = html2`
    <template class="${(x) => x.circular ? "circular" : ""}">
        <div class="control" part="control" style="${(x) => x.generateBadgeStyle()}">
            <slot></slot>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/badge/badge.js
var Badge = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.generateBadgeStyle = () => {
      if (!this.fill && !this.color) {
        return;
      }
      const fill2 = `background-color: var(--badge-fill-${this.fill});`;
      const color2 = `color: var(--badge-color-${this.color});`;
      if (this.fill && !this.color) {
        return fill2;
      } else if (this.color && !this.fill) {
        return color2;
      } else {
        return `${color2} ${fill2}`;
      }
    };
  }
};
__decorate7([
  attr({ attribute: "fill" })
], Badge.prototype, "fill", void 0);
__decorate7([
  attr({ attribute: "color" })
], Badge.prototype, "color", void 0);
__decorate7([
  attr({ mode: "boolean" })
], Badge.prototype, "circular", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/breadcrumb-item/breadcrumb-item.template.js
var BreadcrumbItemTemplate = html2`
    <div role="listitem" class="listitem" part="listitem">
        ${when((x) => x.href && x.href.length > 0, html2`
                ${AnchorTemplate}
            `)}
        ${when((x) => !x.href, html2`
                ${startTemplate}
                <slot></slot>
                ${endTemplate}
            `)}
        ${when((x) => x.separator, html2`
                <span class="separator" part="separator" aria-hidden="true">
                    <slot name="separator">/</slot>
                </span>
            `)}
    </div>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/breadcrumb-item/breadcrumb-item.js
var BreadcrumbItem = class extends Anchor {
  constructor() {
    super(...arguments);
    this.separator = true;
  }
};
__decorate7([
  observable
], BreadcrumbItem.prototype, "separator", void 0);
applyMixins(BreadcrumbItem, StartEnd, DelegatesARIALink);

// node_modules/@microsoft/fast-foundation/dist/esm/breadcrumb/breadcrumb.template.js
var BreadcrumbTemplate = html2`
    <template role="navigation">
        <div role="list" class="list" part="list">
            <slot
                ${slotted({ property: "slottedBreadcrumbItems", filter: elements() })}
            ></slot>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/breadcrumb/breadcrumb.js
var Breadcrumb = class extends FASTElement {
  slottedBreadcrumbItemsChanged() {
    if (this.$fastController.isConnected) {
      if (this.slottedBreadcrumbItems === void 0 || this.slottedBreadcrumbItems.length === 0) {
        return;
      }
      const lastNode = this.slottedBreadcrumbItems[this.slottedBreadcrumbItems.length - 1];
      this.setItemSeparator(lastNode);
      this.setLastItemAriaCurrent(lastNode);
    }
  }
  setItemSeparator(lastNode) {
    this.slottedBreadcrumbItems.forEach((item) => {
      if (item instanceof BreadcrumbItem) {
        item.separator = true;
      }
    });
    if (lastNode instanceof BreadcrumbItem) {
      lastNode.separator = false;
    }
  }
  /**
   * @internal
   * Finds href on childnodes in the light DOM or shadow DOM.
   * We look in the shadow DOM because we insert an anchor when breadcrumb-item has an href.
   */
  findChildWithHref(node) {
    var _a, _b;
    if (node.childElementCount > 0) {
      return node.querySelector("a[href]");
    } else if ((_a = node.shadowRoot) === null || _a === void 0 ? void 0 : _a.childElementCount) {
      return (_b = node.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector("a[href]");
    } else
      return null;
  }
  /**
   *  If child node with an anchor tag and with href is found then apply aria-current to child node otherwise apply aria-current to the host element, with an href
   */
  setLastItemAriaCurrent(lastNode) {
    const childNodeWithHref = this.findChildWithHref(lastNode);
    if (childNodeWithHref === null && lastNode.hasAttribute("href") && lastNode instanceof BreadcrumbItem) {
      lastNode.ariaCurrent = "page";
    } else if (childNodeWithHref !== null) {
      childNodeWithHref.setAttribute("aria-current", "page");
    }
  }
};
__decorate7([
  observable
], Breadcrumb.prototype, "slottedBreadcrumbItems", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/button/button.template.js
var ButtonTemplate = html2`
    <button
        class="control"
        part="control"
        ?autofocus="${(x) => x.autofocus}"
        ?disabled="${(x) => x.disabled}"
        form="${(x) => x.formId}"
        formaction="${(x) => x.formaction}"
        formenctype="${(x) => x.formenctype}"
        formmethod="${(x) => x.formmethod}"
        formnovalidate="${(x) => x.formnovalidate}"
        formtarget="${(x) => x.formtarget}"
        name="${(x) => x.name}"
        type="${(x) => x.type}"
        value="${(x) => x.value}"
        aria-atomic="${(x) => x.ariaAtomic}"
        aria-busy="${(x) => x.ariaBusy}"
        aria-controls="${(x) => x.ariaControls}"
        aria-current="${(x) => x.ariaCurrent}"
        aria-describedBy="${(x) => x.ariaDescribedby}"
        aria-details="${(x) => x.ariaDetails}"
        aria-disabled="${(x) => x.ariaDisabled}"
        aria-errormessage="${(x) => x.ariaErrormessage}"
        aria-expanded="${(x) => x.ariaExpanded}"
        aria-flowto="${(x) => x.ariaFlowto}"
        aria-haspopup="${(x) => x.ariaHaspopup}"
        aria-hidden="${(x) => x.ariaHidden}"
        aria-invalid="${(x) => x.ariaInvalid}"
        aria-keyshortcuts="${(x) => x.ariaKeyshortcuts}"
        aria-label="${(x) => x.ariaLabel}"
        aria-labelledby="${(x) => x.ariaLabelledby}"
        aria-live="${(x) => x.ariaLive}"
        aria-owns="${(x) => x.ariaOwns}"
        aria-pressed="${(x) => x.ariaPressed}"
        aria-relevant="${(x) => x.ariaRelevant}"
        aria-roledescription="${(x) => x.ariaRoledescription}"
        ${ref("control")}
    >
        ${startTemplate}
        <span class="content" part="content">
            <slot ${slotted("defaultSlottedContent")}></slot>
        </span>
        ${endTemplate}
    </button>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/form-associated/form-associated.js
var proxySlotName = "form-associated-proxy";
var ElementInternalsKey = "ElementInternals";
var supportsElementInternals = ElementInternalsKey in window && "setFormValue" in window[ElementInternalsKey].prototype;
var InternalsMap = /* @__PURE__ */ new Map();
function FormAssociated(BaseCtor) {
  const C = class extends BaseCtor {
    constructor(...args) {
      super(...args);
      this.dirtyValue = false;
      this.disabled = false;
      this.proxyEventsToBlock = ["change", "click"];
      this.formDisabledCallback = (disabled) => {
        this.disabled = disabled;
      };
      this.formResetCallback = () => {
        this.value = this.initialValue;
        this.dirtyValue = false;
      };
      this.proxyInitialized = false;
      this.required = false;
      this.initialValue = this.initialValue || "";
    }
    /**
     * Must evaluate to true to enable elementInternals.
     * Feature detects API support and resolve respectively
     *
     * @internal
     */
    static get formAssociated() {
      return supportsElementInternals;
    }
    /**
     * Returns the validity state of the element
     *
     * @alpha
     */
    get validity() {
      return this.elementInternals ? this.elementInternals.validity : this.proxy.validity;
    }
    /**
     * Retrieve a reference to the associated form.
     * Returns null if not associated to any form.
     *
     * @alpha
     */
    get form() {
      return this.elementInternals ? this.elementInternals.form : this.proxy.form;
    }
    /**
     * Retrieve the localized validation message,
     * or custom validation message if set.
     *
     * @alpha
     */
    get validationMessage() {
      return this.elementInternals ? this.elementInternals.validationMessage : this.proxy.validationMessage;
    }
    /**
     * Whether the element will be validated when the
     * form is submitted
     */
    get willValidate() {
      return this.elementInternals ? this.elementInternals.willValidate : this.proxy.willValidate;
    }
    /**
     * A reference to all associated label elements
     */
    get labels() {
      if (this.elementInternals) {
        return Object.freeze(Array.from(this.elementInternals.labels));
      } else if (this.proxy instanceof HTMLElement && this.proxy.ownerDocument && this.id) {
        const parentLabels = this.proxy.labels;
        const forLabels = Array.from(this.proxy.getRootNode().querySelectorAll(`[for='${this.id}']`));
        const labels = parentLabels ? forLabels.concat(Array.from(parentLabels)) : forLabels;
        return Object.freeze(labels);
      } else {
        return emptyArray;
      }
    }
    /**
     * Invoked when the `value` property changes
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `valueChanged` method
     * They must be sure to invoke `super.valueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    valueChanged(previous, next) {
      this.dirtyValue = true;
      if (this.proxy instanceof HTMLElement) {
        this.proxy.value = this.value;
      }
      this.setFormValue(this.value);
      this.validate();
    }
    /**
     * Invoked when the `initialValue` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `initialValueChanged` method
     * They must be sure to invoke `super.initialValueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    initialValueChanged(previous, next) {
      if (!this.dirtyValue) {
        this.value = this.initialValue;
        this.dirtyValue = false;
      }
    }
    /**
     * Invoked when the `disabled` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `disabledChanged` method
     * They must be sure to invoke `super.disabledChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    disabledChanged(previous, next) {
      if (this.proxy instanceof HTMLElement) {
        this.proxy.disabled = this.disabled;
      }
      DOM.queueUpdate(() => this.classList.toggle("disabled", this.disabled));
    }
    /**
     * Invoked when the `name` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `nameChanged` method
     * They must be sure to invoke `super.nameChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    nameChanged(previous, next) {
      if (this.proxy instanceof HTMLElement) {
        this.proxy.name = this.name;
      }
    }
    /**
     * Invoked when the `required` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `requiredChanged` method
     * They must be sure to invoke `super.requiredChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    requiredChanged(prev, next) {
      if (this.proxy instanceof HTMLElement) {
        this.proxy.required = this.required;
      }
      DOM.queueUpdate(() => this.classList.toggle("required", this.required));
      this.validate();
    }
    /**
     * The element internals object. Will only exist
     * in browsers supporting the attachInternals API
     */
    get elementInternals() {
      if (!supportsElementInternals) {
        return null;
      }
      let internals = InternalsMap.get(this);
      if (!internals) {
        internals = this.attachInternals();
        InternalsMap.set(this, internals);
      }
      return internals;
    }
    /**
     * @internal
     */
    connectedCallback() {
      super.connectedCallback();
      this.addEventListener("keypress", this._keypressHandler);
      if (!this.value) {
        this.value = this.initialValue;
        this.dirtyValue = false;
      }
      if (!this.elementInternals) {
        this.attachProxy();
      }
      if (this.form) {
        this.form.addEventListener("reset", this.formResetCallback);
      }
    }
    /**
     * @internal
     */
    disconnectedCallback() {
      this.proxyEventsToBlock.forEach((name) => this.proxy.removeEventListener(name, this.stopPropagation));
      if (this.form) {
        this.form.removeEventListener("reset", this.formResetCallback);
      }
    }
    /**
     * Return the current validity of the element.
     */
    checkValidity() {
      return this.elementInternals ? this.elementInternals.checkValidity() : this.proxy.checkValidity();
    }
    /**
     * Return the current validity of the element.
     * If false, fires an invalid event at the element.
     */
    reportValidity() {
      return this.elementInternals ? this.elementInternals.reportValidity() : this.proxy.reportValidity();
    }
    /**
     * Set the validity of the control. In cases when the elementInternals object is not
     * available (and the proxy element is used to report validity), this function will
     * do nothing unless a message is provided, at which point the setCustomValidity method
     * of the proxy element will be invoked with the provided message.
     * @param flags - Validity flags
     * @param message - Optional message to supply
     * @param anchor - Optional element used by UA to display an interactive validation UI
     */
    setValidity(flags, message, anchor) {
      if (this.elementInternals) {
        this.elementInternals.setValidity(flags, message, anchor);
      } else if (typeof message === "string") {
        this.proxy.setCustomValidity(message);
      }
    }
    /**
     * Attach the proxy element to the DOM
     */
    attachProxy() {
      var _a;
      if (!this.proxyInitialized) {
        this.proxyInitialized = true;
        this.proxy.style.display = "none";
        this.proxyEventsToBlock.forEach((name) => this.proxy.addEventListener(name, this.stopPropagation));
        this.proxy.disabled = this.disabled;
        this.proxy.required = this.required;
        if (typeof this.name === "string") {
          this.proxy.name = this.name;
        }
        if (typeof this.value === "string") {
          this.proxy.value = this.value;
        }
        this.proxy.setAttribute("slot", proxySlotName);
        this.proxySlot = document.createElement("slot");
        this.proxySlot.setAttribute("name", proxySlotName);
      }
      (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.appendChild(this.proxySlot);
      this.appendChild(this.proxy);
    }
    /**
     * Detach the proxy element from the DOM
     */
    detachProxy() {
      var _a;
      this.removeChild(this.proxy);
      (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this.proxySlot);
    }
    /**
     * Sets the validity of the custom element. By default this uses the proxy element to determine
     * validity, but this can be extended or replaced in implementation.
     */
    validate() {
      if (this.proxy instanceof HTMLElement) {
        this.setValidity(this.proxy.validity, this.proxy.validationMessage);
      }
    }
    /**
     * Associates the provided value (and optional state) with the parent form.
     * @param value - The value to set
     * @param state - The state object provided to during session restores and when autofilling.
     */
    setFormValue(value, state2) {
      if (this.elementInternals) {
        this.elementInternals.setFormValue(value, state2 || value);
      }
    }
    _keypressHandler(e) {
      switch (e.keyCode) {
        case keyCodeEnter:
          if (this.form instanceof HTMLFormElement) {
            const defaultButton = this.form.querySelector("[type=submit]");
            defaultButton === null || defaultButton === void 0 ? void 0 : defaultButton.click();
          }
          break;
      }
    }
    /**
     * Used to stop propagation of proxy element events
     * @param e - Event object
     */
    stopPropagation(e) {
      e.stopPropagation();
    }
  };
  attr({ mode: "boolean" })(C.prototype, "disabled");
  attr({ mode: "fromView", attribute: "value" })(C.prototype, "initialValue");
  attr(C.prototype, "name");
  attr({ mode: "boolean" })(C.prototype, "required");
  observable(C.prototype, "value");
  return C;
}

// node_modules/@microsoft/fast-foundation/dist/esm/button/button.form-associated.js
var _Button = class extends FASTElement {
};
var FormAssociatedButton = class extends FormAssociated(_Button) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/button/button.js
var Button = class extends FormAssociatedButton {
  constructor() {
    super(...arguments);
    this.handleSubmission = () => {
      if (!this.form) {
        return;
      }
      const attached = this.proxy.isConnected;
      if (!attached) {
        this.attachProxy();
      }
      typeof this.form.requestSubmit === "function" ? this.form.requestSubmit(this.proxy) : this.proxy.click();
      if (!attached) {
        this.detachProxy();
      }
    };
    this.handleFormReset = () => {
      var _a;
      (_a = this.form) === null || _a === void 0 ? void 0 : _a.reset();
    };
  }
  formactionChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formAction = this.formaction;
    }
  }
  formenctypeChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formEnctype = this.formenctype;
    }
  }
  formmethodChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formMethod = this.formmethod;
    }
  }
  formnovalidateChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formNoValidate = this.formnovalidate;
    }
  }
  formtargetChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formTarget = this.formtarget;
    }
  }
  typeChanged(previous, next) {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.type = this.type;
    }
    next === "submit" && this.addEventListener("click", this.handleSubmission);
    previous === "submit" && this.removeEventListener("click", this.handleSubmission);
    next === "reset" && this.addEventListener("click", this.handleFormReset);
    previous === "reset" && this.removeEventListener("click", this.handleFormReset);
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", this.type);
  }
  /**
   * @deprecated This API has been deprecated
   */
  get root() {
    return this.control;
  }
};
__decorate7([
  attr({ mode: "boolean" })
], Button.prototype, "autofocus", void 0);
__decorate7([
  attr({ attribute: "form" })
], Button.prototype, "formId", void 0);
__decorate7([
  attr
], Button.prototype, "formaction", void 0);
__decorate7([
  attr
], Button.prototype, "formenctype", void 0);
__decorate7([
  attr
], Button.prototype, "formmethod", void 0);
__decorate7([
  attr({ mode: "boolean" })
], Button.prototype, "formnovalidate", void 0);
__decorate7([
  attr
], Button.prototype, "formtarget", void 0);
__decorate7([
  attr
], Button.prototype, "type", void 0);
__decorate7([
  observable
], Button.prototype, "defaultSlottedContent", void 0);
var DelegatesARIAButton = class {
};
__decorate7([
  attr({ attribute: "aria-expanded", mode: "fromView" })
], DelegatesARIAButton.prototype, "ariaExpanded", void 0);
__decorate7([
  attr({ attribute: "aria-pressed", mode: "fromView" })
], DelegatesARIAButton.prototype, "ariaPressed", void 0);
applyMixins(DelegatesARIAButton, ARIAGlobalStatesAndProperties);
applyMixins(Button, StartEnd, DelegatesARIAButton);

// node_modules/@microsoft/fast-foundation/dist/esm/card/card.template.js
var CardTemplate = html2`
    <slot></slot>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.template.js
var CheckboxTemplate = html2`
    <template
        role="checkbox"
        aria-checked="${(x) => x.checked}"
        aria-required="${(x) => x.required}"
        aria-disabled="${(x) => x.disabled}"
        aria-readonly="${(x) => x.readOnly}"
        tabindex="${(x) => x.disabled ? null : 0}"
        @keypress="${(x, c) => x.keypressHandler(c.event)}"
        @click="${(x, c) => x.clickHandler(c.event)}"
        class="${(x) => x.readOnly ? "readonly" : ""} ${(x) => x.checked ? "checked" : ""} ${(x) => x.indeterminate ? "indeterminate" : ""}"
    >
        <div part="control" class="control">
            <slot name="checked-indicator">
                <svg
                    aria-hidden="true"
                    part="checked-indicator"
                    class="checked-indicator"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M8.143 12.6697L15.235 4.5L16.8 5.90363L8.23812 15.7667L3.80005 11.2556L5.27591 9.7555L8.143 12.6697Z"
                    />
                </svg>
            </slot>
            <slot name="indeterminate-indicator">
                <div part="indeterminate-indicator" class="indeterminate-indicator"></div>
            </slot>
        </div>
        <label
            part="label"
            class="${(x) => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.form-associated.js
var _Checkbox = class extends FASTElement {
};
var FormAssociatedCheckbox = class extends FormAssociated(_Checkbox) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.js
var Checkbox = class extends FormAssociatedCheckbox {
  constructor() {
    super();
    this.initialValue = "on";
    this.indeterminate = false;
    this.dirtyChecked = false;
    this.constructed = false;
    this.formResetCallback = () => {
      this.checked = this.checkedAttribute;
      this.dirtyChecked = false;
    };
    this.keypressHandler = (e) => {
      switch (e.keyCode) {
        case keyCodeSpace:
          this.checked = !this.checked;
          break;
      }
    };
    this.clickHandler = (e) => {
      if (!this.disabled && !this.readOnly) {
        this.checked = !this.checked;
      }
    };
    this.defaultChecked = !!this.checkedAttribute;
    this.checked = this.defaultChecked;
    this.constructed = true;
  }
  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
    }
  }
  checkedAttributeChanged() {
    this.defaultChecked = this.checkedAttribute;
  }
  defaultCheckedChanged() {
    if (!this.dirtyChecked) {
      this.checked = this.defaultChecked;
      this.dirtyChecked = false;
    }
  }
  checkedChanged() {
    if (!this.dirtyChecked) {
      this.dirtyChecked = true;
    }
    this.updateForm();
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.checked = this.checked;
    }
    if (this.constructed) {
      this.$emit("change");
    }
    this.validate();
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", "checkbox");
    this.updateForm();
  }
  updateForm() {
    const value = this.checked ? this.value : null;
    this.setFormValue(value, value);
  }
};
__decorate7([
  attr({ attribute: "readonly", mode: "boolean" })
], Checkbox.prototype, "readOnly", void 0);
__decorate7([
  attr({ attribute: "checked", mode: "boolean" })
], Checkbox.prototype, "checkedAttribute", void 0);
__decorate7([
  observable
], Checkbox.prototype, "defaultSlottedNodes", void 0);
__decorate7([
  observable
], Checkbox.prototype, "defaultChecked", void 0);
__decorate7([
  observable
], Checkbox.prototype, "checked", void 0);
__decorate7([
  observable
], Checkbox.prototype, "indeterminate", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/select/select.options.js
var SelectPosition;
(function(SelectPosition2) {
  SelectPosition2["above"] = "above";
  SelectPosition2["below"] = "below";
})(SelectPosition || (SelectPosition = {}));
var SelectRole;
(function(SelectRole2) {
  SelectRole2["combobox"] = "combobox";
})(SelectRole || (SelectRole = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/listbox-option/listbox-option.js
function isListboxOption(el) {
  return isHTMLElement(el) && (el.getAttribute("role") === "option" || el instanceof HTMLOptionElement);
}
var ListboxOption = class extends FASTElement {
  constructor(text, value, defaultSelected, selected) {
    super();
    this.defaultSelected = false;
    this.dirtySelected = false;
    this.selected = this.defaultSelected;
    this.dirtyValue = false;
    this.initialValue = this.initialValue || "";
    if (text) {
      this.textContent = text;
    }
    if (value) {
      this.initialValue = value;
    }
    if (defaultSelected) {
      this.defaultSelected = defaultSelected;
    }
    if (selected) {
      this.selected = selected;
    }
    this.proxy = new Option(`${this.textContent}`, this.initialValue, this.defaultSelected, this.selected);
    this.proxy.disabled = this.disabled;
  }
  defaultSelectedChanged() {
    if (!this.dirtySelected) {
      this.selected = this.defaultSelected;
      if (this.proxy instanceof HTMLOptionElement) {
        this.proxy.selected = this.defaultSelected;
      }
    }
  }
  disabledChanged(prev, next) {
    if (this.proxy instanceof HTMLOptionElement) {
      this.proxy.disabled = this.disabled;
    }
  }
  selectedAttributeChanged() {
    this.defaultSelected = this.selectedAttribute;
    if (this.proxy instanceof HTMLOptionElement) {
      this.proxy.defaultSelected = this.defaultSelected;
    }
  }
  selectedChanged() {
    if (this.$fastController.isConnected) {
      if (!this.dirtySelected) {
        this.dirtySelected = true;
      }
      if (this.proxy instanceof HTMLOptionElement) {
        this.proxy.selected = this.selected;
      }
    }
  }
  initialValueChanged(previous, next) {
    if (!this.dirtyValue) {
      this.value = this.initialValue;
      this.dirtyValue = false;
    }
  }
  get label() {
    return this.value ? this.value : this.textContent ? this.textContent : "";
  }
  get text() {
    return this.textContent;
  }
  set value(next) {
    this._value = next;
    this.dirtyValue = true;
    if (this.proxy instanceof HTMLElement) {
      this.proxy.value = next;
    }
    Observable.notify(this, "value");
  }
  get value() {
    Observable.track(this, "value");
    return this._value ? this._value : this.text;
  }
  get form() {
    return this.proxy ? this.proxy.form : null;
  }
};
__decorate7([
  observable
], ListboxOption.prototype, "defaultSelected", void 0);
__decorate7([
  attr({ mode: "boolean" })
], ListboxOption.prototype, "disabled", void 0);
__decorate7([
  attr({ attribute: "selected", mode: "boolean" })
], ListboxOption.prototype, "selectedAttribute", void 0);
__decorate7([
  observable
], ListboxOption.prototype, "selected", void 0);
__decorate7([
  attr({ attribute: "value", mode: "fromView" })
], ListboxOption.prototype, "initialValue", void 0);
applyMixins(ListboxOption, StartEnd);

// node_modules/@microsoft/fast-foundation/dist/esm/listbox/listbox.options.js
var ListboxRole;
(function(ListboxRole2) {
  ListboxRole2["listbox"] = "listbox";
})(ListboxRole || (ListboxRole = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/listbox/listbox.js
var Listbox = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.selectedIndex = -1;
    this.typeaheadBuffer = "";
    this.typeaheadTimeout = -1;
    this.typeAheadExpired = true;
    this.role = ListboxRole.listbox;
    this._options = [];
    this.selectedOptions = [];
    this.shouldSkipFocus = false;
    this.handleTypeAhead = (key) => {
      if (this.typeaheadTimeout) {
        window.clearTimeout(this.typeaheadTimeout);
      }
      this.typeaheadTimeout = window.setTimeout(() => this.typeAheadExpired = true, Listbox.TYPE_AHEAD_TIMEOUT_MS);
      if (key.length > 1) {
        return;
      }
      this.typeaheadBuffer = `${this.typeAheadExpired ? "" : this.typeaheadBuffer}${key}`;
    };
  }
  selectedIndexChanged(prev, next) {
    this.setSelectedOptions();
  }
  typeaheadBufferChanged(prev, next) {
    if (this.$fastController.isConnected) {
      const pattern = this.typeaheadBuffer.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
      const re = new RegExp(`^${pattern}`, "gi");
      const filteredOptions = this.options.filter((o) => o.text.trim().match(re));
      if (filteredOptions.length) {
        const selectedIndex = this.options.indexOf(filteredOptions[0]);
        if (selectedIndex > -1) {
          this.selectedIndex = selectedIndex;
        }
      }
      this.typeAheadExpired = false;
    }
  }
  slottedOptionsChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this.options = next.reduce((options, item) => {
        if (isListboxOption(item)) {
          options.push(item);
        }
        return options;
      }, []);
      this.options.forEach((o) => {
        o.id = o.id || uniqueId_default("option-");
      });
      this.setSelectedOptions();
      this.setDefaultSelectedOption();
    }
  }
  /**
   * The list of options.
   *
   * @public
   */
  get options() {
    Observable.track(this, "options");
    return this._options;
  }
  set options(value) {
    this._options = value;
    Observable.notify(this, "options");
  }
  selectedOptionsChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this.options.forEach((o) => {
        o.selected = next.includes(o);
      });
    }
  }
  /**
   * @internal
   */
  get firstSelectedOption() {
    return this.selectedOptions[0];
  }
  /**
   * @internal
   */
  focusAndScrollOptionIntoView() {
    if (this.contains(document.activeElement) && this.firstSelectedOption) {
      this.firstSelectedOption.focus();
      requestAnimationFrame(() => {
        this.firstSelectedOption.scrollIntoView({ block: "nearest" });
      });
    }
  }
  /**
   * @internal
   */
  focusinHandler(e) {
    if (!this.shouldSkipFocus && e.target === e.currentTarget) {
      this.setSelectedOptions();
      this.focusAndScrollOptionIntoView();
    }
    this.shouldSkipFocus = false;
  }
  /**
   * Prevents `focusin` events from firing before `click` events when the
   * element is unfocused.
   *
   * @internal
   */
  mousedownHandler(e) {
    this.shouldSkipFocus = !this.contains(document.activeElement);
    return true;
  }
  /**
   * @internal
   */
  setDefaultSelectedOption() {
    if (this.options && this.$fastController.isConnected) {
      const selectedIndex = this.options.findIndex((el) => el.getAttribute("selected") !== null);
      if (selectedIndex !== -1) {
        this.selectedIndex = selectedIndex;
        return;
      }
      this.selectedIndex = 0;
    }
  }
  /**
   * Sets an option as selected and gives it focus.
   *
   * @param index - option index to select
   * @public
   */
  setSelectedOptions() {
    if (this.$fastController.isConnected && this.options) {
      const selectedOption = this.options[this.selectedIndex] || null;
      this.selectedOptions = this.options.filter((el) => el.isSameNode(selectedOption));
      this.ariaActiveDescendant = this.firstSelectedOption ? this.firstSelectedOption.id : "";
      this.focusAndScrollOptionIntoView();
    }
  }
  /**
   * Moves focus to the first selectable option
   *
   * @public
   */
  selectFirstOption() {
    if (!this.disabled) {
      this.selectedIndex = 0;
    }
  }
  /**
   * Moves focus to the last selectable option
   *
   * @internal
   */
  selectLastOption() {
    if (!this.disabled) {
      this.selectedIndex = this.options.length - 1;
    }
  }
  /**
   * Moves focus to the next selectable option
   *
   * @internal
   */
  selectNextOption() {
    if (!this.disabled && this.options && this.selectedIndex < this.options.length - 1) {
      this.selectedIndex += 1;
    }
  }
  get length() {
    if (this.options) {
      return this.options.length;
    }
    return 0;
  }
  /**
   * Moves focus to the previous selectable option
   *
   * @internal
   */
  selectPreviousOption() {
    if (!this.disabled && this.selectedIndex > 0) {
      this.selectedIndex = this.selectedIndex - 1;
    }
  }
  /**
   * Handles click events for listbox options
   *
   * @internal
   */
  clickHandler(e) {
    const captured = e.target.closest(`option,[role=option]`);
    if (captured && !captured.disabled) {
      this.selectedIndex = this.options.indexOf(captured);
      return true;
    }
  }
  /**
   * Handles keydown actions for listbox navigation and typeahead
   *
   * @internal
   */
  keydownHandler(e) {
    if (this.disabled) {
      return true;
    }
    this.shouldSkipFocus = false;
    const key = e.key;
    switch (key) {
      case "Home": {
        if (!e.shiftKey) {
          e.preventDefault();
          this.selectFirstOption();
        }
        break;
      }
      case "ArrowDown": {
        if (!e.shiftKey) {
          e.preventDefault();
          this.selectNextOption();
        }
        break;
      }
      case "ArrowUp": {
        if (!e.shiftKey) {
          e.preventDefault();
          this.selectPreviousOption();
        }
        break;
      }
      case "End": {
        e.preventDefault();
        this.selectLastOption();
        break;
      }
      case "Tab": {
        this.focusAndScrollOptionIntoView();
        return true;
      }
      case "Enter":
      case "Escape": {
        return true;
      }
      case " ": {
        if (this.typeAheadExpired) {
          return true;
        }
      }
      default: {
        if (key.length === 1) {
          this.handleTypeAhead(`${key}`);
        }
        return true;
      }
    }
  }
};
Listbox.TYPE_AHEAD_TIMEOUT_MS = 1e3;
Listbox.slottedOptionFilter = (n) => isListboxOption(n) && !n.disabled && !n.hidden;
__decorate7([
  observable
], Listbox.prototype, "selectedIndex", void 0);
__decorate7([
  observable
], Listbox.prototype, "typeaheadBuffer", void 0);
__decorate7([
  attr
], Listbox.prototype, "role", void 0);
__decorate7([
  attr({ mode: "boolean" })
], Listbox.prototype, "disabled", void 0);
__decorate7([
  observable
], Listbox.prototype, "slottedOptions", void 0);
__decorate7([
  observable
], Listbox.prototype, "selectedOptions", void 0);
var DelegatesARIAListbox = class {
  constructor() {
    this.ariaActiveDescendant = "";
  }
};
__decorate7([
  observable
], DelegatesARIAListbox.prototype, "ariaActiveDescendant", void 0);
__decorate7([
  observable
], DelegatesARIAListbox.prototype, "ariaDisabled", void 0);
__decorate7([
  observable
], DelegatesARIAListbox.prototype, "ariaExpanded", void 0);
applyMixins(DelegatesARIAListbox, ARIAGlobalStatesAndProperties);
applyMixins(Listbox, DelegatesARIAListbox);

// node_modules/@microsoft/fast-foundation/dist/esm/combobox/combobox.form-associated.js
var _Combobox = class extends Listbox {
};
var FormAssociatedCombobox = class extends FormAssociated(_Combobox) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/combobox/combobox.options.js
var ComboboxAutocomplete;
(function(ComboboxAutocomplete2) {
  ComboboxAutocomplete2["inline"] = "inline";
  ComboboxAutocomplete2["list"] = "list";
  ComboboxAutocomplete2["both"] = "both";
  ComboboxAutocomplete2["none"] = "none";
})(ComboboxAutocomplete || (ComboboxAutocomplete = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/combobox/combobox.js
var Combobox = class extends FormAssociatedCombobox {
  constructor() {
    super(...arguments);
    this._value = "";
    this.filteredOptions = [];
    this.filter = "";
    this.forcedPosition = false;
    this.formResetCallback = () => {
      this.value = this.initialValue;
      this.dirtyValue = false;
      this.setDefaultSelectedOption();
      this.updateValue();
    };
    this.listboxId = uniqueId_default("listbox-");
    this.maxHeight = 0;
    this.open = false;
    this.position = SelectPosition.below;
    this.role = SelectRole.combobox;
  }
  get isAutocompleteInline() {
    return this.autocomplete === ComboboxAutocomplete.inline || this.isAutocompleteBoth;
  }
  get isAutocompleteList() {
    return this.autocomplete === ComboboxAutocomplete.list || this.isAutocompleteBoth;
  }
  get isAutocompleteBoth() {
    return this.autocomplete === ComboboxAutocomplete.both;
  }
  openChanged() {
    this.ariaExpanded = this.open ? "true" : "false";
    if (this.open) {
      this.setPositioning();
      this.focusAndScrollOptionIntoView();
    }
  }
  /**
   * The list of options.
   *
   * @public
   * @remarks
   * Overrides `Listbox.options`.
   */
  get options() {
    Observable.track(this, "options");
    return this.filteredOptions.length ? this.filteredOptions : this._options;
  }
  set options(value) {
    this._options = value;
    Observable.notify(this, "options");
  }
  /**
   * Updates the placeholder on the proxy element.
   * @internal
   */
  placeholderChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.placeholder = this.placeholder;
    }
  }
  /**
   * The value property.
   *
   * @public
   */
  get value() {
    Observable.track(this, "value");
    return this._value;
  }
  set value(next) {
    var _a, _b, _c;
    const prev = `${this._value}`;
    if (this.$fastController.isConnected && this.options) {
      const selectedIndex = this.options.findIndex((el) => el.text.toLowerCase() === next.toLowerCase());
      const prevSelectedValue = (_a = this.options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.text;
      const nextSelectedValue = (_b = this.options[selectedIndex]) === null || _b === void 0 ? void 0 : _b.text;
      this.selectedIndex = prevSelectedValue !== nextSelectedValue ? selectedIndex : this.selectedIndex;
      next = ((_c = this.firstSelectedOption) === null || _c === void 0 ? void 0 : _c.text) || next;
    }
    if (prev !== next) {
      this._value = next;
      super.valueChanged(prev, next);
      Observable.notify(this, "value");
    }
  }
  /**
   * Handle opening and closing the listbox when the combobox is clicked.
   *
   * @param e - the mouse event
   * @internal
   */
  clickHandler(e) {
    if (this.disabled) {
      return;
    }
    if (this.open) {
      const captured = e.target.closest(`option,[role=option]`);
      if (!captured || captured.disabled) {
        return;
      }
      this.selectedOptions = [captured];
      this.control.value = captured.text;
    }
    this.open = !this.open;
    if (!this.open) {
      this.updateValue(true);
    }
    return true;
  }
  connectedCallback() {
    super.connectedCallback();
    this.forcedPosition = !!this.positionAttribute;
    if (this.value) {
      this.initialValue = this.value;
    }
  }
  /**
   * Synchronize the `aria-disabled` property when the `disabled` property changes.
   *
   * @param prev - The previous disabled value
   * @param next - The next disabled value
   *
   * @internal
   */
  disabledChanged(prev, next) {
    if (super.disabledChanged) {
      super.disabledChanged(prev, next);
    }
    this.ariaDisabled = this.disabled ? "true" : "false";
  }
  /**
   * Filter available options by text value.
   *
   * @public
   */
  filterOptions() {
    if (!this.autocomplete || this.autocomplete === ComboboxAutocomplete.none) {
      this.filter = "";
    }
    const filter2 = this.filter.toLowerCase();
    this.filteredOptions = this._options.filter((o) => o.text.toLowerCase().startsWith(this.filter.toLowerCase()));
    if (this.isAutocompleteList) {
      if (!this.filteredOptions.length && !filter2) {
        this.filteredOptions = this._options;
      }
      this._options.forEach((o) => {
        o.hidden = !this.filteredOptions.includes(o);
      });
    }
  }
  /**
   * Handle focus state when the element or its children lose focus.
   *
   * @param e - The focus event
   * @internal
   */
  focusoutHandler(e) {
    this.updateValue();
    if (!this.open) {
      return true;
    }
    const focusTarget = e.relatedTarget;
    if (this.isSameNode(focusTarget)) {
      this.focus();
      return;
    }
    if (!this.options || !this.options.includes(focusTarget)) {
      this.open = false;
    }
  }
  /**
   * Handle content changes on the control input.
   *
   * @param e - the input event
   * @internal
   */
  inputHandler(e) {
    this.filter = this.control.value;
    this.filterOptions();
    if (e.inputType === "deleteContentBackward" || !this.filter.length) {
      return true;
    }
    if (this.isAutocompleteList && !this.open) {
      this.open = true;
    }
    if (this.isAutocompleteInline && this.filteredOptions.length) {
      this.selectedOptions = [this.filteredOptions[0]];
      this.selectedIndex = this.options.indexOf(this.firstSelectedOption);
      this.setInlineSelection();
    }
    return;
  }
  /**
   * Handle keydown actions for listbox navigation.
   *
   * @param e - the keyboard event
   * @internal
   */
  keydownHandler(e) {
    const key = e.key;
    if (e.ctrlKey || e.shiftKey) {
      return true;
    }
    switch (key) {
      case "Enter": {
        this.updateValue(true);
        if (this.isAutocompleteInline) {
          this.filter = this.value;
        }
        this.open = false;
        const controlValueLength = this.control.value.length;
        this.control.setSelectionRange(controlValueLength, controlValueLength);
        break;
      }
      case "Escape": {
        if (!this.isAutocompleteInline) {
          this.selectedIndex = -1;
        }
        if (this.open) {
          this.open = false;
          break;
        }
        this.value = "";
        this.control.value = "";
        this.filter = "";
        this.filterOptions();
        break;
      }
      case "Tab": {
        this.updateValue();
        if (!this.open) {
          return true;
        }
        e.preventDefault();
        this.open = false;
        break;
      }
      case "ArrowUp":
      case "ArrowDown": {
        this.filterOptions();
        if (!this.open) {
          this.open = true;
          break;
        }
        if (this.filteredOptions.length > 0) {
          super.keydownHandler(e);
        }
        if (this.isAutocompleteInline) {
          this.updateValue();
          this.setInlineSelection();
        }
        break;
      }
      default: {
        return true;
      }
    }
  }
  /**
   * Handle keyup actions for value input and text field manipulations.
   *
   * @param e - the keyboard event
   * @internal
   */
  keyupHandler(e) {
    const key = e.key;
    switch (key) {
      case "ArrowLeft":
      case "ArrowRight":
      case "Backspace":
      case "Delete":
      case "Home":
      case "End": {
        this.filter = this.control.value;
        this.selectedIndex = -1;
        this.filterOptions();
        break;
      }
    }
  }
  /**
   * Ensure that the selectedIndex is within the current allowable filtered range.
   *
   * @internal
   * @remarks
   * Overrides: `Listbox.selectedIndexChanged`
   */
  selectedIndexChanged(prev, next) {
    if (this.$fastController.isConnected) {
      next = limit(-1, this.options.length - 1, next);
      if (next !== this.selectedIndex) {
        this.selectedIndex = next;
        return;
      }
      super.selectedIndexChanged(prev, next);
    }
  }
  /**
   * Move focus to the previous selectable option.
   *
   * @internal
   * @remarks
   * Overrides `Listbox.selectPreviousOption`
   */
  selectPreviousOption() {
    if (!this.disabled && this.selectedIndex >= 0) {
      this.selectedIndex = this.selectedIndex - 1;
    }
  }
  /**
   * Set the default selected options at initialization or reset.
   *
   * @internal
   * @remarks
   * Overrides `Listbox.setDefaultSelectedOption`
   */
  setDefaultSelectedOption() {
    if (this.$fastController.isConnected && this.options) {
      const selectedIndex = this.options.findIndex((el) => el.getAttribute("selected") !== null || el.selected);
      this.selectedIndex = selectedIndex;
      if (!this.dirtyValue && this.firstSelectedOption) {
        this.value = this.firstSelectedOption.text;
      }
      this.setSelectedOptions();
    }
  }
  /**
   * Focus and select the content of the control based on the first selected option.
   *
   * @param start - The index for the starting range
   * @internal
   */
  setInlineSelection() {
    if (this.firstSelectedOption) {
      this.control.value = this.firstSelectedOption.text;
      this.control.focus();
      this.control.setSelectionRange(this.filter.length, this.control.value.length, "backward");
    }
  }
  /**
   * Calculate and apply listbox positioning based on available viewport space.
   *
   * @param force - direction to force the listbox to display
   * @public
   */
  setPositioning() {
    const currentBox = this.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const availableBottom = viewportHeight - currentBox.bottom;
    this.position = this.forcedPosition ? this.positionAttribute : currentBox.top > availableBottom ? SelectPosition.above : SelectPosition.below;
    this.positionAttribute = this.forcedPosition ? this.positionAttribute : this.position;
    this.maxHeight = this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;
  }
  /**
   * Ensure that the entire list of options is used when setting the selected property.
   *
   * @internal
   * @remarks
   * Overrides: `Listbox.selectedOptionsChanged`
   */
  selectedOptionsChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this._options.forEach((o) => {
        o.selected = next.includes(o);
      });
    }
  }
  /**
   * Synchronize the form-associated proxy and update the value property of the element.
   *
   * @param prev - the previous collection of slotted option elements
   * @param next - the next collection of slotted option elements
   *
   * @internal
   */
  slottedOptionsChanged(prev, next) {
    super.slottedOptionsChanged(prev, next);
    this.updateValue();
  }
  /**
   * @internal
   */
  updateValue(shouldEmit) {
    var _a;
    if (this.$fastController.isConnected) {
      this.value = ((_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.text) || this.control.value;
    }
    if (shouldEmit) {
      this.$emit("change");
    }
  }
};
__decorate7([
  attr({ attribute: "autocomplete", mode: "fromView" })
], Combobox.prototype, "autocomplete", void 0);
__decorate7([
  observable
], Combobox.prototype, "maxHeight", void 0);
__decorate7([
  attr({ attribute: "open", mode: "boolean" })
], Combobox.prototype, "open", void 0);
__decorate7([
  attr
], Combobox.prototype, "placeholder", void 0);
__decorate7([
  attr({ attribute: "position" })
], Combobox.prototype, "positionAttribute", void 0);
__decorate7([
  observable
], Combobox.prototype, "position", void 0);
var DelegatesARIACombobox = class {
};
__decorate7([
  attr({ attribute: "aria-autocomplete", mode: "fromView" })
], DelegatesARIACombobox.prototype, "ariaAutocomplete", void 0);
applyMixins(DelegatesARIACombobox, ARIAGlobalStatesAndProperties);
applyMixins(Combobox, StartEnd, DelegatesARIACombobox);

// node_modules/@microsoft/fast-foundation/dist/esm/combobox/combobox.template.js
var ComboboxTemplate = html2`
    <template
        autocomplete="${(x) => x.autocomplete}"
        class="${(x) => x.disabled ? "disabled" : ""} ${(x) => x.position}"
        tabindex="${(x) => !x.disabled ? "0" : null}"
        aria-disabled="${(x) => x.ariaDisabled}"
        aria-autocomplete="${(x) => x.autocomplete}"
        @click="${(x, c) => x.clickHandler(c.event)}"
        @focusout="${(x, c) => x.focusoutHandler(c.event)}"
    >
        <div class="control" part="control">
            ${startTemplate}
            <slot name="control">
                <input
                    class="selected-value"
                    part="selected-value"
                    placeholder="${(x) => x.placeholder}"
                    role="${(x) => x.role}"
                    type="text"
                    aria-activedescendant="${(x) => x.open ? x.ariaActiveDescendant : null}"
                    aria-controls="${(x) => x.listboxId}"
                    aria-expanded="${(x) => x.ariaExpanded}"
                    aria-haspopup="listbox"
                    ?disabled="${(x) => x.disabled}"
                    :value="${(x) => x.value}"
                    @input="${(x, c) => x.inputHandler(c.event)}"
                    @keydown="${(x, c) => x.keydownHandler(c.event)}"
                    @keyup="${(x, c) => x.keyupHandler(c.event)}"
                    ${ref("control")}
                />
                <div class="indicator" part="indicator" aria-hidden="true">
                    <slot name="indicator">
                        <svg
                            class="select-indicator"
                            part="select-indicator"
                            viewBox="0 0 12 7"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M11.85.65c.2.2.2.5 0 .7L6.4 6.84a.55.55 0 01-.78 0L.14 1.35a.5.5 0 11.71-.7L6 5.8 11.15.65c.2-.2.5-.2.7 0z"
                            />
                        </svg>
                    </slot>
                </div>
            </slot>
            ${endTemplate}
        </div>
        <div
            aria-disabled="${(x) => x.disabled}"
            class="listbox"
            id="${(x) => x.listboxId}"
            part="listbox"
            role="listbox"
            style="--max-height: ${(x) => x.maxHeight}px"
            ?disabled="${(x) => x.disabled}"
            ?hidden="${(x) => !x.open}"
        >
            <slot
                ${slotted({
  filter: Listbox.slottedOptionFilter,
  flatten: true,
  property: "slottedOptions"
})}
            ></slot>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/custom-properties/behavior.js
var CSSCustomPropertyBehavior = class {
  /**
   *
   * @param name - The name of the custom property, without the prepended "--" required by {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom properties}.
   * @param value - The value of the custom property or a function that resolves the value.
   * @param host - A function that resolves the host element that will register the behavior
   */
  constructor(name, value, host) {
    this.name = name;
    this.value = value;
    this.host = host;
    this.propertyName = `--${name}`;
    this.var = `var(${this.propertyName})`;
  }
  /**
   * Binds the behavior to a source element
   * @param source - The source element being bound
   * @internal
   */
  bind(source) {
    const target = this.host(source);
    if (target !== null) {
      if (typeof target.registerCSSCustomProperty === "function") {
        target.registerCSSCustomProperty(this);
      } else {
        if (!Array.isArray(target.disconnectedCSSCustomPropertyRegistry)) {
          target.disconnectedCSSCustomPropertyRegistry = [];
        }
        target.disconnectedCSSCustomPropertyRegistry.push(this);
      }
    }
  }
  /**
   * Unbinds the behavior from the source element.
   * @param source - The source element being unbound
   * @internal
   */
  unbind(source) {
    const target = this.host(source);
    if (target !== null && typeof target.unregisterCSSCustomProperty === "function") {
      target.unregisterCSSCustomProperty(this);
    }
  }
};
function cssCustomPropertyBehaviorFactory(name, value, host) {
  return new CSSCustomPropertyBehavior(name, value, host);
}

// node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid.template.js
function createRowItemTemplate(prefix) {
  return html2`
    <${prefix}-data-grid-row
        :rowData="${(x) => x}"
        :cellItemTemplate="${(x, c) => c.parent.cellItemTemplate}"
        :headerCellItemTemplate="${(x, c) => c.parent.headerCellItemTemplate}"
    ></${prefix}-data-grid-row>
`;
}
function createDataGridTemplate(prefix) {
  const rowItemTemplate = createRowItemTemplate(prefix);
  return html2`
        <template
            role="grid"
            tabindex="0"
            :prefix="${prefix}"
            :defaultRowItemTemplate="${rowItemTemplate}"
            ${children({
    property: "rowElements",
    filter: elements("[role=row]")
  })}
        >
            <slot></slot>
        </template>
    `;
}

// node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid.options.js
var GenerateHeaderOptions;
(function(GenerateHeaderOptions2) {
  GenerateHeaderOptions2["none"] = "none";
  GenerateHeaderOptions2["default"] = "default";
  GenerateHeaderOptions2["sticky"] = "sticky";
})(GenerateHeaderOptions || (GenerateHeaderOptions = {}));
var DataGridCellTypes;
(function(DataGridCellTypes2) {
  DataGridCellTypes2["default"] = "default";
  DataGridCellTypes2["columnHeader"] = "columnheader";
})(DataGridCellTypes || (DataGridCellTypes = {}));
var DataGridRowTypes;
(function(DataGridRowTypes2) {
  DataGridRowTypes2["default"] = "default";
  DataGridRowTypes2["header"] = "header";
  DataGridRowTypes2["stickyHeader"] = "sticky-header";
})(DataGridRowTypes || (DataGridRowTypes = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid.js
var DataGrid = class extends FASTElement {
  constructor() {
    super();
    this.generateHeader = GenerateHeaderOptions.default;
    this.rowsData = [];
    this.columnDefinitions = null;
    this.focusRowIndex = 0;
    this.focusColumnIndex = 0;
    this.rowsPlaceholder = null;
    this.generatedHeader = null;
    this.isUpdatingFocus = false;
    this.pendingFocusUpdate = false;
    this.rowindexUpdateQueued = false;
    this.columnDefinitionsStale = true;
    this.generatedGridTemplateColumns = "";
    this.focusOnCell = (rowIndex, columnIndex, scrollIntoView) => {
      if (this.rowElements.length === 0) {
        this.focusRowIndex = 0;
        this.focusColumnIndex = 0;
        return;
      }
      const focusRowIndex = Math.max(0, Math.min(this.rowElements.length - 1, rowIndex));
      const focusRow = this.rowElements[focusRowIndex];
      const cells = focusRow.querySelectorAll('[role="cell"], [role="gridcell"], [role="columnheader"]');
      const focusColumnIndex = Math.max(0, Math.min(cells.length - 1, columnIndex));
      const focusTarget = cells[focusColumnIndex];
      if (scrollIntoView && this.scrollHeight !== this.clientHeight && (focusRowIndex < this.focusRowIndex && this.scrollTop > 0 || focusRowIndex > this.focusRowIndex && this.scrollTop < this.scrollHeight - this.clientHeight)) {
        focusTarget.scrollIntoView({ block: "center", inline: "center" });
      }
      focusTarget.focus();
    };
    this.onChildListChange = (mutations, observer) => {
      if (mutations.length) {
        mutations.forEach((mutation) => {
          mutation.addedNodes.forEach((newNode) => {
            if (newNode.nodeType === 1 && newNode.getAttribute("role") === "row") {
              newNode.columnDefinitions = this.columnDefinitions;
            }
          });
        });
        this.queueRowIndexUpdate();
      }
    };
    this.queueRowIndexUpdate = () => {
      if (!this.rowindexUpdateQueued) {
        this.rowindexUpdateQueued = true;
        DOM.queueUpdate(this.updateRowIndexes);
      }
    };
    this.updateRowIndexes = () => {
      const newGridTemplateColumns = this.gridTemplateColumns === void 0 ? this.generatedGridTemplateColumns : this.gridTemplateColumns;
      this.rowElements.forEach((element, index) => {
        const thisRow = element;
        thisRow.rowIndex = index;
        thisRow.gridTemplateColumns = newGridTemplateColumns;
        if (this.columnDefinitionsStale) {
          thisRow.columnDefinitions = this.columnDefinitions;
        }
      });
      this.rowindexUpdateQueued = false;
      this.columnDefinitionsStale = false;
    };
  }
  /**
   *  generates a gridTemplateColumns based on columndata array
   */
  static generateTemplateColumns(columnDefinitions) {
    let templateColumns = "";
    columnDefinitions.forEach((column) => {
      templateColumns = `${templateColumns}${templateColumns === "" ? "" : " "}${"1fr"}`;
    });
    return templateColumns;
  }
  generateHeaderChanged() {
    if (this.$fastController.isConnected) {
      this.toggleGeneratedHeader();
    }
  }
  gridTemplateColumnsChanged() {
    if (this.$fastController.isConnected) {
      this.updateRowIndexes();
    }
  }
  rowsDataChanged() {
    if (this.columnDefinitions === null && this.rowsData.length > 0) {
      this.columnDefinitions = DataGrid.generateColumns(this.rowsData[0]);
    }
  }
  columnDefinitionsChanged() {
    if (this.columnDefinitions === null) {
      this.generatedGridTemplateColumns = "";
      return;
    }
    this.generatedGridTemplateColumns = DataGrid.generateTemplateColumns(this.columnDefinitions);
    if (this.$fastController.isConnected) {
      this.columnDefinitionsStale = true;
      this.queueRowIndexUpdate();
    }
  }
  headerCellItemTemplateChanged() {
    if (this.$fastController.isConnected) {
      if (this.generatedHeader !== null) {
        this.generatedHeader.headerCellItemTemplate = this.headerCellItemTemplate;
      }
    }
  }
  focusRowIndexChanged() {
    if (this.$fastController.isConnected) {
      this.queueFocusUpdate();
    }
  }
  focusColumnIndexChanged() {
    if (this.$fastController.isConnected) {
      this.queueFocusUpdate();
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (this.rowItemTemplate === void 0) {
      this.rowItemTemplate = this.defaultRowItemTemplate;
    }
    this.rowsPlaceholder = document.createComment("");
    this.appendChild(this.rowsPlaceholder);
    this.toggleGeneratedHeader();
    this.rowsRepeatBehavior = new RepeatDirective((x) => x.rowsData, (x) => x.rowItemTemplate, { positioning: true }).createBehavior(this.rowsPlaceholder);
    this.$fastController.addBehaviors([this.rowsRepeatBehavior]);
    this.addEventListener("row-focused", this.handleRowFocus);
    this.addEventListener(eventFocus, this.handleFocus);
    this.addEventListener(eventKeyDown, this.handleKeydown);
    this.addEventListener(eventFocusOut, this.handleFocusOut);
    this.observer = new MutationObserver(this.onChildListChange);
    this.observer.observe(this, { childList: true });
    DOM.queueUpdate(this.queueRowIndexUpdate);
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("row-focused", this.handleRowFocus);
    this.removeEventListener(eventFocus, this.handleFocus);
    this.removeEventListener(eventKeyDown, this.handleKeydown);
    this.removeEventListener(eventFocusOut, this.handleFocusOut);
    this.observer.disconnect();
    this.rowsPlaceholder = null;
    this.generatedHeader = null;
  }
  /**
   * @internal
   */
  handleRowFocus(e) {
    this.isUpdatingFocus = true;
    const focusRow = e.target;
    this.focusRowIndex = this.rowElements.indexOf(focusRow);
    this.focusColumnIndex = focusRow.focusColumnIndex;
    this.setAttribute("tabIndex", "-1");
    this.isUpdatingFocus = false;
  }
  /**
   * @internal
   */
  handleFocus(e) {
    this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, true);
  }
  /**
   * @internal
   */
  handleFocusOut(e) {
    if (e.relatedTarget === null || !this.contains(e.relatedTarget)) {
      this.setAttribute("tabIndex", "0");
    }
  }
  /**
   * @internal
   */
  handleKeydown(e) {
    if (e.defaultPrevented) {
      return;
    }
    let newFocusRowIndex;
    const maxIndex = this.rowElements.length - 1;
    const currentGridBottom = this.offsetHeight + this.scrollTop;
    const lastRow = this.rowElements[maxIndex];
    switch (e.keyCode) {
      case keyCodeArrowUp:
        e.preventDefault();
        this.focusOnCell(this.focusRowIndex - 1, this.focusColumnIndex, true);
        break;
      case keyCodeArrowDown:
        e.preventDefault();
        this.focusOnCell(this.focusRowIndex + 1, this.focusColumnIndex, true);
        break;
      case keyCodePageUp:
        e.preventDefault();
        if (this.rowElements.length === 0) {
          this.focusOnCell(0, 0, false);
          break;
        }
        if (this.focusRowIndex === 0) {
          this.focusOnCell(0, this.focusColumnIndex, false);
          return;
        }
        newFocusRowIndex = this.focusRowIndex - 1;
        for (newFocusRowIndex; newFocusRowIndex >= 0; newFocusRowIndex--) {
          const thisRow = this.rowElements[newFocusRowIndex];
          if (thisRow.offsetTop < this.scrollTop) {
            this.scrollTop = thisRow.offsetTop + thisRow.clientHeight - this.clientHeight;
            break;
          }
        }
        this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, false);
        break;
      case keyCodePageDown:
        e.preventDefault();
        if (this.rowElements.length === 0) {
          this.focusOnCell(0, 0, false);
          break;
        }
        if (this.focusRowIndex >= maxIndex || lastRow.offsetTop + lastRow.offsetHeight <= currentGridBottom) {
          this.focusOnCell(maxIndex, this.focusColumnIndex, false);
          return;
        }
        newFocusRowIndex = this.focusRowIndex + 1;
        for (newFocusRowIndex; newFocusRowIndex <= maxIndex; newFocusRowIndex++) {
          const thisRow = this.rowElements[newFocusRowIndex];
          if (thisRow.offsetTop + thisRow.offsetHeight > currentGridBottom) {
            let stickyHeaderOffset = 0;
            if (this.generateHeader === GenerateHeaderOptions.sticky && this.generatedHeader !== null) {
              stickyHeaderOffset = this.generatedHeader.clientHeight;
            }
            this.scrollTop = thisRow.offsetTop - stickyHeaderOffset;
            break;
          }
        }
        this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, false);
        break;
      case keyCodeHome:
        if (e.ctrlKey) {
          e.preventDefault();
          this.focusOnCell(0, 0, true);
        }
        break;
      case keyCodeEnd:
        if (e.ctrlKey && this.columnDefinitions !== null) {
          e.preventDefault();
          this.focusOnCell(this.rowElements.length - 1, this.columnDefinitions.length - 1, true);
        }
        break;
    }
  }
  queueFocusUpdate() {
    if (this.isUpdatingFocus && (this.contains(document.activeElement) || this === document.activeElement)) {
      return;
    }
    if (this.pendingFocusUpdate === false) {
      this.pendingFocusUpdate = true;
      DOM.queueUpdate(() => this.updateFocus());
    }
  }
  updateFocus() {
    this.pendingFocusUpdate = false;
    this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, true);
  }
  toggleGeneratedHeader() {
    if (this.generatedHeader !== null) {
      this.removeChild(this.generatedHeader);
      this.generatedHeader = null;
    }
    if (this.generateHeader !== GenerateHeaderOptions.none) {
      const generatedHeaderElement = document.createElement(`${this.prefix}-data-grid-row`);
      this.generatedHeader = generatedHeaderElement;
      this.generatedHeader.columnDefinitions = this.columnDefinitions;
      this.generatedHeader.gridTemplateColumns = this.gridTemplateColumns;
      this.generatedHeader.rowType = this.generateHeader === GenerateHeaderOptions.sticky ? DataGridRowTypes.stickyHeader : DataGridRowTypes.header;
      if (this.firstChild !== null || this.rowsPlaceholder !== null) {
        this.insertBefore(generatedHeaderElement, this.firstChild !== null ? this.firstChild : this.rowsPlaceholder);
      }
      return;
    }
  }
};
DataGrid.generateColumns = (row) => {
  return Object.getOwnPropertyNames(row).map((property3, index) => {
    return {
      columnDataKey: property3,
      gridColumn: `${index}`
    };
  });
};
__decorate7([
  attr({ attribute: "generate-header" })
], DataGrid.prototype, "generateHeader", void 0);
__decorate7([
  attr({ attribute: "grid-template-columns" })
], DataGrid.prototype, "gridTemplateColumns", void 0);
__decorate7([
  observable
], DataGrid.prototype, "rowsData", void 0);
__decorate7([
  observable
], DataGrid.prototype, "columnDefinitions", void 0);
__decorate7([
  observable
], DataGrid.prototype, "rowItemTemplate", void 0);
__decorate7([
  observable
], DataGrid.prototype, "cellItemTemplate", void 0);
__decorate7([
  observable
], DataGrid.prototype, "headerCellItemTemplate", void 0);
__decorate7([
  observable
], DataGrid.prototype, "focusRowIndex", void 0);
__decorate7([
  observable
], DataGrid.prototype, "focusColumnIndex", void 0);
__decorate7([
  observable
], DataGrid.prototype, "defaultRowItemTemplate", void 0);
__decorate7([
  observable
], DataGrid.prototype, "prefix", void 0);
__decorate7([
  observable
], DataGrid.prototype, "rowElements", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-row.template.js
function createCellItemTemplate(prefix) {
  return html2`
    <${prefix}-data-grid-cell
        grid-column="${(x, c) => c.index + 1}"
        :rowData="${(x, c) => c.parent.rowData}"
        :columnDefinition="${(x) => x}"
    ></${prefix}-data-grid-cell>
`;
}
function createHeaderCellItemTemplate(prefix) {
  return html2`
    <${prefix}-data-grid-cell
        cell-type="columnheader"
        grid-column="${(x, c) => c.index + 1}"
        :columnDefinition="${(x) => x}"
    ></${prefix}-data-grid-cell>
`;
}
function createDataGridRowTemplate(prefix) {
  const cellItemTemplate = createCellItemTemplate(prefix);
  const headerCellItemTemplate = createHeaderCellItemTemplate(prefix);
  return html2`
        <template
            role="row"
            class="${(x) => x.rowType !== "default" ? x.rowType : ""}"
            :defaultCellItemTemplate="${cellItemTemplate}"
            :defaultHeaderCellItemTemplate="${headerCellItemTemplate}"
            ${children({
    property: "cellElements",
    filter: elements('[role="cell"],[role="gridcell"],[role="columnheader"]')
  })}
        >
            <slot ${slotted("slottedCellElements")}></slot>
        </template>
    `;
}

// node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-row.js
var DataGridRow = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.rowType = DataGridRowTypes.default;
    this.rowData = null;
    this.columnDefinitions = null;
    this.isActiveRow = false;
    this.cellsRepeatBehavior = null;
    this.cellsPlaceholder = null;
    this.focusColumnIndex = 0;
    this.refocusOnLoad = false;
    this.updateRowStyle = () => {
      this.style.gridTemplateColumns = this.gridTemplateColumns;
    };
  }
  gridTemplateColumnsChanged() {
    if (this.$fastController.isConnected) {
      this.updateRowStyle();
    }
  }
  rowTypeChanged() {
    if (this.$fastController.isConnected) {
      this.updateItemTemplate();
    }
  }
  rowDataChanged() {
    if (this.rowData !== null && this.isActiveRow) {
      this.refocusOnLoad = true;
      return;
    }
  }
  cellItemTemplateChanged() {
    this.updateItemTemplate();
  }
  headerCellItemTemplateChanged() {
    this.updateItemTemplate();
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (this.cellsRepeatBehavior === null) {
      this.cellsPlaceholder = document.createComment("");
      this.appendChild(this.cellsPlaceholder);
      this.updateItemTemplate();
      this.cellsRepeatBehavior = new RepeatDirective((x) => x.columnDefinitions, (x) => x.activeCellItemTemplate, { positioning: true }).createBehavior(this.cellsPlaceholder);
      this.$fastController.addBehaviors([this.cellsRepeatBehavior]);
    }
    this.addEventListener("cell-focused", this.handleCellFocus);
    this.addEventListener(eventFocusOut, this.handleFocusout);
    this.addEventListener(eventKeyDown, this.handleKeydown);
    this.updateRowStyle();
    if (this.refocusOnLoad) {
      this.refocusOnLoad = false;
      if (this.cellElements.length > this.focusColumnIndex) {
        this.cellElements[this.focusColumnIndex].focus();
      }
    }
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("cell-focused", this.handleCellFocus);
    this.removeEventListener(eventFocusOut, this.handleFocusout);
    this.removeEventListener(eventKeyDown, this.handleKeydown);
  }
  handleFocusout(e) {
    if (!this.contains(e.target)) {
      this.isActiveRow = false;
      this.focusColumnIndex = 0;
    }
  }
  handleCellFocus(e) {
    this.isActiveRow = true;
    this.focusColumnIndex = this.cellElements.indexOf(e.target);
    this.$emit("row-focused", this);
  }
  handleKeydown(e) {
    if (e.defaultPrevented) {
      return;
    }
    let newFocusColumnIndex = 0;
    switch (e.keyCode) {
      case keyCodeArrowLeft:
        newFocusColumnIndex = Math.max(0, this.focusColumnIndex - 1);
        this.cellElements[newFocusColumnIndex].focus();
        e.preventDefault();
        break;
      case keyCodeArrowRight:
        newFocusColumnIndex = Math.min(this.cellElements.length - 1, this.focusColumnIndex + 1);
        this.cellElements[newFocusColumnIndex].focus();
        e.preventDefault();
        break;
      case keyCodeHome:
        if (!e.ctrlKey) {
          this.cellElements[0].focus();
          e.preventDefault();
        }
        break;
      case keyCodeEnd:
        if (!e.ctrlKey) {
          this.cellElements[this.cellElements.length - 1].focus();
          e.preventDefault();
        }
        break;
    }
  }
  updateItemTemplate() {
    this.activeCellItemTemplate = this.rowType === DataGridRowTypes.default && this.cellItemTemplate !== void 0 ? this.cellItemTemplate : this.rowType === DataGridRowTypes.default && this.cellItemTemplate === void 0 ? this.defaultCellItemTemplate : this.headerCellItemTemplate !== void 0 ? this.headerCellItemTemplate : this.defaultHeaderCellItemTemplate;
  }
};
__decorate7([
  attr({ attribute: "grid-template-columns" })
], DataGridRow.prototype, "gridTemplateColumns", void 0);
__decorate7([
  attr({ attribute: "row-type" })
], DataGridRow.prototype, "rowType", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "rowData", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "columnDefinitions", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "cellItemTemplate", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "headerCellItemTemplate", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "rowIndex", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "isActiveRow", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "activeCellItemTemplate", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "defaultCellItemTemplate", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "defaultHeaderCellItemTemplate", void 0);
__decorate7([
  observable
], DataGridRow.prototype, "cellElements", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-cell.template.js
function createDataGridCellTemplate(prefix) {
  return html2`
        <template
            tabindex="-1"
            role="${(x) => x.cellType === "columnheader" ? "columnheader" : "gridcell"}"
            class="${(x) => x.cellType === "columnheader" ? "column-header" : ""}"
        >
            <slot></slot>
        </template>
    `;
}

// node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-cell.js
var defaultCellContentsTemplate = html2`
    <template>
        ${(x) => x.rowData === null || x.columnDefinition === null || x.columnDefinition.columnDataKey === null ? null : x.rowData[x.columnDefinition.columnDataKey]}
    </template>
`;
var defaultHeaderCellContentsTemplate = html2`
    <template>
        ${(x) => x.columnDefinition === null ? null : x.columnDefinition.title === void 0 ? x.columnDefinition.columnDataKey : x.columnDefinition.title}
    </template>
`;
var DataGridCell = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.rowData = null;
    this.columnDefinition = null;
    this.isActiveCell = false;
    this.customCellView = null;
    this.isInternalFocused = false;
    this.updateCellStyle = () => {
      this.style.gridColumn = this.gridColumn;
    };
  }
  cellTypeChanged() {
    if (this.$fastController.isConnected) {
      this.updateCellView();
    }
  }
  gridColumnChanged() {
    if (this.$fastController.isConnected) {
      this.updateCellStyle();
    }
  }
  columnDefinitionChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.updateCellView();
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    var _a;
    super.connectedCallback();
    this.addEventListener(eventFocusIn, this.handleFocusin);
    this.addEventListener(eventFocusOut, this.handleFocusout);
    this.addEventListener(eventKeyDown, this.handleKeydown);
    this.style.gridColumn = `${((_a = this.columnDefinition) === null || _a === void 0 ? void 0 : _a.gridColumn) === void 0 ? 0 : this.columnDefinition.gridColumn}`;
    this.updateCellView();
    this.updateCellStyle();
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener(eventFocusIn, this.handleFocusin);
    this.removeEventListener(eventFocusOut, this.handleFocusout);
    this.removeEventListener(eventKeyDown, this.handleKeydown);
    this.disconnectCellView();
  }
  handleFocusin(e) {
    if (this.isActiveCell) {
      return;
    }
    this.isActiveCell = true;
    switch (this.cellType) {
      case DataGridCellTypes.columnHeader:
        if (this.columnDefinition !== null && this.columnDefinition.headerCellInternalFocusQueue !== true && typeof this.columnDefinition.headerCellFocusTargetCallback === "function") {
          const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);
          if (focusTarget !== null) {
            focusTarget.focus();
          }
        }
        break;
      default:
        if (this.columnDefinition !== null && this.columnDefinition.cellInternalFocusQueue !== true && typeof this.columnDefinition.cellFocusTargetCallback === "function") {
          const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);
          if (focusTarget !== null) {
            focusTarget.focus();
          }
        }
        break;
    }
    this.$emit("cell-focused", this);
  }
  handleFocusout(e) {
    if (this !== document.activeElement && !this.contains(document.activeElement)) {
      this.isActiveCell = false;
      this.isInternalFocused = false;
    }
  }
  handleKeydown(e) {
    if (e.defaultPrevented || this.columnDefinition === null || this.cellType === DataGridCellTypes.default && this.columnDefinition.cellInternalFocusQueue !== true || this.cellType === DataGridCellTypes.columnHeader && this.columnDefinition.headerCellInternalFocusQueue !== true) {
      return;
    }
    switch (e.keyCode) {
      case keyCodeEnter:
      case keyCodeFunction2:
        if (this.isInternalFocused || this.columnDefinition === void 0) {
          return;
        }
        switch (this.cellType) {
          case DataGridCellTypes.default:
            if (this.columnDefinition.cellFocusTargetCallback !== void 0) {
              const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);
              if (focusTarget !== null) {
                this.isInternalFocused = true;
                focusTarget.focus();
              }
              e.preventDefault();
            }
            break;
          case DataGridCellTypes.columnHeader:
            if (this.columnDefinition.headerCellFocusTargetCallback !== void 0) {
              const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);
              if (focusTarget !== null) {
                this.isInternalFocused = true;
                focusTarget.focus();
              }
              e.preventDefault();
            }
            break;
        }
        break;
      case keyCodeEscape:
        if (this.isInternalFocused) {
          this.focus();
          this.isInternalFocused = false;
          e.preventDefault();
        }
        break;
    }
  }
  updateCellView() {
    this.disconnectCellView();
    if (this.columnDefinition === null) {
      return;
    }
    switch (this.cellType) {
      case DataGridCellTypes.columnHeader:
        if (this.columnDefinition.headerCellTemplate !== void 0) {
          this.customCellView = this.columnDefinition.headerCellTemplate.render(this, this);
        } else {
          this.customCellView = defaultHeaderCellContentsTemplate.render(this, this);
        }
        break;
      case void 0:
      case DataGridCellTypes.default:
        if (this.columnDefinition.cellTemplate !== void 0) {
          this.customCellView = this.columnDefinition.cellTemplate.render(this, this);
        } else {
          this.customCellView = defaultCellContentsTemplate.render(this, this);
        }
        break;
    }
  }
  disconnectCellView() {
    if (this.customCellView !== null) {
      this.customCellView.dispose();
      this.customCellView = null;
    }
  }
};
__decorate7([
  attr({ attribute: "cell-type" })
], DataGridCell.prototype, "cellType", void 0);
__decorate7([
  attr({ attribute: "grid-column" })
], DataGridCell.prototype, "gridColumn", void 0);
__decorate7([
  observable
], DataGridCell.prototype, "rowData", void 0);
__decorate7([
  observable
], DataGridCell.prototype, "columnDefinition", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/di/di.js
var metadataByTarget = /* @__PURE__ */ new Map();
if (!("metadata" in Reflect)) {
  Reflect.metadata = function(key, value) {
    return function(target) {
      Reflect.defineMetadata(key, value, target);
    };
  };
  Reflect.defineMetadata = function(key, value, target) {
    let metadata = metadataByTarget.get(target);
    if (metadata === void 0) {
      metadataByTarget.set(target, metadata = /* @__PURE__ */ new Map());
    }
    metadata.set(key, value);
  };
  Reflect.getOwnMetadata = function(key, target) {
    const metadata = metadataByTarget.get(target);
    if (metadata !== void 0) {
      return metadata.get(key);
    }
    return void 0;
  };
}
var ResolverBuilder = class {
  constructor(container, key) {
    this.container = container;
    this.key = key;
  }
  instance(value) {
    return this.registerResolver(0, value);
  }
  singleton(value) {
    return this.registerResolver(1, value);
  }
  transient(value) {
    return this.registerResolver(2, value);
  }
  callback(value) {
    return this.registerResolver(3, value);
  }
  cachedCallback(value) {
    return this.registerResolver(3, cacheCallbackResult(value));
  }
  aliasTo(destinationKey) {
    return this.registerResolver(5, destinationKey);
  }
  registerResolver(strategy, state2) {
    const { container, key } = this;
    this.container = this.key = void 0;
    return container.registerResolver(key, new ResolverImpl(key, strategy, state2));
  }
};
function cloneArrayWithPossibleProps(source) {
  const clone2 = source.slice();
  const keys2 = Object.keys(source);
  const len = keys2.length;
  let key;
  for (let i = 0; i < len; ++i) {
    key = keys2[i];
    if (!isArrayIndex(key)) {
      clone2[key] = source[key];
    }
  }
  return clone2;
}
var DefaultResolver = Object.freeze({
  none(key) {
    throw Error(`${key.toString()} not registered, did you forget to add @singleton()?`);
  },
  singleton(key) {
    return new ResolverImpl(key, 1, key);
  },
  transient(key) {
    return new ResolverImpl(key, 2, key);
  }
});
var ContainerConfiguration = Object.freeze({
  default: Object.freeze({
    parentLocator: () => null,
    responsibleForOwnerRequests: false,
    defaultResolver: DefaultResolver.singleton
  })
});
var dependencyLookup = /* @__PURE__ */ new Map();
function getParamTypes(key) {
  return (Type) => {
    return Reflect.getOwnMetadata(key, Type);
  };
}
var DI = Object.freeze({
  createContainer(config) {
    return new ContainerImpl(null, Object.assign({}, ContainerConfiguration.default, config));
  },
  findResponsibleContainer(element) {
    const owned = element.$container;
    if (owned && owned.responsibleForOwnerRequests) {
      return owned;
    }
    return DI.findParentContainer(element);
  },
  findParentContainer(element) {
    const event = new CustomEvent(DILocateParentEventType, {
      bubbles: true,
      composed: true,
      cancelable: true,
      detail: { container: void 0 }
    });
    element.dispatchEvent(event);
    return event.detail.container || DI.getOrCreateDOMContainer();
  },
  getOrCreateDOMContainer(element = document.body, config) {
    return element.$container || new ContainerImpl(element, Object.assign({}, ContainerConfiguration.default, config, {
      parentLocator: element === document.body ? () => null : DI.findParentContainer
    }));
  },
  getDesignParamtypes: getParamTypes("design:paramtypes"),
  getAnnotationParamtypes: getParamTypes("di:paramtypes"),
  getOrCreateAnnotationParamTypes(Type) {
    let annotationParamtypes = this.getAnnotationParamtypes(Type);
    if (annotationParamtypes === void 0) {
      Reflect.defineMetadata("di:paramtypes", annotationParamtypes = [], Type);
    }
    return annotationParamtypes;
  },
  getDependencies(Type) {
    let dependencies = dependencyLookup.get(Type);
    if (dependencies === void 0) {
      const inject2 = Type.inject;
      if (inject2 === void 0) {
        const designParamtypes = DI.getDesignParamtypes(Type);
        const annotationParamtypes = DI.getAnnotationParamtypes(Type);
        if (designParamtypes === void 0) {
          if (annotationParamtypes === void 0) {
            const Proto = Object.getPrototypeOf(Type);
            if (typeof Proto === "function" && Proto !== Function.prototype) {
              dependencies = cloneArrayWithPossibleProps(DI.getDependencies(Proto));
            } else {
              dependencies = [];
            }
          } else {
            dependencies = cloneArrayWithPossibleProps(annotationParamtypes);
          }
        } else if (annotationParamtypes === void 0) {
          dependencies = cloneArrayWithPossibleProps(designParamtypes);
        } else {
          dependencies = cloneArrayWithPossibleProps(designParamtypes);
          let len = annotationParamtypes.length;
          let auAnnotationParamtype;
          for (let i = 0; i < len; ++i) {
            auAnnotationParamtype = annotationParamtypes[i];
            if (auAnnotationParamtype !== void 0) {
              dependencies[i] = auAnnotationParamtype;
            }
          }
          const keys2 = Object.keys(annotationParamtypes);
          len = keys2.length;
          let key;
          for (let i = 0; i < len; ++i) {
            key = keys2[i];
            if (!isArrayIndex(key)) {
              dependencies[key] = annotationParamtypes[key];
            }
          }
        }
      } else {
        dependencies = cloneArrayWithPossibleProps(inject2);
      }
      dependencyLookup.set(Type, dependencies);
    }
    return dependencies;
  },
  defineProperty(target, propertyName, key, respectConnection = false) {
    const diPropertyKey = `$di_${propertyName}`;
    Reflect.defineProperty(target, propertyName, {
      get: function() {
        let value = this[diPropertyKey];
        if (value === void 0) {
          const container = this instanceof HTMLElement ? DI.findResponsibleContainer(this) : DI.getOrCreateDOMContainer();
          value = container.get(key);
          this[diPropertyKey] = value;
          if (respectConnection && this instanceof FASTElement) {
            const notifier = this.$fastController;
            const handleChange = () => {
              const newContainer = DI.findResponsibleContainer(this);
              const newValue = newContainer.get(key);
              const oldValue = this[diPropertyKey];
              if (newValue !== oldValue) {
                this[diPropertyKey] = value;
                notifier.notify(propertyName);
              }
            };
            notifier.subscribe({ handleChange }, "isConnected");
          }
        }
        return value;
      }
    });
  },
  createInterface(nameConfigOrCallback, configuror) {
    const configure = typeof nameConfigOrCallback === "function" ? nameConfigOrCallback : configuror;
    const friendlyName = typeof nameConfigOrCallback === "string" ? nameConfigOrCallback : nameConfigOrCallback && "friendlyName" in nameConfigOrCallback ? nameConfigOrCallback.friendlyName || defaultFriendlyName : defaultFriendlyName;
    const respectConnection = typeof nameConfigOrCallback === "string" ? false : nameConfigOrCallback && "respectConnection" in nameConfigOrCallback ? nameConfigOrCallback.respectConnection || false : false;
    const Interface = function(target, property3, index) {
      if (target == null || new.target !== void 0) {
        throw new Error(`No registration for interface: '${Interface.friendlyName}'`);
      }
      if (property3) {
        DI.defineProperty(target, property3, Interface, respectConnection);
      } else {
        const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
        annotationParamtypes[index] = Interface;
      }
    };
    Interface.$isInterface = true;
    Interface.friendlyName = friendlyName == null ? "(anonymous)" : friendlyName;
    if (configure != null) {
      Interface.register = function(container, key) {
        return configure(new ResolverBuilder(container, key !== null && key !== void 0 ? key : Interface));
      };
    }
    Interface.toString = function toString2() {
      return `InterfaceSymbol<${Interface.friendlyName}>`;
    };
    return Interface;
  },
  inject(...dependencies) {
    return function(target, key, descriptor) {
      if (typeof descriptor === "number") {
        const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
        const dep = dependencies[0];
        if (dep !== void 0) {
          annotationParamtypes[descriptor] = dep;
        }
      } else if (key) {
        DI.defineProperty(target, key, dependencies[0]);
      } else {
        const annotationParamtypes = descriptor ? DI.getOrCreateAnnotationParamTypes(descriptor.value) : DI.getOrCreateAnnotationParamTypes(target);
        let dep;
        for (let i = 0; i < dependencies.length; ++i) {
          dep = dependencies[i];
          if (dep !== void 0) {
            annotationParamtypes[i] = dep;
          }
        }
      }
    };
  },
  /**
   * Registers the `target` class as a transient dependency; each time the dependency is resolved
   * a new instance will be created.
   *
   * @param target - The class / constructor function to register as transient.
   * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
   *
   * @example
   * ```ts
   * // On an existing class
   * class Foo { }
   * DI.transient(Foo);
   *
   * // Inline declaration
   * const Foo = DI.transient(class { });
   * // Foo is now strongly typed with register
   * Foo.register(container);
   * ```
   */
  transient(target) {
    target.register = function register(container) {
      const registration = Registration.transient(target, target);
      return registration.register(container, target);
    };
    target.registerInRequestor = false;
    return target;
  },
  /**
   * Registers the `target` class as a singleton dependency; the class will only be created once. Each
   * consecutive time the dependency is resolved, the same instance will be returned.
   *
   * @param target - The class / constructor function to register as a singleton.
   * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
   * @example
   * ```ts
   * // On an existing class
   * class Foo { }
   * DI.singleton(Foo);
   *
   * // Inline declaration
   * const Foo = DI.singleton(class { });
   * // Foo is now strongly typed with register
   * Foo.register(container);
   * ```
   *
   * @alpha
   */
  singleton(target, options = defaultSingletonOptions) {
    target.register = function register(container) {
      const registration = Registration.singleton(target, target);
      return registration.register(container, target);
    };
    target.registerInRequestor = options.scoped;
    return target;
  }
});
var Container = DI.createInterface("Container");
function createResolver(getter) {
  return function(key) {
    const resolver = function(target, property3, descriptor) {
      DI.inject(resolver)(target, property3, descriptor);
    };
    resolver.$isResolver = true;
    resolver.resolve = function(handler, requestor) {
      return getter(key, handler, requestor);
    };
    return resolver;
  };
}
var inject = DI.inject;
var defaultSingletonOptions = { scoped: false };
function createAllResolver(getter) {
  return function(key, searchAncestors) {
    searchAncestors = !!searchAncestors;
    const resolver = function(target, property3, descriptor) {
      DI.inject(resolver)(target, property3, descriptor);
    };
    resolver.$isResolver = true;
    resolver.resolve = function(handler, requestor) {
      return getter(key, handler, requestor, searchAncestors);
    };
    return resolver;
  };
}
var all = createAllResolver((key, handler, requestor, searchAncestors) => requestor.getAll(key, searchAncestors));
var lazy = createResolver((key, handler, requestor) => {
  return () => requestor.get(key);
});
var optional = createResolver((key, handler, requestor) => {
  if (requestor.has(key, true)) {
    return requestor.get(key);
  } else {
    return void 0;
  }
});
function ignore(target, property3, descriptor) {
  DI.inject(ignore)(target, property3, descriptor);
}
ignore.$isResolver = true;
ignore.resolve = () => void 0;
var newInstanceForScope = createResolver((key, handler, requestor) => {
  const instance = createNewInstance(key, handler);
  const resolver = new ResolverImpl(key, 0, instance);
  requestor.registerResolver(key, resolver);
  return instance;
});
var newInstanceOf = createResolver((key, handler, _requestor) => createNewInstance(key, handler));
function createNewInstance(key, handler) {
  return handler.getFactory(key).construct(handler);
}
var ResolverImpl = class {
  constructor(key, strategy, state2) {
    this.key = key;
    this.strategy = strategy;
    this.state = state2;
    this.resolving = false;
  }
  get $isResolver() {
    return true;
  }
  register(container, key) {
    return container.registerResolver(key || this.key, this);
  }
  resolve(handler, requestor) {
    switch (this.strategy) {
      case 0:
        return this.state;
      case 1: {
        if (this.resolving) {
          throw new Error(`Cyclic dependency found: ${this.state.name}`);
        }
        this.resolving = true;
        this.state = handler.getFactory(this.state).construct(requestor);
        this.strategy = 0;
        this.resolving = false;
        return this.state;
      }
      case 2: {
        const factory = handler.getFactory(this.state);
        if (factory === null) {
          throw new Error(`Resolver for ${String(this.key)} returned a null factory`);
        }
        return factory.construct(requestor);
      }
      case 3:
        return this.state(handler, requestor, this);
      case 4:
        return this.state[0].resolve(handler, requestor);
      case 5:
        return requestor.get(this.state);
      default:
        throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`);
    }
  }
  getFactory(container) {
    var _a, _b, _c;
    switch (this.strategy) {
      case 1:
      case 2:
        return container.getFactory(this.state);
      case 5:
        return (_c = (_b = (_a = container.getResolver(this.state)) === null || _a === void 0 ? void 0 : _a.getFactory) === null || _b === void 0 ? void 0 : _b.call(_a, container)) !== null && _c !== void 0 ? _c : null;
      default:
        return null;
    }
  }
};
function containerGetKey(d) {
  return this.get(d);
}
function transformInstance(inst, transform2) {
  return transform2(inst);
}
var FactoryImpl = class {
  constructor(Type, dependencies) {
    this.Type = Type;
    this.dependencies = dependencies;
    this.transformers = null;
  }
  construct(container, dynamicDependencies) {
    let instance;
    if (dynamicDependencies === void 0) {
      instance = new this.Type(...this.dependencies.map(containerGetKey, container));
    } else {
      instance = new this.Type(...this.dependencies.map(containerGetKey, container), ...dynamicDependencies);
    }
    if (this.transformers == null) {
      return instance;
    }
    return this.transformers.reduce(transformInstance, instance);
  }
  registerTransformer(transformer) {
    (this.transformers || (this.transformers = [])).push(transformer);
  }
};
var containerResolver = {
  $isResolver: true,
  resolve(handler, requestor) {
    return requestor;
  }
};
function isRegistry(obj) {
  return typeof obj.register === "function";
}
function isSelfRegistry(obj) {
  return isRegistry(obj) && typeof obj.registerInRequestor === "boolean";
}
function isRegisterInRequester(obj) {
  return isSelfRegistry(obj) && obj.registerInRequestor;
}
function isClass(obj) {
  return obj.prototype !== void 0;
}
var InstrinsicTypeNames = /* @__PURE__ */ new Set([
  "Array",
  "ArrayBuffer",
  "Boolean",
  "DataView",
  "Date",
  "Error",
  "EvalError",
  "Float32Array",
  "Float64Array",
  "Function",
  "Int8Array",
  "Int16Array",
  "Int32Array",
  "Map",
  "Number",
  "Object",
  "Promise",
  "RangeError",
  "ReferenceError",
  "RegExp",
  "Set",
  "SharedArrayBuffer",
  "String",
  "SyntaxError",
  "TypeError",
  "Uint8Array",
  "Uint8ClampedArray",
  "Uint16Array",
  "Uint32Array",
  "URIError",
  "WeakMap",
  "WeakSet"
]);
var DILocateParentEventType = "__DI_LOCATE_PARENT__";
var factories = /* @__PURE__ */ new Map();
var ContainerImpl = class {
  constructor(owner, config) {
    this.owner = owner;
    this.config = config;
    this._parent = void 0;
    this.registerDepth = 0;
    if (owner !== null) {
      owner.$container = this;
    }
    this.resolvers = /* @__PURE__ */ new Map();
    this.resolvers.set(Container, containerResolver);
    if (owner instanceof HTMLElement) {
      owner.addEventListener(DILocateParentEventType, (e) => {
        if (e.composedPath()[0] !== this.owner) {
          e.detail.container = this;
          e.stopImmediatePropagation();
        }
      });
    }
  }
  get parent() {
    if (this._parent === void 0) {
      this._parent = this.config.parentLocator(this.owner);
    }
    return this._parent;
  }
  get depth() {
    return this.parent === null ? 0 : this.parent.depth + 1;
  }
  get responsibleForOwnerRequests() {
    return this.config.responsibleForOwnerRequests;
  }
  register(...params) {
    if (++this.registerDepth === 100) {
      throw new Error("Unable to autoregister dependency");
    }
    let current;
    let keys2;
    let value;
    let j;
    let jj;
    for (let i = 0, ii = params.length; i < ii; ++i) {
      current = params[i];
      if (!isObject2(current)) {
        continue;
      }
      if (isRegistry(current)) {
        current.register(this);
      } else if (isClass(current)) {
        Registration.singleton(current, current).register(this);
      } else {
        keys2 = Object.keys(current);
        j = 0;
        jj = keys2.length;
        for (; j < jj; ++j) {
          value = current[keys2[j]];
          if (!isObject2(value)) {
            continue;
          }
          if (isRegistry(value)) {
            value.register(this);
          } else {
            this.register(value);
          }
        }
      }
    }
    --this.registerDepth;
    return this;
  }
  registerResolver(key, resolver) {
    validateKey(key);
    const resolvers = this.resolvers;
    const result2 = resolvers.get(key);
    if (result2 == null) {
      resolvers.set(key, resolver);
    } else if (result2 instanceof ResolverImpl && result2.strategy === 4) {
      result2.state.push(resolver);
    } else {
      resolvers.set(key, new ResolverImpl(key, 4, [result2, resolver]));
    }
    return resolver;
  }
  registerTransformer(key, transformer) {
    const resolver = this.getResolver(key);
    if (resolver == null) {
      return false;
    }
    if (resolver.getFactory) {
      const factory = resolver.getFactory(this);
      if (factory == null) {
        return false;
      }
      factory.registerTransformer(transformer);
      return true;
    }
    return false;
  }
  getResolver(key, autoRegister = true) {
    validateKey(key);
    if (key.resolve !== void 0) {
      return key;
    }
    let current = this;
    let resolver;
    while (current != null) {
      resolver = current.resolvers.get(key);
      if (resolver == null) {
        if (current.parent == null) {
          const handler = isRegisterInRequester(key) ? this : current;
          return autoRegister ? this.jitRegister(key, handler) : null;
        }
        current = current.parent;
      } else {
        return resolver;
      }
    }
    return null;
  }
  has(key, searchAncestors = false) {
    return this.resolvers.has(key) ? true : searchAncestors && this.parent != null ? this.parent.has(key, true) : false;
  }
  get(key) {
    validateKey(key);
    if (key.$isResolver) {
      return key.resolve(this, this);
    }
    let current = this;
    let resolver;
    while (current != null) {
      resolver = current.resolvers.get(key);
      if (resolver == null) {
        if (current.parent == null) {
          const handler = isRegisterInRequester(key) ? this : current;
          resolver = this.jitRegister(key, handler);
          return resolver.resolve(current, this);
        }
        current = current.parent;
      } else {
        return resolver.resolve(current, this);
      }
    }
    throw new Error(`Unable to resolve key: ${key}`);
  }
  getAll(key, searchAncestors = false) {
    validateKey(key);
    const requestor = this;
    let current = requestor;
    let resolver;
    if (searchAncestors) {
      let resolutions = emptyArray;
      while (current != null) {
        resolver = current.resolvers.get(key);
        if (resolver != null) {
          resolutions = resolutions.concat(buildAllResponse(resolver, current, requestor));
        }
        current = current.parent;
      }
      return resolutions;
    } else {
      while (current != null) {
        resolver = current.resolvers.get(key);
        if (resolver == null) {
          current = current.parent;
          if (current == null) {
            return emptyArray;
          }
        } else {
          return buildAllResponse(resolver, current, requestor);
        }
      }
    }
    return emptyArray;
  }
  getFactory(Type) {
    let factory = factories.get(Type);
    if (factory === void 0) {
      if (isNativeFunction(Type)) {
        throw new Error(`${Type.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);
      }
      factories.set(Type, factory = new FactoryImpl(Type, DI.getDependencies(Type)));
    }
    return factory;
  }
  registerFactory(key, factory) {
    factories.set(key, factory);
  }
  createChild(config) {
    return new ContainerImpl(null, Object.assign({}, this.config, config, { parentLocator: () => this }));
  }
  jitRegister(keyAsValue, handler) {
    if (typeof keyAsValue !== "function") {
      throw new Error(`Attempted to jitRegister something that is not a constructor: '${keyAsValue}'. Did you forget to register this resource?`);
    }
    if (InstrinsicTypeNames.has(keyAsValue.name)) {
      throw new Error(`Attempted to jitRegister an intrinsic type: ${keyAsValue.name}. Did you forget to add @inject(Key)`);
    }
    if (isRegistry(keyAsValue)) {
      const registrationResolver = keyAsValue.register(handler, keyAsValue);
      if (!(registrationResolver instanceof Object) || registrationResolver.resolve == null) {
        const newResolver = handler.resolvers.get(keyAsValue);
        if (newResolver != void 0) {
          return newResolver;
        }
        throw new Error("A valid resolver was not returned from the static register method");
      }
      return registrationResolver;
    } else if (keyAsValue.$isInterface) {
      throw new Error(`Attempted to jitRegister an interface: ${keyAsValue.friendlyName}`);
    } else {
      const resolver = this.config.defaultResolver(keyAsValue, handler);
      handler.resolvers.set(keyAsValue, resolver);
      return resolver;
    }
  }
};
var cache = /* @__PURE__ */ new WeakMap();
function cacheCallbackResult(fun) {
  return function(handler, requestor, resolver) {
    if (cache.has(resolver)) {
      return cache.get(resolver);
    }
    const t = fun(handler, requestor, resolver);
    cache.set(resolver, t);
    return t;
  };
}
var Registration = Object.freeze({
  /**
   * allows you to pass an instance.
   * Every time you request this {@link Key} you will get this instance back.
   * ```
   * Registration.instance(Foo, new Foo()));
   * ```
   *
   * @param key -
   * @param value -
   */
  instance(key, value) {
    return new ResolverImpl(key, 0, value);
  },
  /**
   * Creates an instance from the class.
   * Every time you request this {@link Key} you will get the same one back.
   * ```
   * Registration.singleton(Foo, Foo);
   * ```
   *
   * @param key -
   * @param value -
   */
  singleton(key, value) {
    return new ResolverImpl(key, 1, value);
  },
  /**
   * Creates an instance from a class.
   * Every time you request this {@link Key} you will get a new instance.
   * ```
   * Registration.instance(Foo, Foo);
   * ```
   *
   * @param key -
   * @param value -
   */
  transient(key, value) {
    return new ResolverImpl(key, 2, value);
  },
  /**
   * Creates an instance from the method passed.
   * Every time you request this {@link Key} you will get a new instance.
   * ```
   * Registration.callback(Foo, () => new Foo());
   * Registration.callback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
   * ```
   *
   * @param key -
   * @param callback -
   */
  callback(key, callback) {
    return new ResolverImpl(key, 3, callback);
  },
  /**
   * Creates an instance from the method passed.
   * On the first request for the {@link Key} your callback is called and returns an instance.
   * subsequent requests for the {@link Key}, the initial instance returned will be returned.
   * If you pass the same Registration to another container the same cached value will be used.
   * Should all references to the resolver returned be removed, the cache will expire.
   * ```
   * Registration.cachedCallback(Foo, () => new Foo());
   * Registration.cachedCallback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
   * ```
   *
   * @param key -
   * @param callback -
   */
  cachedCallback(key, callback) {
    return new ResolverImpl(key, 3, cacheCallbackResult(callback));
  },
  /**
   * creates an alternate {@link Key} to retrieve an instance by.
   * Returns the same scope as the original {@link Key}.
   * ```
   * Register.singleton(Foo, Foo)
   * Register.aliasTo(Foo, MyFoos);
   *
   * container.getAll(MyFoos) // contains an instance of Foo
   * ```
   *
   * @param originalKey -
   * @param aliasKey -
   */
  aliasTo(originalKey, aliasKey) {
    return new ResolverImpl(aliasKey, 5, originalKey);
  }
});
function validateKey(key) {
  if (key === null || key === void 0) {
    throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?");
  }
}
function buildAllResponse(resolver, handler, requestor) {
  if (resolver instanceof ResolverImpl && resolver.strategy === 4) {
    const state2 = resolver.state;
    let i = state2.length;
    const results = new Array(i);
    while (i--) {
      results[i] = state2[i].resolve(handler, requestor);
    }
    return results;
  }
  return [resolver.resolve(handler, requestor)];
}
var defaultFriendlyName = "(anonymous)";
function isObject2(value) {
  return typeof value === "object" && value !== null || typeof value === "function";
}
var isNativeFunction = function() {
  const lookup = /* @__PURE__ */ new WeakMap();
  let isNative2 = false;
  let sourceText = "";
  let i = 0;
  return function(fn) {
    isNative2 = lookup.get(fn);
    if (isNative2 === void 0) {
      sourceText = fn.toString();
      i = sourceText.length;
      isNative2 = // 29 is the length of 'function () { [native code] }' which is the smallest length of a native function string
      i >= 29 && // 100 seems to be a safe upper bound of the max length of a native function. In Chrome and FF it's 56, in Edge it's 61.
      i <= 100 && // This whole heuristic *could* be tricked by a comment. Do we need to care about that?
      sourceText.charCodeAt(i - 1) === 125 && // }
      // TODO: the spec is a little vague about the precise constraints, so we do need to test this across various browsers to make sure just one whitespace is a safe assumption.
      sourceText.charCodeAt(i - 2) <= 32 && // whitespace
      sourceText.charCodeAt(i - 3) === 93 && // ]
      sourceText.charCodeAt(i - 4) === 101 && // e
      sourceText.charCodeAt(i - 5) === 100 && // d
      sourceText.charCodeAt(i - 6) === 111 && // o
      sourceText.charCodeAt(i - 7) === 99 && // c
      sourceText.charCodeAt(i - 8) === 32 && //
      sourceText.charCodeAt(i - 9) === 101 && // e
      sourceText.charCodeAt(i - 10) === 118 && // v
      sourceText.charCodeAt(i - 11) === 105 && // i
      sourceText.charCodeAt(i - 12) === 116 && // t
      sourceText.charCodeAt(i - 13) === 97 && // a
      sourceText.charCodeAt(i - 14) === 110 && // n
      sourceText.charCodeAt(i - 15) === 88;
      lookup.set(fn, isNative2);
    }
    return isNative2;
  };
}();
var isNumericLookup = {};
function isArrayIndex(value) {
  switch (typeof value) {
    case "number":
      return value >= 0 && (value | 0) === value;
    case "string": {
      const result2 = isNumericLookup[value];
      if (result2 !== void 0) {
        return result2;
      }
      const length = value.length;
      if (length === 0) {
        return isNumericLookup[value] = false;
      }
      let ch = 0;
      for (let i = 0; i < length; ++i) {
        ch = value.charCodeAt(i);
        if (i === 0 && ch === 48 && length > 1 || ch < 48 || ch > 57) {
          return isNumericLookup[value] = false;
        }
      }
      return isNumericLookup[value] = true;
    }
    default:
      return false;
  }
}

// node_modules/@microsoft/fast-foundation/dist/esm/design-system/design-system.js
var DesignSystemRegistrationContext = DI.createInterface();

// node_modules/@microsoft/fast-foundation/dist/esm/design-system/component-presentation.js
var presentationKeys = /* @__PURE__ */ new Map();
var ComponentPresentation = Object.freeze({
  /**
   * @alpha
   * Creates element-specific DI keys for resolving component presentations.
   */
  keyFrom(tagName) {
    const lookup = tagName.toLowerCase();
    let key = presentationKeys.get(lookup);
    if (key === void 0) {
      key = DI.createInterface(`${lookup}:presentation`);
      presentationKeys.set(lookup, key);
    }
    return key;
  }
});
var DefaultComponentPresentation = class {
  constructor(template2, styles23) {
    this.template = template2 || null;
    this.styles = styles23 === void 0 ? null : Array.isArray(styles23) ? ElementStyles.create(styles23) : styles23 instanceof ElementStyles ? styles23 : ElementStyles.create([styles23]);
  }
  applyTo(element) {
    const controller = element.$fastController;
    if (controller.template === null) {
      controller.template = this.template;
    }
    if (controller.styles === null) {
      controller.styles = this.styles;
    }
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/design-token/custom-property-manager.js
var CustomPropertyManagerImpl = class {
  /**
   * {@inheritdoc CustomPropertyManager.get}
   */
  getElementStyles(key, value) {
    let keyCache = CustomPropertyManagerImpl.cache.get(key.cssCustomProperty);
    if (!keyCache) {
      keyCache = /* @__PURE__ */ new Map();
      CustomPropertyManagerImpl.cache.set(key.cssCustomProperty, keyCache);
    }
    let v = keyCache.get(value);
    if (!v) {
      v = this.createElementStyles(key, value);
      keyCache.set(value, v);
    }
    return v;
  }
  getOrCreateAppliedCache(element) {
    if (CustomPropertyManagerImpl.appliedCache.has(element)) {
      return CustomPropertyManagerImpl.appliedCache.get(element);
    }
    return CustomPropertyManagerImpl.appliedCache.set(element, /* @__PURE__ */ new Map()) && CustomPropertyManagerImpl.appliedCache.get(element);
  }
  /**
   * Creates an ElementStyles with the key/value CSS custom property
   * on the host
   */
  createElementStyles(token, value) {
    return css2`:host{${token.cssCustomProperty}:${value};}`;
  }
  addTo(element, token, value) {
    if (isFastElement(element)) {
      const styles23 = this.getElementStyles(token, value);
      element.$fastController.addStyles(styles23);
      this.getOrCreateAppliedCache(element).set(token.cssCustomProperty, styles23);
    } else {
      DOM.queueUpdate(() => element.style.setProperty(token.cssCustomProperty, value));
    }
  }
  removeFrom(element, token) {
    if (isFastElement(element)) {
      const cache3 = this.getOrCreateAppliedCache(element);
      const styles23 = cache3.get(token.cssCustomProperty);
      if (styles23) {
        element.$fastController.removeStyles(styles23);
        cache3.delete(token.cssCustomProperty);
      }
    } else {
      DOM.queueUpdate(() => element.style.removeProperty(token.cssCustomProperty));
    }
  }
};
CustomPropertyManagerImpl.cache = /* @__PURE__ */ new Map();
CustomPropertyManagerImpl.appliedCache = /* @__PURE__ */ new WeakMap();
function isFastElement(element) {
  return element instanceof FASTElement;
}
var CustomPropertyManager = new CustomPropertyManagerImpl();

// node_modules/@microsoft/fast-foundation/dist/esm/design-token/design-token.js
var defaultElement = document.body;
var DesignTokenImpl = class extends CSSDirective {
  constructor(configuration) {
    super();
    this.subscribers = /* @__PURE__ */ new WeakMap();
    this._appliedTo = /* @__PURE__ */ new Set();
    this.name = configuration.name;
    if (configuration.cssCustomPropertyName !== null) {
      this.cssCustomProperty = `--${configuration.cssCustomPropertyName}`;
      this.cssVar = `var(${this.cssCustomProperty})`;
    }
  }
  get appliedTo() {
    return [...this._appliedTo];
  }
  static from(nameOrConfig) {
    return new DesignTokenImpl({
      name: typeof nameOrConfig === "string" ? nameOrConfig : nameOrConfig.name,
      cssCustomPropertyName: typeof nameOrConfig === "string" ? nameOrConfig : nameOrConfig.cssCustomPropertyName === void 0 ? nameOrConfig.name : nameOrConfig.cssCustomPropertyName
    });
  }
  static isCSSDesignToken(token) {
    return typeof token.cssCustomProperty === "string";
  }
  getOrCreateSubscriberSet(target = this) {
    return this.subscribers.get(target) || this.subscribers.set(target, /* @__PURE__ */ new Set()) && this.subscribers.get(target);
  }
  createCSS() {
    return this.cssVar || "";
  }
  getValueFor(element) {
    const node = DesignTokenNode.for(this, element);
    Observable.track(node, "value");
    return DesignTokenNode.for(this, element).value;
  }
  setValueFor(element, value) {
    this._appliedTo.add(element);
    if (value instanceof DesignTokenImpl) {
      const _value = value;
      value = (_element) => DesignTokenNode.for(_value, _element).value;
    }
    DesignTokenNode.for(this, element).set(value);
    [
      ...this.getOrCreateSubscriberSet(this),
      ...this.getOrCreateSubscriberSet(element)
    ].forEach((x) => x.handleChange({ token: this, target: element }));
    return this;
  }
  deleteValueFor(element) {
    this._appliedTo.delete(element);
    DesignTokenNode.for(this, element).delete();
    return this;
  }
  withDefault(value) {
    DesignTokenNode.for(this, defaultElement).set(value);
    return this;
  }
  subscribe(subscriber, target) {
    const subscriberSet = this.getOrCreateSubscriberSet(target);
    if (!subscriberSet.has(subscriber)) {
      subscriberSet.add(subscriber);
    }
  }
  unsubscribe(subscriber, target) {
    this.getOrCreateSubscriberSet(target).delete(subscriber);
  }
};
var nodeCache = /* @__PURE__ */ new WeakMap();
var channelCache = /* @__PURE__ */ new Map();
var childToParent = /* @__PURE__ */ new WeakMap();
var noop2 = Function.prototype;
var DesignTokenNode = class {
  constructor(token, target) {
    var _a;
    this.token = token;
    this.target = target;
    this.children = /* @__PURE__ */ new Set();
    this.useCSSCustomProperty = false;
    this.handleChange = this.unsetValueChangeHandler;
    this.bindingChangeHandler = {
      handleChange: () => {
        Observable.getNotifier(this).notify("value");
      }
    };
    this.cssCustomPropertySubscriber = {
      handleChange: () => {
        CustomPropertyManager.removeFrom(this.target, this.token);
        CustomPropertyManager.addTo(this.target, this.token, this.resolveCSSValue(this.value));
      },
      dispose: () => {
        CustomPropertyManager.removeFrom(this.target, this.token);
      }
    };
    this.tokenDependencySubscriber = {
      handleChange: (record) => {
        const rawValue = this.resolveRawValue();
        const target2 = DesignTokenNode.for(this.token, record.target);
        if (this.contains(target2) && !target2.useCSSCustomProperty && target2.resolveRawValue() === rawValue) {
          target2.useCSSCustomProperty = true;
        }
      }
    };
    if (nodeCache.has(target) && nodeCache.get(target).has(token)) {
      throw new Error(`DesignTokenNode already created for ${token.name} and ${target}. Use DesignTokenNode.for() to ensure proper reuse`);
    }
    const container = DI.getOrCreateDOMContainer(this.target);
    const channel = DesignTokenNode.channel(token);
    container.register(Registration.instance(channel, this));
    if (!DesignTokenImpl.isCSSDesignToken(token)) {
      delete this.useCSSCustomPropertyChanged;
    }
    if (target instanceof FASTElement) {
      target.$fastController.addBehaviors([this]);
    } else {
      (_a = this.findParentNode()) === null || _a === void 0 ? void 0 : _a.appendChild(this);
    }
  }
  _rawValueChanged() {
    Observable.getNotifier(this).notify("value");
  }
  /**
   * The actual value set for the node, or undefined.
   * This will be a reference to the original object for all data types
   * passed by reference.
   */
  get rawValue() {
    return this._rawValue;
  }
  useCSSCustomPropertyChanged(prev, next) {
    if (next) {
      Observable.getNotifier(this).subscribe(this.cssCustomPropertySubscriber, "value");
      this.cssCustomPropertySubscriber.handleChange();
    } else if (prev) {
      Observable.getNotifier(this).unsubscribe(this.cssCustomPropertySubscriber, "value");
      this.cssCustomPropertySubscriber.dispose();
    }
  }
  bind() {
    var _a;
    (_a = this.findParentNode()) === null || _a === void 0 ? void 0 : _a.appendChild(this);
  }
  unbind() {
    var _a;
    (_a = childToParent.get(this)) === null || _a === void 0 ? void 0 : _a.removeChild(this);
    this.tearDownBindingObserver();
  }
  resolveRealValue() {
    const rawValue = this.resolveRawValue();
    if (DesignTokenNode.isDerivedTokenValue(rawValue)) {
      if (!this.bindingObserver || this.bindingObserver.source !== rawValue) {
        this.setupBindingObserver(rawValue);
      }
      return this.bindingObserver.observe(this.target, defaultExecutionContext);
    } else {
      if (this.bindingObserver) {
        this.tearDownBindingObserver();
      }
      return rawValue;
    }
  }
  resolveRawValue() {
    let current = this;
    do {
      const { rawValue } = current;
      if (rawValue !== void 0) {
        return rawValue;
      }
      current = childToParent.get(current);
    } while (current !== void 0);
    if (!childToParent.has(this)) {
      const parent2 = this.findParentNode();
      if (parent2) {
        parent2.appendChild(this);
        return this.resolveRawValue();
      }
    }
    throw new Error(`Value could not be retrieved for token named "${this.token.name}". Ensure the value is set for ${this.target} or an ancestor of ${this.target}. `);
  }
  resolveCSSValue(value) {
    return value && typeof value.createCSS === "function" ? value.createCSS() : value;
  }
  static channel(token) {
    return channelCache.has(token) ? channelCache.get(token) : channelCache.set(token, DI.createInterface()) && channelCache.get(token);
  }
  static isDerivedTokenValue(value) {
    return typeof value === "function";
  }
  unsetValueChangeHandler(source, key) {
    if (this._rawValue === void 0) {
      Observable.getNotifier(this).notify("value");
    }
  }
  setupBindingObserver(value) {
    this.tearDownBindingObserver();
    this.bindingObserver = Observable.binding(value, this.bindingChangeHandler);
  }
  tearDownBindingObserver() {
    if (this.bindingObserver) {
      this.bindingObserver.disconnect();
      this.bindingObserver = void 0;
    }
  }
  static for(token, target) {
    const targetCache = nodeCache.has(target) ? nodeCache.get(target) : nodeCache.set(target, /* @__PURE__ */ new Map()) && nodeCache.get(target);
    return targetCache.has(token) ? targetCache.get(token) : targetCache.set(token, new DesignTokenNode(token, target)) && targetCache.get(token);
  }
  appendChild(child) {
    if (this.children.has(child)) {
      return;
    }
    this.children.forEach((c) => {
      if (child.contains(c)) {
        this.removeChild(c);
        child.appendChild(c);
      }
    });
    this.children.add(child);
    Observable.getNotifier(this).subscribe(child, "value");
    childToParent.set(child, this);
  }
  removeChild(child) {
    this.children.delete(child);
    childToParent.delete(child);
    Observable.getNotifier(this).unsubscribe(child, "value");
  }
  contains(node) {
    return this.target.contains(node.target);
  }
  findParentNode() {
    if (this.target === defaultElement) {
      return null;
    }
    const parent2 = composedParent(this.target);
    if (this.target !== document.body && parent2) {
      const container = DI.getOrCreateDOMContainer(parent2);
      if (container.has(DesignTokenNode.channel(this.token), true)) {
        return container.get(DesignTokenNode.channel(this.token));
      }
    }
    return DesignTokenNode.for(this.token, defaultElement);
  }
  /**
   * The resolved value for a node.
   */
  get value() {
    return this.resolveRealValue();
  }
  /**
   * Sets a value for the node
   * @param value The value to set
   */
  set(value) {
    if (value === this._rawValue) {
      return;
    }
    this.handleChange = noop2;
    this._rawValue = value;
    if (!this.useCSSCustomProperty) {
      this.useCSSCustomProperty = true;
    }
    if (this.bindingObserver) {
      const records = this.bindingObserver.records();
      for (const record of records) {
        if (record.propertySource instanceof DesignTokenNode && record.propertySource.token instanceof DesignTokenImpl) {
          const { token } = record.propertySource;
          token.subscribe(this.tokenDependencySubscriber);
          token.appliedTo.forEach((target) => this.tokenDependencySubscriber.handleChange({ token, target }));
        }
      }
    }
  }
  /**
   * Deletes any value set for the node.
   */
  delete() {
    if (this.useCSSCustomProperty) {
      this.useCSSCustomProperty = false;
    }
    this._rawValue = void 0;
    this.handleChange = this.unsetValueChangeHandler;
    this.tearDownBindingObserver();
  }
};
__decorate7([
  observable
], DesignTokenNode.prototype, "_rawValue", void 0);
__decorate7([
  observable
], DesignTokenNode.prototype, "useCSSCustomProperty", void 0);
function create2(nameOrConfig) {
  return DesignTokenImpl.from(nameOrConfig);
}
var DesignToken = Object.freeze({
  create: create2
});

// node_modules/@microsoft/fast-foundation/dist/esm/dialog/dialog.template.js
var DialogTemplate = html2`
    <div class="positioning-region" part="positioning-region">
        ${when((x) => x.modal, html2`
                <div
                    class="overlay"
                    part="overlay"
                    role="presentation"
                    tabindex="-1"
                    @click="${(x) => x.dismiss()}"
                ></div>
            `)}
        <div
            role="dialog"
            class="control"
            part="control"
            aria-modal="${(x) => x.modal}"
            aria-describedby="${(x) => x.ariaDescribedby}"
            aria-labelledby="${(x) => x.ariaLabelledby}"
            aria-label="${(x) => x.ariaLabel}"
            ${ref("dialog")}
        >
            <slot></slot>
        </div>
    </div>
`;

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input", "select", "textarea", "a[href]", "button", "[tabindex]:not(slot)", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])', "details>summary:first-of-type", "details"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches2 = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  return element.getRootNode();
} : function(element) {
  return element.ownerDocument;
};
var getCandidates = function getCandidates2(el, includeContainer, filter2) {
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches2.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter2);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements2, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements2);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scope: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches2.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements2.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !options.shadowRootFilter || options.shadowRootFilter(element);
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scope: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var getTabindex = function getTabindex2(node, isScope) {
  if (node.tabIndex < 0) {
    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute("tabindex"), 10))) {
      return 0;
    }
  }
  return node.tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot2 = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches2.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches2.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  var nodeRootHost = getRootNode(node).host;
  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);
  if (!displayCheck || displayCheck === "full") {
    if (typeof getShadowRoot2 === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot2(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (nodeIsAttached) {
      return !node.getClientRects().length;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i);
          if (child.tagName === "LEGEND") {
            return matches2.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i) {
    var isScope = !!item.scope;
    var element = isScope ? item.scope : item;
    var candidateTabindex = getTabindex(element, isScope);
    var elements2 = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements2) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements2
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(el, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([el], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");
var isFocusable = function isFocusable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches2.call(node, focusableCandidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorFocusable(options, node);
};

// node_modules/@microsoft/fast-foundation/dist/esm/dialog/dialog.js
var Dialog = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.modal = true;
    this.hidden = false;
    this.trapFocus = true;
    this.onChildListChange = (mutations) => {
      if (mutations.length) {
        this.tabbableElements = tabbable(this);
      }
    };
    this.trapFocusChanged = () => {
      if (this.trapFocus) {
        this.tabbableElements = tabbable(this);
        document.addEventListener("focusin", this.handleDocumentFocus);
        if (this.shouldForceFocus(document.activeElement)) {
          this.focusFirstElement();
        }
      } else {
        document.removeEventListener("focusin", this.handleDocumentFocus);
      }
    };
    this.handleDocumentKeydown = (e) => {
      if (!e.defaultPrevented && !this.hidden) {
        switch (e.keyCode) {
          case keyCodeEscape:
            this.dismiss();
            break;
          case keyCodeTab:
            this.handleTabKeyDown(e);
            break;
        }
      }
    };
    this.handleDocumentFocus = (e) => {
      if (!e.defaultPrevented && this.shouldForceFocus(e.target)) {
        this.focusFirstElement();
        e.preventDefault();
      }
    };
    this.handleTabKeyDown = (e) => {
      if (!this.trapFocus) {
        return;
      }
      const tabbableElementCount = this.tabbableElements.length;
      if (tabbableElementCount === 0) {
        this.dialog.focus();
        e.preventDefault();
        return;
      }
      if (e.shiftKey && e.target === this.tabbableElements[0]) {
        this.tabbableElements[tabbableElementCount - 1].focus();
        e.preventDefault();
      } else if (!e.shiftKey && e.target === this.tabbableElements[tabbableElementCount - 1]) {
        this.tabbableElements[0].focus();
        e.preventDefault();
      }
    };
    this.focusFirstElement = () => {
      if (this.tabbableElements.length === 0) {
        this.dialog.focus();
      } else {
        this.tabbableElements[0].focus();
      }
    };
    this.shouldForceFocus = (currentFocusElement) => {
      return !this.hidden && !this.contains(currentFocusElement);
    };
  }
  /**
   * @internal
   */
  dismiss() {
    this.$emit("dismiss");
  }
  /**
   * The method to show the dialog.
   *
   * @public
   */
  show() {
    this.hidden = false;
  }
  /**
   * The method to hide the dialog.
   *
   * @public
   */
  hide() {
    this.hidden = true;
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.observer = new MutationObserver(this.onChildListChange);
    this.observer.observe(this, { childList: true });
    document.addEventListener("keydown", this.handleDocumentKeydown);
    DOM.queueUpdate(this.trapFocusChanged);
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.observer.disconnect();
    document.removeEventListener("keydown", this.handleDocumentKeydown);
    if (this.trapFocus) {
      document.removeEventListener("focusin", this.handleDocumentFocus);
    }
  }
};
__decorate7([
  attr({ mode: "boolean" })
], Dialog.prototype, "modal", void 0);
__decorate7([
  attr({ mode: "boolean" })
], Dialog.prototype, "hidden", void 0);
__decorate7([
  attr({ attribute: "trap-focus", mode: "boolean" })
], Dialog.prototype, "trapFocus", void 0);
__decorate7([
  attr({ attribute: "aria-describedby" })
], Dialog.prototype, "ariaDescribedby", void 0);
__decorate7([
  attr({ attribute: "aria-labelledby" })
], Dialog.prototype, "ariaLabelledby", void 0);
__decorate7([
  attr({ attribute: "aria-label" })
], Dialog.prototype, "ariaLabel", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/disclosure/disclosure.template.js
var DisclosureTemplate = html2`
    <details class="disclosure" ${ref("details")}>
        <summary
            class="invoker"
            role="button"
            aria-controls="disclosure-content"
            aria-expanded="${(x) => x.expanded}"
        >
            <slot name="start"></slot>
            <slot name="title">${(x) => x.title}</slot>
            <slot name="end"></slot>
        </summary>
        <div id="disclosure-content"><slot></slot></div>
    </details>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/disclosure/disclosure.js
var Disclosure = class extends FASTElement {
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.setup();
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.details.removeEventListener("toggle", this.onToggle);
  }
  /**
   * Show extra content.
   */
  show() {
    this.details.open = true;
  }
  /**
   * Hide extra content.
   */
  hide() {
    this.details.open = false;
  }
  /**
   * Toggle the current(expanded/collapsed) state.
   */
  toggle() {
    this.details.open = !this.details.open;
  }
  /**
   * Register listener and set default disclosure mode
   */
  setup() {
    this.onToggle = this.onToggle.bind(this);
    this.details.addEventListener("toggle", this.onToggle);
    if (this.expanded) {
      this.show();
    }
  }
  /**
   * Update the aria attr and fire `toggle` event
   */
  onToggle() {
    this.expanded = this.details.open;
    this.$emit("toggle");
  }
};
__decorate7([
  attr({ mode: "boolean" })
], Disclosure.prototype, "expanded", void 0);
__decorate7([
  attr
], Disclosure.prototype, "title", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/divider/divider.template.js
var DividerTemplate = html2`
    <template role="${(x) => x.role}"></template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/divider/divider.options.js
var DividerRole;
(function(DividerRole2) {
  DividerRole2["separator"] = "separator";
  DividerRole2["presentation"] = "presentation";
})(DividerRole || (DividerRole = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/divider/divider.js
var Divider = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.role = DividerRole.separator;
  }
};
__decorate7([
  attr
], Divider.prototype, "role", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/flipper/flipper.options.js
var FlipperDirection;
(function(FlipperDirection2) {
  FlipperDirection2["next"] = "next";
  FlipperDirection2["previous"] = "previous";
})(FlipperDirection || (FlipperDirection = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/flipper/flipper.template.js
var FlipperTemplate = html2`
    <template
        role="button"
        aria-disabled="${(x) => x.disabled ? true : void 0}"
        tabindex="${(x) => x.hiddenFromAT ? -1 : 0}"
        class="${(x) => x.direction} ${(x) => x.disabled ? "disabled" : ""}"
    >
        ${when((x) => x.direction === FlipperDirection.next, html2`
                <span part="next" class="next">
                    <slot name="next">
                        <svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M4.023 15.273L11.29 8 4.023.727l.704-.704L12.71 8l-7.984 7.977-.704-.704z"
                            />
                        </svg>
                    </slot>
                </span>
            `)}
        ${when((x) => x.direction === FlipperDirection.previous, html2`
                <span part="previous" class="previous">
                    <slot name="previous">
                        <svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M11.273 15.977L3.29 8 11.273.023l.704.704L4.71 8l7.266 7.273-.704.704z"
                            />
                        </svg>
                    </slot>
                </span>
            `)}
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/flipper/flipper.js
var Flipper = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.hiddenFromAT = true;
    this.direction = FlipperDirection.next;
  }
};
__decorate7([
  attr({ mode: "boolean" })
], Flipper.prototype, "disabled", void 0);
__decorate7([
  attr({ attribute: "aria-hidden", converter: booleanConverter })
], Flipper.prototype, "hiddenFromAT", void 0);
__decorate7([
  attr
], Flipper.prototype, "direction", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/foundation-element/foundation-element.js
var FoundationElement = class extends FASTElement {
  constructor() {
    super(...arguments);
    this._presentation = null;
  }
  /**
   * A property which resolves the ComponentPresentation instance
   * for the current component.
   */
  get $presentation() {
    if (this._presentation === null) {
      this._presentation = this.container.get(ComponentPresentation.keyFrom(this.tagName));
    }
    return this._presentation;
  }
  templateChanged() {
    if (this.template !== void 0) {
      this.$fastController.template = this.template;
    }
  }
  stylesChanged() {
    if (this.styles !== void 0) {
      this.$fastController.styles = this.styles;
    }
  }
  /**
   * The connected callback for this FASTElement.
   * @remarks
   * This method is invoked by the platform whenever this FoundationElement
   * becomes connected to the document.
   */
  connectedCallback() {
    this.$presentation.applyTo(this);
    super.connectedCallback();
  }
  /**
   * Defines an element registry function with a set of element definition defaults.
   * @param elementDefinition - The definition of the element to create the registry
   * function for.
   */
  static compose(elementDefinition) {
    return (overrideDefinition = {}) => new FoundationElementRegistry(this === FoundationElement ? class extends FoundationElement {
    } : this, elementDefinition, overrideDefinition);
  }
};
__decorate7([
  Container
], FoundationElement.prototype, "container", void 0);
__decorate7([
  observable
], FoundationElement.prototype, "template", void 0);
__decorate7([
  observable
], FoundationElement.prototype, "styles", void 0);
function resolveOption(option, context, definition) {
  if (typeof option === "function") {
    return option(context, definition);
  }
  return option;
}
var FoundationElementRegistry = class {
  constructor(type, elementDefinition, overrideDefinition) {
    this.type = type;
    this.elementDefinition = elementDefinition;
    this.overrideDefinition = overrideDefinition;
  }
  register(container) {
    const definition = Object.assign(Object.assign({}, this.elementDefinition), this.overrideDefinition);
    const context = container.get(DesignSystemRegistrationContext);
    const prefix = definition.prefix || context.elementPrefix;
    const name = `${prefix}-${definition.baseName}`;
    context.tryDefineElement(name, this.type, (x) => {
      const presentation = new DefaultComponentPresentation(resolveOption(definition.template, x, definition), resolveOption(definition.styles, x, definition));
      x.container.register(Registration.instance(ComponentPresentation.keyFrom(x.name), presentation));
      x.defineElement({
        elementOptions: resolveOption(definition.elementOptions, x, definition),
        shadowOptions: resolveOption(definition.shadowOptions, x, definition),
        attributes: resolveOption(definition.attributes, x, definition)
      });
    });
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/listbox-option/listbox-option.template.js
var ListboxOptionTemplate = html2`
    <template
        aria-selected="${(x) => x.selected}"
        class="${(x) => x.selected ? "selected" : ""} ${(x) => x.disabled ? "disabled" : ""}"
        role="option"
    >
        ${startTemplate}
        <span class="content" part="content">
            <slot></slot>
        </span>
        ${endTemplate}
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/listbox/listbox.template.js
var ListboxTemplate = html2`
    <template
        aria-activedescendant="${(x) => x.ariaActiveDescendant}"
        class="listbox"
        role="${(x) => x.role}"
        tabindex="${(x) => !x.disabled ? "0" : null}"
        @click="${(x, c) => x.clickHandler(c.event)}"
        @focusin="${(x, c) => x.focusinHandler(c.event)}"
        @keydown="${(x, c) => x.keydownHandler(c.event)}"
        @mousedown="${(x, c) => x.mousedownHandler(c.event)}"
    >
        <slot
            ${slotted({
  filter: Listbox.slottedOptionFilter,
  flatten: true,
  property: "slottedOptions"
})}
        ></slot>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/menu-item/menu-item.options.js
var MenuItemRole;
(function(MenuItemRole2) {
  MenuItemRole2["menuitem"] = "menuitem";
  MenuItemRole2["menuitemcheckbox"] = "menuitemcheckbox";
  MenuItemRole2["menuitemradio"] = "menuitemradio";
})(MenuItemRole || (MenuItemRole = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/menu-item/menu-item.js
var MenuItem = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.role = MenuItemRole.menuitem;
    this.hasSubmenu = false;
    this.currentDirection = Direction.ltr;
    this.focusSubmenuOnLoad = false;
    this.handleMenuItemKeyDown = (e) => {
      if (e.defaultPrevented) {
        return false;
      }
      switch (e.keyCode) {
        case keyCodeEnter:
        case keyCodeSpace:
          this.invoke();
          return false;
        case keyCodeArrowRight:
          this.expandAndFocus();
          return false;
        case keyCodeArrowLeft:
          if (this.expanded) {
            this.expanded = false;
            this.focus();
            return false;
          }
      }
      return true;
    };
    this.handleMenuItemClick = (e) => {
      if (e.defaultPrevented || this.disabled) {
        return false;
      }
      this.invoke();
      return false;
    };
    this.submenuLoaded = () => {
      if (!this.focusSubmenuOnLoad) {
        return;
      }
      this.focusSubmenuOnLoad = false;
      if (this.hasSubmenu) {
        this.submenu.focus();
        this.setAttribute("tabindex", "-1");
      }
    };
    this.handleMouseOver = (e) => {
      if (this.disabled || !this.hasSubmenu || this.expanded) {
        return false;
      }
      this.expanded = true;
      return false;
    };
    this.handleMouseOut = (e) => {
      if (!this.expanded || this.contains(document.activeElement)) {
        return false;
      }
      this.expanded = false;
      return false;
    };
    this.expandAndFocus = () => {
      if (!this.hasSubmenu) {
        return;
      }
      this.focusSubmenuOnLoad = true;
      this.expanded = true;
    };
    this.invoke = () => {
      if (this.disabled) {
        return;
      }
      switch (this.role) {
        case MenuItemRole.menuitemcheckbox:
          this.checked = !this.checked;
          this.$emit("change");
          break;
        case MenuItemRole.menuitem:
          this.updateSubmenu();
          if (this.hasSubmenu) {
            this.expandAndFocus();
          } else {
            this.$emit("change");
          }
          break;
        case MenuItemRole.menuitemradio:
          if (!this.checked) {
            this.checked = true;
          }
          break;
      }
    };
    this.updateSubmenu = () => {
      this.submenu = this.domChildren().find((element) => {
        return element.getAttribute("role") === "menu";
      });
      this.hasSubmenu = this.submenu === void 0 ? false : true;
    };
  }
  expandedChanged(oldValue) {
    if (this.$fastController.isConnected) {
      if (this.submenu === void 0) {
        return;
      }
      if (this.expanded === false) {
        this.submenu.collapseExpandedItem();
      } else {
        this.currentDirection = getDirection(this);
      }
      this.$emit("expanded-change", this, { bubbles: false });
    }
  }
  checkedChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.$emit("change");
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    DOM.queueUpdate(() => {
      this.updateSubmenu();
    });
    this.observer = new MutationObserver(this.updateSubmenu);
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.submenu = void 0;
    if (this.observer !== void 0) {
      this.observer.disconnect();
      this.observer = void 0;
    }
  }
  /**
   * get an array of valid DOM children
   */
  domChildren() {
    return Array.from(this.children);
  }
};
__decorate7([
  attr({ mode: "boolean" })
], MenuItem.prototype, "disabled", void 0);
__decorate7([
  attr({ attribute: "expanded" })
], MenuItem.prototype, "expanded", void 0);
__decorate7([
  attr
], MenuItem.prototype, "role", void 0);
__decorate7([
  attr
], MenuItem.prototype, "checked", void 0);
__decorate7([
  observable
], MenuItem.prototype, "submenuRegion", void 0);
__decorate7([
  observable
], MenuItem.prototype, "hasSubmenu", void 0);
__decorate7([
  observable
], MenuItem.prototype, "currentDirection", void 0);
__decorate7([
  observable
], MenuItem.prototype, "submenu", void 0);
applyMixins(MenuItem, StartEnd);

// node_modules/@microsoft/fast-foundation/dist/esm/menu-item/menu-item.template.js
var MenuItemTemplate = createMenuItemTemplate("fast");
function createMenuItemTemplate(prefix) {
  return html2`
    <template
        role="${(x) => x.role}"
        aria-haspopup="${(x) => x.hasSubmenu ? "menu" : void 0}"
        aria-checked="${(x) => x.role !== MenuItemRole.menuitem ? x.checked : void 0}"
        aria-disabled="${(x) => x.disabled}"
        aria-expanded="${(x) => x.expanded}"
        @keydown="${(x, c) => x.handleMenuItemKeyDown(c.event)}"
        @click="${(x, c) => x.handleMenuItemClick(c.event)}"
        @mouseover="${(x, c) => x.handleMouseOver(c.event)}"
        @mouseout="${(x, c) => x.handleMouseOut(c.event)}"
        class="${(x) => x.disabled ? "disabled" : ""} ${(x) => x.expanded ? "expanded" : ""}"
    >

            ${when((x) => x.role === MenuItemRole.menuitemcheckbox, html2`
                    <div part="input-container" class="input-container">
                        <span part="checkbox" class="checkbox">
                            <slot name="checkbox-indicator">
                                <svg
                                    aria-hidden="true"
                                    part="checkbox-indicator"
                                    class="checkbox-indicator"
                                    viewBox="0 0 20 20"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path
                                        fill-rule="evenodd"
                                        clip-rule="evenodd"
                                        d="M8.143 12.6697L15.235 4.5L16.8 5.90363L8.23812 15.7667L3.80005 11.2556L5.27591 9.7555L8.143 12.6697Z"
                                    />
                                </svg>
                            </slot>
                        </span>
                    </div>
                `)}
            ${when((x) => x.role === MenuItemRole.menuitemradio, html2`
                    <div part="input-container" class="input-container">
                        <span part="radio" class="radio">
                            <slot name="radio-indicator">
                                <span
                                    part="radio-indicator"
                                    class="radio-indicator"
                                ></span>
                            </slot>
                        </span>
                    </div>
                `)}
            ${when((x) => x.hasSubmenu, html2`
                    <div
                        part="expand-collapse-glyph-container"
                        class="expand-collapse-glyph-container"
                    >
                        <span part="expand-collapse" class="expand-collapse">
                            <slot name="expand-collapse-indicator">
                                <svg
                                    viewBox="0 0 16 16"
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="expand-collapse-glyph"
                                    part="expand-collapse-glyph"
                                >
                                    <path
                                        d="M5.00001 12.3263C5.00124 12.5147 5.05566 12.699 5.15699 12.8578C5.25831 13.0167 5.40243 13.1437 5.57273 13.2242C5.74304 13.3047 5.9326 13.3354 6.11959 13.3128C6.30659 13.2902 6.4834 13.2152 6.62967 13.0965L10.8988 8.83532C11.0739 8.69473 11.2153 8.51658 11.3124 8.31402C11.4096 8.11146 11.46 7.88966 11.46 7.66499C11.46 7.44033 11.4096 7.21853 11.3124 7.01597C11.2153 6.81341 11.0739 6.63526 10.8988 6.49467L6.62967 2.22347C6.48274 2.10422 6.30501 2.02912 6.11712 2.00691C5.92923 1.9847 5.73889 2.01628 5.56823 2.09799C5.39757 2.17969 5.25358 2.30817 5.153 2.46849C5.05241 2.62882 4.99936 2.8144 5.00001 3.00369V12.3263Z"
                                    />
                                </svg>
                            </slot>
                        </span>
                    </div>
                `)}
        </div>
        ${startTemplate}
        <span class="content" part="content">
            <slot></slot>
        </span>
        ${endTemplate}
        ${when((x) => x.expanded, html2`
                <${prefix}-anchored-region
                    :anchorElement="${(x) => x}"
                    vertical-positioning-mode="dynamic"
                    vertical-default-position="bottom"
                    vertical-inset="true"
                    horizontal-positioning-mode="dynamic"
                    horizontal-default-position="end"
                    class="submenu-region"
                    dir="${(x) => x.currentDirection}"
                    @loaded="${(x) => x.submenuLoaded()}"
                    ${ref("submenuRegion")}
                    part="submenu-region"
                >
                    <slot name="submenu"></slot>
                </${prefix}-anchored-region>
            `)}
    </template>
`;
}

// node_modules/@microsoft/fast-foundation/dist/esm/menu/menu.template.js
var MenuTemplate = html2`
    <template
        slot="${(x) => x.isNestedMenu() ? "submenu" : void 0}"
        role="menu"
        @keydown="${(x, c) => x.handleMenuKeyDown(c.event)}"
        @focusout="${(x, c) => x.handleFocusOut(c.event)}"
    >
        <slot ${slotted("items")}></slot>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/menu/menu.js
var Menu = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.expandedItem = null;
    this.focusIndex = -1;
    this.isNestedMenu = () => {
      return this.parentElement !== null && isHTMLElement(this.parentElement) && this.parentElement.getAttribute("role") === "menuitem";
    };
    this.handleFocusOut = (e) => {
      if (!this.contains(e.relatedTarget)) {
        this.collapseExpandedItem();
        const focusIndex = this.menuItems.findIndex(this.isFocusableElement);
        this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");
        this.menuItems[focusIndex].setAttribute("tabindex", "0");
        this.focusIndex = focusIndex;
      }
    };
    this.handleItemFocus = (e) => {
      const targetItem = e.target;
      if (targetItem !== this.menuItems[this.focusIndex]) {
        this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");
        this.focusIndex = this.menuItems.indexOf(targetItem);
        targetItem.setAttribute("tabindex", "0");
      }
    };
    this.handleExpandedChanged = (e) => {
      if (e.defaultPrevented || e.target === null || this.menuItems.indexOf(e.target) < 0) {
        return;
      }
      e.preventDefault();
      const changedItem = e.target;
      if (this.expandedItem !== null && changedItem === this.expandedItem && changedItem.expanded === false) {
        this.expandedItem = null;
        return;
      }
      if (changedItem.expanded) {
        if (this.expandedItem !== null && this.expandedItem !== changedItem) {
          this.expandedItem.expanded = false;
        }
        this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");
        this.expandedItem = changedItem;
        this.focusIndex = this.menuItems.indexOf(changedItem);
        changedItem.setAttribute("tabindex", "0");
      }
    };
    this.setItems = () => {
      const menuItems = this.menuItems.filter(this.isMenuItemElement);
      if (menuItems.length) {
        this.focusIndex = 0;
      }
      menuItems.forEach((item, index) => {
        item.setAttribute("tabindex", index === 0 ? "0" : "-1");
        item.addEventListener("expanded-change", this.handleExpandedChanged);
        item.addEventListener("focus", this.handleItemFocus);
      });
    };
    this.resetItems = (oldValue) => {
      oldValue.forEach((item) => {
        item.removeEventListener("expanded-change", this.handleExpandedChanged);
        item.removeEventListener("focus", this.handleItemFocus);
      });
    };
    this.changeHandler = (e) => {
      const changedMenuItem = e.target;
      const changeItemIndex = this.menuItems.indexOf(changedMenuItem);
      if (changeItemIndex === -1) {
        return;
      }
      if (changedMenuItem.role === "menuitemradio" && changedMenuItem.checked === true) {
        for (let i = changeItemIndex - 1; i >= 0; --i) {
          const item = this.menuItems[i];
          const role = item.getAttribute("role");
          if (role === MenuItemRole.menuitemradio) {
            item.checked = false;
          }
          if (role === "separator") {
            break;
          }
        }
        const maxIndex = this.menuItems.length - 1;
        for (let i = changeItemIndex + 1; i <= maxIndex; ++i) {
          const item = this.menuItems[i];
          const role = item.getAttribute("role");
          if (role === MenuItemRole.menuitemradio) {
            item.checked = false;
          }
          if (role === "separator") {
            break;
          }
        }
      }
    };
    this.isMenuItemElement = (el) => {
      return isHTMLElement(el) && Menu.focusableElementRoles.hasOwnProperty(el.getAttribute("role"));
    };
    this.isFocusableElement = (el) => {
      return this.isMenuItemElement(el);
    };
  }
  itemsChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.menuItems = this.domChildren();
      this.resetItems(oldValue);
      this.setItems();
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.menuItems = this.domChildren();
    this.addEventListener("change", this.changeHandler);
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.menuItems = [];
    this.removeEventListener("change", this.changeHandler);
  }
  /**
   * Focuses the first item in the menu.
   *
   * @public
   */
  focus() {
    this.setFocus(0, 1);
  }
  /**
   * Collapses any expanded menu items.
   *
   * @public
   */
  collapseExpandedItem() {
    if (this.expandedItem !== null) {
      this.expandedItem.expanded = false;
      this.expandedItem = null;
    }
  }
  /**
   * @internal
   */
  handleMenuKeyDown(e) {
    if (e.defaultPrevented) {
      return;
    }
    switch (e.keyCode) {
      case keyCodeArrowDown:
        this.setFocus(this.focusIndex + 1, 1);
        return;
      case keyCodeArrowUp:
        this.setFocus(this.focusIndex - 1, -1);
        return;
      case keyCodeEnd:
        this.setFocus(this.menuItems.length - 1, -1);
        return;
      case keyCodeHome:
        this.setFocus(0, 1);
        return;
      default:
        return true;
    }
  }
  /**
   * get an array of valid DOM children
   */
  domChildren() {
    return Array.from(this.children);
  }
  setFocus(focusIndex, adjustment) {
    if (this.menuItems === void 0) {
      return;
    }
    while (inRange_default(focusIndex, this.menuItems.length)) {
      const child = this.menuItems[focusIndex];
      if (this.isFocusableElement(child)) {
        if (this.focusIndex > -1 && this.menuItems.length >= this.focusIndex - 1) {
          this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");
        }
        this.focusIndex = focusIndex;
        child.setAttribute("tabindex", "0");
        child.focus();
        break;
      }
      focusIndex += adjustment;
    }
  }
};
Menu.focusableElementRoles = invert_default(MenuItemRole);
__decorate7([
  observable
], Menu.prototype, "items", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/number-field/number-field.template.js
var NumberFieldTemplate = html2`
    <template class="${(x) => x.readOnly ? "readonly" : ""}">
        <label
            part="label"
            for="control"
            class="${(x) => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
        <div class="root" part="root">
            ${startTemplate}
            <input
                class="control"
                part="control"
                id="control"
                @input="${(x) => x.handleTextInput()}"
                @change="${(x) => x.handleChange()}"
                ?autofocus="${(x) => x.autofocus}"
                ?disabled="${(x) => x.disabled}"
                list="${(x) => x.list}"
                maxlength="${(x) => x.maxlength}"
                minlength="${(x) => x.minlength}"
                placeholder="${(x) => x.placeholder}"
                ?readonly="${(x) => x.readOnly}"
                ?required="${(x) => x.required}"
                size="${(x) => x.size}"
                :value="${(x) => x.value}"
                type="text"
                inputmode="numeric"
                min="${(x) => x.min}"
                max="${(x) => x.max}"
                step="${(x) => x.step}"
                aria-atomic="${(x) => x.ariaAtomic}"
                aria-busy="${(x) => x.ariaBusy}"
                aria-controls="${(x) => x.ariaControls}"
                aria-current="${(x) => x.ariaCurrent}"
                aria-describedBy="${(x) => x.ariaDescribedby}"
                aria-details="${(x) => x.ariaDetails}"
                aria-disabled="${(x) => x.ariaDisabled}"
                aria-errormessage="${(x) => x.ariaErrormessage}"
                aria-flowto="${(x) => x.ariaFlowto}"
                aria-haspopup="${(x) => x.ariaHaspopup}"
                aria-hidden="${(x) => x.ariaHidden}"
                aria-invalid="${(x) => x.ariaInvalid}"
                aria-keyshortcuts="${(x) => x.ariaKeyshortcuts}"
                aria-label="${(x) => x.ariaLabel}"
                aria-labelledby="${(x) => x.ariaLabelledby}"
                aria-live="${(x) => x.ariaLive}"
                aria-owns="${(x) => x.ariaOwns}"
                aria-relevant="${(x) => x.ariaRelevant}"
                aria-roledescription="${(x) => x.ariaRoledescription}"
                ${ref("control")}
            />
            ${when((x) => !x.hideStep, html2`
                    <div class="controls" part="controls">
                        <div
                            class="step-up"
                            part="step-up"
                            @click="${(x) => x.stepUp()}"
                        ></div>
                        <div
                            class="step-down"
                            part="step-down"
                            @click="${(x) => x.stepDown()}"
                        ></div>
                    </div>
                `)}
            ${endTemplate}
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.template.js
var TextFieldTemplate = html2`
    <template
        class="
            ${(x) => x.readOnly ? "readonly" : ""}
        "
    >
        <label
            part="label"
            for="control"
            class="${(x) => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot
                ${slotted({ property: "defaultSlottedNodes", filter: whitespaceFilter })}
            ></slot>
        </label>
        <div class="root" part="root">
            ${startTemplate}
            <input
                class="control"
                part="control"
                id="control"
                @input="${(x) => x.handleTextInput()}"
                @change="${(x) => x.handleChange()}"
                ?autofocus="${(x) => x.autofocus}"
                ?disabled="${(x) => x.disabled}"
                list="${(x) => x.list}"
                maxlength="${(x) => x.maxlength}"
                minlength="${(x) => x.minlength}"
                pattern="${(x) => x.pattern}"
                placeholder="${(x) => x.placeholder}"
                ?readonly="${(x) => x.readOnly}"
                ?required="${(x) => x.required}"
                size="${(x) => x.size}"
                ?spellcheck="${(x) => x.spellcheck}"
                :value="${(x) => x.value}"
                type="${(x) => x.type}"
                aria-atomic="${(x) => x.ariaAtomic}"
                aria-busy="${(x) => x.ariaBusy}"
                aria-controls="${(x) => x.ariaControls}"
                aria-current="${(x) => x.ariaCurrent}"
                aria-describedBy="${(x) => x.ariaDescribedby}"
                aria-details="${(x) => x.ariaDetails}"
                aria-disabled="${(x) => x.ariaDisabled}"
                aria-errormessage="${(x) => x.ariaErrormessage}"
                aria-flowto="${(x) => x.ariaFlowto}"
                aria-haspopup="${(x) => x.ariaHaspopup}"
                aria-hidden="${(x) => x.ariaHidden}"
                aria-invalid="${(x) => x.ariaInvalid}"
                aria-keyshortcuts="${(x) => x.ariaKeyshortcuts}"
                aria-label="${(x) => x.ariaLabel}"
                aria-labelledby="${(x) => x.ariaLabelledby}"
                aria-live="${(x) => x.ariaLive}"
                aria-owns="${(x) => x.ariaOwns}"
                aria-relevant="${(x) => x.ariaRelevant}"
                aria-roledescription="${(x) => x.ariaRoledescription}"
                ${ref("control")}
            />
            ${endTemplate}
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.form-associated.js
var _TextField = class extends FASTElement {
};
var FormAssociatedTextField = class extends FormAssociated(_TextField) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.options.js
var TextFieldType;
(function(TextFieldType2) {
  TextFieldType2["email"] = "email";
  TextFieldType2["password"] = "password";
  TextFieldType2["tel"] = "tel";
  TextFieldType2["text"] = "text";
  TextFieldType2["url"] = "url";
})(TextFieldType || (TextFieldType = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.js
var TextField = class extends FormAssociatedTextField {
  constructor() {
    super(...arguments);
    this.type = TextFieldType.text;
  }
  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
      this.validate();
    }
  }
  autofocusChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.autofocus = this.autofocus;
      this.validate();
    }
  }
  placeholderChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.placeholder = this.placeholder;
    }
  }
  typeChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.type = this.type;
      this.validate();
    }
  }
  listChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.setAttribute("list", this.list);
      this.validate();
    }
  }
  maxlengthChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.maxLength = this.maxlength;
      this.validate();
    }
  }
  minlengthChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.minLength = this.minlength;
      this.validate();
    }
  }
  patternChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.pattern = this.pattern;
      this.validate();
    }
  }
  sizeChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.size = this.size;
    }
  }
  spellcheckChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.spellcheck = this.spellcheck;
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", this.type);
    this.validate();
    if (this.autofocus) {
      DOM.queueUpdate(() => {
        this.focus();
      });
    }
  }
  /**
   * Handles the internal control's `input` event
   * @internal
   */
  handleTextInput() {
    this.value = this.control.value;
  }
  /**
   * Change event handler for inner control.
   * @remarks
   * "Change" events are not `composable` so they will not
   * permeate the shadow DOM boundary. This fn effectively proxies
   * the change event, emitting a `change` event whenever the internal
   * control emits a `change` event
   * @internal
   */
  handleChange() {
    this.$emit("change");
  }
};
__decorate7([
  attr({ attribute: "readonly", mode: "boolean" })
], TextField.prototype, "readOnly", void 0);
__decorate7([
  attr({ mode: "boolean" })
], TextField.prototype, "autofocus", void 0);
__decorate7([
  attr
], TextField.prototype, "placeholder", void 0);
__decorate7([
  attr
], TextField.prototype, "type", void 0);
__decorate7([
  attr
], TextField.prototype, "list", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], TextField.prototype, "maxlength", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], TextField.prototype, "minlength", void 0);
__decorate7([
  attr
], TextField.prototype, "pattern", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], TextField.prototype, "size", void 0);
__decorate7([
  attr({ mode: "boolean" })
], TextField.prototype, "spellcheck", void 0);
__decorate7([
  observable
], TextField.prototype, "defaultSlottedNodes", void 0);
var DelegatesARIATextbox = class {
};
applyMixins(DelegatesARIATextbox, ARIAGlobalStatesAndProperties);
applyMixins(TextField, StartEnd, DelegatesARIATextbox);

// node_modules/@microsoft/fast-foundation/dist/esm/number-field/number-field.form-associated.js
var _NumberField = class extends FASTElement {
};
var FormAssociatedNumberField = class extends FormAssociated(_NumberField) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/number-field/number-field.js
var NumberField = class extends FormAssociatedNumberField {
  constructor() {
    super(...arguments);
    this.hideStep = false;
    this.step = 1;
  }
  maxChanged(previousValue, nextValue) {
    const numb = parseFloat(nextValue);
    if (numb !== void 0) {
      if (this.min !== void 0 && numb < this.min) {
        this.max = this.min;
        this.min = numb;
      } else {
        this.max = numb;
      }
    }
  }
  minChanged(previousValue, nextValue) {
    const numb = parseFloat(nextValue);
    if (numb !== void 0) {
      if (this.max !== void 0 && numb > this.max) {
        this.min = this.max;
        this.max = numb;
      } else {
        this.min = numb;
      }
    }
  }
  /**
   *
   * @param previousValue - previous stored value
   * @param nextValue - value being updated
   */
  valueChanged(previousValue, nextValue) {
    super.valueChanged(previousValue, nextValue);
    const numb = parseFloat(nextValue);
    let out = numb == nextValue ? nextValue : numb;
    if (nextValue === "" || isNaN(numb)) {
      out = "";
    } else {
      out = this.getValidValue(numb);
    }
    this.value = out;
    if (this.proxy instanceof HTMLElement) {
      this.proxy.value = this.value;
    }
  }
  /**
   * Ensures that the value is between the min and max values
   *
   * @param value - number to evaluate
   * @returns - a string repesentation
   *
   * @internal
   */
  getValidValue(value) {
    if (this.min !== void 0 && value < this.min) {
      value = this.min;
    } else if (this.max !== void 0 && value > this.max) {
      value = this.max;
    }
    return parseFloat(value.toPrecision(12)).toString();
  }
  /**
   * Increments the value using the step value
   *
   * @public
   */
  stepUp() {
    const stepUpValue = this.step + (parseFloat(this.value) || 0);
    this.value = this.getValidValue(stepUpValue);
    this.$emit("input");
  }
  /**
   * Decrements the value using the step value
   *
   * @public
   */
  stepDown() {
    const stepDownValue = (parseFloat(this.value) || 0) - this.step;
    this.value = this.getValidValue(stepDownValue);
    this.$emit("input");
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", "number");
    this.validate();
    if (this.autofocus) {
      DOM.queueUpdate(() => {
        this.focus();
      });
    }
  }
  /**
   * Handles the internal control's `input` event
   * @internal
   */
  handleTextInput() {
    this.value = this.control.value;
  }
  /**
   * Change event handler for inner control.
   * @remarks
   * "Change" events are not `composable` so they will not
   * permeate the shadow DOM boundary. This fn effectively proxies
   * the change event, emitting a `change` event whenever the internal
   * control emits a `change` event
   * @internal
   */
  handleChange() {
    this.$emit("change");
  }
};
__decorate7([
  attr({ attribute: "readonly", mode: "boolean" })
], NumberField.prototype, "readOnly", void 0);
__decorate7([
  attr({ mode: "boolean" })
], NumberField.prototype, "autofocus", void 0);
__decorate7([
  attr({ attribute: "hide-step", mode: "boolean" })
], NumberField.prototype, "hideStep", void 0);
__decorate7([
  attr
], NumberField.prototype, "placeholder", void 0);
__decorate7([
  attr
], NumberField.prototype, "list", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], NumberField.prototype, "maxlength", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], NumberField.prototype, "minlength", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], NumberField.prototype, "size", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], NumberField.prototype, "step", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], NumberField.prototype, "max", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], NumberField.prototype, "min", void 0);
__decorate7([
  observable
], NumberField.prototype, "defaultSlottedNodes", void 0);
applyMixins(NumberField, StartEnd, DelegatesARIATextbox);

// node_modules/@microsoft/fast-foundation/dist/esm/progress-ring/progress-ring.template.js
var ProgressRingTemplate = html2`
    <template
        role="progressbar"
        aria-valuenow="${(x) => x.value}"
        aria-valuemin="${(x) => x.min}"
        aria-valuemax="${(x) => x.max}"
        class="${(x) => x.paused ? "paused" : ""}"
    >
        ${when((x) => typeof x.value === "number", html2`
                <svg
                    class="progress"
                    part="progress"
                    viewBox="0 0 16 16"
                    slot="determinate"
                >
                    <circle
                        class="background"
                        part="background"
                        cx="8px"
                        cy="8px"
                        r="7px"
                    ></circle>
                    <circle
                        class="determinate"
                        part="determinate"
                        style="stroke-dasharray: ${(x) => 44 * x.value / 100}px 44px"
                        cx="8px"
                        cy="8px"
                        r="7px"
                    ></circle>
                </svg>
            `)}
        ${when((x) => typeof x.value !== "number", html2`
                <slot name="indeterminate" slot="indeterminate">
                    <svg class="progress" part="progress" viewBox="0 0 16 16">
                        <circle
                            class="background"
                            part="background"
                            cx="8px"
                            cy="8px"
                            r="7px"
                        ></circle>
                        <circle
                            class="indeterminate-indicator-1"
                            part="indeterminate-indicator-1"
                            cx="8px"
                            cy="8px"
                            r="7px"
                        ></circle>
                    </svg>
                </slot>
            `)}
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/progress/base-progress.js
var BaseProgress = class extends FASTElement {
};
__decorate7([
  attr({ converter: nullableNumberConverter })
], BaseProgress.prototype, "value", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], BaseProgress.prototype, "min", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], BaseProgress.prototype, "max", void 0);
__decorate7([
  attr({ mode: "boolean" })
], BaseProgress.prototype, "paused", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/progress/progress.template.js
var ProgressTemplate = html2`
    <template
        role="progressbar"
        aria-valuenow="${(x) => x.value}"
        aria-valuemin="${(x) => x.min}"
        aria-valuemax="${(x) => x.max}"
        class="${(x) => x.paused ? "paused" : ""}"
    >
        ${when((x) => typeof x.value === "number", html2`
                <div class="progress" part="progress" slot="determinate">
                    <div
                        class="determinate"
                        part="determinate"
                        style="width: ${(x) => x.value}%"
                    ></div>
                </div>
            `)}
        ${when((x) => typeof x.value !== "number", html2`
                <div class="progress" part="progress" slot="indeterminate">
                    <slot class="indeterminate" name="indeterminate">
                        <span
                            class="indeterminate-indicator-1"
                            part="indeterminate-indicator-1"
                        ></span>
                        <span
                            class="indeterminate-indicator-2"
                            part="indeterminate-indicator-2"
                        ></span>
                    </slot>
                </div>
            `)}
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/radio-group/radio-group.template.js
var RadioGroupTemplate = html2`
    <template
        role="radiogroup"
        aria-disabled="${(x) => x.disabled}"
        aria-readonly="${(x) => x.readOnly}"
        @click="${(x, c) => x.clickHandler(c.event)}"
        @keydown="${(x, c) => x.keydownHandler(c.event)}"
        @focusout="${(x, c) => x.focusOutHandler(c.event)}"
    >
        <slot name="label"></slot>
        <div
            class="positioning-region ${(x) => x.orientation === Orientation.horizontal ? "horizontal" : "vertical"}"
            part="positioning-region"
        >
            <slot
                ${slotted({
  property: "slottedRadioButtons",
  filter: elements("[role=radio]")
})}
            ></slot>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/radio-group/radio-group.js
var RadioGroup = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.orientation = Orientation.horizontal;
    this.radioChangeHandler = (e) => {
      const changedRadio = e.target;
      if (changedRadio.checked) {
        this.slottedRadioButtons.forEach((radio) => {
          if (radio !== changedRadio) {
            radio.checked = false;
            if (!this.isInsideFoundationToolbar) {
              radio.setAttribute("tabindex", "-1");
            }
          }
        });
        this.selectedRadio = changedRadio;
        this.value = changedRadio.value;
        changedRadio.setAttribute("tabindex", "0");
        this.focusedRadio = changedRadio;
      }
      e.stopPropagation();
    };
    this.moveToRadioByIndex = (group, index) => {
      const radio = group[index];
      if (!this.isInsideToolbar) {
        radio.setAttribute("tabindex", "0");
        if (radio.readOnly) {
          this.slottedRadioButtons.forEach((nextRadio) => {
            if (nextRadio !== radio) {
              nextRadio.setAttribute("tabindex", "-1");
            }
          });
        } else {
          radio.checked = true;
          this.selectedRadio = radio;
        }
      }
      this.focusedRadio = radio;
      radio.focus();
    };
    this.moveRightOffGroup = () => {
      var _a;
      (_a = this.nextElementSibling) === null || _a === void 0 ? void 0 : _a.focus();
    };
    this.moveLeftOffGroup = () => {
      var _a;
      (_a = this.previousElementSibling) === null || _a === void 0 ? void 0 : _a.focus();
    };
    this.focusOutHandler = (e) => {
      const group = this.slottedRadioButtons;
      const radio = e.target;
      const index = radio !== null ? group.indexOf(radio) : 0;
      const focusedIndex = this.focusedRadio ? group.indexOf(this.focusedRadio) : -1;
      if (focusedIndex === 0 && index === focusedIndex || focusedIndex === group.length - 1 && focusedIndex === index) {
        if (!this.selectedRadio) {
          this.focusedRadio = group[0];
          this.focusedRadio.setAttribute("tabindex", "0");
          group.forEach((nextRadio) => {
            if (nextRadio !== this.focusedRadio) {
              nextRadio.setAttribute("tabindex", "-1");
            }
          });
        } else {
          this.focusedRadio = this.selectedRadio;
          if (!this.isInsideFoundationToolbar) {
            this.selectedRadio.setAttribute("tabindex", "0");
            group.forEach((nextRadio) => {
              if (nextRadio !== this.selectedRadio) {
                nextRadio.setAttribute("tabindex", "-1");
              }
            });
          }
        }
      }
      return true;
    };
    this.clickHandler = (e) => {
      const radio = e.target;
      if (radio) {
        const group = this.slottedRadioButtons;
        if (radio.checked || group.indexOf(radio) === 0) {
          radio.setAttribute("tabindex", "0");
          this.selectedRadio = radio;
        } else {
          radio.setAttribute("tabindex", "-1");
          this.selectedRadio = null;
        }
        this.focusedRadio = radio;
      }
      e.preventDefault();
    };
    this.shouldMoveOffGroupToTheRight = (index, group, keyCode) => {
      return index === group.length && this.isInsideToolbar && keyCode === keyCodeArrowRight;
    };
    this.shouldMoveOffGroupToTheLeft = (group, keyCode) => {
      const index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;
      return index < 0 && this.isInsideToolbar && keyCode === keyCodeArrowLeft;
    };
    this.checkFocusedRadio = () => {
      if (this.focusedRadio !== null && !this.focusedRadio.readOnly && !this.focusedRadio.checked) {
        this.focusedRadio.checked = true;
        this.focusedRadio.setAttribute("tabindex", "0");
        this.focusedRadio.focus();
        this.selectedRadio = this.focusedRadio;
      }
    };
    this.moveRight = (e) => {
      const group = this.slottedRadioButtons;
      let index = 0;
      index = this.focusedRadio ? group.indexOf(this.focusedRadio) + 1 : 1;
      if (this.shouldMoveOffGroupToTheRight(index, group, e.keyCode)) {
        this.moveRightOffGroup();
        return;
      } else if (index === group.length) {
        index = 0;
      }
      while (index < group.length && group.length > 1) {
        if (!group[index].disabled) {
          this.moveToRadioByIndex(group, index);
          break;
        } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {
          break;
        } else if (index + 1 >= group.length) {
          if (this.isInsideToolbar) {
            break;
          } else {
            index = 0;
          }
        } else {
          index += 1;
        }
      }
    };
    this.moveLeft = (e) => {
      const group = this.slottedRadioButtons;
      let index = 0;
      index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;
      index = index < 0 ? group.length - 1 : index;
      if (this.shouldMoveOffGroupToTheLeft(group, e.keyCode)) {
        this.moveLeftOffGroup();
        return;
      }
      while (index >= 0 && group.length > 1) {
        if (!group[index].disabled) {
          this.moveToRadioByIndex(group, index);
          break;
        } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {
          break;
        } else if (index - 1 < 0) {
          index = group.length - 1;
        } else {
          index -= 1;
        }
      }
    };
    this.keydownHandler = (e) => {
      const key = e.key;
      if (key in ArrowKeys && this.isInsideFoundationToolbar) {
        return true;
      }
      switch (key) {
        case keyEnter: {
          this.checkFocusedRadio();
          break;
        }
        case keyArrowRight:
        case keyArrowDown: {
          if (this.direction === Direction.ltr) {
            this.moveRight(e);
          } else {
            this.moveLeft(e);
          }
          break;
        }
        case keyArrowLeft:
        case keyArrowUp: {
          if (this.direction === Direction.ltr) {
            this.moveLeft(e);
          } else {
            this.moveRight(e);
          }
          break;
        }
        default: {
          return true;
        }
      }
    };
  }
  readOnlyChanged() {
    if (this.slottedRadioButtons !== void 0) {
      this.slottedRadioButtons.forEach((radio) => {
        if (this.readOnly) {
          radio.readOnly = true;
        } else {
          radio.readOnly = false;
        }
      });
    }
  }
  disabledChanged() {
    if (this.slottedRadioButtons !== void 0) {
      this.slottedRadioButtons.forEach((radio) => {
        if (this.disabled) {
          radio.disabled = true;
        } else {
          radio.disabled = false;
        }
      });
    }
  }
  nameChanged() {
    if (this.slottedRadioButtons) {
      this.slottedRadioButtons.forEach((radio) => {
        radio.setAttribute("name", this.name);
      });
    }
  }
  valueChanged() {
    if (this.slottedRadioButtons) {
      this.slottedRadioButtons.forEach((radio) => {
        if (radio.getAttribute("value") === this.value) {
          radio.checked = true;
          this.selectedRadio = radio;
        }
      });
    }
    this.$emit("change");
  }
  slottedRadioButtonsChanged(oldValue, newValue) {
    if (this.slottedRadioButtons && this.slottedRadioButtons.length > 0) {
      this.setupRadioButtons();
    }
  }
  get parentToolbar() {
    return this.closest('[role="toolbar"]');
  }
  get isInsideToolbar() {
    var _a;
    return (_a = this.parentToolbar) !== null && _a !== void 0 ? _a : false;
  }
  get isInsideFoundationToolbar() {
    var _a;
    return !!((_a = this.parentToolbar) === null || _a === void 0 ? void 0 : _a["$fastController"]);
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.direction = getDirection(this);
    this.setupRadioButtons();
  }
  disconnectedCallback() {
    this.slottedRadioButtons.forEach((radio) => {
      radio.removeEventListener("change", this.radioChangeHandler);
    });
  }
  setupRadioButtons() {
    const checkedRadios = this.slottedRadioButtons.filter((radio) => {
      return radio.hasAttribute("checked");
    });
    const numberOfCheckedRadios = checkedRadios ? checkedRadios.length : 0;
    if (numberOfCheckedRadios > 1) {
      const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];
      lastCheckedRadio.checked = true;
    }
    let foundMatchingVal = false;
    this.slottedRadioButtons.forEach((radio) => {
      if (this.name !== void 0) {
        radio.setAttribute("name", this.name);
      }
      if (this.disabled) {
        radio.disabled = true;
      }
      if (this.readOnly) {
        radio.readOnly = true;
      }
      if (this.value && this.value === radio.getAttribute("value")) {
        this.selectedRadio = radio;
        this.focusedRadio = radio;
        radio.checked = true;
        radio.setAttribute("tabindex", "0");
        foundMatchingVal = true;
      } else {
        if (!this.isInsideFoundationToolbar) {
          radio.setAttribute("tabindex", "-1");
        }
        radio.checked = false;
      }
      radio.addEventListener("change", this.radioChangeHandler);
    });
    if (this.value === void 0 && this.slottedRadioButtons.length > 0) {
      const checkedRadios2 = this.slottedRadioButtons.filter((radio) => {
        return radio.hasAttribute("checked");
      });
      const numberOfCheckedRadios2 = checkedRadios2 !== null ? checkedRadios2.length : 0;
      if (numberOfCheckedRadios2 > 0 && !foundMatchingVal) {
        const lastCheckedRadio = checkedRadios2[numberOfCheckedRadios2 - 1];
        lastCheckedRadio.checked = true;
        this.focusedRadio = lastCheckedRadio;
        lastCheckedRadio.setAttribute("tabindex", "0");
      } else {
        this.slottedRadioButtons[0].setAttribute("tabindex", "0");
        this.focusedRadio = this.slottedRadioButtons[0];
      }
    }
  }
};
__decorate7([
  attr({ attribute: "readonly", mode: "boolean" })
], RadioGroup.prototype, "readOnly", void 0);
__decorate7([
  attr({ attribute: "disabled", mode: "boolean" })
], RadioGroup.prototype, "disabled", void 0);
__decorate7([
  attr
], RadioGroup.prototype, "name", void 0);
__decorate7([
  attr
], RadioGroup.prototype, "value", void 0);
__decorate7([
  attr
], RadioGroup.prototype, "orientation", void 0);
__decorate7([
  observable
], RadioGroup.prototype, "childItems", void 0);
__decorate7([
  observable
], RadioGroup.prototype, "slottedRadioButtons", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/radio/radio.template.js
var RadioTemplate = html2`
    <template
        role="radio"
        class="${(x) => x.checked ? "checked" : ""} ${(x) => x.readOnly ? "readonly" : ""}"
        aria-checked="${(x) => x.checked}"
        aria-required="${(x) => x.required}"
        aria-disabled="${(x) => x.disabled}"
        aria-readonly="${(x) => x.readOnly}"
        @keypress="${(x, c) => x.keypressHandler(c.event)}"
        @click="${(x, c) => x.clickHandler(c.event)}"
    >
        <div part="control" class="control">
            <slot name="checked-indicator">
                <div part="checked-indicator" class="checked-indicator"></div>
            </slot>
        </div>
        <label
            part="label"
            class="${(x) => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/radio/radio.form-associated.js
var _Radio = class extends FASTElement {
};
var FormAssociatedRadio = class extends FormAssociated(_Radio) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/radio/radio.js
var Radio = class extends FormAssociatedRadio {
  constructor() {
    var _a;
    super();
    this.initialValue = "on";
    this.checkedAttribute = false;
    this.dirtyChecked = false;
    this.formResetCallback = () => {
      this.checked = !!this.defaultChecked;
      this.dirtyChecked = false;
    };
    this.keypressHandler = (e) => {
      switch (e.keyCode) {
        case keyCodeSpace:
          if (!this.checked && !this.readOnly) {
            this.checked = true;
          }
          return;
      }
      return true;
    };
    this.clickHandler = (e) => {
      if (!this.disabled && !this.readOnly && !this.checked) {
        this.checked = true;
      }
    };
    this.checked = (_a = this.defaultChecked) !== null && _a !== void 0 ? _a : false;
  }
  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
    }
  }
  checkedAttributeChanged() {
    this.defaultChecked = this.checkedAttribute;
  }
  defaultCheckedChanged() {
    var _a;
    if (this.$fastController.isConnected && !this.dirtyChecked) {
      if (!this.isInsideRadioGroup()) {
        this.checked = (_a = this.defaultChecked) !== null && _a !== void 0 ? _a : false;
        this.dirtyChecked = false;
      }
    }
  }
  checkedChanged() {
    if (this.$fastController.isConnected) {
      if (!this.dirtyChecked) {
        this.dirtyChecked = true;
      }
      this.updateForm();
      if (this.proxy instanceof HTMLInputElement) {
        this.proxy.checked = this.checked;
      }
      this.$emit("change");
      this.validate();
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    var _a, _b;
    super.connectedCallback();
    this.proxy.setAttribute("type", "radio");
    this.validate();
    if (((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute("role")) !== "radiogroup" && this.getAttribute("tabindex") === null) {
      if (!this.disabled) {
        this.setAttribute("tabindex", "0");
      }
    }
    this.updateForm();
    if (this.checkedAttribute) {
      if (!this.dirtyChecked) {
        if (!this.isInsideRadioGroup()) {
          this.checked = (_b = this.defaultChecked) !== null && _b !== void 0 ? _b : false;
          this.dirtyChecked = false;
        }
      }
    }
  }
  isInsideRadioGroup() {
    const parent2 = this.closest("[role=radiogroup]");
    return parent2 !== null;
  }
  updateForm() {
    const value = this.checked ? this.value : null;
    this.setFormValue(value, value);
  }
};
__decorate7([
  attr({ attribute: "readonly", mode: "boolean" })
], Radio.prototype, "readOnly", void 0);
__decorate7([
  observable
], Radio.prototype, "name", void 0);
__decorate7([
  attr({ attribute: "checked", mode: "boolean" })
], Radio.prototype, "checkedAttribute", void 0);
__decorate7([
  observable
], Radio.prototype, "defaultSlottedNodes", void 0);
__decorate7([
  observable
], Radio.prototype, "defaultChecked", void 0);
__decorate7([
  observable
], Radio.prototype, "checked", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/horizontal-scroll/horizontal-scroll.js
var HorizontalScroll = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.framesPerSecond = 120;
    this.updatingItems = false;
    this.speed = 600;
    this.easing = "ease-in-out";
    this.scrolling = false;
    this.resizeDetector = null;
  }
  /**
   * The calculated duration for a frame.
   *
   * @internal
   */
  get frameTime() {
    return 1e3 / this.framesPerSecond;
  }
  /**
   * In RTL mode
   * @internal
   */
  get isRtl() {
    return this.scrollItems.length > 1 && this.scrollItems[0].offsetLeft > this.scrollItems[1].offsetLeft;
  }
  connectedCallback() {
    super.connectedCallback();
    this.initializeResizeDetector();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.disconnectResizeDetector();
  }
  /**
   * Updates scroll stops and flippers when scroll items change
   * @param previous - current scroll items
   * @param next - new updated scroll items
   * @public
   */
  scrollItemsChanged(previous, next) {
    if (next && !this.updatingItems) {
      this.setStops();
    }
  }
  /**
   * destroys the instance's resize observer
   * @internal
   */
  disconnectResizeDetector() {
    if (this.resizeDetector) {
      this.resizeDetector.disconnect();
      this.resizeDetector = null;
    }
  }
  /**
   * initializes the instance's resize observer
   * @internal
   */
  initializeResizeDetector() {
    this.disconnectResizeDetector();
    this.resizeDetector = new window.ResizeObserver(this.resized.bind(this));
    this.resizeDetector.observe(this);
  }
  /**
   * Looks for slots and uses child nodes instead
   * @internal
   */
  updateScrollStops() {
    this.updatingItems = true;
    let updatedItems = [];
    this.scrollItems.forEach((item) => {
      if (item instanceof HTMLSlotElement) {
        updatedItems = updatedItems.concat(item.assignedElements());
      } else {
        updatedItems.push(item);
      }
    });
    this.scrollItems = updatedItems;
    this.updatingItems = false;
  }
  /**
   * Finds all of the scroll stops between elements
   * @internal
   */
  setStops() {
    this.updateScrollStops();
    this.width = this.offsetWidth;
    let lastStop = 0;
    let stops = this.scrollItems.map(({ offsetLeft: left, offsetWidth: width }, index) => {
      const right = left + width;
      if (this.isRtl) {
        return -right;
      }
      lastStop = right;
      return index === 0 ? 0 : left;
    }).concat(lastStop);
    stops = this.fixScrollMisalign(stops);
    stops.sort((a, b) => Math.abs(a) - Math.abs(b));
    this.scrollStops = stops;
    this.setFlippers();
  }
  /**
   *
   */
  fixScrollMisalign(stops) {
    if (this.isRtl && stops.some((stop) => stop > 0)) {
      stops.sort((a, b) => b - a);
      const offset = stops[0];
      stops = stops.map((stop) => stop - offset);
    }
    return stops;
  }
  /**
   * Sets the controls view if enabled
   * @internal
   */
  setFlippers() {
    const position = this.scrollContainer.scrollLeft;
    if (this.previousFlipper) {
      this.previousFlipper.classList.toggle("disabled", position === 0);
    }
    if (this.nextFlipper && this.scrollStops) {
      const lastStop = Math.abs(this.scrollStops[this.scrollStops.length - 1]);
      this.nextFlipper.classList.toggle("disabled", Math.abs(position) + this.width >= lastStop);
    }
  }
  /**
   * Scrolls items to the left
   * @public
   */
  scrollToPrevious() {
    const scrollPosition = this.scrollContainer.scrollLeft;
    const current = this.scrollStops.findIndex((stop, index) => stop <= scrollPosition && (this.isRtl || index === this.scrollStops.length - 1 || this.scrollStops[index + 1] > scrollPosition));
    const right = Math.abs(this.scrollStops[current + 1]);
    let nextIndex = this.scrollStops.findIndex((stop) => Math.abs(stop) + this.width > right);
    if (nextIndex > current || nextIndex === -1) {
      nextIndex = current > 0 ? current - 1 : 0;
    }
    this.scrollToPosition(this.scrollStops[nextIndex], scrollPosition);
  }
  /**
   * Scrolls items to the right
   * @public
   */
  scrollToNext() {
    const scrollPosition = this.scrollContainer.scrollLeft;
    const current = this.scrollStops.findIndex((stop) => Math.abs(stop) >= Math.abs(scrollPosition));
    const outOfView = this.scrollStops.findIndex((stop) => Math.abs(scrollPosition) + this.width <= Math.abs(stop));
    let nextIndex = current;
    if (outOfView > current + 2) {
      nextIndex = outOfView - 2;
    } else if (current < this.scrollStops.length - 2) {
      nextIndex = current + 1;
    }
    const nextStop = this.scrollStops[nextIndex];
    this.scrollToPosition(nextStop, scrollPosition);
  }
  /**
   * Handles scrolling with easing
   * @param position - starting position
   * @param newPosition - position to scroll to
   * @public
   */
  scrollToPosition(newPosition, position = this.scrollContainer.scrollLeft) {
    if (this.scrolling) {
      return;
    }
    this.scrolling = true;
    const steps = [];
    const direction2 = position < newPosition ? 1 : -1;
    const scrollDistance = Math.abs(newPosition - position);
    const seconds = scrollDistance / this.speed;
    const stepCount = Math.floor(this.framesPerSecond * seconds);
    if (stepCount < 1) {
      this.scrolling = false;
      return;
    }
    for (let i = 0; i < stepCount; i++) {
      const progress = i / stepCount;
      const easingFactor = this.getEasedFactor(this.easing, progress);
      const travel = scrollDistance * easingFactor * direction2;
      steps.push(travel + position);
    }
    steps.push(newPosition);
    this.move(steps, this.frameTime);
  }
  /**
   *
   * @param steps - An array of positions to move
   * @param time - The duration between moves
   * @internal
   */
  move(steps, time) {
    if (!steps || steps.length <= 0) {
      this.setFlippers();
      this.scrolling = false;
      return;
    }
    this.moveStartTime = requestAnimationFrame((timestamp) => {
      if (timestamp - this.moveStartTime >= time) {
        const nextStep = steps.shift();
        this.scrollContainer.scrollLeft = nextStep !== null && nextStep !== void 0 ? nextStep : this.scrollContainer.scrollLeft;
      }
      this.move(steps, time);
    });
  }
  /**
   * Monitors resize event on the horizontal-scroll element
   * @public
   */
  resized() {
    if (this.resizeTimeout) {
      this.resizeTimeout = clearTimeout(this.resizeTimeout);
    }
    this.resizeTimeout = setTimeout(() => {
      this.width = this.offsetWidth;
      this.setFlippers();
    }, this.frameTime);
  }
  /**
   * Monitors scrolled event on the content container
   * @public
   */
  scrolled() {
    if (this.scrollTimeout) {
      this.scrollTimeout = clearTimeout(this.scrollTimeout);
    }
    this.scrollTimeout = setTimeout(() => {
      this.setFlippers();
    }, this.frameTime);
  }
  /**
   *
   * @param easing - Type of easing
   * @param progress - Progress completed, 0 - 1
   * @internal
   */
  getEasedFactor(easing, progress) {
    if (progress > 1) {
      progress = 1;
    }
    switch (easing) {
      case "ease-in":
        return Math.pow(progress, 1.675);
      case "ease-out":
        return 1 - Math.pow(1 - progress, 1.675);
      case "ease-in-out":
        return 0.5 * (Math.sin((progress - 0.5) * Math.PI) + 1);
      default:
        return progress;
    }
  }
};
__decorate7([
  attr({ converter: nullableNumberConverter })
], HorizontalScroll.prototype, "speed", void 0);
__decorate7([
  attr
], HorizontalScroll.prototype, "easing", void 0);
__decorate7([
  observable
], HorizontalScroll.prototype, "scrollItems", void 0);
__decorate7([
  attr({ attribute: "view" })
], HorizontalScroll.prototype, "view", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/horizontal-scroll/horizontal-scroll.template.js
var HorizontalScrollTemplate = html2`
    <template class="horizontal-scroll">
        ${startTemplate}
        <div class="scroll-area">
            <div
                class="scroll-view"
                @scroll="${(x) => x.scrolled()}"
                ${ref("scrollContainer")}
            >
                <div class="content-container">
                    <slot
                        ${slotted({
  property: "scrollItems",
  filter: elements()
})}
                    ></slot>
                </div>
            </div>
            ${when((x) => x.view !== "mobile", html2`
                    <div
                        class="scroll scroll-prev"
                        part="scroll-prev"
                        ${ref("previousFlipper")}
                    >
                        <div class="scroll-action" @click="${(x) => x.scrollToPrevious()}">
                            <slot name="previous-flipper"></slot>
                        </div>
                    </div>
                    <div
                        class="scroll scroll-next"
                        part="scroll-next"
                        ${ref("nextFlipper")}
                    >
                        <div class="scroll-action" @click="${(x) => x.scrollToNext()}">
                            <slot name="next-flipper"></slot>
                        </div>
                    </div>
                `)}
        </div>
        ${endTemplate}
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/select/select.form-associated.js
var _Select = class extends Listbox {
};
var FormAssociatedSelect = class extends FormAssociated(_Select) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("select");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/select/select.js
var Select = class extends FormAssociatedSelect {
  constructor() {
    super(...arguments);
    this.open = false;
    this.forcedPosition = false;
    this.role = SelectRole.combobox;
    this.position = SelectPosition.below;
    this.maxHeight = 0;
    this.displayValue = "";
    this.formResetCallback = () => {
      this.setProxyOptions();
      this.setDefaultSelectedOption();
      this.value = this.firstSelectedOption.value;
    };
  }
  openChanged() {
    this.ariaExpanded = this.open ? "true" : "false";
    if (this.open) {
      this.setPositioning();
      this.focusAndScrollOptionIntoView();
      this.indexWhenOpened = this.selectedIndex;
    }
  }
  /**
   * The value property.
   *
   * @public
   */
  get value() {
    Observable.track(this, "value");
    return this._value;
  }
  set value(next) {
    const prev = `${this._value}`;
    if (this.$fastController.isConnected && this.options) {
      const selectedIndex = this.options.findIndex((el) => el.value === next);
      const prevSelectedOption = this.options[this.selectedIndex];
      const nextSelectedOption = this.options[selectedIndex];
      const prevSelectedValue = prevSelectedOption ? prevSelectedOption.value : null;
      const nextSelectedValue = nextSelectedOption ? nextSelectedOption.value : null;
      if (selectedIndex === -1 || prevSelectedValue !== nextSelectedValue) {
        next = "";
        this.selectedIndex = selectedIndex;
      }
      if (this.firstSelectedOption) {
        next = this.firstSelectedOption.value;
      }
    }
    if (prev !== next) {
      this._value = next;
      super.valueChanged(prev, next);
      Observable.notify(this, "value");
    }
  }
  updateValue(shouldEmit) {
    if (this.$fastController.isConnected) {
      this.value = this.firstSelectedOption ? this.firstSelectedOption.value : "";
      this.displayValue = this.firstSelectedOption ? this.firstSelectedOption.textContent || this.firstSelectedOption.value : this.value;
    }
    if (shouldEmit) {
      this.$emit("change");
    }
  }
  /**
   * Updates the proxy value when the selected index changes.
   *
   * @param prev - the previous selected index
   * @param next - the next selected index
   *
   * @internal
   */
  selectedIndexChanged(prev, next) {
    super.selectedIndexChanged(prev, next);
    this.updateValue();
  }
  /**
   * Calculate and apply listbox positioning based on available viewport space.
   *
   * @param force - direction to force the listbox to display
   * @public
   */
  setPositioning() {
    const currentBox = this.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const availableBottom = viewportHeight - currentBox.bottom;
    this.position = this.forcedPosition ? this.positionAttribute : currentBox.top > availableBottom ? SelectPosition.above : SelectPosition.below;
    this.positionAttribute = this.forcedPosition ? this.positionAttribute : this.position;
    this.maxHeight = this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;
  }
  /**
   * Synchronize the `aria-disabled` property when the `disabled` property changes.
   *
   * @param prev - The previous disabled value
   * @param next - The next disabled value
   *
   * @internal
   */
  disabledChanged(prev, next) {
    if (super.disabledChanged) {
      super.disabledChanged(prev, next);
    }
    this.ariaDisabled = this.disabled ? "true" : "false";
  }
  /**
   * Handle opening and closing the listbox when the select is clicked.
   *
   * @param e - the mouse event
   * @internal
   */
  clickHandler(e) {
    if (this.disabled) {
      return;
    }
    if (this.open) {
      const captured = e.target.closest(`option,[role=option]`);
      if (captured && captured.disabled) {
        return;
      }
    }
    super.clickHandler(e);
    this.open = !this.open;
    if (!this.open && this.indexWhenOpened !== this.selectedIndex) {
      this.updateValue(true);
    }
    return true;
  }
  /**
   * Handle focus state when the element or its children lose focus.
   *
   * @param e - The focus event
   * @internal
   */
  focusoutHandler(e) {
    if (!this.open) {
      return true;
    }
    const focusTarget = e.relatedTarget;
    if (this.isSameNode(focusTarget)) {
      this.focus();
      return;
    }
    if (!this.options || !this.options.includes(focusTarget)) {
      this.open = false;
    }
  }
  /**
   * Synchronize the form-associated proxy and update the value property of the element.
   *
   * @param prev - the previous collection of slotted option elements
   * @param next - the next collection of slotted option elements
   *
   * @internal
   */
  slottedOptionsChanged(prev, next) {
    super.slottedOptionsChanged(prev, next);
    this.setProxyOptions();
    this.updateValue();
  }
  /**
   * Reset and fill the proxy to match the component's options.
   *
   * @internal
   */
  setProxyOptions() {
    if (this.proxy instanceof HTMLSelectElement && this.options) {
      this.proxy.options.length = 0;
      this.options.forEach((option) => {
        const proxyOption = option.proxy || (option instanceof HTMLOptionElement ? option.cloneNode() : null);
        if (proxyOption) {
          this.proxy.appendChild(proxyOption);
        }
      });
    }
  }
  /**
   * Handle keyboard interaction for the select.
   *
   * @param e - the keyboard event
   * @internal
   */
  keydownHandler(e) {
    super.keydownHandler(e);
    const key = e.key || e.key.charCodeAt(0);
    switch (key) {
      case " ": {
        if (this.typeAheadExpired) {
          e.preventDefault();
          this.open = !this.open;
        }
        break;
      }
      case "Enter": {
        e.preventDefault();
        this.open = !this.open;
        break;
      }
      case "Escape": {
        if (this.open) {
          e.preventDefault();
          this.open = false;
        }
        break;
      }
      case "Tab": {
        if (!this.open) {
          return true;
        }
        e.preventDefault();
        this.open = false;
      }
    }
    if (!this.open && this.indexWhenOpened !== this.selectedIndex) {
      this.updateValue(true);
    }
    return true;
  }
  connectedCallback() {
    super.connectedCallback();
    this.forcedPosition = !!this.positionAttribute;
  }
};
__decorate7([
  attr({ attribute: "open", mode: "boolean" })
], Select.prototype, "open", void 0);
__decorate7([
  attr({ attribute: "position" })
], Select.prototype, "positionAttribute", void 0);
__decorate7([
  observable
], Select.prototype, "position", void 0);
__decorate7([
  observable
], Select.prototype, "maxHeight", void 0);
__decorate7([
  observable
], Select.prototype, "displayValue", void 0);
var DelegatesARIASelect = class {
};
__decorate7([
  observable
], DelegatesARIASelect.prototype, "ariaExpanded", void 0);
__decorate7([
  attr({ attribute: "aria-pressed", mode: "fromView" })
], DelegatesARIASelect.prototype, "ariaPressed", void 0);
applyMixins(DelegatesARIASelect, ARIAGlobalStatesAndProperties);
applyMixins(Select, StartEnd, DelegatesARIASelect);

// node_modules/@microsoft/fast-foundation/dist/esm/select/select.template.js
var SelectTemplate = html2`
    <template
        class="${(x) => x.open ? "open" : ""} ${(x) => x.disabled ? "disabled" : ""} ${(x) => x.position}"
        role="${(x) => x.role}"
        tabindex="${(x) => !x.disabled ? "0" : null}"
        aria-disabled="${(x) => x.ariaDisabled}"
        aria-expanded="${(x) => x.ariaExpanded}"
        @click="${(x, c) => x.clickHandler(c.event)}"
        @focusout="${(x, c) => x.focusoutHandler(c.event)}"
        @keydown="${(x, c) => x.keydownHandler(c.event)}"
    >
        <div
            aria-activedescendant="${(x) => x.open ? x.ariaActiveDescendant : null}"
            aria-controls="listbox"
            aria-expanded="${(x) => x.ariaExpanded}"
            aria-haspopup="listbox"
            class="control"
            part="control"
            role="button"
            ?disabled="${(x) => x.disabled}"
        >
            ${startTemplate}
            <slot name="button-container">
                <div class="selected-value" part="selected-value">
                    <slot name="selected-value">${(x) => x.displayValue}</slot>
                </div>
                <div class="indicator" part="indicator" aria-hidden="true">
                    <slot name="indicator">
                        <svg
                            class="select-indicator"
                            part="select-indicator"
                            viewBox="0 0 12 7"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M11.85.65c.2.2.2.5 0 .7L6.4 6.84a.55.55 0 01-.78 0L.14 1.35a.5.5 0 11.71-.7L6 5.8 11.15.65c.2-.2.5-.2.7 0z"
                            />
                        </svg>
                    </slot>
                </div>
            </slot>
            ${endTemplate}
        </div>
        <div
            aria-disabled="${(x) => x.disabled}"
            class="listbox"
            id="listbox"
            part="listbox"
            role="listbox"
            style="--max-height: ${(x) => x.maxHeight}px"
            ?disabled="${(x) => x.disabled}"
            ?hidden="${(x) => !x.open}"
        >
            <slot
                ${slotted({
  filter: Listbox.slottedOptionFilter,
  flatten: true,
  property: "slottedOptions"
})}
            ></slot>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/skeleton/skeleton.template.js
var SkeletonTemplate = html2`
    <template
        class="${(x) => x.shape === "circle" ? "circle" : "rect"}"
        pattern="${(x) => x.pattern}"
        ?shimmer="${(x) => x.shimmer}"
    >
        ${when((x) => x.shimmer === true, html2`
                <span class="shimmer"></span>
            `)}
        <object type="image/svg+xml" data="${(x) => x.pattern}">
            <img class="pattern" src="${(x) => x.pattern}" />
        </object>
        <slot></slot>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/skeleton/skeleton.js
var Skeleton = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.shape = "rect";
  }
};
__decorate7([
  attr
], Skeleton.prototype, "fill", void 0);
__decorate7([
  attr
], Skeleton.prototype, "shape", void 0);
__decorate7([
  attr
], Skeleton.prototype, "pattern", void 0);
__decorate7([
  attr({ mode: "boolean" })
], Skeleton.prototype, "shimmer", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/slider-label/slider-label.template.js
var SliderLabelTemplate = html2`
    <template
        aria-disabled="${(x) => x.disabled}"
        class="${(x) => x.sliderOrientation || Orientation.horizontal}
            ${(x) => x.disabled ? "disabled" : ""}"
    >
        <div ${ref("root")} part="root" class="root" style="${(x) => x.positionStyle}">
            <div class="container">
                ${when((x) => !x.hideMark, html2`
                        <div class="mark"></div>
                    `)}
                <div class="label">
                    <slot></slot>
                </div>
            </div>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/slider/slider-utilities.js
function convertPixelToPercent(pixelPos, minPosition, maxPosition, direction2) {
  let pct = limit(0, 1, (pixelPos - minPosition) / (maxPosition - minPosition));
  if (direction2 === Direction.rtl) {
    pct = 1 - pct;
  }
  return pct;
}

// node_modules/@microsoft/fast-foundation/dist/esm/slider-label/slider-label.js
var defaultConfig = {
  min: 0,
  max: 0,
  direction: Direction.ltr,
  orientation: Orientation.horizontal,
  disabled: false
};
var SliderLabel = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.hideMark = false;
    this.sliderDirection = Direction.ltr;
    this.getSliderConfiguration = () => {
      if (!this.isSliderConfig(this.parentNode)) {
        this.sliderDirection = defaultConfig.direction || Direction.ltr;
        this.sliderOrientation = defaultConfig.orientation || Orientation.horizontal;
        this.sliderMaxPosition = defaultConfig.max;
        this.sliderMinPosition = defaultConfig.min;
      } else {
        const parentSlider = this.parentNode;
        const { min: min2, max: max2, direction: direction2, orientation, disabled } = parentSlider;
        if (disabled !== void 0) {
          this.disabled = disabled;
        }
        this.sliderDirection = direction2 || Direction.ltr;
        this.sliderOrientation = orientation || Orientation.horizontal;
        this.sliderMaxPosition = max2;
        this.sliderMinPosition = min2;
      }
    };
    this.positionAsStyle = () => {
      const direction2 = this.sliderDirection ? this.sliderDirection : Direction.ltr;
      const pct = convertPixelToPercent(Number(this.position), Number(this.sliderMinPosition), Number(this.sliderMaxPosition));
      let rightNum = Math.round((1 - pct) * 100);
      let leftNum = Math.round(pct * 100);
      if (leftNum === Number.NaN && rightNum === Number.NaN) {
        rightNum = 50;
        leftNum = 50;
      }
      if (this.sliderOrientation === Orientation.horizontal) {
        return direction2 === Direction.rtl ? `right: ${leftNum}%; left: ${rightNum}%;` : `left: ${leftNum}%; right: ${rightNum}%;`;
      } else {
        return `top: ${leftNum}%; bottom: ${rightNum}%;`;
      }
    };
  }
  positionChanged() {
    this.positionStyle = this.positionAsStyle();
  }
  /**
   * @internal
   */
  sliderOrientationChanged() {
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.getSliderConfiguration();
    this.positionStyle = this.positionAsStyle();
    this.notifier = Observable.getNotifier(this.parentNode);
    this.notifier.subscribe(this, "orientation");
    this.notifier.subscribe(this, "direction");
    this.notifier.subscribe(this, "max");
    this.notifier.subscribe(this, "min");
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.notifier.unsubscribe(this, "orientation");
    this.notifier.unsubscribe(this, "direction");
    this.notifier.unsubscribe(this, "max");
    this.notifier.unsubscribe(this, "min");
  }
  /**
   * @internal
   */
  handleChange(source, propertyName) {
    switch (propertyName) {
      case "direction":
        this.sliderDirection = source.direction;
        break;
      case "orientation":
        this.sliderOrientation = source.orientation;
        break;
      case "max":
        this.sliderMinPosition = source.max;
        break;
      case "min":
        this.sliderMinPosition = source.min;
        break;
      default:
        break;
    }
    this.positionStyle = this.positionAsStyle();
  }
  isSliderConfig(node) {
    return node.max !== void 0 && node.min !== void 0;
  }
};
__decorate7([
  observable
], SliderLabel.prototype, "positionStyle", void 0);
__decorate7([
  attr
], SliderLabel.prototype, "position", void 0);
__decorate7([
  attr({ attribute: "hide-mark", mode: "boolean" })
], SliderLabel.prototype, "hideMark", void 0);
__decorate7([
  attr({ attribute: "disabled", mode: "boolean" })
], SliderLabel.prototype, "disabled", void 0);
__decorate7([
  observable
], SliderLabel.prototype, "sliderOrientation", void 0);
__decorate7([
  observable
], SliderLabel.prototype, "sliderMinPosition", void 0);
__decorate7([
  observable
], SliderLabel.prototype, "sliderMaxPosition", void 0);
__decorate7([
  observable
], SliderLabel.prototype, "sliderDirection", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/slider/slider.template.js
var SliderTemplate = html2`
    <template
        role="slider"
        class="${(x) => x.readOnly ? "readonly" : ""}
        ${(x) => x.orientation || Orientation.horizontal}"
        tabindex="${(x) => x.disabled ? null : 0}"
        aria-valuetext="${(x) => x.valueTextFormatter(x.value)}"
        aria-valuenow="${(x) => x.value}"
        aria-valuemin="${(x) => x.min}"
        aria-valuemax="${(x) => x.max}"
        aria-disabled="${(x) => x.disabled ? true : void 0}"
        aria-readonly="${(x) => x.readOnly ? true : void 0}"
        aria-orientation="${(x) => x.orientation}"
        class="${(x) => x.orientation}"
    >
        <div part="positioning-region" class="positioning-region">
            <div ${ref("track")} part="track-container" class="track">
                <slot name="track"></slot>
            </div>
            <slot></slot>
            <div
                ${ref("thumb")}
                part="thumb-container"
                class="thumb-container"
                style="${(x) => x.position}"
            >
                <slot name="thumb"><div class="thumb-cursor"></div></slot>
            </div>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/slider/slider.form-associated.js
var _Slider = class extends FASTElement {
};
var FormAssociatedSlider = class extends FormAssociated(_Slider) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/slider/slider.js
var SliderMode;
(function(SliderMode2) {
  SliderMode2["singleValue"] = "single-value";
})(SliderMode || (SliderMode = {}));
var Slider = class extends FormAssociatedSlider {
  constructor() {
    super(...arguments);
    this.direction = Direction.ltr;
    this.isDragging = false;
    this.trackWidth = 0;
    this.trackMinWidth = 0;
    this.trackHeight = 0;
    this.trackLeft = 0;
    this.trackMinHeight = 0;
    this.valueTextFormatter = () => null;
    this.min = 0;
    this.max = 10;
    this.step = 1;
    this.orientation = Orientation.horizontal;
    this.mode = SliderMode.singleValue;
    this.keypressHandler = (e) => {
      if (e.keyCode !== keyCodeTab) {
        e.preventDefault();
      }
      if (e.keyCode === keyCodeHome) {
        this.value = `${this.min}`;
      } else if (e.keyCode === keyCodeEnd) {
        this.value = `${this.max}`;
      } else if (!e.shiftKey) {
        switch (e.keyCode) {
          case keyCodeArrowRight:
          case keyCodeArrowUp:
            this.increment();
            break;
          case keyCodeArrowLeft:
          case keyCodeArrowDown:
            this.decrement();
            break;
        }
      }
    };
    this.setupTrackConstraints = () => {
      const clientRect = this.track.getBoundingClientRect();
      this.trackWidth = this.track.clientWidth;
      this.trackMinWidth = this.track.clientLeft;
      this.trackHeight = clientRect.bottom;
      this.trackMinHeight = clientRect.top;
      this.trackLeft = this.getBoundingClientRect().left;
      if (this.trackWidth === 0) {
        this.trackWidth = 1;
      }
    };
    this.setupListeners = () => {
      this.addEventListener("keydown", this.keypressHandler);
      this.addEventListener("mousedown", this.handleMouseDown);
      this.thumb.addEventListener("mousedown", this.handleThumbMouseDown);
      this.thumb.addEventListener("touchstart", this.handleThumbMouseDown);
    };
    this.initialValue = "";
    this.handleThumbMouseDown = (event) => {
      if (this.readOnly || this.disabled || event.defaultPrevented) {
        return;
      }
      event.preventDefault();
      event.target.focus();
      window.addEventListener("mouseup", this.handleWindowMouseUp);
      window.addEventListener("mousemove", this.handleMouseMove);
      window.addEventListener("touchmove", this.handleMouseMove);
      window.addEventListener("touchend", this.handleWindowMouseUp);
      this.isDragging = true;
    };
    this.handleMouseMove = (e) => {
      if (this.readOnly || this.disabled || e.defaultPrevented) {
        return;
      }
      const sourceEvent = window.TouchEvent && e instanceof TouchEvent ? e.touches[0] : e;
      const eventValue = this.orientation === Orientation.horizontal ? sourceEvent.pageX - this.trackLeft : sourceEvent.pageY;
      this.value = `${this.calculateNewValue(eventValue)}`;
    };
    this.calculateNewValue = (rawValue) => {
      const newPosition = convertPixelToPercent(rawValue, this.orientation === Orientation.horizontal ? this.trackMinWidth : this.trackMinHeight, this.orientation === Orientation.horizontal ? this.trackWidth : this.trackHeight, this.direction);
      const newValue = (this.max - this.min) * newPosition + this.min;
      return this.convertToConstrainedValue(newValue);
    };
    this.handleWindowMouseUp = (event) => {
      this.stopDragging();
    };
    this.stopDragging = () => {
      this.isDragging = false;
      window.removeEventListener("mouseup", this.handleWindowMouseUp);
      window.removeEventListener("mousemove", this.handleMouseMove);
      window.removeEventListener("touchmove", this.handleMouseMove);
      window.removeEventListener("touchend", this.handleWindowMouseUp);
    };
    this.handleMouseDown = (e) => {
      e.preventDefault();
      if (!this.disabled && !this.readOnly) {
        this.setupTrackConstraints();
        e.target.focus();
        window.addEventListener("mouseup", this.handleWindowMouseUp);
        window.addEventListener("mousemove", this.handleMouseMove);
        const controlValue = this.orientation === Orientation.horizontal ? e.pageX - this.trackLeft : e.pageY;
        this.value = `${this.calculateNewValue(controlValue)}`;
      }
    };
    this.convertToConstrainedValue = (value) => {
      if (isNaN(value)) {
        value = this.min;
      }
      let constrainedValue = value - this.min;
      const roundedConstrainedValue = Math.round(constrainedValue / this.step);
      const remainderValue = constrainedValue - roundedConstrainedValue * (this.stepMultiplier * this.step) / this.stepMultiplier;
      constrainedValue = remainderValue >= Number(this.step) / 2 ? constrainedValue - remainderValue + Number(this.step) : constrainedValue - remainderValue;
      return constrainedValue + this.min;
    };
  }
  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
    }
  }
  /**
   * @internal
   */
  valueChanged(previous, next) {
    super.valueChanged(previous, next);
    if (this.$fastController.isConnected) {
      this.setThumbPositionForOrientation(this.direction);
    }
    this.$emit("change");
  }
  minChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.min = `${this.min}`;
    }
    this.validate();
  }
  maxChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.max = `${this.max}`;
    }
    this.validate();
  }
  stepChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.step = `${this.step}`;
    }
    this.updateStepMultiplier();
    this.validate();
  }
  orientationChanged() {
    if (this.$fastController.isConnected) {
      this.setThumbPositionForOrientation(this.direction);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", "range");
    this.direction = getDirection(this);
    this.updateStepMultiplier();
    this.setupTrackConstraints();
    this.setupListeners();
    this.setupDefaultValue();
    this.setThumbPositionForOrientation(this.direction);
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    this.removeEventListener("keydown", this.keypressHandler);
    this.removeEventListener("mousedown", this.handleMouseDown);
    this.thumb.removeEventListener("mousedown", this.handleThumbMouseDown);
    this.thumb.removeEventListener("touchstart", this.handleThumbMouseDown);
  }
  /**
   * Increment the value by the step
   *
   * @public
   */
  increment() {
    const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? Number(this.value) + Number(this.step) : Number(this.value) - Number(this.step);
    const incrementedVal = this.convertToConstrainedValue(newVal);
    const incrementedValString = incrementedVal < Number(this.max) ? `${incrementedVal}` : `${this.max}`;
    this.value = incrementedValString;
  }
  /**
   * Decrement the value by the step
   *
   * @public
   */
  decrement() {
    const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? Number(this.value) - Number(this.step) : Number(this.value) + Number(this.step);
    const decrementedVal = this.convertToConstrainedValue(newVal);
    const decrementedValString = decrementedVal > Number(this.min) ? `${decrementedVal}` : `${this.min}`;
    this.value = decrementedValString;
  }
  /**
   * Places the thumb based on the current value
   *
   * @public
   * @param direction - writing mode
   */
  setThumbPositionForOrientation(direction2) {
    const newPct = convertPixelToPercent(Number(this.value), Number(this.min), Number(this.max), direction2);
    const percentage = Math.round((1 - newPct) * 100);
    if (this.orientation === Orientation.horizontal) {
      this.position = this.isDragging ? `right: ${percentage}%; transition: none;` : `right: ${percentage}%; transition: all 0.2s ease;`;
    } else {
      this.position = this.isDragging ? `bottom: ${percentage}%; transition: none;` : `bottom: ${percentage}%; transition: all 0.2s ease;`;
    }
  }
  /**
   * Update the step multiplier used to ensure rounding errors from steps that
   * are not whole numbers
   */
  updateStepMultiplier() {
    const stepString = this.step + "";
    const decimalPlacesOfStep = !!(this.step % 1) ? stepString.length - stepString.indexOf(".") - 1 : 0;
    this.stepMultiplier = Math.pow(10, decimalPlacesOfStep);
  }
  get midpoint() {
    return `${this.convertToConstrainedValue((this.max + this.min) / 2)}`;
  }
  setupDefaultValue() {
    if (typeof this.value === "string") {
      if (this.value.length === 0) {
        this.initialValue = this.midpoint;
      } else {
        const value = parseFloat(this.value);
        if (!Number.isNaN(value) && (value < this.min || value > this.max)) {
          this.value = this.midpoint;
        }
      }
    }
  }
};
__decorate7([
  attr({ attribute: "readonly", mode: "boolean" })
], Slider.prototype, "readOnly", void 0);
__decorate7([
  observable
], Slider.prototype, "direction", void 0);
__decorate7([
  observable
], Slider.prototype, "isDragging", void 0);
__decorate7([
  observable
], Slider.prototype, "position", void 0);
__decorate7([
  observable
], Slider.prototype, "trackWidth", void 0);
__decorate7([
  observable
], Slider.prototype, "trackMinWidth", void 0);
__decorate7([
  observable
], Slider.prototype, "trackHeight", void 0);
__decorate7([
  observable
], Slider.prototype, "trackLeft", void 0);
__decorate7([
  observable
], Slider.prototype, "trackMinHeight", void 0);
__decorate7([
  observable
], Slider.prototype, "valueTextFormatter", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], Slider.prototype, "min", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], Slider.prototype, "max", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], Slider.prototype, "step", void 0);
__decorate7([
  attr
], Slider.prototype, "orientation", void 0);
__decorate7([
  attr
], Slider.prototype, "mode", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/switch/switch.template.js
var SwitchTemplate = html2`
    <template
        role="switch"
        aria-checked="${(x) => x.checked}"
        aria-disabled="${(x) => x.disabled}"
        aria-readonly="${(x) => x.readOnly}"
        tabindex="${(x) => x.disabled ? null : 0}"
        @keypress="${(x, c) => x.keypressHandler(c.event)}"
        @click="${(x, c) => x.clickHandler(c.event)}"
        class="${(x) => x.checked ? "checked" : ""}"
    >
        <label
            part="label"
            class="${(x) => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
        <div part="switch" class="switch">
            <span class="checked-indicator" part="checked-indicator"></span>
        </div>
        <span class="status-message" part="status-message">
            <span class="checked-message" part="checked-message">
                <slot name="checked-message"></slot>
            </span>
            <span class="unchecked-message" part="unchecked-message">
                <slot name="unchecked-message"></slot>
            </span>
        </span>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/switch/switch.form-associated.js
var _Switch = class extends FASTElement {
};
var FormAssociatedSwitch = class extends FormAssociated(_Switch) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/switch/switch.js
var Switch = class extends FormAssociatedSwitch {
  constructor() {
    super();
    this.initialValue = "on";
    this.dirtyChecked = false;
    this.formResetCallback = () => {
      this.checked = this.checkedAttribute;
      this.dirtyChecked = false;
    };
    this.keypressHandler = (e) => {
      switch (e.keyCode) {
        case keyCodeSpace:
          this.checked = !this.checked;
          break;
      }
    };
    this.clickHandler = (e) => {
      if (!this.disabled && !this.readOnly) {
        this.checked = !this.checked;
      }
    };
    this.defaultChecked = !!this.checkedAttribute;
    this.checked = this.defaultChecked;
  }
  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
    }
    this.readOnly ? this.classList.add("readonly") : this.classList.remove("readonly");
  }
  checkedAttributeChanged() {
    this.defaultChecked = this.checkedAttribute;
  }
  defaultCheckedChanged() {
    if (!this.dirtyChecked) {
      this.checked = this.defaultChecked;
      this.dirtyChecked = false;
    }
  }
  checkedChanged() {
    if (!this.dirtyChecked) {
      this.dirtyChecked = true;
    }
    this.updateForm();
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.checked = this.checked;
    }
    this.$emit("change");
    this.checked ? this.classList.add("checked") : this.classList.remove("checked");
    this.validate();
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", "checkbox");
    this.updateForm();
  }
  updateForm() {
    const value = this.checked ? this.value : null;
    this.setFormValue(value, value);
  }
};
__decorate7([
  attr({ attribute: "readonly", mode: "boolean" })
], Switch.prototype, "readOnly", void 0);
__decorate7([
  attr({ attribute: "checked", mode: "boolean" })
], Switch.prototype, "checkedAttribute", void 0);
__decorate7([
  observable
], Switch.prototype, "defaultSlottedNodes", void 0);
__decorate7([
  observable
], Switch.prototype, "defaultChecked", void 0);
__decorate7([
  observable
], Switch.prototype, "checked", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/tab-panel/tab-panel.template.js
var TabPanelTemplate = html2`
    <template slot="tabpanel" role="tabpanel">
        <slot></slot>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/tab-panel/tab-panel.js
var TabPanel = class extends FASTElement {
};

// node_modules/@microsoft/fast-foundation/dist/esm/tab/tab.template.js
var TabTemplate = html2`
    <template slot="tab" role="tab" aria-disabled="${(x) => x.disabled}">
        <slot></slot>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/tab/tab.js
var Tab = class extends FASTElement {
};
__decorate7([
  attr({ mode: "boolean" })
], Tab.prototype, "disabled", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/tabs/tabs.template.js
var TabsTemplate = html2`
    <template class="${(x) => x.orientation}">
        ${startTemplate}
        <div class="tablist" part="tablist" role="tablist">
            <slot class="tab" name="tab" part="tab" ${slotted("tabs")}></slot>

            ${when((x) => x.showActiveIndicator, html2`
                    <div
                        ${ref("activeIndicatorRef")}
                        class="activeIndicator"
                        part="activeIndicator"
                    ></div>
                `)}
        </div>
        ${endTemplate}
        <div class="tabpanel">
            <slot name="tabpanel" part="tabpanel" ${slotted("tabpanels")}></slot>
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/tabs/tabs.js
var TabsOrientation;
(function(TabsOrientation2) {
  TabsOrientation2["vertical"] = "vertical";
  TabsOrientation2["horizontal"] = "horizontal";
})(TabsOrientation || (TabsOrientation = {}));
var Tabs = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.orientation = TabsOrientation.horizontal;
    this.activeindicator = true;
    this.showActiveIndicator = true;
    this.prevActiveTabIndex = 0;
    this.activeTabIndex = 0;
    this.ticking = false;
    this.change = () => {
      this.$emit("change", this.activetab);
    };
    this.isDisabledElement = (el) => {
      return el.getAttribute("aria-disabled") === "true";
    };
    this.isFocusableElement = (el) => {
      return !this.isDisabledElement(el);
    };
    this.setTabs = () => {
      const gridProperty = this.isHorizontal() ? "gridColumn" : "gridRow";
      this.tabIds = this.getTabIds();
      this.tabpanelIds = this.getTabPanelIds();
      this.activeTabIndex = this.getActiveIndex();
      this.showActiveIndicator = false;
      this.tabs.forEach((tab, index) => {
        if (tab.slot === "tab" && this.isFocusableElement(tab)) {
          if (this.activeindicator) {
            this.showActiveIndicator = true;
          }
          const tabId = this.tabIds[index];
          const tabpanelId = this.tabpanelIds[index];
          tab.setAttribute("id", typeof tabId !== "string" ? `tab-${index + 1}` : tabId);
          tab.setAttribute("aria-selected", this.activeTabIndex === index ? "true" : "false");
          tab.setAttribute("aria-controls", typeof tabpanelId !== "string" ? `panel-${index + 1}` : tabpanelId);
          tab.addEventListener("click", this.handleTabClick);
          tab.addEventListener("keydown", this.handleTabKeyDown);
          tab.setAttribute("tabindex", this.activeTabIndex === index ? "0" : "-1");
          if (this.activeTabIndex === index) {
            this.activetab = tab;
          }
        }
        tab.style[gridProperty] = `${index + 1}`;
        !this.isHorizontal() ? tab.classList.add("vertical") : tab.classList.remove("vertical");
      });
    };
    this.setTabPanels = () => {
      this.tabIds = this.getTabIds();
      this.tabpanelIds = this.getTabPanelIds();
      this.tabpanels.forEach((tabpanel, index) => {
        const tabId = this.tabIds[index];
        const tabpanelId = this.tabpanelIds[index];
        tabpanel.setAttribute("id", typeof tabpanelId !== "string" ? `panel-${index + 1}` : tabpanelId);
        tabpanel.setAttribute("aria-labelledby", typeof tabId !== "string" ? `tab-${index + 1}` : tabId);
        this.activeTabIndex !== index ? tabpanel.setAttribute("hidden", "") : tabpanel.removeAttribute("hidden");
      });
    };
    this.handleTabClick = (event) => {
      const selectedTab = event.currentTarget;
      if (selectedTab.nodeType === 1) {
        this.prevActiveTabIndex = this.activeTabIndex;
        this.activeTabIndex = this.tabs.indexOf(selectedTab);
        this.setComponent();
      }
    };
    this.handleTabKeyDown = (event) => {
      const keyCode = event.keyCode;
      if (this.isHorizontal()) {
        switch (keyCode) {
          case keyCodeArrowLeft:
            event.preventDefault();
            this.adjustBackward(event);
            break;
          case keyCodeArrowRight:
            event.preventDefault();
            this.adjustForward(event);
            break;
        }
      } else {
        switch (keyCode) {
          case keyCodeArrowUp:
            event.preventDefault();
            this.adjustBackward(event);
            break;
          case keyCodeArrowDown:
            event.preventDefault();
            this.adjustForward(event);
            break;
        }
      }
      switch (keyCode) {
        case keyCodeHome:
          event.preventDefault();
          this.adjust(-this.activeTabIndex);
          break;
        case keyCodeEnd:
          event.preventDefault();
          this.adjust(this.tabs.length - this.activeTabIndex - 1);
          break;
      }
    };
    this.adjustForward = (e) => {
      const group = this.tabs;
      let index = 0;
      index = this.activetab ? group.indexOf(this.activetab) + 1 : 1;
      if (index === group.length) {
        index = 0;
      }
      while (index < group.length && group.length > 1) {
        if (this.isFocusableElement(group[index])) {
          this.moveToTabByIndex(group, index);
          break;
        } else if (this.activetab && index === group.indexOf(this.activetab)) {
          break;
        } else if (index + 1 >= group.length) {
          index = 0;
        } else {
          index += 1;
        }
      }
    };
    this.adjustBackward = (e) => {
      const group = this.tabs;
      let index = 0;
      index = this.activetab ? group.indexOf(this.activetab) - 1 : 0;
      index = index < 0 ? group.length - 1 : index;
      while (index >= 0 && group.length > 1) {
        if (this.isFocusableElement(group[index])) {
          this.moveToTabByIndex(group, index);
          break;
        } else if (index - 1 < 0) {
          index = group.length - 1;
        } else {
          index -= 1;
        }
      }
    };
    this.moveToTabByIndex = (group, index) => {
      const tab = group[index];
      this.activetab = tab;
      this.prevActiveTabIndex = this.activeTabIndex;
      this.activeTabIndex = index;
      tab.focus();
      this.setComponent();
    };
  }
  /**
   * @internal
   */
  activeidChanged() {
    if (this.$fastController.isConnected && this.tabs.length <= this.tabpanels.length) {
      this.setTabs();
      this.setTabPanels();
      this.handleActiveIndicatorPosition();
    }
  }
  /**
   * @internal
   */
  tabsChanged() {
    if (this.$fastController.isConnected && this.tabs.length <= this.tabpanels.length) {
      this.setTabs();
      this.setTabPanels();
      this.handleActiveIndicatorPosition();
    }
  }
  /**
   * @internal
   */
  tabpanelsChanged() {
    if (this.$fastController.isConnected && this.tabpanels.length <= this.tabs.length) {
      this.setTabs();
      this.setTabPanels();
      this.handleActiveIndicatorPosition();
    }
  }
  getActiveIndex() {
    const id = this.activeid;
    if (id !== void 0) {
      return this.tabIds.indexOf(this.activeid) === -1 ? 0 : this.tabIds.indexOf(this.activeid);
    } else {
      return 0;
    }
  }
  getTabIds() {
    return this.tabs.map((tab) => {
      return tab.getAttribute("id");
    });
  }
  getTabPanelIds() {
    return this.tabpanels.map((tabPanel) => {
      return tabPanel.getAttribute("id");
    });
  }
  setComponent() {
    if (this.activeTabIndex !== this.prevActiveTabIndex) {
      this.activeid = this.tabIds[this.activeTabIndex];
      this.change();
      this.setTabs();
      this.handleActiveIndicatorPosition();
      this.setTabPanels();
      this.focusTab();
      this.change();
    }
  }
  isHorizontal() {
    return this.orientation === TabsOrientation.horizontal;
  }
  handleActiveIndicatorPosition() {
    if (this.showActiveIndicator && this.activeindicator && this.activeTabIndex !== this.prevActiveTabIndex) {
      if (this.ticking) {
        this.ticking = false;
      } else {
        this.ticking = true;
        this.animateActiveIndicator();
      }
    }
  }
  animateActiveIndicator() {
    this.ticking = true;
    const gridProperty = this.isHorizontal() ? "gridColumn" : "gridRow";
    const translateProperty = this.isHorizontal() ? "translateX" : "translateY";
    const offsetProperty = this.isHorizontal() ? "offsetLeft" : "offsetTop";
    const prev = this.activeIndicatorRef[offsetProperty];
    this.activeIndicatorRef.style[gridProperty] = `${this.activeTabIndex + 1}`;
    const next = this.activeIndicatorRef[offsetProperty];
    this.activeIndicatorRef.style[gridProperty] = `${this.prevActiveTabIndex + 1}`;
    const dif = next - prev;
    this.activeIndicatorRef.style.transform = `${translateProperty}(${dif}px)`;
    this.activeIndicatorRef.classList.add("activeIndicatorTransition");
    this.activeIndicatorRef.addEventListener("transitionend", () => {
      this.ticking = false;
      this.activeIndicatorRef.style[gridProperty] = `${this.activeTabIndex + 1}`;
      this.activeIndicatorRef.style.transform = `${translateProperty}(0px)`;
      this.activeIndicatorRef.classList.remove("activeIndicatorTransition");
    });
  }
  /**
   * The adjust method for FASTTabs
   * @public
   * @remarks
   * This method allows the active index to be adjusted by numerical increments
   */
  adjust(adjustment) {
    this.prevActiveTabIndex = this.activeTabIndex;
    this.activeTabIndex = wrapInBounds(0, this.tabs.length - 1, this.activeTabIndex + adjustment);
    this.setComponent();
  }
  focusTab() {
    this.tabs[this.activeTabIndex].focus();
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.tabIds = this.getTabIds();
    this.tabpanelIds = this.getTabPanelIds();
    this.activeTabIndex = this.getActiveIndex();
  }
};
__decorate7([
  attr
], Tabs.prototype, "orientation", void 0);
__decorate7([
  attr
], Tabs.prototype, "activeid", void 0);
__decorate7([
  observable
], Tabs.prototype, "tabs", void 0);
__decorate7([
  observable
], Tabs.prototype, "tabpanels", void 0);
__decorate7([
  attr({ mode: "boolean" })
], Tabs.prototype, "activeindicator", void 0);
__decorate7([
  observable
], Tabs.prototype, "activeIndicatorRef", void 0);
__decorate7([
  observable
], Tabs.prototype, "showActiveIndicator", void 0);
applyMixins(Tabs, StartEnd);

// node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.form-associated.js
var _TextArea = class extends FASTElement {
};
var FormAssociatedTextArea = class extends FormAssociated(_TextArea) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("textarea");
  }
};

// node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.options.js
var TextAreaResize;
(function(TextAreaResize2) {
  TextAreaResize2["none"] = "none";
  TextAreaResize2["both"] = "both";
  TextAreaResize2["horizontal"] = "horizontal";
  TextAreaResize2["vertical"] = "vertical";
})(TextAreaResize || (TextAreaResize = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.js
var TextArea = class extends FormAssociatedTextArea {
  constructor() {
    super(...arguments);
    this.resize = TextAreaResize.none;
    this.cols = 20;
    this.handleTextInput = () => {
      this.value = this.control.value;
    };
  }
  readOnlyChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.readOnly = this.readOnly;
    }
  }
  autofocusChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.autofocus = this.autofocus;
    }
  }
  listChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.setAttribute("list", this.list);
    }
  }
  maxlengthChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.maxLength = this.maxlength;
    }
  }
  minlengthChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.minLength = this.minlength;
    }
  }
  spellcheckChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.spellcheck = this.spellcheck;
    }
  }
  /**
   * Change event handler for inner control.
   * @remarks
   * "Change" events are not `composable` so they will not
   * permeate the shadow DOM boundary. This fn effectively proxies
   * the change event, emitting a `change` event whenever the internal
   * control emits a `change` event
   * @internal
   */
  handleChange() {
    this.$emit("change");
  }
};
__decorate7([
  attr({ mode: "boolean" })
], TextArea.prototype, "readOnly", void 0);
__decorate7([
  attr
], TextArea.prototype, "resize", void 0);
__decorate7([
  attr({ mode: "boolean" })
], TextArea.prototype, "autofocus", void 0);
__decorate7([
  attr({ attribute: "form" })
], TextArea.prototype, "formId", void 0);
__decorate7([
  attr
], TextArea.prototype, "list", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], TextArea.prototype, "maxlength", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter })
], TextArea.prototype, "minlength", void 0);
__decorate7([
  attr
], TextArea.prototype, "name", void 0);
__decorate7([
  attr
], TextArea.prototype, "placeholder", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter, mode: "fromView" })
], TextArea.prototype, "cols", void 0);
__decorate7([
  attr({ converter: nullableNumberConverter, mode: "fromView" })
], TextArea.prototype, "rows", void 0);
__decorate7([
  attr({ mode: "boolean" })
], TextArea.prototype, "spellcheck", void 0);
__decorate7([
  observable
], TextArea.prototype, "defaultSlottedNodes", void 0);
applyMixins(TextArea, DelegatesARIATextbox);

// node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.template.js
var TextAreaTemplate = html2`
    <template
        class="
            ${(x) => x.readOnly ? "readonly" : ""}
            ${(x) => x.resize !== TextAreaResize.none ? `resize-${x.resize}` : ""}"
    >
        <label
            part="label"
            for="control"
            class="${(x) => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
        <textarea
            part="control"
            class="control"
            id="control"
            ?autofocus="${(x) => x.autofocus}"
            cols="${(x) => x.cols}"
            ?disabled="${(x) => x.disabled}"
            form="${(x) => x.form}"
            list="${(x) => x.list}"
            maxlength="${(x) => x.maxlength}"
            minlength="${(x) => x.minlength}"
            name="${(x) => x.name}"
            placeholder="${(x) => x.placeholder}"
            ?readonly="${(x) => x.readOnly}"
            ?required="${(x) => x.required}"
            rows="${(x) => x.rows}"
            ?spellcheck="${(x) => x.spellcheck}"
            :value="${(x) => x.value}"
            aria-atomic="${(x) => x.ariaAtomic}"
            aria-busy="${(x) => x.ariaBusy}"
            aria-controls="${(x) => x.ariaControls}"
            aria-current="${(x) => x.ariaCurrent}"
            aria-describedBy="${(x) => x.ariaDescribedby}"
            aria-details="${(x) => x.ariaDetails}"
            aria-disabled="${(x) => x.ariaDisabled}"
            aria-errormessage="${(x) => x.ariaErrormessage}"
            aria-flowto="${(x) => x.ariaFlowto}"
            aria-haspopup="${(x) => x.ariaHaspopup}"
            aria-hidden="${(x) => x.ariaHidden}"
            aria-invalid="${(x) => x.ariaInvalid}"
            aria-keyshortcuts="${(x) => x.ariaKeyshortcuts}"
            aria-label="${(x) => x.ariaLabel}"
            aria-labelledby="${(x) => x.ariaLabelledby}"
            aria-live="${(x) => x.ariaLive}"
            aria-owns="${(x) => x.ariaOwns}"
            aria-relevant="${(x) => x.ariaRelevant}"
            aria-roledescription="${(x) => x.ariaRoledescription}"
            @input="${(x, c) => x.handleTextInput()}"
            @change="${(x) => x.handleChange()}"
            ${ref("control")}
        ></textarea>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/toolbar/toolbar.template.js
var ToolbarTemplate = html2`
    <template
        aria-label="${(x) => x.ariaLabel}"
        aria-labelledby="${(x) => x.ariaLabelledby}"
        aria-orientation="${(x) => x.orientation}"
        orientation="${(x) => x.orientation}"
        role="toolbar"
        @click="${(x, c) => x.clickHandler(c.event)}"
        @focusin="${(x, c) => x.focusinHandler(c.event)}"
        @keydown="${(x, c) => x.keydownHandler(c.event)}"
    >
        <slot name="label"></slot>
        <div class="positioning-region" part="positioning-region">
            ${startTemplate}
            <slot
                ${slotted({
  filter: elements(),
  property: "slottedItems"
})}
            ></slot>
            ${endTemplate}
        </div>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/toolbar/toolbar.js
var ToolbarArrowKeyMap = Object.freeze({
  [ArrowKeys.ArrowUp]: {
    [Orientation.vertical]: -1
  },
  [ArrowKeys.ArrowDown]: {
    [Orientation.vertical]: 1
  },
  [ArrowKeys.ArrowLeft]: {
    [Orientation.horizontal]: {
      [Direction.ltr]: -1,
      [Direction.rtl]: 1
    }
  },
  [ArrowKeys.ArrowRight]: {
    [Orientation.horizontal]: {
      [Direction.ltr]: 1,
      [Direction.rtl]: -1
    }
  }
});
var Toolbar = class extends FASTElement {
  constructor() {
    super(...arguments);
    this._activeIndex = 0;
    this.direction = Direction.ltr;
    this.orientation = Orientation.horizontal;
  }
  /**
   * The index of the currently focused element, clamped between 0 and the last element.
   *
   * @internal
   */
  get activeIndex() {
    Observable.track(this, "activeIndex");
    return this._activeIndex;
  }
  set activeIndex(value) {
    if (this.$fastController.isConnected) {
      this._activeIndex = limit(0, this.focusableElements.length - 1, value);
      Observable.notify(this, "activeIndex");
    }
  }
  /**
   * Prepare the slotted elements which can be focusable.
   *
   * @param prev - The previous list of slotted elements.
   * @param next - The new list of slotted elements.
   * @internal
   */
  slottedItemsChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this.focusableElements = next.reduce(Toolbar.reduceFocusableItems, []);
      this.setFocusableElements();
    }
  }
  /**
   * Set the activeIndex when a focusable element in the toolbar is clicked.
   *
   * @internal
   */
  clickHandler(e) {
    var _a;
    const activeIndex = (_a = this.focusableElements) === null || _a === void 0 ? void 0 : _a.indexOf(e.target);
    if (activeIndex > -1 && this.activeIndex !== activeIndex) {
      this.setFocusedElement(activeIndex);
    }
    return true;
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    this.direction = getDirection(this);
  }
  /**
   * When the toolbar receives focus, set the currently active element as focused.
   *
   * @internal
   */
  focusinHandler(e) {
    const relatedTarget = e.relatedTarget;
    if (!relatedTarget || this.contains(relatedTarget)) {
      return;
    }
    this.setFocusedElement();
  }
  /**
   * Determines a value that can be used to iterate a list with the arrow keys.
   *
   * @param this - An element with an orientation and direction
   * @param key - The event key value
   * @internal
   */
  getDirectionalIncrementer(key) {
    var _a, _b, _c, _d, _e;
    return (_e = (_c = (_b = (_a = ToolbarArrowKeyMap[key]) === null || _a === void 0 ? void 0 : _a[this.orientation]) === null || _b === void 0 ? void 0 : _b[this.direction]) !== null && _c !== void 0 ? _c : (_d = ToolbarArrowKeyMap[key]) === null || _d === void 0 ? void 0 : _d[this.orientation]) !== null && _e !== void 0 ? _e : 0;
  }
  /**
   * Handle keyboard events for the toolbar.
   *
   * @internal
   */
  keydownHandler(e) {
    const key = e.key;
    if (!(key in ArrowKeys) || e.defaultPrevented || e.shiftKey) {
      return true;
    }
    const incrementer = this.getDirectionalIncrementer(key);
    if (!incrementer) {
      return !e.target.closest("[role=radiogroup]");
    }
    const nextIndex = this.activeIndex + incrementer;
    if (this.focusableElements[nextIndex]) {
      e.preventDefault();
    }
    this.setFocusedElement(nextIndex);
    return true;
  }
  /**
   * Set the activeIndex and focus the corresponding control.
   *
   * @param activeIndex - The new index to set
   * @internal
   */
  setFocusedElement(activeIndex = this.activeIndex) {
    var _a;
    this.activeIndex = activeIndex;
    this.setFocusableElements();
    (_a = this.focusableElements[this.activeIndex]) === null || _a === void 0 ? void 0 : _a.focus();
  }
  /**
   * Reduce a collection to only its focusable elements.
   *
   * @param elements - Collection of elements to reduce
   * @param element - The current element
   *
   * @internal
   */
  static reduceFocusableItems(elements2, element) {
    var _a, _b, _c, _d;
    const isRoleRadio = element.getAttribute("role") === "radio";
    const isFocusableFastElement = (_b = (_a = element.$fastController) === null || _a === void 0 ? void 0 : _a.definition.shadowOptions) === null || _b === void 0 ? void 0 : _b.delegatesFocus;
    const hasFocusableShadow = Array.from((_d = (_c = element.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelectorAll("*")) !== null && _d !== void 0 ? _d : []).some((x) => isFocusable(x));
    if (isFocusable(element) || isRoleRadio || isFocusableFastElement || hasFocusableShadow) {
      elements2.push(element);
      return elements2;
    }
    if (element.childElementCount) {
      return elements2.concat(Array.from(element.children).reduce(Toolbar.reduceFocusableItems, []));
    }
    return elements2;
  }
  /**
   * @internal
   */
  setFocusableElements() {
    if (this.$fastController.isConnected && this.focusableElements.length > 0) {
      this.focusableElements.forEach((element, index) => {
        element.tabIndex = this.activeIndex === index ? 0 : -1;
      });
    }
  }
};
__decorate7([
  observable
], Toolbar.prototype, "direction", void 0);
__decorate7([
  attr
], Toolbar.prototype, "orientation", void 0);
__decorate7([
  observable
], Toolbar.prototype, "slottedItems", void 0);
__decorate7([
  observable
], Toolbar.prototype, "slottedLabel", void 0);
var DelegatesARIAToolbar = class {
};
__decorate7([
  attr({ attribute: "aria-labelledby" })
], DelegatesARIAToolbar.prototype, "ariaLabelledby", void 0);
__decorate7([
  attr({ attribute: "aria-label" })
], DelegatesARIAToolbar.prototype, "ariaLabel", void 0);
applyMixins(DelegatesARIAToolbar, ARIAGlobalStatesAndProperties);
applyMixins(Toolbar, StartEnd, DelegatesARIAToolbar);

// node_modules/@microsoft/fast-foundation/dist/esm/tooltip/tooltip.template.js
function createTooltipTemplate(prefix) {
  return html2`
        ${when((x) => x.tooltipVisible, html2`
            <${prefix}-anchored-region
                fixed-placement="true"
                vertical-positioning-mode="${(x) => x.verticalPositioningMode}"
                vertical-default-position="${(x) => x.verticalDefaultPosition}"
                vertical-inset="${(x) => x.verticalInset}"
                vertical-scaling="${(x) => x.verticalScaling}"
                horizontal-positioning-mode="${(x) => x.horizontalPositioningMode}"
                horizontal-default-position="${(x) => x.horizontalDefaultPosition}"
                horizontal-scaling="${(x) => x.horizontalScaling}"
                horizontal-inset="${(x) => x.horizontalInset}"
                dir="${(x) => x.currentDirection}"
                ${ref("region")}
            >
                <div class="tooltip" part="tooltip" role="tooltip">
                    <slot></slot>
                </div>
            </${prefix}-anchored-region>
        `)}
    `;
}

// node_modules/@microsoft/fast-foundation/dist/esm/tooltip/tooltip.options.js
var TooltipPosition;
(function(TooltipPosition2) {
  TooltipPosition2["top"] = "top";
  TooltipPosition2["right"] = "right";
  TooltipPosition2["bottom"] = "bottom";
  TooltipPosition2["left"] = "left";
  TooltipPosition2["start"] = "start";
  TooltipPosition2["end"] = "end";
})(TooltipPosition || (TooltipPosition = {}));

// node_modules/@microsoft/fast-foundation/dist/esm/tooltip/tooltip.js
var Tooltip = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.anchor = "";
    this.delay = 300;
    this.anchorElement = null;
    this.viewportElement = null;
    this.verticalPositioningMode = "dynamic";
    this.horizontalPositioningMode = "dynamic";
    this.horizontalInset = "true";
    this.verticalInset = "false";
    this.horizontalScaling = "anchor";
    this.verticalScaling = "content";
    this.verticalDefaultPosition = void 0;
    this.horizontalDefaultPosition = void 0;
    this.tooltipVisible = false;
    this.currentDirection = Direction.ltr;
    this.delayTimer = null;
    this.isAnchorHovered = false;
    this.handlePositionChange = (ev) => {
      this.classList.toggle("top", this.region.verticalPosition === "top");
      this.classList.toggle("bottom", this.region.verticalPosition === "bottom");
      this.classList.toggle("inset-top", this.region.verticalPosition === "insetTop");
      this.classList.toggle("inset-bottom", this.region.verticalPosition === "insetBottom");
      this.classList.toggle("left", this.region.horizontalPosition === "left");
      this.classList.toggle("right", this.region.horizontalPosition === "right");
      this.classList.toggle("inset-left", this.region.horizontalPosition === "insetLeft");
      this.classList.toggle("inset-right", this.region.horizontalPosition === "insetRight");
    };
    this.handleAnchorMouseOver = (ev) => {
      this.startHoverTimer();
    };
    this.handleAnchorMouseOut = (ev) => {
      if (this.isAnchorHovered) {
        this.isAnchorHovered = false;
        this.updateTooltipVisibility();
      }
      this.clearDelayTimer();
    };
    this.startHoverTimer = () => {
      if (this.isAnchorHovered) {
        return;
      }
      if (this.delay > 1) {
        if (this.delayTimer === null)
          this.delayTimer = window.setTimeout(() => {
            this.startHover();
          }, this.delay);
        return;
      }
      this.startHover();
    };
    this.startHover = () => {
      this.isAnchorHovered = true;
      this.updateTooltipVisibility();
    };
    this.clearDelayTimer = () => {
      if (this.delayTimer !== null) {
        clearTimeout(this.delayTimer);
        this.delayTimer = null;
      }
    };
    this.getAnchor = () => {
      const rootNode = this.getRootNode();
      if (rootNode instanceof ShadowRoot) {
        return rootNode.getElementById(this.anchor);
      }
      return document.getElementById(this.anchor);
    };
    this.handleDocumentKeydown = (e) => {
      if (!e.defaultPrevented && this.tooltipVisible) {
        switch (e.keyCode) {
          case keyCodeEscape:
            this.isAnchorHovered = false;
            this.updateTooltipVisibility();
            this.$emit("dismiss");
            break;
        }
      }
    };
    this.updateTooltipVisibility = () => {
      if (this.visible === false) {
        this.hideTooltip();
      } else if (this.visible === true) {
        this.showTooltip();
      } else {
        if (this.isAnchorHovered) {
          this.showTooltip();
          return;
        }
        this.hideTooltip();
      }
    };
    this.showTooltip = () => {
      if (this.tooltipVisible) {
        return;
      }
      this.currentDirection = getDirection(this);
      this.tooltipVisible = true;
      document.addEventListener("keydown", this.handleDocumentKeydown);
      DOM.queueUpdate(this.setRegionProps);
    };
    this.hideTooltip = () => {
      if (!this.tooltipVisible) {
        return;
      }
      if (this.region !== null && this.region !== void 0) {
        this.region.removeEventListener("positionchange", this.handlePositionChange);
        this.region.viewportElement = null;
        this.region.anchorElement = null;
      }
      document.removeEventListener("keydown", this.handleDocumentKeydown);
      this.tooltipVisible = false;
    };
    this.setRegionProps = () => {
      if (!this.tooltipVisible) {
        return;
      }
      this.viewportElement = document.body;
      this.region.viewportElement = this.viewportElement;
      this.region.anchorElement = this.anchorElement;
      this.region.addEventListener("positionchange", this.handlePositionChange);
    };
  }
  visibleChanged() {
    if (this.$fastController.isConnected) {
      this.updateTooltipVisibility();
      this.updateLayout();
    }
  }
  anchorChanged() {
    if (this.$fastController.isConnected) {
      this.updateLayout();
    }
  }
  positionChanged() {
    if (this.$fastController.isConnected) {
      this.updateLayout();
    }
  }
  anchorElementChanged(oldValue) {
    if (this.$fastController.isConnected) {
      if (oldValue !== null && oldValue !== void 0) {
        oldValue.removeEventListener("mouseover", this.handleAnchorMouseOver);
        oldValue.removeEventListener("mouseout", this.handleAnchorMouseOut);
      }
      if (this.anchorElement !== null && this.anchorElement !== void 0) {
        this.anchorElement.addEventListener("mouseover", this.handleAnchorMouseOver, { passive: true });
        this.anchorElement.addEventListener("mouseout", this.handleAnchorMouseOut, { passive: true });
        const anchorId = this.anchorElement.id;
        if (this.anchorElement.parentElement !== null) {
          this.anchorElement.parentElement.querySelectorAll(":hover").forEach((element) => {
            if (element.id === anchorId) {
              this.startHoverTimer();
            }
          });
        }
      }
      if (this.region !== null && this.region !== void 0 && this.tooltipVisible) {
        this.region.anchorElement = this.anchorElement;
      }
      this.updateLayout();
    }
  }
  viewportElementChanged() {
    if (this.region !== null && this.region !== void 0) {
      this.region.viewportElement = this.viewportElement;
    }
    this.updateLayout();
  }
  connectedCallback() {
    super.connectedCallback();
    this.anchorElement = this.getAnchor();
    this.updateLayout();
    this.updateTooltipVisibility();
  }
  disconnectedCallback() {
    this.hideTooltip();
    this.clearDelayTimer();
    super.disconnectedCallback();
  }
  /**
   * updated the properties being passed to the anchored region
   */
  updateLayout() {
    switch (this.position) {
      case TooltipPosition.top:
      case TooltipPosition.bottom:
        this.verticalPositioningMode = "locktodefault";
        this.horizontalPositioningMode = "dynamic";
        this.verticalDefaultPosition = this.position;
        this.horizontalDefaultPosition = void 0;
        this.horizontalInset = "true";
        this.verticalInset = "false";
        this.horizontalScaling = "anchor";
        this.verticalScaling = "content";
        break;
      case TooltipPosition.right:
      case TooltipPosition.left:
      case TooltipPosition.start:
      case TooltipPosition.end:
        this.verticalPositioningMode = "dynamic";
        this.horizontalPositioningMode = "locktodefault";
        this.verticalDefaultPosition = void 0;
        this.horizontalDefaultPosition = this.position;
        this.horizontalInset = "false";
        this.verticalInset = "true";
        this.horizontalScaling = "content";
        this.verticalScaling = "anchor";
        break;
      default:
        this.verticalPositioningMode = "dynamic";
        this.horizontalPositioningMode = "dynamic";
        this.verticalDefaultPosition = void 0;
        this.horizontalDefaultPosition = void 0;
        this.horizontalInset = "true";
        this.verticalInset = "false";
        this.horizontalScaling = "anchor";
        this.verticalScaling = "content";
        break;
    }
  }
};
Tooltip.DirectionAttributeName = "dir";
__decorate7([
  attr({ mode: "boolean" })
], Tooltip.prototype, "visible", void 0);
__decorate7([
  attr
], Tooltip.prototype, "anchor", void 0);
__decorate7([
  attr
], Tooltip.prototype, "delay", void 0);
__decorate7([
  attr
], Tooltip.prototype, "position", void 0);
__decorate7([
  observable
], Tooltip.prototype, "anchorElement", void 0);
__decorate7([
  observable
], Tooltip.prototype, "viewportElement", void 0);
__decorate7([
  observable
], Tooltip.prototype, "verticalPositioningMode", void 0);
__decorate7([
  observable
], Tooltip.prototype, "horizontalPositioningMode", void 0);
__decorate7([
  observable
], Tooltip.prototype, "horizontalInset", void 0);
__decorate7([
  observable
], Tooltip.prototype, "verticalInset", void 0);
__decorate7([
  observable
], Tooltip.prototype, "horizontalScaling", void 0);
__decorate7([
  observable
], Tooltip.prototype, "verticalScaling", void 0);
__decorate7([
  observable
], Tooltip.prototype, "verticalDefaultPosition", void 0);
__decorate7([
  observable
], Tooltip.prototype, "horizontalDefaultPosition", void 0);
__decorate7([
  observable
], Tooltip.prototype, "tooltipVisible", void 0);
__decorate7([
  observable
], Tooltip.prototype, "currentDirection", void 0);

// node_modules/@microsoft/fast-foundation/dist/esm/tree-item/tree-item.template.js
var TreeItemTemplate = html2`
    <template
        role="treeitem"
        slot="${(x) => x.isNestedItem() ? "item" : void 0}"
        tabindex="${(x) => x.disabled || !x.focusable ? void 0 : 0}"
        class="${(x) => x.expanded ? "expanded" : ""} ${(x) => x.selected ? "selected" : ""} ${(x) => x.nested ? "nested" : ""}
            ${(x) => x.disabled ? "disabled" : ""}"
        aria-expanded="${(x) => x.childItems && x.childItemLength() > 0 ? x.expanded : void 0}"
        aria-selected="${(x) => x.selected}"
        aria-disabled="${(x) => x.disabled}"
        @keydown="${(x, c) => x.handleKeyDown(c.event)}"
        @click="${(x, c) => x.handleClick(c.event)}"
        ${children({
  property: "childItems",
  filter: elements()
})}
    >
        <div class="positioning-region" part="positioning-region">
            <div class="content-region" part="content-region">
                ${when((x) => x.childItems && x.childItemLength() > 0, html2`
                        <div
                            aria-hidden="true"
                            class="expand-collapse-button"
                            part="expand-collapse-button"
                            @click="${(x, c) => x.handleExpandCollapseButtonClick(c.event)}"
                            ${ref("expandCollapseButton")}
                        >
                            <slot name="expand-collapse-glyph">
                                <svg
                                    viewBox="0 0 16 16"
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="expand-collapse-glyph"
                                >
                                    <path
                                        d="M5.00001 12.3263C5.00124 12.5147 5.05566 12.699 5.15699 12.8578C5.25831 13.0167 5.40243 13.1437 5.57273 13.2242C5.74304 13.3047 5.9326 13.3354 6.11959 13.3128C6.30659 13.2902 6.4834 13.2152 6.62967 13.0965L10.8988 8.83532C11.0739 8.69473 11.2153 8.51658 11.3124 8.31402C11.4096 8.11146 11.46 7.88966 11.46 7.66499C11.46 7.44033 11.4096 7.21853 11.3124 7.01597C11.2153 6.81341 11.0739 6.63526 10.8988 6.49467L6.62967 2.22347C6.48274 2.10422 6.30501 2.02912 6.11712 2.00691C5.92923 1.9847 5.73889 2.01628 5.56823 2.09799C5.39757 2.17969 5.25358 2.30817 5.153 2.46849C5.05241 2.62882 4.99936 2.8144 5.00001 3.00369V12.3263Z"
                                    />
                                </svg>
                            </slot>
                        </div>
                    `)}
                ${startTemplate}
                <slot></slot>
                ${endTemplate}
            </div>
        </div>
        ${when((x) => x.childItems && x.childItemLength() > 0 && (x.expanded || x.renderCollapsedChildren), html2`
                <div role="group" class="items" part="items">
                    <slot name="item" ${slotted("items")}></slot>
                </div>
            `)}
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/tree-item/tree-item.js
function isTreeItemElement(el) {
  return isHTMLElement(el) && el.getAttribute("role") === "treeitem";
}
var TreeItem = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.expanded = false;
    this.focusable = false;
    this.enabledChildTreeItems = [];
    this.handleFocus = (e) => {
    };
    this.handleBlur = (e) => {
    };
    this.handleKeyDown = (e) => {
      if (e.target !== e.currentTarget) {
        return true;
      }
      switch (e.keyCode) {
        case keyCodeArrowLeft:
          e.preventDefault();
          this.collapseOrFocusParent();
          break;
        case keyCodeArrowRight:
          e.preventDefault();
          this.expandOrFocusFirstChild();
          break;
        case keyCodeArrowDown:
          e.preventDefault();
          this.focusNextNode(1);
          break;
        case keyCodeArrowUp:
          e.preventDefault();
          this.focusNextNode(-1);
          break;
        case keyCodeEnter:
          this.handleSelected(e);
          break;
      }
      return true;
    };
    this.handleExpandCollapseButtonClick = (e) => {
      if (!this.disabled) {
        e.preventDefault();
        this.setExpanded(!this.expanded);
      }
    };
    this.handleClick = (e) => {
      if (!e.defaultPrevented && !this.disabled) {
        this.handleSelected(e);
      }
    };
    this.isNestedItem = () => {
      return isTreeItemElement(this.parentElement);
    };
  }
  itemsChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.items.forEach((node) => {
        if (isTreeItemElement(node)) {
          node.nested = true;
        }
      });
      this.enabledChildTreeItems = this.items.filter((item) => {
        return isTreeItemElement(item) && !item.hasAttribute("disabled");
      });
    }
  }
  getParentTreeNode() {
    const parentNode = this.parentElement.closest("[role='tree']");
    return parentNode;
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    const parentTreeNode = this.getParentTreeNode();
    if (parentTreeNode) {
      if (parentTreeNode.hasAttribute("render-collapsed-nodes")) {
        this.renderCollapsedChildren = parentTreeNode.getAttribute("render-collapsed-nodes") === "true";
      }
      this.notifier = Observable.getNotifier(parentTreeNode);
      this.notifier.subscribe(this, "renderCollapsedNodes");
    }
  }
  /**
   * @internal
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.notifier) {
      this.notifier.unsubscribe(this, "renderCollapsedNodes");
    }
  }
  /**
   * Places document focus on a tree item and adds the item to the sequential tab order.
   * @param el - the element to focus
   */
  static focusItem(el) {
    el.setAttribute("tabindex", "0");
    el.focusable = true;
    el.focus();
  }
  handleChange(source, propertyName) {
    switch (propertyName) {
      case "renderCollapsedNodes":
        this.renderCollapsedChildren = source.renderCollapsedNodes;
        break;
    }
  }
  childItemLength() {
    const treeChildren = this.childItems.filter((item) => {
      return isTreeItemElement(item);
    });
    return treeChildren ? treeChildren.length : 0;
  }
  collapseOrFocusParent() {
    if (this.expanded) {
      this.setExpanded(false);
    } else if (isHTMLElement(this.parentElement)) {
      const parentTreeItemNode = this.parentElement.closest("[role='treeitem']");
      if (isHTMLElement(parentTreeItemNode)) {
        TreeItem.focusItem(parentTreeItemNode);
      }
    }
  }
  expandOrFocusFirstChild() {
    if (typeof this.expanded !== "boolean") {
      return;
    }
    if (!this.expanded && this.childItemLength() > 0) {
      this.setExpanded(true);
    } else {
      if (this.enabledChildTreeItems.length > 0) {
        TreeItem.focusItem(this.enabledChildTreeItems[0]);
      }
    }
  }
  focusNextNode(delta) {
    const visibleNodes = this.getVisibleNodes();
    if (!visibleNodes) {
      return;
    }
    const currentIndex = visibleNodes.indexOf(this);
    if (currentIndex !== -1) {
      let nextElement = visibleNodes[currentIndex + delta];
      if (nextElement !== void 0) {
        while (nextElement.hasAttribute("disabled")) {
          const offset = delta >= 0 ? 1 : -1;
          nextElement = visibleNodes[currentIndex + delta + offset];
          if (!nextElement) {
            break;
          }
        }
      }
      if (isHTMLElement(nextElement)) {
        TreeItem.focusItem(nextElement);
      }
    }
  }
  getVisibleNodes() {
    return getDisplayedNodes(this.getTreeRoot(), "[role='treeitem']");
  }
  getTreeRoot() {
    const currentNode = this;
    if (!isHTMLElement(currentNode)) {
      return null;
    }
    return currentNode.closest("[role='tree']");
  }
  handleSelected(e) {
    this.selected = !this.selected;
    this.$emit("selected-change", e);
  }
  setExpanded(expanded) {
    this.expanded = expanded;
    this.$emit("expanded-change", this);
  }
};
__decorate7([
  attr({ mode: "boolean" })
], TreeItem.prototype, "expanded", void 0);
__decorate7([
  attr({ mode: "boolean" })
], TreeItem.prototype, "selected", void 0);
__decorate7([
  attr({ mode: "boolean" })
], TreeItem.prototype, "disabled", void 0);
__decorate7([
  observable
], TreeItem.prototype, "focusable", void 0);
__decorate7([
  observable
], TreeItem.prototype, "childItems", void 0);
__decorate7([
  observable
], TreeItem.prototype, "items", void 0);
__decorate7([
  observable
], TreeItem.prototype, "nested", void 0);
__decorate7([
  observable
], TreeItem.prototype, "renderCollapsedChildren", void 0);
applyMixins(TreeItem, StartEnd);

// node_modules/@microsoft/fast-foundation/dist/esm/tree-view/tree-view.template.js
var TreeViewTemplate = html2`
    <template
        role="tree"
        ${ref("treeView")}
        @keydown="${(x, c) => x.handleKeyDown(c.event)}"
        @focus="${(x, c) => x.handleFocus(c.event)}"
        @focusout="${(x, c) => x.handleBlur(c.event)}"
    >
        <slot ${slotted("slottedTreeItems")}></slot>
    </template>
`;

// node_modules/@microsoft/fast-foundation/dist/esm/tree-view/tree-view.js
var TreeView = class extends FASTElement {
  constructor() {
    super(...arguments);
    this.focusable = true;
    this.handleBlur = (e) => {
      const { relatedTarget, target } = e;
      if (relatedTarget instanceof HTMLElement && target instanceof HTMLElement && this.contains(relatedTarget)) {
        target.removeAttribute("tabindex");
      }
    };
    this.handleFocus = (e) => {
    };
    this.handleKeyDown = (e) => {
      if (!this.treeItems) {
        return true;
      }
      switch (e.keyCode) {
        case keyCodeHome:
          if (this.treeItems && this.treeItems.length) {
            TreeItem.focusItem(this.treeItems[0]);
          }
          break;
        case keyCodeEnd:
          if (this.treeItems && this.treeItems.length) {
            TreeItem.focusItem(this.treeItems[this.treeItems.length - 1]);
          }
          break;
        default:
          return true;
      }
    };
    this.setItems = () => {
      const focusIndex = this.treeItems.findIndex(this.isFocusableElement);
      for (let item = 0; item < this.treeItems.length; item++) {
        if (item === focusIndex && !this.treeItems[item].hasAttribute("disabled")) {
          this.treeItems[item].setAttribute("tabindex", "0");
        }
        this.treeItems[item].addEventListener("selected-change", this.handleItemSelected);
      }
    };
    this.resetItems = () => {
      for (let item = 0; item < this.treeItems.length; item++) {
        this.treeItems[item].removeEventListener("selected-change", this.handleItemSelected);
      }
    };
    this.handleItemSelected = (e) => {
      const newSelection = e.target;
      if (newSelection !== this.currentSelected) {
        if (this.currentSelected) {
          this.currentSelected.removeAttribute("selected");
          this.currentSelected.selected = false;
        }
        this.currentSelected = newSelection;
      }
    };
    this.isFocusableElement = (el) => {
      return isTreeItemElement(el) && !this.isDisabledElement(el);
    };
    this.isDisabledElement = (el) => {
      return isTreeItemElement(el) && el.getAttribute("aria-disabled") === "true";
    };
  }
  slottedTreeItemsChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.resetItems();
      this.treeItems = this.getVisibleNodes();
      this.setItems();
      if (this.checkForNestedItems()) {
        this.slottedTreeItems.forEach((node) => {
          if (isTreeItemElement(node)) {
            node.nested = true;
          }
        });
      }
    }
  }
  checkForNestedItems() {
    return this.slottedTreeItems.some((node) => {
      return isTreeItemElement(node) && node.querySelector("[role='treeitem']");
    });
  }
  connectedCallback() {
    super.connectedCallback();
    this.treeItems = this.getVisibleNodes();
    DOM.queueUpdate(() => {
      const node = this.treeView.querySelector("[aria-selected='true']");
      if (node) {
        this.currentSelected = node;
      }
    });
  }
  getVisibleNodes() {
    const treeItems = [];
    if (this.slottedTreeItems !== void 0) {
      this.slottedTreeItems.forEach((item) => {
        if (isTreeItemElement(item)) {
          treeItems.push(item);
        }
      });
    }
    return treeItems;
  }
};
__decorate7([
  attr({ attribute: "render-collapsed-nodes" })
], TreeView.prototype, "renderCollapsedNodes", void 0);
__decorate7([
  observable
], TreeView.prototype, "focusable", void 0);
__decorate7([
  observable
], TreeView.prototype, "currentSelected", void 0);
__decorate7([
  observable
], TreeView.prototype, "lastFocused", void 0);
__decorate7([
  observable
], TreeView.prototype, "nested", void 0);
__decorate7([
  observable
], TreeView.prototype, "slottedTreeItems", void 0);

// node_modules/@fluentui/web-components/dist/esm/default-palette.js
var neutralPalette = [
  "#FFFFFF",
  "#FCFCFC",
  "#FAFAFA",
  "#F7F7F7",
  "#F5F5F5",
  "#F2F2F2",
  "#EFEFEF",
  "#EDEDED",
  "#EAEAEA",
  "#E8E8E8",
  "#E5E5E5",
  "#E2E2E2",
  "#E0E0E0",
  "#DDDDDD",
  "#DBDBDB",
  "#D8D8D8",
  "#D6D6D6",
  "#D3D3D3",
  "#D0D0D0",
  "#CECECE",
  "#CBCBCB",
  "#C9C9C9",
  "#C6C6C6",
  "#C3C3C3",
  "#C1C1C1",
  "#BEBEBE",
  "#BCBCBC",
  "#B9B9B9",
  "#B6B6B6",
  "#B4B4B4",
  "#B1B1B1",
  "#AFAFAF",
  "#ACACAC",
  "#A9A9A9",
  "#A7A7A7",
  "#A4A4A4",
  "#A2A2A2",
  "#9F9F9F",
  "#9D9D9D",
  "#9A9A9A",
  "#979797",
  "#959595",
  "#929292",
  "#909090",
  "#8D8D8D",
  "#8A8A8A",
  "#888888",
  "#858585",
  "#838383",
  "#808080",
  "#7D7D7D",
  "#7B7B7B",
  "#787878",
  "#767676",
  "#737373",
  "#717171",
  "#6E6E6E",
  "#6B6B6B",
  "#696969",
  "#666666",
  "#646464",
  "#616161",
  "#5F5F5F",
  "#5C5C5C",
  "#5A5A5A",
  "#575757",
  "#545454",
  "#525252",
  "#4F4F4F",
  "#4D4D4D",
  "#4A4A4A",
  "#484848",
  "#454545",
  "#424242",
  "#404040",
  "#3D3D3D",
  "#3B3B3B",
  "#383838",
  "#363636",
  "#333333",
  "#313131",
  "#2E2E2E",
  "#2B2B2B",
  "#292929",
  "#262626",
  "#242424",
  "#212121",
  "#1E1E1E",
  "#1B1B1B",
  "#181818",
  "#151515",
  "#121212",
  "#101010",
  "#000000"
];
var accentPalette = [
  "#FFFFFF",
  "#FBFDFE",
  "#F6FAFE",
  "#F2F8FD",
  "#EEF6FC",
  "#E9F4FB",
  "#E5F1FB",
  "#E1EFFA",
  "#DCEDF9",
  "#D8EAF8",
  "#D4E8F8",
  "#CFE6F7",
  "#CBE4F6",
  "#C7E1F6",
  "#C2DFF5",
  "#BEDDF4",
  "#BADAF3",
  "#B6D8F3",
  "#B1D6F2",
  "#ADD4F1",
  "#A9D1F0",
  "#A4CFF0",
  "#A0CDEF",
  "#9CCAEE",
  "#97C8EE",
  "#93C6ED",
  "#8FC4EC",
  "#8AC1EB",
  "#86BFEB",
  "#82BDEA",
  "#7DBAE9",
  "#79B8E8",
  "#75B6E8",
  "#70B3E7",
  "#6CB1E6",
  "#68AFE5",
  "#63ADE5",
  "#5FAAE4",
  "#5BA8E3",
  "#56A6E3",
  "#52A3E2",
  "#4EA1E1",
  "#499FE0",
  "#459DE0",
  "#419ADF",
  "#3D98DE",
  "#3896DD",
  "#3493DD",
  "#3091DC",
  "#2B8FDB",
  "#278DDB",
  "#238ADA",
  "#1E88D9",
  "#1A86D8",
  "#1683D8",
  "#1181D7",
  "#0D7FD6",
  "#097DD5",
  "#047AD5",
  "#0078D4",
  "#0075CF",
  "#0072C9",
  "#006FC4",
  "#006CBE",
  "#0069B9",
  "#0066B4",
  "#0063AE",
  "#0060A9",
  "#005CA3",
  "#00599E",
  "#005699",
  "#005393",
  "#00508E",
  "#004D88",
  "#004A83",
  "#00477D",
  "#004478",
  "#004173",
  "#003E6D",
  "#003B68",
  "#003862",
  "#00355D",
  "#003258",
  "#002F52",
  "#002B4D",
  "#002847",
  "#002542",
  "#00223C",
  "#001F36",
  "#001B30",
  "#00182B",
  "#001525",
  "#00121F",
  "#000000"
];

// node_modules/@fluentui/web-components/dist/esm/fluent-design-system.js
var DesignSystemDefaults = {
  typeRampMinus2FontSize: "10px",
  typeRampMinus2LineHeight: "16px",
  typeRampMinus1FontSize: "12px",
  typeRampMinus1LineHeight: "16px",
  typeRampBaseFontSize: "14px",
  typeRampBaseLineHeight: "20px",
  typeRampPlus1FontSize: "16px",
  typeRampPlus1LineHeight: "24px",
  typeRampPlus2FontSize: "20px",
  typeRampPlus2LineHeight: "28px",
  typeRampPlus3FontSize: "28px",
  typeRampPlus3LineHeight: "36px",
  typeRampPlus4FontSize: "34px",
  typeRampPlus4LineHeight: "44px",
  typeRampPlus5FontSize: "46px",
  typeRampPlus5LineHeight: "56px",
  typeRampPlus6FontSize: "60px",
  typeRampPlus6LineHeight: "72px",
  accentBaseColor: "#0078D4",
  accentPalette,
  backgroundColor: "#FFFFFF",
  baseHeightMultiplier: 8,
  baseHorizontalSpacingMultiplier: 3,
  cornerRadius: 2,
  elevatedCornerRadius: 4,
  density: 0,
  designUnit: 4,
  direction: Direction.ltr,
  disabledOpacity: 0.3,
  focusOutlineWidth: 2,
  neutralBaseColor: "#808080",
  neutralPalette,
  outlineWidth: 1,
  /**
   * Recipe Deltas
   */
  accentFillRestDelta: 0,
  accentFillHoverDelta: 4,
  accentFillActiveDelta: -5,
  accentFillFocusDelta: 0,
  accentFillSelectedDelta: 12,
  accentForegroundRestDelta: 0,
  accentForegroundHoverDelta: 6,
  accentForegroundActiveDelta: -4,
  accentForegroundFocusDelta: 0,
  neutralFillRestDelta: 7,
  neutralFillHoverDelta: 10,
  neutralFillActiveDelta: 5,
  neutralFillFocusDelta: 0,
  neutralFillSelectedDelta: 7,
  neutralFillInputRestDelta: 0,
  neutralFillInputHoverDelta: 0,
  neutralFillInputActiveDelta: 0,
  neutralFillInputFocusDelta: 0,
  neutralFillInputSelectedDelta: 0,
  neutralFillStealthRestDelta: 0,
  neutralFillStealthHoverDelta: 5,
  neutralFillStealthActiveDelta: 3,
  neutralFillStealthFocusDelta: 0,
  neutralFillStealthSelectedDelta: 7,
  neutralFillToggleHoverDelta: 8,
  neutralFillToggleActiveDelta: -5,
  neutralFillToggleFocusDelta: 0,
  baseLayerLuminance: -1,
  neutralFillCardDelta: 3,
  neutralForegroundHoverDelta: 0,
  neutralForegroundActiveDelta: 0,
  neutralForegroundFocusDelta: 0,
  neutralDividerRestDelta: 8,
  neutralOutlineRestDelta: 25,
  neutralOutlineHoverDelta: 40,
  neutralOutlineActiveDelta: 16,
  neutralOutlineFocusDelta: 25,
  neutralContrastFillRestDelta: 0,
  neutralContrastFillHoverDelta: -3,
  neutralContrastFillActiveDelta: 7,
  neutralContrastFillFocusDelta: 0
};
function evaluateDesignSystemResolver(arg, designSystem) {
  return typeof arg === "function" ? arg(designSystem) : arg;
}
function getDesignSystemValue(key) {
  return (designSystem) => {
    return designSystem && designSystem[key] !== void 0 ? designSystem[key] : DesignSystemDefaults[key];
  };
}
var backgroundColor = getDesignSystemValue("backgroundColor");
var neutralBaseColor = getDesignSystemValue("neutralBaseColor");
var accentBaseColor = getDesignSystemValue("accentBaseColor");
var cornerRadius = getDesignSystemValue("cornerRadius");
var neutralPalette2 = getDesignSystemValue("neutralPalette");
var accentPalette2 = getDesignSystemValue("accentPalette");
var designUnit = getDesignSystemValue("designUnit");
var baseHeightMultiplier = getDesignSystemValue("baseHeightMultiplier");
var baseHorizontalSpacingMultiplier = getDesignSystemValue("baseHorizontalSpacingMultiplier");
var outlineWidth = getDesignSystemValue("outlineWidth");
var focusOutlineWidth = getDesignSystemValue("focusOutlineWidth");
var disabledOpacity = getDesignSystemValue("disabledOpacity");
var direction = getDesignSystemValue("direction");
var accentFillRestDelta = getDesignSystemValue("accentFillRestDelta");
var accentFillHoverDelta = getDesignSystemValue("accentFillHoverDelta");
var accentFillActiveDelta = getDesignSystemValue("accentFillActiveDelta");
var accentFillFocusDelta = getDesignSystemValue("accentFillFocusDelta");
var accentFillSelectedDelta = getDesignSystemValue("accentFillSelectedDelta");
var accentForegroundRestDelta = getDesignSystemValue("accentForegroundRestDelta");
var accentForegroundHoverDelta = getDesignSystemValue("accentForegroundHoverDelta");
var accentForegroundActiveDelta = getDesignSystemValue("accentForegroundActiveDelta");
var accentForegroundFocusDelta = getDesignSystemValue("accentForegroundFocusDelta");
var neutralFillRestDelta = getDesignSystemValue("neutralFillRestDelta");
var neutralFillHoverDelta = getDesignSystemValue("neutralFillHoverDelta");
var neutralFillActiveDelta = getDesignSystemValue("neutralFillActiveDelta");
var neutralFillFocusDelta = getDesignSystemValue("neutralFillFocusDelta");
var neutralFillSelectedDelta = getDesignSystemValue("neutralFillSelectedDelta");
var neutralFillInputRestDelta = getDesignSystemValue("neutralFillInputRestDelta");
var neutralFillInputHoverDelta = getDesignSystemValue("neutralFillInputHoverDelta");
var neutralFillInputActiveDelta = getDesignSystemValue("neutralFillInputActiveDelta");
var neutralFillInputFocusDelta = getDesignSystemValue("neutralFillInputFocusDelta");
var neutralFillInputSelectedDelta = getDesignSystemValue("neutralFillInputSelectedDelta");
var neutralFillStealthRestDelta = getDesignSystemValue("neutralFillStealthRestDelta");
var neutralFillStealthHoverDelta = getDesignSystemValue("neutralFillStealthHoverDelta");
var neutralFillStealthActiveDelta = getDesignSystemValue("neutralFillStealthActiveDelta");
var neutralFillStealthFocusDelta = getDesignSystemValue("neutralFillStealthFocusDelta");
var neutralFillStealthSelectedDelta = getDesignSystemValue("neutralFillStealthSelectedDelta");
var neutralFillToggleHoverDelta = getDesignSystemValue("neutralFillToggleHoverDelta");
var neutralFillToggleActiveDelta = getDesignSystemValue("neutralFillToggleActiveDelta");
var neutralFillToggleFocusDelta = getDesignSystemValue("neutralFillToggleFocusDelta");
var baseLayerLuminance = getDesignSystemValue("baseLayerLuminance");
var neutralFillCardDelta = getDesignSystemValue("neutralFillCardDelta");
var neutralForegroundHoverDelta = getDesignSystemValue("neutralForegroundHoverDelta");
var neutralForegroundActiveDelta = getDesignSystemValue("neutralForegroundActiveDelta");
var neutralForegroundFocusDelta = getDesignSystemValue("neutralForegroundFocusDelta");
var neutralDividerRestDelta = getDesignSystemValue("neutralDividerRestDelta");
var neutralOutlineRestDelta = getDesignSystemValue("neutralOutlineRestDelta");
var neutralOutlineHoverDelta = getDesignSystemValue("neutralOutlineHoverDelta");
var neutralOutlineActiveDelta = getDesignSystemValue("neutralOutlineActiveDelta");
var neutralOutlineFocusDelta = getDesignSystemValue("neutralOutlineFocusDelta");
var neutralContrastFillRestDelta = getDesignSystemValue("neutralContrastFillRestDelta");
var neutralContrastFillHoverDelta = getDesignSystemValue("neutralContrastFillHoverDelta");
var neutralContrastFillActiveDelta = getDesignSystemValue("neutralContrastFillActiveDelta");
var neutralContrastFillFocusDelta = getDesignSystemValue("neutralContrastFillFocusDelta");

// node_modules/@microsoft/fast-colors/dist/math-utilities.js
function clamp2(i, min2, max2) {
  if (isNaN(i) || i <= min2) {
    return min2;
  } else if (i >= max2) {
    return max2;
  }
  return i;
}
function normalize(i, min2, max2) {
  if (isNaN(i) || i <= min2) {
    return 0;
  } else if (i >= max2) {
    return 1;
  }
  return i / (max2 - min2);
}
function denormalize(i, min2, max2) {
  if (isNaN(i)) {
    return min2;
  }
  return min2 + i * (max2 - min2);
}
function degreesToRadians(i) {
  return i * (Math.PI / 180);
}
function radiansToDegrees(i) {
  return i * (180 / Math.PI);
}
function getHexStringForByte(i) {
  const s = Math.round(clamp2(i, 0, 255)).toString(16);
  if (s.length === 1) {
    return "0" + s;
  }
  return s;
}
function lerp(i, min2, max2) {
  if (isNaN(i) || i <= 0) {
    return min2;
  } else if (i >= 1) {
    return max2;
  }
  return min2 + i * (max2 - min2);
}
function lerpAnglesInDegrees(i, min2, max2) {
  if (i <= 0) {
    return min2 % 360;
  } else if (i >= 1) {
    return max2 % 360;
  }
  const a = (min2 - max2 + 360) % 360;
  const b = (max2 - min2 + 360) % 360;
  if (a <= b) {
    return (min2 - a * i + 360) % 360;
  }
  return (min2 + a * i + 360) % 360;
}
var TwoPI = Math.PI * 2;
function roundToPrecisionSmall(i, precision) {
  const factor = Math.pow(10, precision);
  return Math.round(i * factor) / factor;
}

// node_modules/@microsoft/fast-colors/dist/color-hsl.js
var ColorHSL = class {
  constructor(hue, sat, lum) {
    this.h = hue;
    this.s = sat;
    this.l = lum;
  }
  /**
   * Construct a {@link ColorHSL} from a config object.
   */
  static fromObject(data) {
    if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.l)) {
      return new ColorHSL(data.h, data.s, data.l);
    }
    return null;
  }
  /**
   * Determines if a color is equal to another
   * @param rhs - the value to compare
   */
  equalValue(rhs) {
    return this.h === rhs.h && this.s === rhs.s && this.l === rhs.l;
  }
  /**
   * Returns a new {@link ColorHSL} rounded to the provided precision
   * @param precision - the precision to round to
   */
  roundToPrecision(precision) {
    return new ColorHSL(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.l, precision));
  }
  /**
   * Returns the {@link ColorHSL} formatted as an object.
   */
  toObject() {
    return { h: this.h, s: this.s, l: this.l };
  }
};

// node_modules/@microsoft/fast-colors/dist/color-hsv.js
var ColorHSV = class {
  constructor(hue, sat, val) {
    this.h = hue;
    this.s = sat;
    this.v = val;
  }
  /**
   * Construct a {@link ColorHSV} from a config object.
   */
  static fromObject(data) {
    if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.v)) {
      return new ColorHSV(data.h, data.s, data.v);
    }
    return null;
  }
  /**
   * Determines if a color is equal to another
   * @param rhs - the value to compare
   */
  equalValue(rhs) {
    return this.h === rhs.h && this.s === rhs.s && this.v === rhs.v;
  }
  /**
   * Returns a new {@link ColorHSV} rounded to the provided precision
   * @param precision - the precision to round to
   */
  roundToPrecision(precision) {
    return new ColorHSV(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.v, precision));
  }
  /**
   * Returns the {@link ColorHSV} formatted as an object.
   */
  toObject() {
    return { h: this.h, s: this.s, v: this.v };
  }
};

// node_modules/@microsoft/fast-colors/dist/color-lab.js
var ColorLAB = class {
  constructor(l, a, b) {
    this.l = l;
    this.a = a;
    this.b = b;
  }
  /**
   * Construct a {@link ColorLAB} from a config object.
   */
  static fromObject(data) {
    if (data && !isNaN(data.l) && !isNaN(data.a) && !isNaN(data.b)) {
      return new ColorLAB(data.l, data.a, data.b);
    }
    return null;
  }
  /**
   * Determines if a color is equal to another
   * @param rhs - the value to compare
   */
  equalValue(rhs) {
    return this.l === rhs.l && this.a === rhs.a && this.b === rhs.b;
  }
  /**
   * Returns a new {@link ColorLAB} rounded to the provided precision
   * @param precision - the precision to round to
   */
  roundToPrecision(precision) {
    return new ColorLAB(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.a, precision), roundToPrecisionSmall(this.b, precision));
  }
  /**
   * Returns the {@link ColorLAB} formatted as an object.
   */
  toObject() {
    return { l: this.l, a: this.a, b: this.b };
  }
};
ColorLAB.epsilon = 216 / 24389;
ColorLAB.kappa = 24389 / 27;

// node_modules/@microsoft/fast-colors/dist/color-lch.js
var ColorLCH = class {
  constructor(l, c, h) {
    this.l = l;
    this.c = c;
    this.h = h;
  }
  /**
   * Construct a {@link ColorLCH} from a config object.
   * @param data - the config object
   */
  static fromObject(data) {
    if (data && !isNaN(data.l) && !isNaN(data.c) && !isNaN(data.h)) {
      return new ColorLCH(data.l, data.c, data.h);
    }
    return null;
  }
  /**
   * Determines if one color is equal to another.
   * @param rhs - the color to compare
   */
  equalValue(rhs) {
    return this.l === rhs.l && this.c === rhs.c && this.h === rhs.h;
  }
  /**
   * Returns a new {@link ColorLCH} rounded to the provided precision
   * @param precision - the precision to round to
   */
  roundToPrecision(precision) {
    return new ColorLCH(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.c, precision), roundToPrecisionSmall(this.h, precision));
  }
  /**
   * Converts the {@link ColorLCH} to a config object.
   */
  toObject() {
    return { l: this.l, c: this.c, h: this.h };
  }
};

// node_modules/@microsoft/fast-colors/dist/color-rgba-64.js
var ColorRGBA64 = class {
  /**
   *
   * @param red - the red value
   * @param green - the green value
   * @param blue - the blue value
   * @param alpha - the alpha value
   */
  constructor(red, green, blue, alpha) {
    this.r = red;
    this.g = green;
    this.b = blue;
    this.a = typeof alpha === "number" && !isNaN(alpha) ? alpha : 1;
  }
  /**
   * Construct a {@link ColorRGBA64} from a {@link ColorRGBA64Config}
   * @param data - the config object
   */
  static fromObject(data) {
    return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b) ? new ColorRGBA64(data.r, data.g, data.b, data.a) : null;
  }
  /**
   * Determines if one color is equal to another.
   * @param rhs - the color to compare
   */
  equalValue(rhs) {
    return this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a;
  }
  /**
   * Returns the color formatted as a string; #RRGGBB
   */
  toStringHexRGB() {
    return "#" + [this.r, this.g, this.b].map(this.formatHexValue).join("");
  }
  /**
   * Returns the color formatted as a string; #RRGGBBAA
   */
  toStringHexRGBA() {
    return this.toStringHexRGB() + this.formatHexValue(this.a);
  }
  /**
   * Returns the color formatted as a string; #AARRGGBB
   */
  toStringHexARGB() {
    return "#" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join("");
  }
  /**
   * Returns the color formatted as a string; "rgb(0xRR, 0xGG, 0xBB)"
   */
  toStringWebRGB() {
    return `rgb(${Math.round(denormalize(this.r, 0, 255))},${Math.round(denormalize(this.g, 0, 255))},${Math.round(denormalize(this.b, 0, 255))})`;
  }
  /**
   * Returns the color formatted as a string; "rgba(0xRR, 0xGG, 0xBB, a)"
   * @remarks
   * Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]
   */
  toStringWebRGBA() {
    return `rgba(${Math.round(denormalize(this.r, 0, 255))},${Math.round(denormalize(this.g, 0, 255))},${Math.round(denormalize(this.b, 0, 255))},${clamp2(this.a, 0, 1)})`;
  }
  /**
   * Returns a new {@link ColorRGBA64} rounded to the provided precision
   * @param precision - the precision to round to
   */
  roundToPrecision(precision) {
    return new ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));
  }
  /**
   * Returns a new {@link ColorRGBA64} with channel values clamped between 0 and 1.
   */
  clamp() {
    return new ColorRGBA64(clamp2(this.r, 0, 1), clamp2(this.g, 0, 1), clamp2(this.b, 0, 1), clamp2(this.a, 0, 1));
  }
  /**
   * Converts the {@link ColorRGBA64} to a {@link ColorRGBA64Config}.
   */
  toObject() {
    return { r: this.r, g: this.g, b: this.b, a: this.a };
  }
  formatHexValue(value) {
    return getHexStringForByte(denormalize(value, 0, 255));
  }
};

// node_modules/@microsoft/fast-colors/dist/color-xyz.js
var ColorXYZ = class {
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  /**
   * Construct a {@link ColorXYZ} from a config object.
   */
  static fromObject(data) {
    if (data && !isNaN(data.x) && !isNaN(data.y) && !isNaN(data.z)) {
      return new ColorXYZ(data.x, data.y, data.z);
    }
    return null;
  }
  /**
   * Determines if a color is equal to another
   * @param rhs - the value to compare
   */
  equalValue(rhs) {
    return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z;
  }
  /**
   * Returns a new {@link ColorXYZ} rounded to the provided precision
   * @param precision - the precision to round to
   */
  roundToPrecision(precision) {
    return new ColorXYZ(roundToPrecisionSmall(this.x, precision), roundToPrecisionSmall(this.y, precision), roundToPrecisionSmall(this.z, precision));
  }
  /**
   * Returns the {@link ColorXYZ} formatted as an object.
   */
  toObject() {
    return { x: this.x, y: this.y, z: this.z };
  }
};
ColorXYZ.whitePoint = new ColorXYZ(0.95047, 1, 1.08883);

// node_modules/@microsoft/fast-colors/dist/color-converters.js
function rgbToLinearLuminance(rgb) {
  return rgb.r * 0.2126 + rgb.g * 0.7152 + rgb.b * 0.0722;
}
function rgbToRelativeLuminance(rgb) {
  function luminanceHelper(i) {
    if (i <= 0.03928) {
      return i / 12.92;
    }
    return Math.pow((i + 0.055) / 1.055, 2.4);
  }
  return rgbToLinearLuminance(new ColorRGBA64(luminanceHelper(rgb.r), luminanceHelper(rgb.g), luminanceHelper(rgb.b), 1));
}
var calculateContrastRatio = (a, b) => (a + 0.05) / (b + 0.05);
function contrastRatio(a, b) {
  const luminanceA = rgbToRelativeLuminance(a);
  const luminanceB = rgbToRelativeLuminance(b);
  return luminanceA > luminanceB ? calculateContrastRatio(luminanceA, luminanceB) : calculateContrastRatio(luminanceB, luminanceA);
}
function rgbToHSL(rgb) {
  const max2 = Math.max(rgb.r, rgb.g, rgb.b);
  const min2 = Math.min(rgb.r, rgb.g, rgb.b);
  const delta = max2 - min2;
  let hue = 0;
  if (delta !== 0) {
    if (max2 === rgb.r) {
      hue = 60 * ((rgb.g - rgb.b) / delta % 6);
    } else if (max2 === rgb.g) {
      hue = 60 * ((rgb.b - rgb.r) / delta + 2);
    } else {
      hue = 60 * ((rgb.r - rgb.g) / delta + 4);
    }
  }
  if (hue < 0) {
    hue += 360;
  }
  const lum = (max2 + min2) / 2;
  let sat = 0;
  if (delta !== 0) {
    sat = delta / (1 - Math.abs(2 * lum - 1));
  }
  return new ColorHSL(hue, sat, lum);
}
function hslToRGB(hsl, alpha = 1) {
  const c = (1 - Math.abs(2 * hsl.l - 1)) * hsl.s;
  const x = c * (1 - Math.abs(hsl.h / 60 % 2 - 1));
  const m = hsl.l - c / 2;
  let r = 0;
  let g = 0;
  let b = 0;
  if (hsl.h < 60) {
    r = c;
    g = x;
    b = 0;
  } else if (hsl.h < 120) {
    r = x;
    g = c;
    b = 0;
  } else if (hsl.h < 180) {
    r = 0;
    g = c;
    b = x;
  } else if (hsl.h < 240) {
    r = 0;
    g = x;
    b = c;
  } else if (hsl.h < 300) {
    r = x;
    g = 0;
    b = c;
  } else if (hsl.h < 360) {
    r = c;
    g = 0;
    b = x;
  }
  return new ColorRGBA64(r + m, g + m, b + m, alpha);
}
function rgbToHSV(rgb) {
  const max2 = Math.max(rgb.r, rgb.g, rgb.b);
  const min2 = Math.min(rgb.r, rgb.g, rgb.b);
  const delta = max2 - min2;
  let hue = 0;
  if (delta !== 0) {
    if (max2 === rgb.r) {
      hue = 60 * ((rgb.g - rgb.b) / delta % 6);
    } else if (max2 === rgb.g) {
      hue = 60 * ((rgb.b - rgb.r) / delta + 2);
    } else {
      hue = 60 * ((rgb.r - rgb.g) / delta + 4);
    }
  }
  if (hue < 0) {
    hue += 360;
  }
  let sat = 0;
  if (max2 !== 0) {
    sat = delta / max2;
  }
  return new ColorHSV(hue, sat, max2);
}
function hsvToRGB(hsv, alpha = 1) {
  const c = hsv.s * hsv.v;
  const x = c * (1 - Math.abs(hsv.h / 60 % 2 - 1));
  const m = hsv.v - c;
  let r = 0;
  let g = 0;
  let b = 0;
  if (hsv.h < 60) {
    r = c;
    g = x;
    b = 0;
  } else if (hsv.h < 120) {
    r = x;
    g = c;
    b = 0;
  } else if (hsv.h < 180) {
    r = 0;
    g = c;
    b = x;
  } else if (hsv.h < 240) {
    r = 0;
    g = x;
    b = c;
  } else if (hsv.h < 300) {
    r = x;
    g = 0;
    b = c;
  } else if (hsv.h < 360) {
    r = c;
    g = 0;
    b = x;
  }
  return new ColorRGBA64(r + m, g + m, b + m, alpha);
}
function lchToLAB(lch) {
  let a = 0;
  let b = 0;
  if (lch.h !== 0) {
    a = Math.cos(degreesToRadians(lch.h)) * lch.c;
    b = Math.sin(degreesToRadians(lch.h)) * lch.c;
  }
  return new ColorLAB(lch.l, a, b);
}
function labToLCH(lab) {
  let h = 0;
  if (Math.abs(lab.b) > 1e-3 || Math.abs(lab.a) > 1e-3) {
    h = radiansToDegrees(Math.atan2(lab.b, lab.a));
  }
  if (h < 0) {
    h += 360;
  }
  const c = Math.sqrt(lab.a * lab.a + lab.b * lab.b);
  return new ColorLCH(lab.l, c, h);
}
function labToXYZ(lab) {
  const fy = (lab.l + 16) / 116;
  const fx = fy + lab.a / 500;
  const fz = fy - lab.b / 200;
  const xcubed = Math.pow(fx, 3);
  const ycubed = Math.pow(fy, 3);
  const zcubed = Math.pow(fz, 3);
  let x = 0;
  if (xcubed > ColorLAB.epsilon) {
    x = xcubed;
  } else {
    x = (116 * fx - 16) / ColorLAB.kappa;
  }
  let y = 0;
  if (lab.l > ColorLAB.epsilon * ColorLAB.kappa) {
    y = ycubed;
  } else {
    y = lab.l / ColorLAB.kappa;
  }
  let z = 0;
  if (zcubed > ColorLAB.epsilon) {
    z = zcubed;
  } else {
    z = (116 * fz - 16) / ColorLAB.kappa;
  }
  x = ColorXYZ.whitePoint.x * x;
  y = ColorXYZ.whitePoint.y * y;
  z = ColorXYZ.whitePoint.z * z;
  return new ColorXYZ(x, y, z);
}
function xyzToLAB(xyz) {
  function xyzToLABHelper(i) {
    if (i > ColorLAB.epsilon) {
      return Math.pow(i, 1 / 3);
    }
    return (ColorLAB.kappa * i + 16) / 116;
  }
  const x = xyzToLABHelper(xyz.x / ColorXYZ.whitePoint.x);
  const y = xyzToLABHelper(xyz.y / ColorXYZ.whitePoint.y);
  const z = xyzToLABHelper(xyz.z / ColorXYZ.whitePoint.z);
  const l = 116 * y - 16;
  const a = 500 * (x - y);
  const b = 200 * (y - z);
  return new ColorLAB(l, a, b);
}
function rgbToXYZ(rgb) {
  function rgbToXYZHelper(i) {
    if (i <= 0.04045) {
      return i / 12.92;
    }
    return Math.pow((i + 0.055) / 1.055, 2.4);
  }
  const r = rgbToXYZHelper(rgb.r);
  const g = rgbToXYZHelper(rgb.g);
  const b = rgbToXYZHelper(rgb.b);
  const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;
  const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;
  const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;
  return new ColorXYZ(x, y, z);
}
function xyzToRGB(xyz, alpha = 1) {
  function xyzToRGBHelper(i) {
    if (i <= 31308e-7) {
      return i * 12.92;
    }
    return 1.055 * Math.pow(i, 1 / 2.4) - 0.055;
  }
  const r = xyzToRGBHelper(xyz.x * 3.2404542 - xyz.y * 1.5371385 - xyz.z * 0.4985314);
  const g = xyzToRGBHelper(xyz.x * -0.969266 + xyz.y * 1.8760108 + xyz.z * 0.041556);
  const b = xyzToRGBHelper(xyz.x * 0.0556434 - xyz.y * 0.2040259 + xyz.z * 1.0572252);
  return new ColorRGBA64(r, g, b, alpha);
}
function rgbToLAB(rgb) {
  return xyzToLAB(rgbToXYZ(rgb));
}
function labToRGB(lab, alpha = 1) {
  return xyzToRGB(labToXYZ(lab), alpha);
}
function rgbToLCH(rgb) {
  return labToLCH(rgbToLAB(rgb));
}
function lchToRGB(lch, alpha = 1) {
  return labToRGB(lchToLAB(lch), alpha);
}

// node_modules/@microsoft/fast-colors/dist/color-blending.js
function saturateViaLCH(input, saturation, saturationConstant = 18) {
  const lch = rgbToLCH(input);
  let sat = lch.c + saturation * saturationConstant;
  if (sat < 0) {
    sat = 0;
  }
  return lchToRGB(new ColorLCH(lch.l, sat, lch.h));
}
function blendMultiplyChannel(bottom, top) {
  return bottom * top;
}
function blendMultiply(bottom, top) {
  return new ColorRGBA64(blendMultiplyChannel(bottom.r, top.r), blendMultiplyChannel(bottom.g, top.g), blendMultiplyChannel(bottom.b, top.b), 1);
}
function blendOverlayChannel(bottom, top) {
  if (bottom < 0.5) {
    return clamp2(2 * top * bottom, 0, 1);
  }
  return clamp2(1 - 2 * (1 - top) * (1 - bottom), 0, 1);
}
function blendOverlay(bottom, top) {
  return new ColorRGBA64(blendOverlayChannel(bottom.r, top.r), blendOverlayChannel(bottom.g, top.g), blendOverlayChannel(bottom.b, top.b), 1);
}
var ColorBlendMode;
(function(ColorBlendMode2) {
  ColorBlendMode2[ColorBlendMode2["Burn"] = 0] = "Burn";
  ColorBlendMode2[ColorBlendMode2["Color"] = 1] = "Color";
  ColorBlendMode2[ColorBlendMode2["Darken"] = 2] = "Darken";
  ColorBlendMode2[ColorBlendMode2["Dodge"] = 3] = "Dodge";
  ColorBlendMode2[ColorBlendMode2["Lighten"] = 4] = "Lighten";
  ColorBlendMode2[ColorBlendMode2["Multiply"] = 5] = "Multiply";
  ColorBlendMode2[ColorBlendMode2["Overlay"] = 6] = "Overlay";
  ColorBlendMode2[ColorBlendMode2["Screen"] = 7] = "Screen";
})(ColorBlendMode || (ColorBlendMode = {}));

// node_modules/@microsoft/fast-colors/dist/color-interpolation.js
function interpolateRGB(position, left, right) {
  if (isNaN(position) || position <= 0) {
    return left;
  } else if (position >= 1) {
    return right;
  }
  return new ColorRGBA64(lerp(position, left.r, right.r), lerp(position, left.g, right.g), lerp(position, left.b, right.b), lerp(position, left.a, right.a));
}
function interpolateHSL(position, left, right) {
  if (isNaN(position) || position <= 0) {
    return left;
  } else if (position >= 1) {
    return right;
  }
  return new ColorHSL(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.l, right.l));
}
function interpolateHSV(position, left, right) {
  if (isNaN(position) || position <= 0) {
    return left;
  } else if (position >= 1) {
    return right;
  }
  return new ColorHSV(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.v, right.v));
}
function interpolateXYZ(position, left, right) {
  if (isNaN(position) || position <= 0) {
    return left;
  } else if (position >= 1) {
    return right;
  }
  return new ColorXYZ(lerp(position, left.x, right.x), lerp(position, left.y, right.y), lerp(position, left.z, right.z));
}
function interpolateLAB(position, left, right) {
  if (isNaN(position) || position <= 0) {
    return left;
  } else if (position >= 1) {
    return right;
  }
  return new ColorLAB(lerp(position, left.l, right.l), lerp(position, left.a, right.a), lerp(position, left.b, right.b));
}
function interpolateLCH(position, left, right) {
  if (isNaN(position) || position <= 0) {
    return left;
  } else if (position >= 1) {
    return right;
  }
  return new ColorLCH(lerp(position, left.l, right.l), lerp(position, left.c, right.c), lerpAnglesInDegrees(position, left.h, right.h));
}
var ColorInterpolationSpace;
(function(ColorInterpolationSpace2) {
  ColorInterpolationSpace2[ColorInterpolationSpace2["RGB"] = 0] = "RGB";
  ColorInterpolationSpace2[ColorInterpolationSpace2["HSL"] = 1] = "HSL";
  ColorInterpolationSpace2[ColorInterpolationSpace2["HSV"] = 2] = "HSV";
  ColorInterpolationSpace2[ColorInterpolationSpace2["XYZ"] = 3] = "XYZ";
  ColorInterpolationSpace2[ColorInterpolationSpace2["LAB"] = 4] = "LAB";
  ColorInterpolationSpace2[ColorInterpolationSpace2["LCH"] = 5] = "LCH";
})(ColorInterpolationSpace || (ColorInterpolationSpace = {}));
function interpolateByColorSpace(position, space, left, right) {
  if (isNaN(position) || position <= 0) {
    return left;
  } else if (position >= 1) {
    return right;
  }
  switch (space) {
    case ColorInterpolationSpace.HSL:
      return hslToRGB(interpolateHSL(position, rgbToHSL(left), rgbToHSL(right)));
    case ColorInterpolationSpace.HSV:
      return hsvToRGB(interpolateHSV(position, rgbToHSV(left), rgbToHSV(right)));
    case ColorInterpolationSpace.XYZ:
      return xyzToRGB(interpolateXYZ(position, rgbToXYZ(left), rgbToXYZ(right)));
    case ColorInterpolationSpace.LAB:
      return labToRGB(interpolateLAB(position, rgbToLAB(left), rgbToLAB(right)));
    case ColorInterpolationSpace.LCH:
      return lchToRGB(interpolateLCH(position, rgbToLCH(left), rgbToLCH(right)));
    default:
      return interpolateRGB(position, left, right);
  }
}

// node_modules/@microsoft/fast-colors/dist/color-scale.js
var ColorScale = class {
  constructor(stops) {
    if (stops == null || stops.length === 0) {
      throw new Error("The stops argument must be non-empty");
    } else {
      this.stops = this.sortColorScaleStops(stops);
    }
  }
  static createBalancedColorScale(colors) {
    if (colors == null || colors.length === 0) {
      throw new Error("The colors argument must be non-empty");
    }
    const stops = new Array(colors.length);
    for (let i = 0; i < colors.length; i++) {
      if (i === 0) {
        stops[i] = { color: colors[i], position: 0 };
      } else if (i === colors.length - 1) {
        stops[i] = { color: colors[i], position: 1 };
      } else {
        stops[i] = {
          color: colors[i],
          position: i * (1 / (colors.length - 1))
        };
      }
    }
    return new ColorScale(stops);
  }
  getColor(position, interpolationMode = ColorInterpolationSpace.RGB) {
    if (this.stops.length === 1) {
      return this.stops[0].color;
    } else if (position <= 0) {
      return this.stops[0].color;
    } else if (position >= 1) {
      return this.stops[this.stops.length - 1].color;
    }
    let lowerIndex = 0;
    for (let i = 0; i < this.stops.length; i++) {
      if (this.stops[i].position <= position) {
        lowerIndex = i;
      }
    }
    let upperIndex = lowerIndex + 1;
    if (upperIndex >= this.stops.length) {
      upperIndex = this.stops.length - 1;
    }
    const scalePosition = (position - this.stops[lowerIndex].position) * (1 / (this.stops[upperIndex].position - this.stops[lowerIndex].position));
    return interpolateByColorSpace(scalePosition, interpolationMode, this.stops[lowerIndex].color, this.stops[upperIndex].color);
  }
  trim(lowerBound, upperBound, interpolationMode = ColorInterpolationSpace.RGB) {
    if (lowerBound < 0 || upperBound > 1 || upperBound < lowerBound) {
      throw new Error("Invalid bounds");
    }
    if (lowerBound === upperBound) {
      return new ColorScale([
        { color: this.getColor(lowerBound, interpolationMode), position: 0 }
      ]);
    }
    const containedStops = [];
    for (let i = 0; i < this.stops.length; i++) {
      if (this.stops[i].position >= lowerBound && this.stops[i].position <= upperBound) {
        containedStops.push(this.stops[i]);
      }
    }
    if (containedStops.length === 0) {
      return new ColorScale([
        { color: this.getColor(lowerBound), position: lowerBound },
        { color: this.getColor(upperBound), position: upperBound }
      ]);
    }
    if (containedStops[0].position !== lowerBound) {
      containedStops.unshift({
        color: this.getColor(lowerBound),
        position: lowerBound
      });
    }
    if (containedStops[containedStops.length - 1].position !== upperBound) {
      containedStops.push({
        color: this.getColor(upperBound),
        position: upperBound
      });
    }
    const range3 = upperBound - lowerBound;
    const finalStops = new Array(containedStops.length);
    for (let i = 0; i < containedStops.length; i++) {
      finalStops[i] = {
        color: containedStops[i].color,
        position: (containedStops[i].position - lowerBound) / range3
      };
    }
    return new ColorScale(finalStops);
  }
  findNextColor(position, contrast2, searchDown = false, interpolationMode = ColorInterpolationSpace.RGB, contrastErrorMargin = 5e-3, maxSearchIterations = 32) {
    if (isNaN(position) || position <= 0) {
      position = 0;
    } else if (position >= 1) {
      position = 1;
    }
    const startingColor = this.getColor(position, interpolationMode);
    const finalPosition = searchDown ? 0 : 1;
    const finalColor = this.getColor(finalPosition, interpolationMode);
    const finalContrast = contrastRatio(startingColor, finalColor);
    if (finalContrast <= contrast2) {
      return finalPosition;
    }
    let testRangeMin = searchDown ? 0 : position;
    let testRangeMax = searchDown ? position : 0;
    let mid = finalPosition;
    let iterations = 0;
    while (iterations <= maxSearchIterations) {
      mid = Math.abs(testRangeMax - testRangeMin) / 2 + testRangeMin;
      const midColor = this.getColor(mid, interpolationMode);
      const midContrast = contrastRatio(startingColor, midColor);
      if (Math.abs(midContrast - contrast2) <= contrastErrorMargin) {
        return mid;
      } else if (midContrast > contrast2) {
        if (searchDown) {
          testRangeMin = mid;
        } else {
          testRangeMax = mid;
        }
      } else {
        if (searchDown) {
          testRangeMax = mid;
        } else {
          testRangeMin = mid;
        }
      }
      iterations++;
    }
    return mid;
  }
  clone() {
    const newStops = new Array(this.stops.length);
    for (let i = 0; i < newStops.length; i++) {
      newStops[i] = {
        color: this.stops[i].color,
        position: this.stops[i].position
      };
    }
    return new ColorScale(newStops);
  }
  sortColorScaleStops(stops) {
    return stops.sort((a, b) => {
      const A = a.position;
      const B = b.position;
      if (A < B) {
        return -1;
      } else if (A > B) {
        return 1;
      } else {
        return 0;
      }
    });
  }
};

// node_modules/@microsoft/fast-colors/dist/parse-color.js
var webRGBRegex = /^rgb\(\s*((?:(?:25[0-5]|2[0-4]\d|1\d\d|\d{1,2})\s*,\s*){2}(?:25[0-5]|2[0-4]\d|1\d\d|\d{1,2})\s*)\)$/i;
var hexRGBRegex = /^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i;
function isColorStringHexRGB(raw) {
  return hexRGBRegex.test(raw);
}
function isColorStringWebRGB(raw) {
  return webRGBRegex.test(raw);
}
function parseColorHexRGB(raw) {
  const result2 = hexRGBRegex.exec(raw);
  if (result2 === null) {
    return null;
  }
  let digits = result2[1];
  if (digits.length === 3) {
    const r = digits.charAt(0);
    const g = digits.charAt(1);
    const b = digits.charAt(2);
    digits = r.concat(r, g, g, b, b);
  }
  const rawInt = parseInt(digits, 16);
  if (isNaN(rawInt)) {
    return null;
  }
  return new ColorRGBA64(normalize((rawInt & 16711680) >>> 16, 0, 255), normalize((rawInt & 65280) >>> 8, 0, 255), normalize(rawInt & 255, 0, 255), 1);
}
function parseColorWebRGB(raw) {
  const result2 = webRGBRegex.exec(raw);
  if (result2 === null) {
    return null;
  }
  const split2 = result2[1].split(",");
  return new ColorRGBA64(normalize(Number(split2[0]), 0, 255), normalize(Number(split2[1]), 0, 255), normalize(Number(split2[2]), 0, 255), 1);
}

// node_modules/@microsoft/fast-colors/dist/color-palette.js
var ColorPalette = class {
  constructor(config) {
    this.config = Object.assign({}, ColorPalette.defaultPaletteConfig, config);
    this.palette = [];
    this.updatePaletteColors();
  }
  updatePaletteGenerationValues(newConfig) {
    let changed = false;
    for (const key in newConfig) {
      if (this.config[key]) {
        if (this.config[key].equalValue) {
          if (!this.config[key].equalValue(newConfig[key])) {
            this.config[key] = newConfig[key];
            changed = true;
          }
        } else {
          if (newConfig[key] !== this.config[key]) {
            this.config[key] = newConfig[key];
            changed = true;
          }
        }
      }
    }
    if (changed) {
      this.updatePaletteColors();
    }
    return changed;
  }
  updatePaletteColors() {
    const scale = this.generatePaletteColorScale();
    for (let i = 0; i < this.config.steps; i++) {
      this.palette[i] = scale.getColor(i / (this.config.steps - 1), this.config.interpolationMode);
    }
  }
  generatePaletteColorScale() {
    const baseColorHSL = rgbToHSL(this.config.baseColor);
    const baseScale = new ColorScale([
      { position: 0, color: this.config.scaleColorLight },
      { position: 0.5, color: this.config.baseColor },
      { position: 1, color: this.config.scaleColorDark }
    ]);
    const trimmedScale = baseScale.trim(this.config.clipLight, 1 - this.config.clipDark);
    const trimmedLight = trimmedScale.getColor(0);
    const trimmedDark = trimmedScale.getColor(1);
    let adjustedLight = trimmedLight;
    let adjustedDark = trimmedDark;
    if (baseColorHSL.s >= this.config.saturationAdjustmentCutoff) {
      adjustedLight = saturateViaLCH(adjustedLight, this.config.saturationLight);
      adjustedDark = saturateViaLCH(adjustedDark, this.config.saturationDark);
    }
    if (this.config.multiplyLight !== 0) {
      const multiply3 = blendMultiply(this.config.baseColor, adjustedLight);
      adjustedLight = interpolateByColorSpace(this.config.multiplyLight, this.config.interpolationMode, adjustedLight, multiply3);
    }
    if (this.config.multiplyDark !== 0) {
      const multiply3 = blendMultiply(this.config.baseColor, adjustedDark);
      adjustedDark = interpolateByColorSpace(this.config.multiplyDark, this.config.interpolationMode, adjustedDark, multiply3);
    }
    if (this.config.overlayLight !== 0) {
      const overlay = blendOverlay(this.config.baseColor, adjustedLight);
      adjustedLight = interpolateByColorSpace(this.config.overlayLight, this.config.interpolationMode, adjustedLight, overlay);
    }
    if (this.config.overlayDark !== 0) {
      const overlay = blendOverlay(this.config.baseColor, adjustedDark);
      adjustedDark = interpolateByColorSpace(this.config.overlayDark, this.config.interpolationMode, adjustedDark, overlay);
    }
    if (this.config.baseScalePosition) {
      if (this.config.baseScalePosition <= 0) {
        return new ColorScale([
          { position: 0, color: this.config.baseColor },
          { position: 1, color: adjustedDark.clamp() }
        ]);
      } else if (this.config.baseScalePosition >= 1) {
        return new ColorScale([
          { position: 0, color: adjustedLight.clamp() },
          { position: 1, color: this.config.baseColor }
        ]);
      }
      return new ColorScale([
        { position: 0, color: adjustedLight.clamp() },
        {
          position: this.config.baseScalePosition,
          color: this.config.baseColor
        },
        { position: 1, color: adjustedDark.clamp() }
      ]);
    }
    return new ColorScale([
      { position: 0, color: adjustedLight.clamp() },
      { position: 0.5, color: this.config.baseColor },
      { position: 1, color: adjustedDark.clamp() }
    ]);
  }
};
ColorPalette.defaultPaletteConfig = {
  baseColor: parseColorHexRGB("#808080"),
  steps: 11,
  interpolationMode: ColorInterpolationSpace.RGB,
  scaleColorLight: new ColorRGBA64(1, 1, 1, 1),
  scaleColorDark: new ColorRGBA64(0, 0, 0, 1),
  clipLight: 0.185,
  clipDark: 0.16,
  saturationAdjustmentCutoff: 0.05,
  saturationLight: 0.35,
  saturationDark: 1.25,
  overlayLight: 0,
  overlayDark: 0.25,
  multiplyLight: 0,
  multiplyDark: 0,
  baseScalePosition: 0.5
};
ColorPalette.greyscalePaletteConfig = {
  baseColor: parseColorHexRGB("#808080"),
  steps: 11,
  interpolationMode: ColorInterpolationSpace.RGB,
  scaleColorLight: new ColorRGBA64(1, 1, 1, 1),
  scaleColorDark: new ColorRGBA64(0, 0, 0, 1),
  clipLight: 0,
  clipDark: 0,
  saturationAdjustmentCutoff: 0,
  saturationLight: 0,
  saturationDark: 0,
  overlayLight: 0,
  overlayDark: 0,
  multiplyLight: 0,
  multiplyDark: 0,
  baseScalePosition: 0.5
};
var defaultCenteredRescaleConfig = {
  targetSize: 63,
  spacing: 4,
  scaleColorLight: ColorPalette.defaultPaletteConfig.scaleColorLight,
  scaleColorDark: ColorPalette.defaultPaletteConfig.scaleColorDark
};

// node_modules/@microsoft/fast-colors/dist/component-state-color-palette.js
var ComponentStateColorPalette = class {
  constructor(config) {
    this.palette = [];
    this.config = Object.assign({}, ComponentStateColorPalette.defaultPaletteConfig, config);
    this.regenPalettes();
  }
  regenPalettes() {
    let steps = this.config.steps;
    if (isNaN(steps) || steps < 3) {
      steps = 3;
    }
    const darkLum = 0.14;
    const darkestLum = 0.06;
    const darkLumColor = new ColorRGBA64(darkLum, darkLum, darkLum, 1);
    const stepsForLuminanceRamp = 94;
    const r = new ColorPalette(Object.assign(Object.assign({}, ColorPalette.greyscalePaletteConfig), { baseColor: darkLumColor, baseScalePosition: (1 - darkLum) * 100 / stepsForLuminanceRamp, steps }));
    const referencePalette = r.palette;
    const baseColorLum1 = rgbToLinearLuminance(this.config.baseColor);
    const baseColorLum2 = rgbToHSL(this.config.baseColor).l;
    const baseColorLum = (baseColorLum1 + baseColorLum2) / 2;
    const baseColorRefIndex = this.matchRelativeLuminanceIndex(baseColorLum, referencePalette);
    const baseColorPercent = baseColorRefIndex / (steps - 1);
    const darkRefIndex = this.matchRelativeLuminanceIndex(darkLum, referencePalette);
    const darkPercent = darkRefIndex / (steps - 1);
    const baseColorHSL = rgbToHSL(this.config.baseColor);
    const darkBaseColor = hslToRGB(ColorHSL.fromObject({
      h: baseColorHSL.h,
      s: baseColorHSL.s,
      l: darkLum
    }));
    const darkestBaseColor = hslToRGB(ColorHSL.fromObject({
      h: baseColorHSL.h,
      s: baseColorHSL.s,
      l: darkestLum
    }));
    const fullColorScaleStops = new Array(5);
    fullColorScaleStops[0] = {
      position: 0,
      color: new ColorRGBA64(1, 1, 1, 1)
    };
    fullColorScaleStops[1] = {
      position: baseColorPercent,
      color: this.config.baseColor
    };
    fullColorScaleStops[2] = {
      position: darkPercent,
      color: darkBaseColor
    };
    fullColorScaleStops[3] = {
      position: 0.99,
      color: darkestBaseColor
    };
    fullColorScaleStops[4] = {
      position: 1,
      color: new ColorRGBA64(0, 0, 0, 1)
    };
    const scale = new ColorScale(fullColorScaleStops);
    this.palette = new Array(steps);
    for (let i = 0; i < steps; i++) {
      const c = scale.getColor(i / (steps - 1), ColorInterpolationSpace.RGB);
      this.palette[i] = c;
    }
  }
  matchRelativeLuminanceIndex(input, reference) {
    let bestFitValue = Number.MAX_VALUE;
    let bestFitIndex = 0;
    let i = 0;
    const referenceLength = reference.length;
    for (; i < referenceLength; i++) {
      const fitValue = Math.abs(rgbToLinearLuminance(reference[i]) - input);
      if (fitValue < bestFitValue) {
        bestFitValue = fitValue;
        bestFitIndex = i;
      }
    }
    return bestFitIndex;
  }
};
ComponentStateColorPalette.defaultPaletteConfig = {
  baseColor: parseColorHexRGB("#808080"),
  steps: 94
};

// node_modules/@fluentui/web-components/dist/esm/color/common.js
var SwatchFamilyType;
(function(SwatchFamilyType2) {
  SwatchFamilyType2["rest"] = "rest";
  SwatchFamilyType2["hover"] = "hover";
  SwatchFamilyType2["active"] = "active";
  SwatchFamilyType2["focus"] = "focus";
  SwatchFamilyType2["selected"] = "selected";
})(SwatchFamilyType || (SwatchFamilyType = {}));
function colorRecipeFactory(recipe) {
  const memoizedRecipe = memoize_default(recipe);
  function curryRecipe(arg) {
    if (typeof arg === "function") {
      return (designSystem) => {
        return memoizedRecipe(Object.assign({}, designSystem, {
          backgroundColor: arg(designSystem)
        }));
      };
    } else {
      return memoizedRecipe(arg);
    }
  }
  return curryRecipe;
}
function swatchFamilyToSwatchRecipeFactory(type, callback) {
  const memoizedRecipe = memoize_default(callback);
  return (arg) => {
    if (typeof arg === "function") {
      return (designSystem) => {
        return memoizedRecipe(Object.assign({}, designSystem, {
          backgroundColor: arg(designSystem)
        }))[type];
      };
    } else {
      return memoizedRecipe(arg)[type];
    }
  };
}
var cache2 = /* @__PURE__ */ new Map();
function parseColorString(color2) {
  const cached = cache2.get(color2);
  if (!cached) {
    let parsed = parseColorHexRGB(color2);
    if (parsed === null) {
      parsed = parseColorWebRGB(color2);
    }
    if (parsed === null) {
      throw new Error(`${color2} cannot be converted to a ColorRGBA64. Color strings must be one of the following formats: "#RGB", "#RRGGBB", or "rgb(r, g, b)"`);
    }
    cache2.set(color2, parsed);
    return parsed;
  }
  return cached;
}
function isValidColor(color2) {
  return isColorStringHexRGB(color2) || isColorStringWebRGB(color2);
}
function colorMatches(a, b) {
  return parseColorString(a).equalValue(parseColorString(b));
}
var contrast = memoize_default((a, b) => {
  return contrastRatio(parseColorString(a), parseColorString(b));
}, (a, b) => a + b);
function luminance(color2) {
  return rgbToRelativeLuminance(parseColorString(color2));
}
function designSystemResolverMax(...args) {
  return (designSystem) => Math.max.apply(null, args.map((fn) => fn(designSystem)));
}
var clamp3 = (value, min2, max2) => Math.min(Math.max(value, min2), max2);

// node_modules/@fluentui/web-components/dist/esm/color/palette.js
var PaletteType;
(function(PaletteType2) {
  PaletteType2["neutral"] = "neutral";
  PaletteType2["accent"] = "accent";
})(PaletteType || (PaletteType = {}));
function findSwatchIndex(paletteResolver, swatch) {
  return (designSystem) => {
    if (!isValidColor(swatch)) {
      return -1;
    }
    const colorPalette = evaluateDesignSystemResolver(paletteResolver, designSystem);
    const index = colorPalette.indexOf(swatch);
    return index !== -1 ? index : colorPalette.findIndex((paletteSwatch) => {
      return isValidColor(paletteSwatch) && colorMatches(swatch, paletteSwatch);
    });
  };
}
function findClosestSwatchIndex(paletteResolver, swatch) {
  return (designSystem) => {
    const resolvedPalette = evaluateDesignSystemResolver(paletteResolver, designSystem);
    const resolvedSwatch = evaluateDesignSystemResolver(swatch, designSystem);
    const index = findSwatchIndex(resolvedPalette, resolvedSwatch)(designSystem);
    let swatchLuminance;
    if (index !== -1) {
      return index;
    }
    try {
      swatchLuminance = luminance(resolvedSwatch);
    } catch (e) {
      swatchLuminance = -1;
    }
    if (swatchLuminance === -1) {
      return 0;
    }
    return resolvedPalette.map((mappedSwatch, mappedIndex) => {
      return {
        luminance: luminance(mappedSwatch),
        index: mappedIndex
      };
    }).reduce((previousValue, currentValue) => {
      return Math.abs(currentValue.luminance - swatchLuminance) < Math.abs(previousValue.luminance - swatchLuminance) ? currentValue : previousValue;
    }).index;
  };
}
function isDarkMode(designSystem) {
  return luminance(backgroundColor(designSystem)) <= (-0.1 + Math.sqrt(0.21)) / 2;
}
function getSwatch(index, colorPalette) {
  if (typeof index === "function") {
    return (designSystem) => {
      return colorPalette(designSystem)[clamp3(index(designSystem), 0, colorPalette(designSystem).length - 1)];
    };
  } else {
    return colorPalette[clamp3(index, 0, colorPalette.length - 1)];
  }
}
function swatchByMode(paletteResolver) {
  return (valueA, valueB) => {
    return (designSystem) => {
      return getSwatch(isDarkMode(designSystem) ? evaluateDesignSystemResolver(valueB, designSystem) : evaluateDesignSystemResolver(valueA, designSystem), paletteResolver(designSystem));
    };
  };
}
function binarySearch(valuesToSearch, searchCondition, startIndex = 0, endIndex = valuesToSearch.length - 1) {
  if (endIndex === startIndex) {
    return valuesToSearch[startIndex];
  }
  const middleIndex = Math.floor((endIndex - startIndex) / 2) + startIndex;
  if (searchCondition(valuesToSearch[middleIndex])) {
    return binarySearch(valuesToSearch, searchCondition, startIndex, middleIndex);
  } else {
    return binarySearch(
      valuesToSearch,
      searchCondition,
      middleIndex + 1,
      // exclude this index because it failed the search condition
      endIndex
    );
  }
}
function swatchByContrast(referenceColor) {
  return (paletteResolver) => {
    return (indexResolver) => {
      return (directionResolver) => {
        return (contrastCondition) => {
          return (designSystem) => {
            const color2 = evaluateDesignSystemResolver(referenceColor, designSystem);
            const sourcePalette = evaluateDesignSystemResolver(paletteResolver, designSystem);
            const length = sourcePalette.length;
            const initialSearchIndex = clamp3(indexResolver(color2, sourcePalette, designSystem), 0, length - 1);
            const direction2 = directionResolver(initialSearchIndex, sourcePalette, designSystem);
            function contrastSearchCondition(valueToCheckAgainst) {
              return contrastCondition(contrast(color2, valueToCheckAgainst));
            }
            const constrainedSourcePalette = [].concat(sourcePalette);
            const endSearchIndex = length - 1;
            let startSearchIndex = initialSearchIndex;
            if (direction2 === -1) {
              constrainedSourcePalette.reverse();
              startSearchIndex = endSearchIndex - startSearchIndex;
            }
            return binarySearch(constrainedSourcePalette, contrastSearchCondition, startSearchIndex, endSearchIndex);
          };
        };
      };
    };
  };
}
function referenceColorInitialIndexResolver(referenceColor, sourcePalette, designSystem) {
  return findClosestSwatchIndex(sourcePalette, referenceColor)(designSystem);
}
function findClosestBackgroundIndex(designSystem) {
  return findClosestSwatchIndex(neutralPalette2, backgroundColor(designSystem))(designSystem);
}
function minContrastTargetFactory(targetContrast) {
  return (instanceContrast) => instanceContrast >= targetContrast;
}

// node_modules/@fluentui/web-components/dist/esm/color/accessible-recipe.js
function indexToSwatchFamily(accessibleIndex, palette2, direction2, restDelta, hoverDelta, activeDelta, focusDelta) {
  const accessibleIndex2 = accessibleIndex + direction2 * Math.abs(restDelta - hoverDelta);
  const indexOneIsRestState = direction2 === 1 ? restDelta < hoverDelta : direction2 * restDelta > direction2 * hoverDelta;
  const restIndex = indexOneIsRestState ? accessibleIndex : accessibleIndex2;
  const hoverIndex = indexOneIsRestState ? accessibleIndex2 : accessibleIndex;
  const activeIndex = restIndex + direction2 * activeDelta;
  const focusIndex = restIndex + direction2 * focusDelta;
  return {
    rest: getSwatch(restIndex, palette2),
    hover: getSwatch(hoverIndex, palette2),
    active: getSwatch(activeIndex, palette2),
    focus: getSwatch(focusIndex, palette2)
  };
}
function accessibleAlgorithm(palette2, minContrast, restDelta, hoverDelta, activeDelta, focusDelta) {
  return (designSystem) => {
    const resolvedPalette = evaluateDesignSystemResolver(palette2, designSystem);
    const direction2 = isDarkMode(designSystem) ? -1 : 1;
    const accessibleSwatch = swatchByContrast(backgroundColor)(resolvedPalette)(referenceColorInitialIndexResolver)(() => direction2)(minContrastTargetFactory(evaluateDesignSystemResolver(minContrast, designSystem)))(designSystem);
    const accessibleIndex = findSwatchIndex(palette2, accessibleSwatch)(designSystem);
    const resolvedRest = evaluateDesignSystemResolver(restDelta, designSystem);
    const resolvedHover = evaluateDesignSystemResolver(hoverDelta, designSystem);
    const resolvedActive = evaluateDesignSystemResolver(activeDelta, designSystem);
    const resolvedFocus = evaluateDesignSystemResolver(focusDelta, designSystem);
    return indexToSwatchFamily(accessibleIndex, resolvedPalette, direction2, resolvedRest, resolvedHover, resolvedActive, resolvedFocus);
  };
}

// node_modules/@fluentui/web-components/dist/esm/color/neutral-foreground.js
var neutralForeground = colorRecipeFactory(accessibleAlgorithm(neutralPalette2, 14, 0, neutralForegroundHoverDelta, neutralForegroundActiveDelta, neutralForegroundFocusDelta));
var neutralForegroundRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, neutralForeground);
var neutralForegroundHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, neutralForeground);
var neutralForegroundActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, neutralForeground);
var neutralForegroundFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, neutralForeground);

// node_modules/@fluentui/web-components/dist/esm/color/color-constants.js
var white = "#FFFFFF";
var black = "#000000";

// node_modules/@fluentui/web-components/dist/esm/color/neutral-fill-toggle.js
var neutralFillToggle = colorRecipeFactory(accessibleAlgorithm(neutralPalette2, 4.5, 0, neutralFillToggleHoverDelta, neutralFillToggleActiveDelta, neutralFillToggleFocusDelta));
var neutralFillToggleRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, neutralFillToggle);
var neutralFillToggleHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, neutralFillToggle);
var neutralFillToggleActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, neutralFillToggle);
var neutralFillToggleFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, neutralFillToggle);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-foreground-toggle.js
var neutralForegroundToggleAlgorithm = (backgroundColor2, targetContrast) => {
  return contrast(white, backgroundColor2) >= targetContrast ? white : black;
};
function neutralForegroundToggleFactory(targetContrast) {
  function neutralForegroundToggleInternal(arg) {
    return typeof arg === "function" ? (designSystem) => {
      return neutralForegroundToggleAlgorithm(arg(designSystem), targetContrast);
    } : neutralForegroundToggleAlgorithm(neutralFillToggleRest(arg), targetContrast);
  }
  return neutralForegroundToggleInternal;
}
var neutralForegroundToggle = neutralForegroundToggleFactory(4.5);
var neutralForegroundToggleLarge = neutralForegroundToggleFactory(3);

// node_modules/@fluentui/web-components/dist/esm/color/accent-foreground-cut.js
var accentForegroundCutAlgorithm = (backgroundColor2, targetContrast) => {
  return contrast(white, backgroundColor2) >= targetContrast ? white : black;
};
function accentForegroundCutFactory(targetContrast) {
  function accentForegroundCutInternal(arg) {
    return typeof arg === "function" ? (designSystem) => {
      return accentForegroundCutAlgorithm(arg(designSystem), targetContrast);
    } : accentForegroundCutAlgorithm(accentBaseColor(arg), targetContrast);
  }
  return accentForegroundCutInternal;
}
var accentForegroundCut = accentForegroundCutFactory(4.5);
var accentForegroundCutLarge = accentForegroundCutFactory(3);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-foreground-hint.js
function neutralForegroundHintAlgorithm(targetContrast) {
  return accessibleAlgorithm(neutralPalette2, targetContrast, 0, 0, 0, 0);
}
var neutralForegroundHint = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, colorRecipeFactory(neutralForegroundHintAlgorithm(4.5)));
var neutralForegroundHintLarge = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, colorRecipeFactory(neutralForegroundHintAlgorithm(3)));

// node_modules/@fluentui/web-components/dist/esm/color/accent-foreground.js
function accentForegroundAlgorithm(contrastTarget) {
  return (designSystem) => {
    const palette2 = accentPalette2(designSystem);
    const accent = accentBaseColor(designSystem);
    const accentIndex = findClosestSwatchIndex(accentPalette2, accent)(designSystem);
    const stateDeltas = {
      rest: accentForegroundRestDelta(designSystem),
      hover: accentForegroundHoverDelta(designSystem),
      active: accentForegroundActiveDelta(designSystem),
      focus: accentForegroundFocusDelta(designSystem)
    };
    const direction2 = isDarkMode(designSystem) ? -1 : 1;
    const startIndex = accentIndex + (direction2 === 1 ? Math.min(stateDeltas.rest, stateDeltas.hover) : Math.max(direction2 * stateDeltas.rest, direction2 * stateDeltas.hover));
    const accessibleSwatch = swatchByContrast(backgroundColor)(accentPalette2)(() => startIndex)(() => direction2)((swatchContrast) => swatchContrast >= contrastTarget)(designSystem);
    const accessibleIndex1 = findSwatchIndex(accentPalette2, accessibleSwatch)(designSystem);
    const accessibleIndex2 = accessibleIndex1 + direction2 * Math.abs(stateDeltas.rest - stateDeltas.hover);
    const indexOneIsRestState = direction2 === 1 ? stateDeltas.rest < stateDeltas.hover : direction2 * stateDeltas.rest > direction2 * stateDeltas.hover;
    const restIndex = indexOneIsRestState ? accessibleIndex1 : accessibleIndex2;
    const hoverIndex = indexOneIsRestState ? accessibleIndex2 : accessibleIndex1;
    const activeIndex = restIndex + direction2 * stateDeltas.active;
    const focusIndex = restIndex + direction2 * stateDeltas.focus;
    return {
      rest: getSwatch(restIndex, palette2),
      hover: getSwatch(hoverIndex, palette2),
      active: getSwatch(activeIndex, palette2),
      focus: getSwatch(focusIndex, palette2)
    };
  };
}
var accentForeground = colorRecipeFactory(accentForegroundAlgorithm(4.5));
var accentForegroundLarge = colorRecipeFactory(accentForegroundAlgorithm(3));
var accentForegroundRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForeground);
var accentForegroundHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForeground);
var accentForegroundActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForeground);
var accentForegroundFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForeground);
var accentForegroundLargeRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForegroundLarge);
var accentForegroundLargeHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForegroundLarge);
var accentForegroundLargeActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForegroundLarge);
var accentForegroundLargeFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForegroundLarge);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-fill.js
var neutralFillThreshold = designSystemResolverMax(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta, neutralFillFocusDelta);
function neutralFillAlgorithm(deltaResolver) {
  return (designSystem) => {
    const backgroundIndex = findClosestBackgroundIndex(designSystem);
    const swapThreshold = neutralFillThreshold(designSystem);
    const direction2 = backgroundIndex >= swapThreshold ? -1 : 1;
    return getSwatch(backgroundIndex + direction2 * deltaResolver(designSystem), neutralPalette2(designSystem));
  };
}
var neutralFillRest = colorRecipeFactory(neutralFillAlgorithm(neutralFillRestDelta));
var neutralFillHover = colorRecipeFactory(neutralFillAlgorithm(neutralFillHoverDelta));
var neutralFillActive = colorRecipeFactory(neutralFillAlgorithm(neutralFillActiveDelta));
var neutralFillFocus = colorRecipeFactory(neutralFillAlgorithm(neutralFillFocusDelta));
var neutralFillSelected = colorRecipeFactory(neutralFillAlgorithm(neutralFillSelectedDelta));
var neutralFill = colorRecipeFactory((designSystem) => {
  return {
    rest: neutralFillRest(designSystem),
    hover: neutralFillHover(designSystem),
    active: neutralFillActive(designSystem),
    focus: neutralFillFocus(designSystem),
    selected: neutralFillSelected(designSystem)
  };
});

// node_modules/@fluentui/web-components/dist/esm/color/neutral-fill-stealth.js
var neutralFillStealthSwapThreshold = designSystemResolverMax(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta, neutralFillFocusDelta, neutralFillStealthRestDelta, neutralFillStealthHoverDelta, neutralFillStealthActiveDelta, neutralFillStealthFocusDelta);
function neutralFillStealthAlgorithm(deltaResolver) {
  return (designSystem) => {
    const backgroundIndex = findClosestBackgroundIndex(designSystem);
    const swapThreshold = neutralFillStealthSwapThreshold(designSystem);
    const direction2 = backgroundIndex >= swapThreshold ? -1 : 1;
    return getSwatch(backgroundIndex + direction2 * deltaResolver(designSystem), neutralPalette2(designSystem));
  };
}
var neutralFillStealthRest = colorRecipeFactory(neutralFillStealthAlgorithm(neutralFillStealthRestDelta));
var neutralFillStealthHover = colorRecipeFactory(neutralFillStealthAlgorithm(neutralFillStealthHoverDelta));
var neutralFillStealthActive = colorRecipeFactory(neutralFillStealthAlgorithm(neutralFillStealthActiveDelta));
var neutralFillStealthFocus = colorRecipeFactory(neutralFillStealthAlgorithm(neutralFillStealthFocusDelta));
var neutralFillStealthSelected = colorRecipeFactory(neutralFillStealthAlgorithm(neutralFillStealthSelectedDelta));
var neutralFillStealth = colorRecipeFactory((designSystem) => {
  return {
    rest: neutralFillStealthRest(designSystem),
    hover: neutralFillStealthHover(designSystem),
    active: neutralFillStealthActive(designSystem),
    focus: neutralFillStealthFocus(designSystem),
    selected: neutralFillStealthSelected(designSystem)
  };
});

// node_modules/@fluentui/web-components/dist/esm/color/neutral-fill-input.js
function neutralFillInputAlgorithm(indexResolver) {
  return (designSystem) => {
    const direction2 = isDarkMode(designSystem) ? -1 : 1;
    return getSwatch(findClosestBackgroundIndex(designSystem) - indexResolver(designSystem) * direction2, neutralPalette2(designSystem));
  };
}
var neutralFillInputRest = colorRecipeFactory(neutralFillInputAlgorithm(neutralFillInputRestDelta));
var neutralFillInputHover = colorRecipeFactory(neutralFillInputAlgorithm(neutralFillInputHoverDelta));
var neutralFillInputActive = colorRecipeFactory(neutralFillInputAlgorithm(neutralFillInputActiveDelta));
var neutralFillInputFocus = colorRecipeFactory(neutralFillInputAlgorithm(neutralFillInputFocusDelta));
var neutralFillInputSelected = colorRecipeFactory(neutralFillInputAlgorithm(neutralFillInputSelectedDelta));
var neutralFillInput = colorRecipeFactory((designSystem) => {
  return {
    rest: neutralFillInputRest(designSystem),
    hover: neutralFillInputHover(designSystem),
    active: neutralFillInputActive(designSystem),
    focus: neutralFillInputFocus(designSystem),
    selected: neutralFillInputSelected(designSystem)
  };
});

// node_modules/@fluentui/web-components/dist/esm/color/accent-fill.js
var neutralFillThreshold2 = designSystemResolverMax(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta);
function accentFillAlgorithm(contrastTarget) {
  return (designSystem) => {
    const palette2 = accentPalette2(designSystem);
    const paletteLength = palette2.length;
    const accent = accentBaseColor(designSystem);
    const textColor = accentForegroundCut(Object.assign({}, designSystem, {
      backgroundColor: accent
    }));
    const hoverDelta = accentFillHoverDelta(designSystem);
    const backgroundIndex = findClosestBackgroundIndex(designSystem);
    const swapThreshold = neutralFillThreshold2(designSystem);
    const direction2 = backgroundIndex >= swapThreshold ? -1 : 1;
    const maxIndex = paletteLength - 1;
    const accentIndex = findClosestSwatchIndex(accentPalette2, accent)(designSystem);
    let accessibleOffset = 0;
    while (accessibleOffset < direction2 * hoverDelta && inRange_default(accentIndex + accessibleOffset + direction2, 0, paletteLength) && contrast(palette2[accentIndex + accessibleOffset + direction2], textColor) >= contrastTarget && inRange_default(accentIndex + accessibleOffset + direction2 + direction2, 0, maxIndex)) {
      accessibleOffset += direction2;
    }
    const hoverIndex = accentIndex + accessibleOffset;
    const restIndex = hoverIndex + direction2 * -1 * hoverDelta;
    const activeIndex = restIndex + direction2 * accentFillActiveDelta(designSystem);
    const focusIndex = restIndex + direction2 * accentFillFocusDelta(designSystem);
    return {
      rest: getSwatch(restIndex, palette2),
      hover: getSwatch(hoverIndex, palette2),
      active: getSwatch(activeIndex, palette2),
      focus: getSwatch(focusIndex, palette2),
      selected: getSwatch(restIndex + (isDarkMode(designSystem) ? accentFillSelectedDelta(designSystem) * -1 : accentFillSelectedDelta(designSystem)), palette2)
    };
  };
}
var accentFill = colorRecipeFactory(accentFillAlgorithm(4.5));
var accentFillLarge = colorRecipeFactory(accentFillAlgorithm(3));
var accentFillRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentFill);
var accentFillHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentFill);
var accentFillActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentFill);
var accentFillFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentFill);
var accentFillSelected = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.selected, accentFill);
var accentFillLargeRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentFillLarge);
var accentFillLargeHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentFillLarge);
var accentFillLargeActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentFillLarge);
var accentFillLargeFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentFillLarge);
var accentFillLargeSelected = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.selected, accentFillLarge);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-contrast-fill.js
var neutralContrastFill = colorRecipeFactory(accessibleAlgorithm(neutralPalette2, 14, 0, neutralContrastFillHoverDelta, neutralContrastFillActiveDelta, neutralContrastFillFocusDelta));
var neutralContrastFillRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, neutralContrastFill);
var neutralContrastFillHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, neutralContrastFill);
var neutralContrastFillActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, neutralContrastFill);
var neutralContrastFillFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, neutralContrastFill);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-fill-card.js
var neutralCardFillAlgorithm = (designSystem) => {
  const offset = neutralFillCardDelta(designSystem);
  const index = findClosestSwatchIndex(neutralPalette2, backgroundColor(designSystem))(designSystem);
  return getSwatch(index - offset, neutralPalette2(designSystem));
};
function neutralFillCard(arg) {
  if (typeof arg === "function") {
    return (designSystem) => {
      return neutralCardFillAlgorithm(Object.assign({}, designSystem, { backgroundColor: arg(designSystem) }));
    };
  } else {
    return neutralCardFillAlgorithm(arg);
  }
}

// node_modules/@fluentui/web-components/dist/esm/utilities/math.js
function performOperation(operation) {
  return (...args) => {
    return (designSystem) => {
      const firstArg = args[0];
      let value = typeof firstArg === "function" ? firstArg(designSystem) : firstArg;
      for (let i = 1; i < args.length; i++) {
        const currentValue = args[i];
        value = operation(value, typeof currentValue === "function" ? currentValue(designSystem) : currentValue);
      }
      return value;
    };
  };
}
var _add = performOperation((a, b) => a + b);
var _subtract = performOperation((a, b) => a - b);
var _multiply = performOperation((a, b) => a * b);
var _divide = performOperation((a, b) => a / b);
function add2(...args) {
  return _add.apply(this, args);
}
function subtract2(...args) {
  return _subtract.apply(this, args);
}
function multiply2(...args) {
  return _multiply.apply(this, args);
}

// node_modules/@fluentui/web-components/dist/esm/color/neutral-outline-contrast.js
var neutralOutlineContrastAlgorithm = colorRecipeFactory(accessibleAlgorithm(neutralPalette2, 3, 0, subtract2(neutralOutlineHoverDelta, neutralOutlineRestDelta), subtract2(neutralOutlineActiveDelta, neutralOutlineRestDelta), subtract2(neutralOutlineFocusDelta, neutralOutlineRestDelta)));
var neutralOutlineContrast = colorRecipeFactory(neutralOutlineContrastAlgorithm);
var neutralOutlineContrastRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, neutralOutlineContrast);
var neutralOutlineContrastHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, neutralOutlineContrast);
var neutralOutlineContrastActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, neutralOutlineContrast);
var neutralOutlineContrastFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, neutralOutlineContrast);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-outline.js
var neutralOutlineAlgorithm = (designSystem) => {
  const palette2 = neutralPalette2(designSystem);
  const backgroundIndex = findClosestBackgroundIndex(designSystem);
  const direction2 = isDarkMode(designSystem) ? -1 : 1;
  const restDelta = neutralOutlineRestDelta(designSystem);
  const restIndex = backgroundIndex + direction2 * restDelta;
  const hoverDelta = neutralOutlineHoverDelta(designSystem);
  const hoverIndex = restIndex + direction2 * (hoverDelta - restDelta);
  const activeDelta = neutralOutlineActiveDelta(designSystem);
  const activeIndex = restIndex + direction2 * (activeDelta - restDelta);
  const focusDelta = neutralOutlineFocusDelta(designSystem);
  const focusIndex = restIndex + direction2 * (focusDelta - restDelta);
  return {
    rest: getSwatch(restIndex, palette2),
    hover: getSwatch(hoverIndex, palette2),
    active: getSwatch(activeIndex, palette2),
    focus: getSwatch(focusIndex, palette2)
  };
};
var neutralOutline = colorRecipeFactory(neutralOutlineAlgorithm);
var neutralOutlineRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, neutralOutline);
var neutralOutlineHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, neutralOutline);
var neutralOutlineActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, neutralOutline);
var neutralOutlineFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, neutralOutline);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-divider.js
var neutralDividerAlgorithm = (designSystem) => {
  const palette2 = neutralPalette2(designSystem);
  const backgroundIndex = findClosestBackgroundIndex(designSystem);
  const delta = neutralDividerRestDelta(designSystem);
  const direction2 = isDarkMode(designSystem) ? -1 : 1;
  const index = backgroundIndex + direction2 * delta;
  return getSwatch(index, palette2);
};
var neutralDividerRest = colorRecipeFactory(neutralDividerAlgorithm);

// node_modules/@fluentui/web-components/dist/esm/color/neutral-layer.js
var StandardLuminance;
(function(StandardLuminance2) {
  StandardLuminance2[StandardLuminance2["LightMode"] = 1] = "LightMode";
  StandardLuminance2[StandardLuminance2["DarkMode"] = 0.23] = "DarkMode";
})(StandardLuminance || (StandardLuminance = {}));
function luminanceOrBackgroundColor(luminanceRecipe, backgroundRecipe) {
  return (designSystem) => {
    return baseLayerLuminance(designSystem) === -1 ? backgroundRecipe(designSystem) : luminanceRecipe(designSystem);
  };
}
var baseLayerLuminanceSwatch = (designSystem) => {
  const luminance2 = baseLayerLuminance(designSystem);
  return new ColorRGBA64(luminance2, luminance2, luminance2, 1).toStringHexRGB();
};
var baseLayerLuminanceIndex = findClosestSwatchIndex(neutralPalette2, baseLayerLuminanceSwatch);
var neutralLayerCardIndex = (designSystem) => clamp2(subtract2(baseLayerLuminanceIndex, neutralFillCardDelta)(designSystem), 0, neutralPalette2(designSystem).length - 1);
var lightNeutralLayerL2 = designSystemResolverMax(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta);
var neutralLayerL2Index = designSystemResolverMax(add2(baseLayerLuminanceIndex, neutralFillCardDelta), lightNeutralLayerL2);
var darkNeutralLayerL4 = (designSystem) => {
  const darkLum = 0.14;
  const darkColor = new ColorRGBA64(darkLum, darkLum, darkLum, 1);
  const darkRefIndex = findClosestSwatchIndex(neutralPalette2, darkColor.toStringHexRGB())(designSystem);
  return darkRefIndex;
};
var neutralLayerFloating = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(subtract2(neutralLayerCardIndex, neutralFillCardDelta), neutralPalette2), swatchByMode(neutralPalette2)(0, subtract2(darkNeutralLayerL4, multiply2(neutralFillCardDelta, 5)))));
var neutralLayerCard = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(neutralLayerCardIndex, neutralPalette2), swatchByMode(neutralPalette2)(0, subtract2(darkNeutralLayerL4, multiply2(neutralFillCardDelta, 4)))));
var neutralLayerCardContainer = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add2(neutralLayerCardIndex, neutralFillCardDelta), neutralPalette2), swatchByMode(neutralPalette2)(neutralFillCardDelta, subtract2(darkNeutralLayerL4, multiply2(neutralFillCardDelta, 3)))));
var neutralLayerL1 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(baseLayerLuminanceIndex, neutralPalette2), swatchByMode(neutralPalette2)(0, subtract2(darkNeutralLayerL4, multiply2(neutralFillCardDelta, 3)))));
var neutralLayerL1Alt = neutralLayerCardContainer;
var neutralLayerL2 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(neutralLayerL2Index, neutralPalette2), swatchByMode(neutralPalette2)(lightNeutralLayerL2, subtract2(darkNeutralLayerL4, multiply2(neutralFillCardDelta, 2)))));
var neutralLayerL3 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add2(neutralLayerL2Index, neutralFillCardDelta), neutralPalette2), swatchByMode(neutralPalette2)(add2(lightNeutralLayerL2, neutralFillCardDelta), subtract2(darkNeutralLayerL4, neutralFillCardDelta))));
var neutralLayerL4 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add2(neutralLayerL2Index, multiply2(neutralFillCardDelta, 2)), neutralPalette2), swatchByMode(neutralPalette2)(add2(lightNeutralLayerL2, multiply2(neutralFillCardDelta, 2)), darkNeutralLayerL4)));

// node_modules/@fluentui/web-components/dist/esm/color/neutral-focus.js
var targetRatio = 3.5;
function neutralFocusIndexResolver(referenceColor, palette2, designSystem) {
  return findClosestSwatchIndex(neutralPalette2, referenceColor)(designSystem);
}
function neutralFocusDirectionResolver(index, palette2, designSystem) {
  return isDarkMode(designSystem) ? -1 : 1;
}
function neutralFocusContrastCondition(contrastRatio2) {
  return contrastRatio2 > targetRatio;
}
var neutralFocusAlgorithm = swatchByContrast(backgroundColor)(neutralPalette2)(neutralFocusIndexResolver)(neutralFocusDirectionResolver)(neutralFocusContrastCondition);
var neutralFocus = colorRecipeFactory(neutralFocusAlgorithm);
function neutralFocusInnerAccentIndexResolver(accentFillColor) {
  return (referenceColor, sourcePalette, designSystem) => {
    return sourcePalette.indexOf(accentFillColor(designSystem));
  };
}
function neutralFocusInnerAccentDirectionResolver(referenceIndex, palette2, designSystem) {
  return isDarkMode(designSystem) ? 1 : -1;
}
function neutralFocusInnerAccent(accentFillColor) {
  return swatchByContrast(neutralFocus)(accentPalette2)(neutralFocusInnerAccentIndexResolver(accentFillColor))(neutralFocusInnerAccentDirectionResolver)(neutralFocusContrastCondition);
}

// node_modules/@fluentui/web-components/dist/esm/color/create-color-palette.js
function createColorPalette(baseColor) {
  return new ComponentStateColorPalette({
    baseColor
  }).palette.map((color2) => color2.toStringHexRGB().toUpperCase());
}

// node_modules/@fluentui/web-components/dist/esm/design-system-provider/design-system-provider.styles.js
var DesignSystemProviderStyles = css2`
  ${display("block")};
`;

// node_modules/@fluentui/web-components/dist/esm/design-system-provider/index.js
var color = new CSSCustomPropertyBehavior("neutral-foreground-rest", neutralForegroundRest, (el) => el);
var backgroundStyles = css2`
  :host {
    background-color: var(--background-color);
    color: ${color.var};
  }
`.withBehaviors(color, forcedColorsStylesheetBehavior(css2`
      :host {
        background-color: ${SystemColors.ButtonFace};
        box-shadow: 0 0 0 1px ${SystemColors.CanvasText};
        color: ${SystemColors.ButtonText};
      }
    `));
var FluentDesignSystemProvider = class FluentDesignSystemProvider2 extends DesignSystemProvider {
  constructor() {
    super(...arguments);
    this.noPaint = false;
  }
  noPaintChanged() {
    if (!this.noPaint && this.backgroundColor !== void 0) {
      this.$fastController.addStyles(backgroundStyles);
    } else {
      this.$fastController.removeStyles(backgroundStyles);
    }
  }
  backgroundColorChanged() {
    this.noPaintChanged();
  }
  neutralBaseColorChanged(oldValue, newValue) {
    const color2 = parseColorHexRGB(newValue);
    if (color2) {
      this.neutralPalette = createColorPalette(color2);
    }
  }
  accentBaseColorChanged(oldValue, newValue) {
    const color2 = parseColorHexRGB(newValue);
    if (color2) {
      this.accentPalette = createColorPalette(color2);
    }
  }
};
__decorate6([
  attr({ attribute: "no-paint", mode: "boolean" })
], FluentDesignSystemProvider.prototype, "noPaint", void 0);
__decorate6([
  designSystemProperty({
    attribute: "background-color",
    default: DesignSystemDefaults.backgroundColor
  })
], FluentDesignSystemProvider.prototype, "backgroundColor", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-base-color",
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralBaseColor
  })
], FluentDesignSystemProvider.prototype, "neutralBaseColor", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-base-color",
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentBaseColor
  })
], FluentDesignSystemProvider.prototype, "accentBaseColor", void 0);
__decorate6([
  designSystemProperty({
    attribute: false,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralPalette
  })
], FluentDesignSystemProvider.prototype, "neutralPalette", void 0);
__decorate6([
  designSystemProperty({
    attribute: false,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentPalette
  })
], FluentDesignSystemProvider.prototype, "accentPalette", void 0);
__decorate6([
  designSystemProperty({
    default: DesignSystemDefaults.density,
    converter: nullableNumberConverter
  })
], FluentDesignSystemProvider.prototype, "density", void 0);
__decorate6([
  designSystemProperty({
    attribute: "design-unit",
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.designUnit
  })
], FluentDesignSystemProvider.prototype, "designUnit", void 0);
__decorate6([
  designSystemProperty({
    attribute: "direction",
    cssCustomProperty: false,
    default: DesignSystemDefaults.direction
  })
], FluentDesignSystemProvider.prototype, "direction", void 0);
__decorate6([
  designSystemProperty({
    attribute: "base-height-multiplier",
    default: DesignSystemDefaults.baseHeightMultiplier,
    converter: nullableNumberConverter
  })
], FluentDesignSystemProvider.prototype, "baseHeightMultiplier", void 0);
__decorate6([
  designSystemProperty({
    attribute: "base-horizontal-spacing-multiplier",
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.baseHorizontalSpacingMultiplier
  })
], FluentDesignSystemProvider.prototype, "baseHorizontalSpacingMultiplier", void 0);
__decorate6([
  designSystemProperty({
    attribute: "corner-radius",
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.cornerRadius
  })
], FluentDesignSystemProvider.prototype, "cornerRadius", void 0);
__decorate6([
  designSystemProperty({
    attribute: "elevated-corner-radius",
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.elevatedCornerRadius
  })
], FluentDesignSystemProvider.prototype, "elevatedCornerRadius", void 0);
__decorate6([
  designSystemProperty({
    attribute: "outline-width",
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.outlineWidth
  })
], FluentDesignSystemProvider.prototype, "outlineWidth", void 0);
__decorate6([
  designSystemProperty({
    attribute: "focus-outline-width",
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.focusOutlineWidth
  })
], FluentDesignSystemProvider.prototype, "focusOutlineWidth", void 0);
__decorate6([
  designSystemProperty({
    attribute: "disabled-opacity",
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.disabledOpacity
  })
], FluentDesignSystemProvider.prototype, "disabledOpacity", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-minus-2-font-size",
    default: DesignSystemDefaults.typeRampMinus2FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampMinus2FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-minus-2-line-height",
    default: DesignSystemDefaults.typeRampMinus2LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampMinus2LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-minus-1-font-size",
    default: DesignSystemDefaults.typeRampMinus1FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampMinus1FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-minus-1-line-height",
    default: DesignSystemDefaults.typeRampMinus1LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampMinus1LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-base-font-size",
    default: DesignSystemDefaults.typeRampBaseFontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampBaseFontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-base-line-height",
    default: DesignSystemDefaults.typeRampBaseLineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampBaseLineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-1-font-size",
    default: DesignSystemDefaults.typeRampPlus1FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus1FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-1-line-height",
    default: DesignSystemDefaults.typeRampPlus1LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus1LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-2-font-size",
    default: DesignSystemDefaults.typeRampPlus2FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus2FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-2-line-height",
    default: DesignSystemDefaults.typeRampPlus2LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus2LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-3-font-size",
    default: DesignSystemDefaults.typeRampPlus3FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus3FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-3-line-height",
    default: DesignSystemDefaults.typeRampPlus3LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus3LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-4-font-size",
    default: DesignSystemDefaults.typeRampPlus4FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus4FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-4-line-height",
    default: DesignSystemDefaults.typeRampPlus4LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus4LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-5-font-size",
    default: DesignSystemDefaults.typeRampPlus5FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus5FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-5-line-height",
    default: DesignSystemDefaults.typeRampPlus5LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus5LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-6-font-size",
    default: DesignSystemDefaults.typeRampPlus6FontSize
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus6FontSize", void 0);
__decorate6([
  designSystemProperty({
    attribute: "type-ramp-plus-6-line-height",
    default: DesignSystemDefaults.typeRampPlus6LineHeight
  })
], FluentDesignSystemProvider.prototype, "typeRampPlus6LineHeight", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-fill-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentFillRestDelta
  })
], FluentDesignSystemProvider.prototype, "accentFillRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-fill-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentFillHoverDelta
  })
], FluentDesignSystemProvider.prototype, "accentFillHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-fill-active-delta",
    cssCustomProperty: false,
    converter: nullableNumberConverter,
    default: DesignSystemDefaults.accentFillActiveDelta
  })
], FluentDesignSystemProvider.prototype, "accentFillActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-fill-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentFillFocusDelta
  })
], FluentDesignSystemProvider.prototype, "accentFillFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-fill-selected-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentFillSelectedDelta
  })
], FluentDesignSystemProvider.prototype, "accentFillSelectedDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-foreground-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentForegroundRestDelta
  })
], FluentDesignSystemProvider.prototype, "accentForegroundRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-foreground-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentForegroundHoverDelta
  })
], FluentDesignSystemProvider.prototype, "accentForegroundHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-foreground-active-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentForegroundActiveDelta
  })
], FluentDesignSystemProvider.prototype, "accentForegroundActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "accent-foreground-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.accentForegroundFocusDelta
  })
], FluentDesignSystemProvider.prototype, "accentForegroundFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillRestDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillHoverDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-active-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillActiveDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillFocusDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-selected-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillSelectedDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillSelectedDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-input-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillInputRestDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillInputRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-input-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillInputHoverDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillInputHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-input-active-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillInputActiveDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillInputActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-input-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillInputFocusDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillInputFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-input-selected-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillInputSelectedDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillInputSelectedDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-stealth-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillStealthRestDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillStealthRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-stealth-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillStealthHoverDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillStealthHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-stealth-active-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillStealthActiveDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillStealthActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-stealth-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillStealthFocusDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillStealthFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-stealth-selected-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillStealthSelectedDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillStealthSelectedDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-toggle-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillToggleHoverDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillToggleHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-toggle-hover-active",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillToggleActiveDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillToggleActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-toggle-hover-focus",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillToggleFocusDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillToggleFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "base-layer-luminance",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.baseLayerLuminance
  })
], FluentDesignSystemProvider.prototype, "baseLayerLuminance", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-fill-card-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralFillCardDelta
  })
], FluentDesignSystemProvider.prototype, "neutralFillCardDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-foreground-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralForegroundHoverDelta
  })
], FluentDesignSystemProvider.prototype, "neutralForegroundHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-foreground-active-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralForegroundActiveDelta
  })
], FluentDesignSystemProvider.prototype, "neutralForegroundActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-foreground-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralForegroundFocusDelta
  })
], FluentDesignSystemProvider.prototype, "neutralForegroundFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-divider-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralDividerRestDelta
  })
], FluentDesignSystemProvider.prototype, "neutralDividerRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-outline-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralOutlineRestDelta
  })
], FluentDesignSystemProvider.prototype, "neutralOutlineRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-outline-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralOutlineHoverDelta
  })
], FluentDesignSystemProvider.prototype, "neutralOutlineHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-outline-active-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralOutlineActiveDelta
  })
], FluentDesignSystemProvider.prototype, "neutralOutlineActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-outline-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralOutlineFocusDelta
  })
], FluentDesignSystemProvider.prototype, "neutralOutlineFocusDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-contrast-fill-rest-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralContrastFillRestDelta
  })
], FluentDesignSystemProvider.prototype, "neutralContrastFillRestDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-contrast-fill-hover-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralContrastFillHoverDelta
  })
], FluentDesignSystemProvider.prototype, "neutralContrastFillHoverDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-contrast-fill-active-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralContrastFillActiveDelta
  })
], FluentDesignSystemProvider.prototype, "neutralContrastFillActiveDelta", void 0);
__decorate6([
  designSystemProperty({
    attribute: "neutral-contrast-fill-focus-delta",
    converter: nullableNumberConverter,
    cssCustomProperty: false,
    default: DesignSystemDefaults.neutralContrastFillFocusDelta
  })
], FluentDesignSystemProvider.prototype, "neutralContrastFillFocusDelta", void 0);
FluentDesignSystemProvider = __decorate6([
  designSystemProvider({
    name: "fluent-design-system-provider",
    template: DesignSystemProviderTemplate,
    styles: DesignSystemProviderStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentDesignSystemProvider);

// node_modules/@fluentui/web-components/dist/esm/styles/behaviors.js
var neutralForegroundRestBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-rest", (x) => neutralForeground(x).rest, FluentDesignSystemProvider.findProvider);
var neutralForegroundHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-hover", (x) => neutralForeground(x).hover, FluentDesignSystemProvider.findProvider);
var neutralForegroundActiveBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-active", (x) => neutralForeground(x).active, FluentDesignSystemProvider.findProvider);
var neutralForegroundFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-focus", (x) => neutralForeground(x).focus, FluentDesignSystemProvider.findProvider);
var neutralForegroundToggleBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-toggle", neutralForegroundToggle, FluentDesignSystemProvider.findProvider);
var neutralForegroundToggleLargeBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-toggle-large", neutralForegroundToggleLarge, FluentDesignSystemProvider.findProvider);
var neutralForegroundHintBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-hint", neutralForegroundHint, FluentDesignSystemProvider.findProvider);
var neutralForegroundHintLargeBehavior = cssCustomPropertyBehaviorFactory("neutral-foreground-hint-large", neutralForegroundHintLarge, FluentDesignSystemProvider.findProvider);
var accentForegroundRestBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-rest", (x) => accentForeground(x).rest, FluentDesignSystemProvider.findProvider);
var accentForegroundHoverBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-hover", (x) => accentForeground(x).hover, FluentDesignSystemProvider.findProvider);
var accentForegroundActiveBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-active", (x) => accentForeground(x).active, FluentDesignSystemProvider.findProvider);
var accentForegroundFocusBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-focus", (x) => accentForeground(x).focus, FluentDesignSystemProvider.findProvider);
var accentForegroundCutRestBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-cut-rest", (x) => accentForegroundCut(x), FluentDesignSystemProvider.findProvider);
var accentForegroundLargeRestBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-large-rest", (x) => accentForegroundLarge(x).rest, FluentDesignSystemProvider.findProvider);
var accentForegroundLargeHoverBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-large-hover", (x) => accentForegroundLarge(x).hover, FluentDesignSystemProvider.findProvider);
var accentForegroundLargeActiveBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-large-active", (x) => accentForegroundLarge(x).active, FluentDesignSystemProvider.findProvider);
var accentForegroundLargeFocusBehavior = cssCustomPropertyBehaviorFactory("accent-foreground-large-focus", (x) => accentForegroundLarge(x).focus, FluentDesignSystemProvider.findProvider);
var neutralFillRestBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-rest", (x) => neutralFill(x).rest, FluentDesignSystemProvider.findProvider);
var neutralFillHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-hover", (x) => neutralFill(x).hover, FluentDesignSystemProvider.findProvider);
var neutralFillActiveBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-active", (x) => neutralFill(x).active, FluentDesignSystemProvider.findProvider);
var neutralFillFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-focus", (x) => neutralFill(x).focus, FluentDesignSystemProvider.findProvider);
var neutralFillSelectedBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-selected", (x) => neutralFill(x).selected, FluentDesignSystemProvider.findProvider);
var neutralFillStealthRestBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-stealth-rest", (x) => neutralFillStealth(x).rest, FluentDesignSystemProvider.findProvider);
var neutralFillStealthHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-stealth-hover", (x) => neutralFillStealth(x).hover, FluentDesignSystemProvider.findProvider);
var neutralFillStealthActiveBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-stealth-active", (x) => neutralFillStealth(x).active, FluentDesignSystemProvider.findProvider);
var neutralFillStealthFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-stealth-focus", (x) => neutralFillStealth(x).focus, FluentDesignSystemProvider.findProvider);
var neutralFillStealthSelectedBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-stealth-selected", (x) => neutralFillStealth(x).selected, FluentDesignSystemProvider.findProvider);
var neutralFillToggleRestBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-toggle-rest", (x) => neutralFillToggle(x).rest, FluentDesignSystemProvider.findProvider);
var neutralFillToggleHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-toggle-hover", (x) => neutralFillToggle(x).hover, FluentDesignSystemProvider.findProvider);
var neutralFillToggleActiveBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-toggle-active", (x) => neutralFillToggle(x).active, FluentDesignSystemProvider.findProvider);
var neutralFillToggleFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-toggle-focus", (x) => neutralFillToggle(x).focus, FluentDesignSystemProvider.findProvider);
var neutralFillInputRestBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-input-rest", (x) => neutralFillInput(x).rest, FluentDesignSystemProvider.findProvider);
var neutralFillInputHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-input-hover", (x) => neutralFillInput(x).hover, FluentDesignSystemProvider.findProvider);
var neutralFillInputActiveBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-input-active", (x) => neutralFillInput(x).active, FluentDesignSystemProvider.findProvider);
var neutralFillInputFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-input-focus", (x) => neutralFillInput(x).focus, FluentDesignSystemProvider.findProvider);
var accentFillRestBehavior = cssCustomPropertyBehaviorFactory("accent-fill-rest", (x) => accentFill(x).rest, FluentDesignSystemProvider.findProvider);
var accentFillHoverBehavior = cssCustomPropertyBehaviorFactory("accent-fill-hover", (x) => accentFill(x).hover, FluentDesignSystemProvider.findProvider);
var accentFillActiveBehavior = cssCustomPropertyBehaviorFactory("accent-fill-active", (x) => accentFill(x).active, FluentDesignSystemProvider.findProvider);
var accentFillFocusBehavior = cssCustomPropertyBehaviorFactory("accent-fill-focus", (x) => accentFill(x).focus, FluentDesignSystemProvider.findProvider);
var accentFillSelectedBehavior = cssCustomPropertyBehaviorFactory("accent-fill-selected", (x) => accentFill(x).selected, FluentDesignSystemProvider.findProvider);
var accentFillLargeRestBehavior = cssCustomPropertyBehaviorFactory("accent-fill-large-rest", (x) => accentFillLarge(x).rest, FluentDesignSystemProvider.findProvider);
var accentFillLargeHoverBehavior = cssCustomPropertyBehaviorFactory("accent-fill-large-hover", (x) => accentFillLarge(x).hover, FluentDesignSystemProvider.findProvider);
var accentFillLargeActiveBehavior = cssCustomPropertyBehaviorFactory("accent-fill-large-active", (x) => accentFillLarge(x).active, FluentDesignSystemProvider.findProvider);
var accentFillLargeFocusBehavior = cssCustomPropertyBehaviorFactory("accent-fill-large-focus", (x) => accentFillLarge(x).focus, FluentDesignSystemProvider.findProvider);
var accentFillLargeSelectedBehavior = cssCustomPropertyBehaviorFactory("accent-fill-large-selected", (x) => accentFillLarge(x).selected, FluentDesignSystemProvider.findProvider);
var neutralFillCardRestBehavior = cssCustomPropertyBehaviorFactory("neutral-fill-card-rest", (x) => neutralFillCard(x), FluentDesignSystemProvider.findProvider);
var neutralOutlineRestBehavior = cssCustomPropertyBehaviorFactory("neutral-outline-rest", (x) => neutralOutline(x).rest, FluentDesignSystemProvider.findProvider);
var neutralOutlineHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-outline-hover", (x) => neutralOutline(x).hover, FluentDesignSystemProvider.findProvider);
var neutralOutlineActiveBehavior = cssCustomPropertyBehaviorFactory("neutral-outline-active", (x) => neutralOutline(x).active, FluentDesignSystemProvider.findProvider);
var neutralOutlineFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-outline-focus", (x) => neutralOutline(x).focus, FluentDesignSystemProvider.findProvider);
var neutralDividerRestBehavior = cssCustomPropertyBehaviorFactory("neutral-divider-rest", neutralDividerRest, FluentDesignSystemProvider.findProvider);
var neutralLayerFloatingBehavior = cssCustomPropertyBehaviorFactory("neutral-layer-floating", neutralLayerFloating, FluentDesignSystemProvider.findProvider);
var neutralLayerCardBehavior = cssCustomPropertyBehaviorFactory("neutral-layer-card", neutralLayerCard, FluentDesignSystemProvider.findProvider);
var neutralLayerCardContainerBehavior = cssCustomPropertyBehaviorFactory("neutral-layer-card-container", neutralLayerCardContainer, FluentDesignSystemProvider.findProvider);
var neutralLayerL1Behavior = cssCustomPropertyBehaviorFactory("neutral-layer-l1", neutralLayerL1, FluentDesignSystemProvider.findProvider);
var neutralLayerL1AltBehavior = cssCustomPropertyBehaviorFactory("neutral-layer-l1-alt", neutralLayerL1Alt, FluentDesignSystemProvider.findProvider);
var neutralLayerL2Behavior = cssCustomPropertyBehaviorFactory("neutral-layer-l2", neutralLayerL2, FluentDesignSystemProvider.findProvider);
var neutralLayerL3Behavior = cssCustomPropertyBehaviorFactory("neutral-layer-l3", neutralLayerL3, FluentDesignSystemProvider.findProvider);
var neutralLayerL4Behavior = cssCustomPropertyBehaviorFactory("neutral-layer-l4", neutralLayerL4, FluentDesignSystemProvider.findProvider);
var neutralFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-focus", neutralFocus, FluentDesignSystemProvider.findProvider);
var neutralFocusInnerAccentBehavior = cssCustomPropertyBehaviorFactory("neutral-focus-inner-accent", neutralFocusInnerAccent(accentBaseColor), FluentDesignSystemProvider.findProvider);
var neutralContrastForegroundRestBehavior = cssCustomPropertyBehaviorFactory("neutral-contrast-foreground-rest", (x) => neutralForegroundRest(neutralContrastFillRest)(x), FluentDesignSystemProvider.findProvider);
var neutralContrastFillRestBehavior = cssCustomPropertyBehaviorFactory("neutral-contrast-fill-rest", (x) => neutralContrastFill(x).rest, FluentDesignSystemProvider.findProvider);
var neutralContrastFillHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-contrast-fill-hover", (x) => neutralContrastFill(x).hover, FluentDesignSystemProvider.findProvider);
var neutralContrastFillActiveBehavior = cssCustomPropertyBehaviorFactory("neutral-contrast-fill-active", (x) => neutralContrastFill(x).active, FluentDesignSystemProvider.findProvider);
var neutralContrastFillFocusBehavior = cssCustomPropertyBehaviorFactory("neutral-contrast-fill-focus", (x) => neutralContrastFill(x).focus, FluentDesignSystemProvider.findProvider);
var inlineStartBehavior = cssCustomPropertyBehaviorFactory("inline-start", (designSystem) => direction(designSystem) === Direction.ltr ? "left" : "right", FluentDesignSystemProvider.findProvider);
var inlineEndBehavior = cssCustomPropertyBehaviorFactory("inline-end", (designSystem) => direction(designSystem) === Direction.ltr ? "right" : "left", FluentDesignSystemProvider.findProvider);

// node_modules/@fluentui/web-components/dist/esm/styles/elevation.js
var ambientShadow = "0 0 calc((var(--elevation) * 0.225px) + 2px) rgba(0, 0, 0, calc(.11 * (2 - var(--background-luminance, 1))))";
var directionalShadow = "0 calc(var(--elevation) * 0.4px) calc((var(--elevation) * 0.9px)) rgba(0, 0, 0, calc(.13 * (2 - var(--background-luminance, 1))))";
var elevation = `box-shadow: ${ambientShadow}, ${directionalShadow};`;

// node_modules/@fluentui/web-components/dist/esm/styles/size.js
var heightNumber = "(var(--base-height-multiplier) + var(--density)) * var(--design-unit)";

// node_modules/@fluentui/web-components/dist/esm/styles/patterns/button.js
var BaseButtonStyles = css2`
  ${display("inline-flex")} :host {
    font-family: var(--body-font);
    outline: none;
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    height: calc(${heightNumber} * 1px);
    min-width: calc(${heightNumber} * 1px);
    background-color: ${neutralFillRestBehavior.var};
    color: ${neutralForegroundRestBehavior.var};
    border-radius: calc(var(--corner-radius) * 1px);
    fill: currentcolor;
    cursor: pointer;
  }

  .control {
    background: transparent;
    height: inherit;
    flex-grow: 1;
    box-sizing: border-box;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: 0 calc((10 + (var(--design-unit) * 2 * var(--density))) * 1px);
    white-space: nowrap;
    outline: none;
    text-decoration: none;
    border: calc(var(--outline-width) * 1px) solid transparent;
    color: inherit;
    border-radius: inherit;
    fill: inherit;
    cursor: inherit;
    font-family: inherit;
  }

  .control,
  .end,
  .start {
    font: inherit;
  }

  .control.icon-only {
    padding: 0;
    line-height: 0;
  }

  :host(:hover) {
    background-color: ${neutralFillHoverBehavior.var};
  }

  :host(:active) {
    background-color: ${neutralFillActiveBehavior.var};
  }

  .control:${focusVisible} {
    border: calc(var(--outline-width) * 1px) solid ${neutralFocusBehavior.var};
    box-shadow: 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px) ${neutralFocusBehavior.var};
  }

  .control::-moz-focus-inner {
    border: 0;
  }

  .content {
    pointer-events: none;
  }

  .start,
  .end {
    display: flex;
    pointer-events: none;
  }

  ::slotted(svg) {
    ${/* Glyph size and margin-left is temporary -
      replace when adaptive typography is figured out */
""} width: 16px;
    height: 16px;
    pointer-events: none;
  }

  .start {
    margin-inline-end: 11px;
  }

  .end {
    margin-inline-start: 11px;
  }
`.withBehaviors(neutralFillRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralFillHoverBehavior, neutralFillActiveBehavior, forcedColorsStylesheetBehavior(css2`
        :host,
        :host([appearance="neutral"]) .control {
          background-color: ${SystemColors.ButtonFace};
          border-color: ${SystemColors.ButtonText};
          color: ${SystemColors.ButtonText};
          fill: currentcolor;
        }

        :host(:not([disabled][href]):hover),
        :host([appearance="neutral"]:not([disabled]):hover) .control {
          forced-color-adjust: none;
          background-color: ${SystemColors.Highlight};
          color: ${SystemColors.HighlightText};
        }

        .control:${focusVisible},
        :host([appearance="outline"]) .control:${focusVisible},
        :host([appearance="neutral"]:${focusVisible}) .control {
          forced-color-adjust: none;
          background-color: ${SystemColors.Highlight};
          border-color: ${SystemColors.ButtonText};
          box-shadow: 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px) ${SystemColors.ButtonText};
          color: ${SystemColors.HighlightText};
        }

        .control:not([disabled]):hover,
        :host([appearance="outline"]) .control:hover {
          border-color: ${SystemColors.ButtonText};
        }

        :host([href]) .control {
          border-color: ${SystemColors.LinkText};
          color: ${SystemColors.LinkText};
        }

        :host([href]) .control:hover,
        :host(.neutral[href]) .control:hover,
        :host(.outline[href]) .control:hover,
        :host([href]) .control:${focusVisible}{
          forced-color-adjust: none;
          background: ${SystemColors.ButtonFace};
          border-color: ${SystemColors.LinkText};
          box-shadow: 0 0 0 1px ${SystemColors.LinkText} inset;
          color: ${SystemColors.LinkText};
          fill: currentcolor;
        }
    `));
var AccentButtonStyles = css2`
    :host([appearance="accent"]) {
        background: ${accentFillRestBehavior.var};
        color: ${accentForegroundCutRestBehavior.var};
    }

    :host([appearance="accent"]:hover) {
        background: ${accentFillHoverBehavior.var};
    }

    :host([appearance="accent"]:active) .control:active {
        background: ${accentFillActiveBehavior.var};
    }

    :host([appearance="accent"]) .control:${focusVisible} {
        box-shadow: 0 0 0 calc(var(--focus-outline-width) * 1px) inset ${neutralFocusInnerAccentBehavior.var}, 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px) ${neutralFocusBehavior.var}
    }
`.withBehaviors(accentFillRestBehavior, accentForegroundCutRestBehavior, accentFillHoverBehavior, accentFillActiveBehavior, neutralFocusInnerAccentBehavior, forcedColorsStylesheetBehavior(css2`
        :host([appearance="accent"]) .control {
            forced-color-adjust: none;
            background: ${SystemColors.Highlight};
            color: ${SystemColors.HighlightText};
        }

        :host([appearance="accent"]) .control:hover,
        :host([appearance="accent"]:active) .control:active {
            background: ${SystemColors.HighlightText};
            border-color: ${SystemColors.Highlight};
            color: ${SystemColors.Highlight};
        }

        :host([appearance="accent"]) .control:${focusVisible} {
            border-color: ${SystemColors.ButtonText};
            box-shadow: 0 0 0 2px ${SystemColors.HighlightText} inset;
        }

        :host([appearance="accent"][href]) .control{
            background: ${SystemColors.LinkText};
            color: ${SystemColors.HighlightText};
        }

        :host([appearance="accent"][href]) .control:hover {
            background: ${SystemColors.ButtonFace};
            border-color: ${SystemColors.LinkText};
            box-shadow: none;
            color: ${SystemColors.LinkText};
            fill: currentcolor;
        }

        :host([appearance="accent"][href]) .control:${focusVisible} {
          border-color: ${SystemColors.LinkText};
          box-shadow: 0 0 0 2px ${SystemColors.HighlightText} inset;
      }
    `));
var HypertextStyles = css2`
    :host([appearance="hypertext"]) {
        height: auto;
        font-size: inherit;
        line-height: inherit;
        background: transparent;
        min-width: 0;
    }

    :host([appearance="hypertext"]) .control {
        display: inline;
        padding: 0;
        border: none;
        box-shadow: none;
        border-radius: 0;
        line-height: 1;
    }
    :host a.control:not(:link) {
        background-color: transparent;
        cursor: default;
    }
    :host([appearance="hypertext"]) .control:link,
    :host([appearance="hypertext"]) .control:visited {
        background: transparent;
        color: ${accentForegroundRestBehavior.var};
        border-bottom: calc(var(--outline-width) * 1px) solid ${accentForegroundRestBehavior.var};
    }
    :host([appearance="hypertext"]) .control:hover {
        border-bottom-color: ${accentForegroundHoverBehavior.var};
    }
    :host([appearance="hypertext"]) .control:active {
        border-bottom-color: ${accentForegroundActiveBehavior.var};
    }
    :host([appearance="hypertext"]) .control:${focusVisible} {
        border-bottom: calc(var(--focus-outline-width) * 1px) solid ${neutralFocusBehavior.var};
        margin-bottom: calc(calc(var(--outline-width) - var(--focus-outline-width)) * 1px);
    }
`.withBehaviors(accentForegroundRestBehavior, accentForegroundHoverBehavior, accentForegroundActiveBehavior, neutralFocusBehavior, forcedColorsStylesheetBehavior(css2`
      :host([appearance="hypertext"]) .control:${focusVisible} {
        color: ${SystemColors.LinkText};
        border-bottom-color: ${SystemColors.LinkText};
      }
    `));
var LightweightButtonStyles = css2`
    :host([appearance="lightweight"]) {
        background: transparent;
        color: ${accentForegroundRestBehavior.var};
    }

    :host([appearance="lightweight"]) .control {
        padding: 0;
        height: initial;
        border: none;
        box-shadow: none;
        border-radius: 0;
    }

    :host([appearance="lightweight"]:hover) {
        color: ${accentForegroundHoverBehavior.var};
    }

    :host([appearance="lightweight"]:active) {
        color: ${accentForegroundActiveBehavior.var};
    }

    :host([appearance="lightweight"]) .content {
        position: relative;
    }

    :host([appearance="lightweight"]) .content::before {
        content: "";
        display: block;
        height: calc(var(--outline-width) * 1px);
        position: absolute;
        top: calc(1em + 3px);
        width: 100%;
    }

    :host([appearance="lightweight"]:hover) .content::before {
        background: ${accentForegroundHoverBehavior.var};
    }

    :host([appearance="lightweight"]:active) .content::before {
        background: ${accentForegroundActiveBehavior.var};
    }

    :host([appearance="lightweight"]) .control:${focusVisible} .content::before {
        background: ${neutralForegroundRestBehavior.var};
        height: calc(var(--focus-outline-width) * 1px);
    }
`.withBehaviors(accentForegroundRestBehavior, accentForegroundHoverBehavior, accentForegroundActiveBehavior, accentForegroundHoverBehavior, neutralForegroundRestBehavior, forcedColorsStylesheetBehavior(css2`
        :host([appearance="lightweight"]) {
            color: ${SystemColors.ButtonText};
        }
        :host([appearance="lightweight"]) .control:hover,
        :host([appearance="lightweight"]) .control:${focusVisible} {
            forced-color-adjust: none;
            background: ${SystemColors.ButtonFace};
            color: ${SystemColors.Highlight};
        }
        :host([appearance="lightweight"]) .control:hover .content::before,
        :host([appearance="lightweight"]) .control:${focusVisible} .content::before {
            background: ${SystemColors.Highlight};
        }

        :host([appearance="lightweight"][href]) .control:hover,
        :host([appearance="lightweight"][href]) .control:${focusVisible} {
            background: ${SystemColors.ButtonFace};
            box-shadow: none;
            color: ${SystemColors.LinkText};
        }

        :host([appearance="lightweight"][href]) .control:hover .content::before,
        :host([appearance="lightweight"][href]) .control:${focusVisible} .content::before {
            background: ${SystemColors.LinkText};
        }
    `));
var OutlineButtonStyles = css2`
    :host([appearance="outline"]) {
        background: transparent;
        border-color: ${neutralOutlineRestBehavior.var};
    }

    :host([appearance="outline"]:hover) {
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    :host([appearance="outline"]:active) {
        border-color: ${neutralOutlineActiveBehavior.var};
    }

    :host([appearance="outline"]) .control {
        border-color: inherit;
    }

    :host([appearance="outline"]) .control:${focusVisible} {
        box-shadow: 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px) ${neutralFocusBehavior.var};
        border-color: ${neutralFocusBehavior.var};
    }
`.withBehaviors(neutralOutlineRestBehavior, neutralOutlineHoverBehavior, neutralOutlineActiveBehavior, neutralFocusBehavior, forcedColorsStylesheetBehavior(css2`
      :host([appearance='outline']) {
        border-color: ${SystemColors.ButtonText};
      }
      :host([appearance='outline'][href]) {
        border-color: ${SystemColors.LinkText};
      }
    `));
var StealthButtonStyles = css2`
  :host([appearance='stealth']) {
    background: ${neutralFillStealthRestBehavior.var};
  }

  :host([appearance='stealth']:hover) {
    background: ${neutralFillStealthHoverBehavior.var};
  }

  :host([appearance='stealth']:active) {
    background: ${neutralFillStealthActiveBehavior.var};
  }
`.withBehaviors(neutralFillStealthRestBehavior, neutralFillStealthHoverBehavior, neutralFillStealthActiveBehavior, forcedColorsStylesheetBehavior(css2`
        :host([appearance="stealth"]),
        :host([appearance="stealth"]) .control {
            forced-color-adjust: none;
            background: ${SystemColors.ButtonFace};
            border-color: transparent;
            color: ${SystemColors.ButtonText};
            fill: currentcolor;
        }

        :host([appearance="stealth"]:hover) .control {
            background: ${SystemColors.Highlight};
            border-color: ${SystemColors.Highlight};
            color: ${SystemColors.HighlightText};
            fill: currentcolor;
        }

        :host([appearance="stealth"]:${focusVisible}) .control {
            background: ${SystemColors.Highlight};
            box-shadow: 0 0 0 1px ${SystemColors.Highlight};
            color: ${SystemColors.HighlightText};
            fill: currentcolor;
        }

        :host([appearance="stealth"][href]) .control {
            color: ${SystemColors.LinkText};
        }

        :host([appearance="stealth"]:hover[href]) .control,
        :host([appearance="stealth"]:${focusVisible}[href]) .control {
            background: ${SystemColors.LinkText};
            border-color: ${SystemColors.LinkText};
            color: ${SystemColors.HighlightText};
            fill: currentcolor;
        }

      :host([appearance="stealth"]:${focusVisible}[href]) .control {
          box-shadow: 0 0 0 1px ${SystemColors.LinkText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/styles/patterns/input.js
var FillStateStyles = css2`
  :host([appearance='filled']:not(.disabled):active)::after,
  :host([appearance='filled']:not(.disabled):focus-within:not(:active))::after {
    content: '';
    position: absolute;
    bottom: 0;
    border-bottom: calc(var(--focus-outline-width) * 1px) solid ${accentFillRestBehavior.var};
    border-bottom-left-radius: calc(var(--corner-radius) * 1px);
    border-bottom-right-radius: calc(var(--corner-radius) * 1px);
    z-index: 2;
    transition: all 300ms cubic-bezier(0.1, 0.9, 0.2, 1);
  }

  :host([appearance='filled']:not(.disabled):active)::after {
    left: 50%;
    width: 40%;
    transform: translateX(-50%);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  :host([appearance='filled']:not(.disabled):focus-within:not(:active))::after {
    left: 0;
    width: 100%;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/accordion/accordion.styles.js
var AccordionStyles = css2`
  ${display("flex")} :host {
    box-sizing: border-box;
    flex-direction: column;
    font-family: var(--body-font);
    font-size: var(--type-ramp-minus-1-font-size);
    line-height: var(--type-ramp-minus-1-line-height);
    color: ${neutralForegroundRestBehavior.var};
    border-top: calc(var(--outline-width) * 1px) solid ${neutralDividerRestBehavior.var};
  }
`.withBehaviors(accentFillRestBehavior, neutralDividerRestBehavior, neutralForegroundRestBehavior);

// node_modules/@fluentui/web-components/dist/esm/accordion/accordion-item/accordion-item.styles.js
var AccordionItemStyles = css2`
    ${display("flex")} :host {
        box-sizing: border-box;
        font-family: var(--body-font);
        flex-direction: column;
        font-size: var(--type-ramp-minus-1-font-size);
        line-height: var(--type-ramp-minus-1-line-height);
        border-bottom: calc(var(--outline-width) * 1px) solid ${neutralDividerRestBehavior.var};
    }

    .region {
        display: none;
        padding: calc((6 + (var(--design-unit) * 2 * var(--density))) * 1px);
    }

    .heading {
        display: grid;
        position: relative;
        grid-template-columns: auto 1fr auto calc(${heightNumber} * 1px);
        z-index: 2;
    }

    .button {
        appearance: none;
        border: none;
        background: none;
        grid-column: 2;
        grid-row: 1;
        outline: none;
        padding: 0 calc((6 + (var(--design-unit) * 2 * var(--density))) * 1px);
        text-align: left;
        height: calc(${heightNumber} * 1px);
        color: ${neutralForegroundRestBehavior.var};
        cursor: pointer;
        font-family: inherit;
    }

    .button:hover {
        color: ${neutralForegroundHoverBehavior.var};
    }

    .button:active {
        color: ${neutralForegroundActiveBehavior.var};
    }

    .button::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1;
        cursor: pointer;
    }

    .button:${focusVisible}::before {
        outline: none;
        border: calc(var(--outline-width) * 1px) solid ${neutralFocusBehavior.var};
        box-shadow: 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px)
            ${neutralFocusBehavior.var};
    }

    :host(.expanded) .region {
        display: block;
    }

    .icon {
        display: flex;
        align-items: center;
        justify-content: center;
        grid-column: 4;
        z-index: 2;
        pointer-events: none;
        fill: ${accentFillRestBehavior.var};
    }

    slot[name="collapsed-icon"] {
        display: flex;
    }

    :host(.expanded) slot[name="collapsed-icon"] {
        display: none;
    }

    slot[name="expanded-icon"] {
        display: none;
    }

    :host(.expanded) slot[name="expanded-icon"] {
        display: flex;
    }

    .start {
        display: flex;
        align-items: center;
        padding-inline-start: calc(var(--design-unit) * 1px);
        justify-content: center;
        grid-column: 1;
        z-index: 2;
    }

    .end {
        display: flex;
        align-items: center;
        justify-content: center;
        grid-column: 3;
        z-index: 2;
    }
`.withBehaviors(accentFillRestBehavior, neutralDividerRestBehavior, neutralForegroundActiveBehavior, neutralForegroundFocusBehavior, neutralForegroundRestBehavior, neutralForegroundHoverBehavior, neutralFocusBehavior, forcedColorsStylesheetBehavior(css2`
            .button:${focusVisible}::before {
                border-color: ${SystemColors.Highlight};
                box-shadow: 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px) ${SystemColors.Highlight};
            }
            .icon {
              fill: ${SystemColors.ButtonText};
            }
        `));

// node_modules/@fluentui/web-components/dist/esm/accordion/accordion-item/index.js
var FluentAccordionItem = class FluentAccordionItem2 extends AccordionItem {
};
FluentAccordionItem = __decorate6([
  customElement2({
    name: "fluent-accordion-item",
    template: AccordionItemTemplate,
    styles: AccordionItemStyles
  })
], FluentAccordionItem);

// node_modules/@fluentui/web-components/dist/esm/accordion/index.js
var FluentAccordion = class FluentAccordion2 extends Accordion {
};
FluentAccordion = __decorate6([
  customElement2({
    name: "fluent-accordion",
    template: AccordionTemplate,
    styles: AccordionStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentAccordion);

// node_modules/@fluentui/web-components/dist/esm/utilities/behaviors.js
function appearanceBehavior(value, styles23) {
  return new PropertyStyleSheetBehavior("appearance", value, styles23);
}

// node_modules/@fluentui/web-components/dist/esm/anchor/anchor.styles.js
var AnchorStyles = css2`
  ${BaseButtonStyles}
`.withBehaviors(appearanceBehavior("accent", AccentButtonStyles), appearanceBehavior("hypertext", HypertextStyles), appearanceBehavior("lightweight", LightweightButtonStyles), appearanceBehavior("outline", OutlineButtonStyles), appearanceBehavior("stealth", StealthButtonStyles));

// node_modules/@fluentui/web-components/dist/esm/anchor/index.js
var FluentAnchor = class FluentAnchor2 extends Anchor {
  appearanceChanged(oldValue, newValue) {
    if (oldValue !== newValue) {
      this.classList.add(newValue);
      this.classList.remove(oldValue);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (!this.appearance) {
      this.appearance = "neutral";
    }
  }
  /**
   * Applies 'icon-only' class when there is only an SVG in the default slot
   *
   * @internal
   */
  defaultSlottedContentChanged() {
    const slottedElements = this.defaultSlottedContent.filter((x) => x.nodeType === Node.ELEMENT_NODE);
    if (slottedElements.length === 1 && slottedElements[0] instanceof SVGElement) {
      this.control.classList.add("icon-only");
    } else {
      this.control.classList.remove("icon-only");
    }
  }
};
__decorate6([
  attr
], FluentAnchor.prototype, "appearance", void 0);
FluentAnchor = __decorate6([
  customElement2({
    name: "fluent-anchor",
    template: AnchorTemplate,
    styles: AnchorStyles,
    shadowOptions: {
      delegatesFocus: true,
      mode: "closed"
    }
  })
], FluentAnchor);

// node_modules/@fluentui/web-components/dist/esm/anchored-region/anchored-region.styles.js
var AnchoredRegionStyles = css2`
  :host {
    contain: layout;
    display: block;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/anchored-region/index.js
var FluentAnchoredRegion = class FluentAnchoredRegion2 extends AnchoredRegion {
};
FluentAnchoredRegion = __decorate6([
  customElement2({
    name: "fluent-anchored-region",
    template: AnchoredRegionTemplate,
    styles: AnchoredRegionStyles
  })
], FluentAnchoredRegion);

// node_modules/@fluentui/web-components/dist/esm/badge/badge.styles.js
var BadgeStyles = css2`
  ${display("inline-block")} :host {
    box-sizing: border-box;
    font-family: var(--body-font);
    font-size: var(--type-ramp-minus-1-font-size);
    line-height: var(--type-ramp-minus-1-height);
  }

  .control {
    border-radius: calc(var(--corner-radius) * 1px);
    padding: calc(var(--design-unit) * 0.5px) calc(var(--design-unit) * 1px);
  }

  :host(.lightweight) .control {
    background: transparent;
    color: ${neutralForegroundRestBehavior.var};
    font-weight: 600;
  }

  :host(.accent) .control {
    background: ${accentFillRestBehavior.var};
    color: ${accentForegroundCutRestBehavior.var};
  }

  :host(.neutral) .control {
    background: ${neutralFillRestBehavior.var};
    color: ${neutralForegroundRestBehavior.var};
  }
`.withBehaviors(accentFillRestBehavior, accentForegroundCutRestBehavior, neutralFillRestBehavior, neutralForegroundRestBehavior);

// node_modules/@fluentui/web-components/dist/esm/badge/index.js
var FluentBadge = class FluentBadge2 extends Badge {
  constructor() {
    super(...arguments);
    this.appearance = "lightweight";
  }
  appearanceChanged(oldValue, newValue) {
    if (oldValue !== newValue) {
      DOM.queueUpdate(() => {
        this.classList.add(newValue);
        this.classList.remove(oldValue);
      });
    }
  }
};
__decorate6([
  attr({ mode: "fromView" })
], FluentBadge.prototype, "appearance", void 0);
FluentBadge = __decorate6([
  customElement2({
    name: "fluent-badge",
    template: BadgeTemplate,
    styles: BadgeStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentBadge);

// node_modules/@fluentui/web-components/dist/esm/breadcrumb/breadcrumb.styles.js
var BreadcrumbStyles = css2`
  ${display("inline-block")} :host {
    box-sizing: border-box;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
  }

  .list {
    display: flex;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/breadcrumb/index.js
var FluentBreadcrumb = class FluentBreadcrumb2 extends Breadcrumb {
};
FluentBreadcrumb = __decorate6([
  customElement2({
    name: "fluent-breadcrumb",
    template: BreadcrumbTemplate,
    styles: BreadcrumbStyles
  })
], FluentBreadcrumb);

// node_modules/@fluentui/web-components/dist/esm/breadcrumb-item/breadcrumb-item.styles.js
var BreadcrumbItemStyles = css2`
    ${display("inline-flex")} :host {
      background: transparent;
      box-sizing: border-box;
      fill: currentcolor;
      font-family: var(--body-font);
      font-size: var(--type-ramp-base-font-size);
      line-height: var(--type-ramp-base-line-height);
      min-width: calc(${heightNumber} * 1px);
      outline: none;
    }

    .listitem {
        display: flex;
        align-items: center;
    }

    .control {
      align-items: center;
      box-sizing: border-box;
      color: ${accentForegroundRestBehavior.var};
      cursor: pointer;
      display: flex;
      fill: inherit;
      outline: none;
      text-decoration: none;
      white-space: nowrap;
  }

    .control:hover {
        color: ${accentForegroundHoverBehavior.var};
    }

    .control:active {
        color: ${accentForegroundActiveBehavior.var};
    }

    .control .content {
        position: relative;
    }

    .control .content::before {
        content: "";
        display: block;
        height: calc(var(--outline-width) * 1px);
        left: 0;
        position: absolute;
        right: 0;
        top: calc(1em + 4px);
        width: 100%;
    }

    .control:hover .content::before {
        background: ${accentForegroundHoverBehavior.var};
    }

    .control:active .content::before {
        background: ${accentForegroundActiveBehavior.var};
    }

    .control:${focusVisible} .content::before {
        background: ${neutralForegroundRestBehavior.var};
        height: calc(var(--focus-outline-width) * 1px);
    }

    :host(:not([href])),
    :host([aria-current]) .control  {
        font-weight: 600;
        color: ${neutralForegroundRestBehavior.var};
        fill: currentcolor;
        cursor: default;
    }

    :host([aria-current]) .control:hover .content::before {
      background: ${neutralForegroundRestBehavior.var};
  }

    .start {
        display: flex;
        margin-inline-end: 6px;
    }

    .end {
        display: flex;
        margin-inline-start: 6px;
    }

    .separator {
      display: flex;
      fill: ${neutralForegroundRestBehavior.var};
      margin: 0 6px;
    }
`.withBehaviors(accentForegroundActiveBehavior, accentForegroundHoverBehavior, accentForegroundRestBehavior, neutralForegroundRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host(:not([href])) {
          color: ${SystemColors.ButtonText};
          fill: currentcolor;
      }
      .control:hover .content::before,
      .control:${focusVisible} .content::before {
        background: ${SystemColors.LinkText};
      }
      .separator {
        fill: ${SystemColors.ButtonText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/breadcrumb-item/index.js
var FluentBreadcrumbItem = class FluentBreadcrumbItem2 extends BreadcrumbItem {
};
FluentBreadcrumbItem = __decorate6([
  customElement2({
    name: "fluent-breadcrumb-item",
    template: BreadcrumbItemTemplate,
    styles: BreadcrumbItemStyles,
    shadowOptions: {
      delegatesFocus: true
    }
  })
], FluentBreadcrumbItem);

// node_modules/@fluentui/web-components/dist/esm/button/button.styles.js
var ButtonStyles = css2`
  :host([disabled]),
  :host([disabled]:hover),
  :host([disabled]:active) {
    opacity: var(--disabled-opacity);
    background-color: ${neutralFillRestBehavior.var};
    cursor: ${disabledCursor};
  }

  ${BaseButtonStyles}
`.withBehaviors(forcedColorsStylesheetBehavior(css2`
      :host([disabled]),
      :host([disabled]:hover),
      :host([disabled]:active),
      :host([disabled]) .control,
      :host([disabled]) .control:hover,
      :host([appearance='neutral'][disabled]:hover) .control {
        forced-color-adjust: none;
        background-color: ${SystemColors.ButtonFace};
        border-color: ${SystemColors.GrayText};
        color: ${SystemColors.GrayText};
        opacity: 1;
      }
    `), appearanceBehavior("accent", css2`
      :host([appearance='accent'][disabled]),
      :host([appearance='accent'][disabled]:hover),
      :host([appearance='accent'][disabled]:active) {
        background: ${accentFillRestBehavior.var};
      }

      ${AccentButtonStyles}
    `.withBehaviors(forcedColorsStylesheetBehavior(css2`
          :host([appearance='accent'][disabled]) .control,
          :host([appearance='accent'][disabled]) .control:hover {
            background: ${SystemColors.ButtonFace};
            border-color: ${SystemColors.GrayText};
            color: ${SystemColors.GrayText};
          }
        `))), appearanceBehavior("lightweight", css2`
      :host([appearance='lightweight'][disabled]:hover),
      :host([appearance='lightweight'][disabled]:active) {
        background-color: transparent;
        color: ${accentForegroundRestBehavior.var};
      }

      :host([appearance='lightweight'][disabled]) .content::before,
      :host([appearance='lightweight'][disabled]:hover) .content::before,
      :host([appearance='lightweight'][disabled]:active) .content::before {
        background: transparent;
      }

      ${LightweightButtonStyles}
    `.withBehaviors(forcedColorsStylesheetBehavior(css2`
          :host([appearance='lightweight'][disabled]) .control {
            forced-color-adjust: none;
            color: ${SystemColors.GrayText};
          }

          :host([appearance='lightweight'][disabled]) .control:hover .content::before {
            background: none;
          }
        `))), appearanceBehavior("outline", css2`
      :host([appearance='outline'][disabled]:hover),
      :host([appearance='outline'][disabled]:active) {
        background: transparent;
        border-color: ${neutralOutlineRestBehavior.var};
      }

      ${OutlineButtonStyles}
    `.withBehaviors(forcedColorsStylesheetBehavior(css2`
          :host([appearance='outline'][disabled]) .control {
            border-color: ${SystemColors.GrayText};
          }
        `))), appearanceBehavior("stealth", css2`
      :host([appearance='stealth'][disabled]),
      :host([appearance='stealth'][disabled]:hover),
      :host([appearance='stealth'][disabled]:active) {
        background: ${neutralFillStealthRestBehavior.var};
      }

      ${StealthButtonStyles}
    `.withBehaviors(forcedColorsStylesheetBehavior(css2`
          :host([appearance='stealth'][disabled]),
          :host([appearance='stealth'][disabled]:hover) {
            background: ${SystemColors.ButtonFace};
          }

          :host([appearance='stealth'][disabled]) .control {
            background: ${SystemColors.ButtonFace};
            border-color: transparent;
            color: ${SystemColors.GrayText};
          }
        `))));

// node_modules/@fluentui/web-components/dist/esm/button/index.js
var FluentButton = class FluentButton2 extends Button {
  appearanceChanged(oldValue, newValue) {
    if (oldValue !== newValue) {
      this.classList.add(newValue);
      this.classList.remove(oldValue);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (!this.appearance) {
      this.appearance = "neutral";
    }
  }
  /**
   * Applies 'icon-only' class when there is only an SVG in the default slot
   *
   * @internal
   */
  defaultSlottedContentChanged() {
    const slottedElements = this.defaultSlottedContent.filter((x) => x.nodeType === Node.ELEMENT_NODE);
    if (slottedElements.length === 1 && slottedElements[0] instanceof SVGElement) {
      this.control.classList.add("icon-only");
    } else {
      this.control.classList.remove("icon-only");
    }
  }
};
__decorate6([
  attr
], FluentButton.prototype, "appearance", void 0);
FluentButton = __decorate6([
  customElement2({
    name: "fluent-button",
    template: ButtonTemplate,
    styles: ButtonStyles,
    shadowOptions: {
      delegatesFocus: true,
      mode: "closed"
    }
  })
], FluentButton);

// node_modules/@fluentui/web-components/dist/esm/card/card.styles.js
var CardStyles = css2`
  ${display("block")} :host {
    --elevation: 4;
    display: block;
    contain: content;
    height: var(--card-height, 100%);
    width: var(--card-width, 100%);
    box-sizing: border-box;
    border-radius: calc(var(--elevated-corner-radius) * 1px);
    ${elevation}
  }

  :host(:hover) {
    --elevation: 8;
  }

  :host(:focus-within) {
    --elevation: 8;
  }

  :host {
    content-visibility: auto;
  }
`.withBehaviors(neutralFillCardRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host {
        forced-color-adjust: none;
        background: ${SystemColors.Canvas};
        box-shadow: 0 0 0 1px ${SystemColors.CanvasText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/card/index.js
var FluentCard = class FluentCard2 extends FluentDesignSystemProvider {
  cardBackgroundColorChanged(prev, next) {
    if (next) {
      const parsedColor = parseColorHexRGB(this.cardBackgroundColor);
      if (parsedColor !== null) {
        this.neutralBaseColor = this.cardBackgroundColor;
        this.backgroundColor = this.cardBackgroundColor;
      }
    } else if (this.provider && this.provider.designSystem) {
      this.handleChange(this.provider.designSystem, "backgroundColor");
    }
  }
  /**
   * @internal
   */
  handleChange(source, name) {
    if (!this.cardBackgroundColor) {
      if (this.neutralBaseColor) {
        this.backgroundColor = neutralFillCard(this.designSystem);
      } else {
        this.backgroundColor = neutralFillCard(source);
      }
    }
  }
  connectedCallback() {
    var _a, _b;
    super.connectedCallback();
    const parentDSNotifier = Observable.getNotifier((_a = this.provider) === null || _a === void 0 ? void 0 : _a.designSystem);
    parentDSNotifier.subscribe(this, "backgroundColor");
    parentDSNotifier.subscribe(this, "neutralPalette");
    this.handleChange((_b = this.provider) === null || _b === void 0 ? void 0 : _b.designSystem, "backgroundColor");
  }
};
__decorate6([
  attr({
    attribute: "card-background-color",
    mode: "fromView"
  })
], FluentCard.prototype, "cardBackgroundColor", void 0);
FluentCard = __decorate6([
  designSystemProvider({
    name: "fluent-card",
    template: CardTemplate,
    styles: CardStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentCard);

// node_modules/@fluentui/web-components/dist/esm/checkbox/checkbox.styles.js
var CheckboxStyles = css2`
    ${display("inline-flex")} :host {
        align-items: center;
        outline: none;
        margin: calc(var(--design-unit) * 1px) 0;
        ${/*
 * Chromium likes to select label text or the default slot when
 * the checkbox is clicked. Maybe there is a better solution here?
 */
""} user-select: none;
    }

    .control {
        position: relative;
        width: calc((${heightNumber} / 2 + var(--design-unit)) * 1px);
        height: calc((${heightNumber} / 2 + var(--design-unit)) * 1px);
        box-sizing: border-box;
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
        background: ${neutralFillInputRestBehavior.var};
        outline: none;
        cursor: pointer;
    }

    .label__hidden {
        display: none;
        visibility: hidden;
    }

    .label {
        font-family: var(--body-font);
        color: ${neutralForegroundRestBehavior.var};
        ${/* Need to discuss with Brian how HorizontalSpacingNumber can work. https://github.com/microsoft/fast/issues/2766 */
""} padding-inline-start: calc(var(--design-unit) * 2px + 2px);
        margin-inline-end: calc(var(--design-unit) * 2px + 2px);
        cursor: pointer;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
    }

    .checked-indicator {
        width: 100%;
        height: 100%;
        display: block;
        fill: ${neutralForegroundRestBehavior.var};
        opacity: 0;
        pointer-events: none;
    }

    .indeterminate-indicator {
        border-radius: calc(var(--corner-radius) * 1px);
        background: ${neutralForegroundRestBehavior.var};
        position: absolute;
        top: 50%;
        left: 50%;
        width: 50%;
        height: 50%;
        transform: translate(-50%, -50%);
        opacity: 0;
    }

    :host(:enabled) .control:hover {
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    :host(:enabled) .control:active {
        background: ${neutralFillInputActiveBehavior.var};
        border-color: ${neutralOutlineActiveBehavior.var};
    }

    :host(:${focusVisible}) .control {
        box-shadow: 0 0 0 2px var(--background-color), 0 0 0 4px ${neutralFocusBehavior.var};
        border-color: ${neutralFocusBehavior.var};
    }

    :host(.disabled) .label,
    :host(.readonly) .label,
    :host(.readonly) .control,
    :host(.disabled) .control {
        cursor: ${disabledCursor};
    }

    :host(.checked:not(.indeterminate)) .checked-indicator,
    :host(.indeterminate) .indeterminate-indicator {
        opacity: 1;
    }

    :host(.disabled) {
        opacity: var(--disabled-opacity);
    }
`.withBehaviors(neutralFillInputActiveBehavior, neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineActiveBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
            .control {
                forced-color-adjust: none;
                border-color: ${SystemColors.FieldText};
                background: ${SystemColors.Field};
            }
            :host(:enabled) .control:hover, .control:active {
                border-color: ${SystemColors.Highlight};
                background: ${SystemColors.Field};
            }
            .checked-indicator {
                fill: ${SystemColors.FieldText};
            }
            .indeterminate-indicator {
                background: ${SystemColors.FieldText};
            }
            :host(:${focusVisible}) .control {
                border-color: ${SystemColors.Highlight};
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
            :host(.checked:${focusVisible}:enabled) .control {
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
            :host(.checked) .control {
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.Highlight};
            }
            :host(.checked) .control:hover, .control:active {
                background: ${SystemColors.HighlightText};
            }
            :host(.checked) .checked-indicator {
                fill: ${SystemColors.HighlightText};
            }
            :host(.checked) .control:hover .checked-indicator {
                fill: ${SystemColors.Highlight}
            }
            :host(.checked) .indeterminate-indicator {
                background: ${SystemColors.HighlightText};
            }
            :host(.checked) .control:hover .indeterminate-indicator {
                background: ${SystemColors.Highlight}
            }
            :host(.disabled) {
                opacity: 1;
            }
            :host(.disabled) .control {
                forced-color-adjust: none;
                border-color: ${SystemColors.GrayText};
                background: ${SystemColors.Field};
            }
            :host(.disabled) .indeterminate-indicator,
            :host(.checked.disabled) .control:hover .indeterminate-indicator {
                forced-color-adjust: none;
                background: ${SystemColors.GrayText};
            }
            :host(.disabled) .checked-indicator,
            :host(.checked.disabled) .control:hover .checked-indicator {
                forced-color-adjust: none;
                fill: ${SystemColors.GrayText};
            }
        `));

// node_modules/@fluentui/web-components/dist/esm/checkbox/index.js
var FluentCheckbox = class FluentCheckbox2 extends Checkbox {
};
FluentCheckbox = __decorate6([
  customElement2({
    name: "fluent-checkbox",
    template: CheckboxTemplate,
    styles: CheckboxStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentCheckbox);

// node_modules/@fluentui/web-components/dist/esm/select/select.styles.js
var SelectFilledStyles = css2`
  :host([appearance="filled"]) {
    background: ${neutralFillRestBehavior.var};
    border-color: transparent;
  }

  :host([appearance="filled"]:hover:not([disabled])) {
    background: ${neutralFillHoverBehavior.var};
    border-color: transparent;
  }

  :host([appearance="filled"]:${focusVisible}) {
    border-color: ${neutralFocusBehavior.var};
  }
`.withBehaviors(neutralFillHoverBehavior, neutralFillRestBehavior, neutralFocusBehavior);
var SelectStyles = css2`
    ${display("inline-flex")} :host {
        --elevation: 14;
        background: ${neutralFillInputRestBehavior.var};
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
        box-sizing: border-box;
        color: ${neutralForegroundRestBehavior.var};
        contain: contents;
        height: calc(${heightNumber} * 1px);
        position: relative;
        user-select: none;
        min-width: 250px;
    }

    .listbox {
        ${elevation}
        background: ${neutralLayerFloatingBehavior.var};
        border-radius: calc(var(--corner-radius) * 1px);
        box-sizing: border-box;
        display: inline-flex;
        flex-direction: column;
        left: 0;
        max-height: calc(var(--max-height) - (${heightNumber} * 1px));
        padding: calc(var(--design-unit) * 1px) 0;
        overflow-y: auto;
        position: absolute;
        width: 100%;
        z-index: 1;
        margin: 1px 0;
    }

    .listbox[hidden] {
        display: none;
    }

    .control {
        align-items: center;
        box-sizing: border-box;
        cursor: pointer;
        display: flex;
        font-size: var(--type-ramp-base-font-size);
        font: inherit;
        line-height: var(--type-ramp-base-line-height);
        min-height: calc(${heightNumber} * 1px);
        padding: 0 calc(var(--design-unit) * 2.25px);
        width: 100%;
    }

    :host(:not([disabled]):hover) {
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    :host(:focus) {
        outline: none;
    }

    :host(:${focusVisible}) {
        border-color: ${neutralFocusBehavior.var};
        outline: none;
        box-shadow:
            0 0 0 1px inset ${neutralFocusBehavior.var};
    }

    :host([open]:${focusVisible}) {
        border-color: ${neutralOutlineRestBehavior.var};
        outline: none;
        box-shadow: none;
  }

    :host(:${focusVisible}) ::slotted([aria-selected="true"][role="option"]:not([disabled])) {
        box-shadow: 0 0 0 calc(var(--focus-outline-width) * 1px) inset ${neutralFocusInnerAccentBehavior.var};
        border-color: ${neutralFocusBehavior.var};
        background: ${accentFillHoverBehavior.var};
        color: ${accentForegroundCutRestBehavior.var};
    }

    :host([disabled]) {
        cursor: ${disabledCursor};
        opacity: var(--disabled-opacity);
    }

    :host([disabled]) .control {
        cursor: ${disabledCursor};
    }

    :host([disabled]:hover) {
        background: ${neutralFillStealthRestBehavior.var};
        color: ${neutralForegroundRestBehavior.var};
        fill: currentcolor;
    }

    :host(:not([disabled])) .control:active {
        background: ${neutralFillInputActiveBehavior.var};
        border-color: ${neutralOutlineActiveBehavior.var};
    }

    :host([open][position="above"]) .listbox,
    :host([open][position="below"]) .control {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
    }

    :host([open][position="above"]) .control,
    :host([open][position="below"]) .listbox {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }

    :host([open][position="above"]) .listbox {
        border-bottom: 0;
        bottom: calc(${heightNumber} * 1px);
    }

    :host([open][position="below"]) .listbox {
        border-top: 0;
        top: calc(${heightNumber} * 1px);
    }

    .selected-value {
        font-family: var(--body-font);
        flex: 1 1 auto;
        text-align: start;
    }

    .indicator {
        flex: 0 0 auto;
        margin-inline-start: 1em;
    }

    slot[name="listbox"] {
        display: none;
        width: 100%;
    }

    :host([open]) slot[name="listbox"] {
        display: flex;
        position: absolute;
        ${elevation}
    }

    .end {
        margin-inline-start: auto;
    }

    .start,
    .end,
    .indicator,
    .select-indicator,
    ::slotted(svg) {
        ${``}
        fill: currentcolor;
        height: 1em;
        min-height: calc(var(--design-unit) * 4px);
        min-width: calc(var(--design-unit) * 4px);
        width: 1em;
    }

    ::slotted([role="option"]) {
        flex: 0 0 auto;
    }
`.withBehaviors(appearanceBehavior("filled", SelectFilledStyles), accentFillHoverBehavior, accentForegroundCutRestBehavior, neutralOutlineActiveBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
            :host([disabled]) {
                border-color: ${SystemColors.GrayText};
                background-color: ${SystemColors.ButtonFace};
                color: ${SystemColors.GrayText};
                opacity: 1;
                forced-color-adjust: none;
            }

            :host([disabled]:hover) {
                background: ${SystemColors.ButtonFace};
            }

            :host([disabled]) .control {
                color: ${SystemColors.GrayText};
                border-color: ${SystemColors.GrayText};
            }

            :host(:not([disabled]):hover) {
              background: ${SystemColors.ButtonFace};
              border-color: ${SystemColors.Highlight};
            }

            :host(:${focusVisible}) {
              forced-color-adjust: none;
              background: ${SystemColors.ButtonFace};
              border-color: ${SystemColors.Highlight};
              box-shadow: 0 0 0 1px inset ${SystemColors.Highlight};
              color: ${SystemColors.ButtonText};
              fill: currentcolor;
            }

            :host([open]) .listbox {
                background: ${SystemColors.ButtonFace};
                border: 1px solid ${SystemColors.ButtonText};
            }

            :host(:${focusVisible}) ::slotted([aria-selected="true"][role="option"]:not([disabled])) {
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.ButtonText};
                box-shadow: 0 0 0 calc(var(--focus-outline-width) * 1px) inset ${SystemColors.HighlightText};
                color: ${SystemColors.HighlightText};
                fill: currentcolor;
            }

            ::slotted([role="option"]:not([aria-selected="true"]):not([disabled]):hover) {
                forced-color-adjust: none;
                color: ${SystemColors.ButtonText};
                background: ${SystemColors.ButtonFace};
                border-color: ${SystemColors.Highlight};
                box-shadow: none;
            }
        `), neutralFillInputActiveBehavior, neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFillStealthRestBehavior, neutralFocusBehavior, neutralFocusInnerAccentBehavior, neutralForegroundRestBehavior, neutralLayerFloatingBehavior, neutralOutlineRestBehavior);

// node_modules/@fluentui/web-components/dist/esm/combobox/combobox.styles.js
var ComboboxStyles = css2`
    ${SelectStyles}

    :host(:empty) .listbox {
        display: none;
    }

    :host([disabled]) *,
    :host([disabled]) {
        cursor: ${disabledCursor};
        user-select: none;
    }

    :host(:active) .selected-value {
        user-select: none;
    }

    .selected-value {
        -webkit-appearance: none;
        background: transparent;
        border: none;
        color: inherit;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        height: calc(100% - (var(--outline-width) * 1px));
        margin: auto 0;
        width: 100%;
    }

    .selected-value:hover,
    .selected-value:${focusVisible},
    .selected-value:disabled,
    .selected-value:active {
        outline: none;
    }
`.withBehaviors(appearanceBehavior("filled", SelectFilledStyles));

// node_modules/@fluentui/web-components/dist/esm/combobox/index.js
var FluentCombobox = class FluentCombobox2 extends Combobox {
  /**
   * @internal
   */
  appearanceChanged(oldValue, newValue) {
    if (oldValue !== newValue) {
      this.classList.add(newValue);
      this.classList.remove(oldValue);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (!this.appearance) {
      this.appearance = "outline";
    }
  }
};
__decorate6([
  attr({ mode: "fromView" })
], FluentCombobox.prototype, "appearance", void 0);
FluentCombobox = __decorate6([
  customElement2({
    name: "fluent-combobox",
    template: ComboboxTemplate,
    styles: ComboboxStyles,
    shadowOptions: {
      delegatesFocus: true
    }
  })
], FluentCombobox);

// node_modules/@fluentui/web-components/dist/esm/data-grid/data-grid.styles.js
var DataGridStyles = css2`
  :host {
    display: flex;
    position: relative;
    flex-direction: column;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/data-grid/data-grid-row.styles.js
var DataGridRowStyles = css2`
  :host {
    display: grid;
    padding: 1px 0;
    box-sizing: border-box;
    width: 100%;
    border-bottom: calc(var(--outline-width) * 1px) solid var(--neutral-divider-rest);
  }

  :host(.header) {
  }

  :host(.sticky-header) {
    background: ${neutralFillRestBehavior.var};
    position: sticky;
    top: 0;
  }
`.withBehaviors(neutralDividerRestBehavior, neutralFillRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host {
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/data-grid/data-grid-cell.styles.js
var DataGridCellStyles = css2`
    :host {
        padding: calc(var(--design-unit) * 1px) calc(var(--design-unit) * 3px);
        color: ${neutralForegroundRestBehavior.var};
        box-sizing: border-box;
        font-family: var(--body-font);
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        font-weight: 400;
        border: transparent calc(var(--outline-width) * 1px) solid;
        overflow: hidden;
        white-space: nowrap;
        border-radius: calc(var(--corner-radius) * 1px);
    }

    :host(.column-header) {
        font-weight: 600;
    }

    :host(:${focusVisible}) {
        border: ${neutralFocusBehavior.var} calc(var(--outline-width) * 1px) solid;
        color: ${neutralForegroundActiveBehavior.var};
    }

`.withBehaviors(neutralFocusBehavior, neutralForegroundActiveBehavior, neutralForegroundRestBehavior, forcedColorsStylesheetBehavior(css2`
        :host {
            forced-color-adjust: none;
            border-color: transparent;
            background: ${SystemColors.Field};
            color: ${SystemColors.FieldText};
        }

        :host(:${focusVisible}) {
            border-color: ${SystemColors.FieldText};
            box-shadow: 0 0 0 2px inset ${SystemColors.Field};
            color: ${SystemColors.FieldText};
        }
        `));

// node_modules/@fluentui/web-components/dist/esm/data-grid/index.js
var cellTemplate = createDataGridCellTemplate("fluent");
var gridTemplate = createDataGridTemplate("fluent");
var rowTemplate = createDataGridRowTemplate("fluent");
var FluentDataGrid = class FluentDataGrid2 extends DataGrid {
};
FluentDataGrid = __decorate6([
  customElement2({
    name: "fluent-data-grid",
    template: gridTemplate,
    styles: DataGridStyles
  })
], FluentDataGrid);
var FluentDataGridRow = class FluentDataGridRow2 extends DataGridRow {
};
FluentDataGridRow = __decorate6([
  customElement2({
    name: "fluent-data-grid-row",
    template: rowTemplate,
    styles: DataGridRowStyles
  })
], FluentDataGridRow);
var FluentDataGridCell = class FluentDataGridCell2 extends DataGridCell {
};
FluentDataGridCell = __decorate6([
  customElement2({
    name: "fluent-data-grid-cell",
    template: cellTemplate,
    styles: DataGridCellStyles
  })
], FluentDataGridCell);

// node_modules/@fluentui/web-components/dist/esm/dialog/dialog.styles.js
var DialogStyles = css2`
  :host([hidden]) {
    display: none;
  }

  :host {
    --elevation: 14;
    --dialog-height: 480px;
    --dialog-width: 640px;
    display: block;
  }

  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
    touch-action: none;
  }

  .positioning-region {
    display: flex;
    justify-content: center;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    overflow: auto;
  }

  .control {
    ${elevation}
    margin-top: auto;
    margin-bottom: auto;
    border-radius: calc(var(--elevated-corner-radius) * 1px);
    width: var(--dialog-width);
    height: var(--dialog-height);
    background: var(--background-color);
    z-index: 1;
    border: calc(var(--outline-width) * 1px) solid transparent;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/dialog/index.js
var FluentDialog = class FluentDialog2 extends Dialog {
};
FluentDialog = __decorate6([
  customElement2({
    name: "fluent-dialog",
    template: DialogTemplate,
    styles: DialogStyles
  })
], FluentDialog);

// node_modules/@fluentui/web-components/dist/esm/divider/divider.styles.js
var DividerStyles = css2`
  ${display("block")} :host {
    box-sizing: content-box;
    height: 0;
    margin: calc(var(--design-unit) * 1px) 0;
    border: none;
    border-top: calc(var(--outline-width) * 1px) solid ${neutralDividerRestBehavior.var};
  }
`.withBehaviors(neutralDividerRestBehavior);

// node_modules/@fluentui/web-components/dist/esm/divider/index.js
var FluentDivider = class FluentDivider2 extends Divider {
};
FluentDivider = __decorate6([
  customElement2({
    name: "fluent-divider",
    template: DividerTemplate,
    styles: DividerStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentDivider);

// node_modules/@fluentui/web-components/dist/esm/flipper/flipper.styles.js
var FlipperStyles = css2`
    ${display("inline-flex")} :host {
        width: calc(${heightNumber} * 1px);
        height: calc(${heightNumber} * 1px);
        justify-content: center;
        align-items: center;
        margin: 0;
        position: relative;
        fill: currentcolor;
        color: ${neutralForegroundRestBehavior.var};
        background: transparent;
        border: none;
        outline: none;
        padding: 0;
    }

    :host::before {
        content: "";
        opacity: 0.8;
        background: ${neutralFillStealthRestBehavior.var};
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
        border-radius: 50%;
        position: absolute;
        top: 0;
        right: 0;
        left: 0;
        bottom: 0;
        transition: all 0.1s ease-in-out;
    }

    .next,
    .previous {
        position: relative;
        ${/* Glyph size and margin-left is temporary -
  replace when adaptive typography is figured out */
""} width: 16px;
        height: 16px;
    }

    :host(.disabled) {
        opacity: var(--disabled-opacity);
        cursor: ${disabledCursor};
    }

    :host(:hover) {
        cursor: pointer;
    }

    :host(:hover)::before {
        background: ${neutralFillStealthHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    :host(:${focusVisible}) {
        outline: none;
    }

    :host(:${focusVisible})::before {
        box-shadow: 0 0 0 1px ${neutralFocusBehavior.var} inset;
        border-color: ${neutralFocusBehavior.var};
    }

    :host(:active)::before {
        background: ${neutralFillStealthActiveBehavior.var};
        border-color: ${neutralOutlineActiveBehavior.var};
    }

    :host::-moz-focus-inner {
        border: 0;
    }
`.withBehaviors(neutralFillStealthActiveBehavior, neutralFillStealthHoverBehavior, neutralFillStealthRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineActiveBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
            :host {
                background: ${SystemColors.Canvas};
            }
            :host .next,
            :host .previous {
                color: ${SystemColors.ButtonText};
                fill: currentcolor;
            }
            :host::before {
                background: ${SystemColors.Canvas};
                border-color: ${SystemColors.ButtonText};
            }
            :host(:hover)::before {
                forced-color-adjust: none;
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.ButtonText};
                opacity: 1;
            }
            :host(:hover) .next,
            :host(:hover) .previous {
                forced-color-adjust: none;
                color: ${SystemColors.HighlightText};
                fill: currentcolor;
            }
            :host(.disabled) {
                opacity: 1;
            }
            :host(.disabled)::before,
            :host(.disabled:hover)::before,
            :host(.disabled) .next,
            :host(.disabled) .previous,
            :host(.disabled:hover) .next,
            :host(.disabled:hover) .previous {
                forced-color-adjust: none;
                background: ${SystemColors.Canvas};
                border-color: ${SystemColors.GrayText};
                color: ${SystemColors.GrayText};
                fill: ${SystemColors.GrayText};
            }
            :host(:${focusVisible})::before {
                forced-color-adjust: none;
                border-color: ${SystemColors.Highlight};
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
        `));

// node_modules/@fluentui/web-components/dist/esm/flipper/index.js
var FluentFlipper = class FluentFlipper2 extends Flipper {
};
FluentFlipper = __decorate6([
  customElement2({
    name: "fluent-flipper",
    template: FlipperTemplate,
    styles: FlipperStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentFlipper);

// node_modules/@fluentui/web-components/dist/esm/horizontal-scroll/horizontal-scroll.styles.js
var ltrActionsStyles = css2`
  .scroll-prev {
    right: auto;
    left: 0;
  }

  .scroll.scroll-next::before,
  .scroll-next .scroll-action {
    left: auto;
    right: 0;
  }

  .scroll.scroll-next::before {
    background: linear-gradient(to right, transparent, var(--scroll-fade-next));
  }

  .scroll-next .scroll-action {
    transform: translate(50%, -50%);
  }
`;
var rtlActionsStyles = css2`
  .scroll.scroll-next {
    right: auto;
    left: 0;
  }

  .scroll.scroll-next::before {
    background: linear-gradient(to right, var(--scroll-fade-next), transparent);
    left: auto;
    right: 0;
  }

  .scroll.scroll-prev::before {
    background: linear-gradient(to right, transparent, var(--scroll-fade-previous));
  }

  .scroll-prev .scroll-action {
    left: auto;
    right: 0;
    transform: translate(50%, -50%);
  }
`;
var ActionsStyles = css2`
  .scroll-area {
    position: relative;
  }

  div.scroll-view {
    overflow-x: hidden;
  }

  .scroll {
    bottom: 0;
    pointer-events: none;
    position: absolute;
    right: 0;
    top: 0;
    user-select: none;
    width: 100px;
  }

  .scroll.disabled {
    display: none;
  }

  .scroll::before,
  .scroll-action {
    left: 0;
    position: absolute;
  }

  .scroll::before {
    background: linear-gradient(to right, var(--scroll-fade-previous), transparent);
    content: '';
    display: block;
    height: 100%;
    width: 100%;
  }

  .scroll-action {
    pointer-events: auto;
    right: auto;
    top: 50%;
    transform: translate(-50%, -50%);
  }

  ::slotted(fluent-flipper) {
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
  }

  .scroll-area:hover ::slotted(fluent-flipper) {
    opacity: 1;
  }
`.withBehaviors(new DirectionalStyleSheetBehavior(ltrActionsStyles, rtlActionsStyles));
var HorizontalScrollStyles = css2`
  ${display("block")} :host {
    --scroll-align: center;
    --scroll-item-spacing: 4px;
    contain: layout;
    position: relative;
  }

  .scroll-view {
    overflow-x: auto;
    scrollbar-width: none;
  }

  ::-webkit-scrollbar {
    display: none;
  }

  .content-container {
    align-items: var(--scroll-align);
    display: inline-flex;
    flex-wrap: nowrap;
    position: relative;
  }

  .content-container ::slotted(*) {
    margin-right: var(--scroll-item-spacing);
  }

  .content-container ::slotted(*:last-child) {
    margin-right: 0;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/horizontal-scroll/index.js
var FluentHorizontalScroll = class FluentHorizontalScroll2 extends HorizontalScroll {
  /**
   * @public
   */
  connectedCallback() {
    super.connectedCallback();
    if (this.view !== "mobile") {
      this.$fastController.addStyles(ActionsStyles);
    }
  }
};
FluentHorizontalScroll = __decorate6([
  customElement2({
    name: "fluent-horizontal-scroll",
    template: HorizontalScrollTemplate,
    styles: HorizontalScrollStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentHorizontalScroll);

// node_modules/@fluentui/web-components/dist/esm/listbox/listbox.styles.js
var ListboxStyles = css2`
  ${display("inline-flex")} :host {
    background: ${neutralLayerFloatingBehavior.var};
    border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
    border-radius: calc(var(--corner-radius) * 1px);
    box-sizing: border-box;
    flex-direction: column;
    padding: calc(var(--design-unit) * 1px) 0;
  }

  :host(:focus-within:not([disabled])) {
    border-color: ${neutralFocusBehavior.var};
    box-shadow: 0 0 0 1px ${neutralFocusBehavior.var} inset;
  }
`.withBehaviors(forcedColorsStylesheetBehavior(css2`
            :host(:${focusVisible}) ::slotted([aria-selected="true"][role="option"]) {
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.ButtonText};
                box-shadow: 0 0 0 calc(var(--focus-outline-width) * 1px) inset ${SystemColors.HighlightText};
                color: ${SystemColors.HighlightText};
                fill: currentcolor;
            }

            :host(:${focusVisible}) ::slotted([aria-selected="true"][role="option"]) {
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.ButtonText};
                box-shadow: 0 0 0 calc(var(--focus-outline-width) * 1px) inset ${SystemColors.HighlightText};
                color: ${SystemColors.HighlightText};
                fill: currentcolor;
            }

            ::slotted([role="option"]:not([aria-selected="true"]):not([disabled]):hover) {
                forced-color-adjust: none;
                color: ${SystemColors.ButtonText};
                background: ${SystemColors.ButtonFace};
                border-color: ${SystemColors.Highlight};
                box-shadow: none;
            }
        `), neutralLayerFloatingBehavior, neutralOutlineRestBehavior, neutralOutlineFocusBehavior);

// node_modules/@fluentui/web-components/dist/esm/listbox/index.js
var FluentListbox = class FluentListbox2 extends Listbox {
};
FluentListbox = __decorate6([
  customElement2({
    name: "fluent-listbox",
    template: ListboxTemplate,
    styles: ListboxStyles
  })
], FluentListbox);

// node_modules/@fluentui/web-components/dist/esm/listbox-option/listbox-option.styles.js
var OptionStyles = css2`
    ${display("inline-flex")} :host {
        font-family: var(--body-font);
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--focus-outline-width) * 1px) solid transparent;
        box-sizing: border-box;
        color: ${neutralForegroundRestBehavior.var};
        cursor: pointer;
        fill: currentcolor;
        font-size: var(--type-ramp-base-font-size);
        height: calc(${heightNumber} * 1px);
        line-height: var(--type-ramp-base-line-height);
        margin: 0 calc(var(--design-unit) * 1px);
        outline: none;
        overflow: hidden;
        align-items: center;
        padding: 0 calc(var(--design-unit) * 2.25px);
        user-select: none;
        white-space: nowrap;
    }

    :host(:${focusVisible}) {
        box-shadow: 0 0 0 calc(var(--focus-outline-width) * 1px) inset ${neutralFocusInnerAccentBehavior.var};
        border-color: ${neutralFocusBehavior.var};
        background: ${accentFillHoverBehavior.var};
        color: ${accentForegroundCutRestBehavior.var};
    }

    :host([aria-selected="true"]) {
        background: ${accentFillHoverBehavior.var};
        color: ${accentForegroundCutRestBehavior.var};
    }

    :host(:active) {
        background: ${accentFillActiveBehavior.var};
        color: ${accentForegroundCutRestBehavior.var};
    }

    :host(:not([aria-selected="true"]):hover) {
        background: ${neutralFillHoverBehavior.var};
        color: ${neutralForegroundHoverBehavior.var};
    }

    :host(:not([aria-selected="true"]):active) {
        background: ${neutralFillHoverBehavior.var};
        color: ${neutralForegroundHoverBehavior.var};
    }

    :host([disabled]) {
        cursor: ${disabledCursor};
        opacity: var(--disabled-opacity);
    }

    :host([disabled]:hover) {
        background-color: inherit;
    }

    .content {
        grid-column-start: 2;
        justify-self: start;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .start,
    .end,
    ::slotted(svg) {
        display: flex;
    }

    ::slotted(svg) {
        ${/* Glyph size and margin-left is temporary - replace when adaptive typography is figured out */
""}
        height: calc(var(--design-unit) * 4px);
        width: calc(var(--design-unit) * 4px);
    }

    ::slotted([slot="end"]) {
        margin-inline-start: 1ch;
    }

    ::slotted([slot="start"]) {
        margin-inline-end: 1ch;
    }

`.withBehaviors(accentFillActiveBehavior, accentFillHoverBehavior, accentFillSelectedBehavior, accentForegroundCutRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host {
        border-color: transparent;
        color: ${SystemColors.ButtonText};
        forced-color-adjust: none;
      }

      :host(:not([aria-selected='true']):hover),
      :host([aria-selected='true']) {
        background: ${SystemColors.Highlight};
        color: ${SystemColors.HighlightText};
      }

      :host([disabled]),
      :host([disabled]:not([aria-selected='true']):hover) {
        background: ${SystemColors.Canvas};
        color: ${SystemColors.GrayText};
        fill: currentcolor;
        opacity: 1;
      }
    `), neutralFillHoverBehavior, neutralFillStealthHoverBehavior, neutralFillStealthRestBehavior, neutralFillStealthSelectedBehavior, neutralFocusBehavior, neutralFocusInnerAccentBehavior, neutralForegroundHoverBehavior, neutralForegroundRestBehavior, neutralLayerL1Behavior);

// node_modules/@fluentui/web-components/dist/esm/listbox-option/index.js
var FluentOption = class FluentOption2 extends ListboxOption {
};
FluentOption = __decorate6([
  customElement2({
    name: "fluent-option",
    template: ListboxOptionTemplate,
    styles: OptionStyles
  })
], FluentOption);

// node_modules/@fluentui/web-components/dist/esm/menu/menu.styles.js
var MenuStyles = css2`
  ${display("block")} :host {
    --elevation: 11;
    background: ${neutralLayerFloatingBehavior.var};
    border: calc(var(--outline-width) * 1px) solid transparent;
    border-radius: var(--elevated-corner-radius);
    ${elevation}
    margin: 0;
    border-radius: calc(var(--corner-radius) * 1px);
    padding: calc(var(--design-unit) * 1px) 0;
    max-width: 368px;
    min-width: 64px;
  }

  :host([slot='submenu']) {
    width: max-content;
    margin: 0 calc(var(--design-unit) * 1px);
  }

  ::slotted(hr) {
    box-sizing: content-box;
    height: 0;
    margin: 0;
    border: none;
    border-top: calc(var(--outline-width) * 1px) solid var(--neutral-divider-rest);
  }
`.withBehaviors(neutralLayerFloatingBehavior, neutralDividerRestBehavior);

// node_modules/@fluentui/web-components/dist/esm/menu/index.js
var FluentMenu = class FluentMenu2 extends Menu {
};
FluentMenu = __decorate6([
  customElement2({
    name: "fluent-menu",
    template: MenuTemplate,
    styles: MenuStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentMenu);

// node_modules/@fluentui/web-components/dist/esm/menu-item/menu-item.styles.js
var MenuItemStyles = css2`
    ${display("grid")} :host {
        outline: none;
        box-sizing: border-box;
        height: calc(${heightNumber} * 1px);
        grid-template-columns: minmax(42px, auto) 1fr minmax(42px, auto);
        grid-template-rows: auto;
        justify-items: center;
        align-items: center;
        padding: 0;
        margin: 0 calc(var(--design-unit) * 1px);
        white-space: nowrap;
        overflow: hidden;
        color: ${neutralForegroundRestBehavior.var};
        fill: currentcolor;
        cursor: pointer;
        font-family: var(--body-font);
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--outline-width) * 1px) solid transparent;
    }

    :host(:${focusVisible}) {
        border: calc(var(--outline-width) * 1px) solid ${neutralFocusBehavior.var};
        box-shadow: 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px) ${neutralFocusBehavior.var};
    }

    :host(:hover) {
        background: ${neutralFillStealthHoverBehavior.var};
    }

    :host(:active) {
        background: ${neutralFillStealthActiveBehavior.var};
    }

    :host(.disabled) {
        cursor: ${disabledCursor};
        opacity: var(--disabled-opacity);
    }

    :host(.disabled:hover) .start,
    :host(.disabled:hover) .end,
    :host(.disabled:hover)::slotted(svg) {
        fill: currentcolor;
    }

    .content {
        grid-column-start: 2;
        justify-self: start;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .start,
    .end,
    ::slotted(svg) {
        ${/* Glyph size and margin-left is temporary -
  replace when adaptive typography is figured out */
""} width: 16px;
        height: 16px;
        display: flex;
    }

    :host(:hover) .start,
    :host(:hover) .end,
    :host(:hover)::slotted(svg),
    :host(:active) .start,
    :host(:active) .end,
    :host(:active)::slotted(svg) {
        fill: ${neutralForegroundRestBehavior.var};
    }


    :host([role="menuitemcheckbox"]),
    :host([role="menuitemradio"]) {
        display: grid;
        grid-template-columns: auto auto 1fr minmax(42px, auto);
        align-items: center;
        min-height: 32px;
    }

    :host .input-container {
        display: none;
    }

    :host([role="menuitemcheckbox"]) .input-container,
    :host([role="menuitemradio"]) .input-container {
        display: grid;
        margin-inline-end: 10px;
    }

    :host([role="menuitemcheckbox"]) .start,
    :host([role="menuitemradio"]) .start {
        grid-column-start: 2;
        margin-inline-end: 10px;
    }

    :host([role="menuitemcheckbox"]) .content,
    :host([role="menuitemradio"]) .content {
        grid-column-start: 3;
    }

    :host([role="menuitemcheckbox"]) .end,
    :host([role="menuitemradio"]) .end {
        grid-column-start: 4;
    }

    :host .checkbox,
    :host .radio {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        width: 20px;
        height: 20px;
        box-sizing: border-box;
        border: calc(var(--outline-width) * 1px) solid ${neutralForegroundRestBehavior.var};
        outline: none;
        margin-inline-start: 10px;
    }

    :host .checkbox {
        border-radius: calc(var(--corner-radius) * 1px);
    }

    :host .radio {
        border-radius: 999px;
    }

    :host .checkbox-indicator,
    :host .radio-indicator,
    ::slotted([slot="checkbox-indicator"]),
    ::slotted([slot="radio-indicator"]) {
        display: none;
    }

    :host([aria-checked="true"]) .checkbox-indicator,
    :host([aria-checked="true"]) ::slotted([slot="checkbox-indicator"]) {
        width: 100%;
        height: 100%;
        display: block;
        fill: ${neutralForegroundRestBehavior.var};
        pointer-events: none;
    }

    :host([aria-checked="true"]) .radio-indicator {
        position: absolute;
        top: 4px;
        left: 4px;
        right: 4px;
        bottom: 4px;
        border-radius: 999px;
        display: block;
        background: ${neutralForegroundRestBehavior.var};
        pointer-events: none;
    }

    :host([aria-checked="true"]) ::slotted([slot="radio-indicator"]) {
        display: block;
        pointer-events: none;
    }
`.withBehaviors(neutralFillStealthActiveBehavior, neutralFillStealthHoverBehavior, neutralFillStealthRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, forcedColorsStylesheetBehavior(css2`
            :host {
                forced-color-adjust: none;
                border-color: transparent;
                color: ${SystemColors.ButtonText};
                fill: ${SystemColors.ButtonText};
            }
            :host(:hover) {
                background: ${SystemColors.Highlight};
                color: ${SystemColors.HighlightText};
            }
            :host(:hover) .start,
            :host(:hover) .end,
            :host(:hover)::slotted(svg),
            :host(:active) .start,
            :host(:active) .end,
            :host(:active)::slotted(svg) {
                fill: ${SystemColors.HighlightText};
            }
            :host(:${focusVisible}) {
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.ButtonText};
                box-shadow: 0 0 0 calc(var(--focus-outline-width) * 1px) inset ${SystemColors.HighlightText};
                color: ${SystemColors.HighlightText};
                fill: currentcolor;
            }
            :host(.disabled),
            :host(.disabled:hover),
            :host(.disabled:hover) .start,
            :host(.disabled:hover) .end,
            :host(.disabled:hover)::slotted(svg) {
                background: ${SystemColors.Canvas};
                color: ${SystemColors.GrayText};
                fill: currentcolor;
                opacity: 1;
            }

            :host .checkbox,
            :host .radio{
                border-color: ${SystemColors.ButtonText};
                background: ${SystemColors.HighlightText};
            }

            :host([checked="true"]) .checkbox,
            :host([checked="true"]) .radio {
                background: ${SystemColors.HighlightText};
                border-color: ${SystemColors.HighlightText};
            }

            :host(:hover) .checkbox,
            :host(:hover) .radio,
            :host(:${focusVisible}) .checkbox,
            :host(:${focusVisible}) .radio,
            :host([checked="true"]:hover) .checkbox,
            :host([checked="true"]:hover) .radio,
            :host([checked="true"]:${focusVisible}) .checkbox,
            :host([checked="true"]:${focusVisible}) .radio {
                border-color: ${SystemColors.HighlightText};
            }

            :host([aria-checked="true"]) {
                background: ${SystemColors.Highlight};
                color: ${SystemColors.HighlightText};
            }

            :host([aria-checked="true"]) .checkbox-indicator,
            :host([aria-checked="true"]) ::slotted([slot="checkbox-indicator"]),
            :host([aria-checked="true"]) ::slotted([slot="radio-indicator"]) {
                fill: ${SystemColors.Highlight};
            }

            :host([aria-checked="true"]) .radio-indicator {
                background: ${SystemColors.Highlight};
            }
        `));

// node_modules/@fluentui/web-components/dist/esm/menu-item/index.js
var FluentMenuItem = class FluentMenuItem2 extends MenuItem {
};
FluentMenuItem = __decorate6([
  customElement2({
    name: "fluent-menu-item",
    template: MenuItemTemplate,
    styles: MenuItemStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentMenuItem);

// node_modules/@fluentui/web-components/dist/esm/number-field/number-field.styles.js
var NumberFieldFilledStyles = css2`
  :host([appearance='filled']) .root {
    background: ${neutralFillRestBehavior.var};
    border-color: transparent;
  }

  :host([appearance='filled']:hover:not([disabled])) .root {
    background: ${neutralFillHoverBehavior.var};
    border-color: transparent;
  }

  :host([appearance='filled']:focus-within:not([disabled])) .root {
    border-color: transparent;
    box-shadow: none;
  }
  ${FillStateStyles}
`.withBehaviors(accentFillRestBehavior, neutralFillHoverBehavior, neutralFillRestBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host([appearance='filled']) .root,
      :host([appearance='filled']:hover:not([disabled])) .root {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host([appearance='filled']:active:not([disabled])) .root,
      :host([appearance='filled']:focus-within:not([disabled])) .root {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host([appearance='filled']:not([disabled]):active)::after,
      :host([appearance='filled']:not([disabled]):focus-within:not(:active))::after {
        border-bottom-color: ${SystemColors.Highlight};
      }
      :host([appearance='filled'][disabled]) .root {
        border-color: ${SystemColors.GrayText};
        background: ${SystemColors.Field};
      }
      :host([appearance='filled'][disabled]) .root {
        border-color: ${SystemColors.GrayText};
        background: ${SystemColors.Field};
      }
    `));
var NumberFieldStyles = css2`
    ${display("inline-block")} :host {
        font-family: var(--body-font);
        outline: none;
        user-select: none;
        position: relative;
    }

    .root {
        box-sizing: border-box;
        position: relative;
        display: flex;
        flex-direction: row;
        color: ${neutralForegroundRestBehavior.var};
        background: ${neutralFillInputRestBehavior.var};
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
        height: calc(${heightNumber} * 1px);
    }

    .control {
        -webkit-appearance: none;
        font: inherit;
        background: transparent;
        border: 0;
        color: inherit;
        height: calc(100% - 4px);
        width: 100%;
        margin-top: auto;
        margin-bottom: auto;
        border: none;
        padding: 0 calc(var(--design-unit) * 2px + 1px);
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
    }

    .control:hover,
    .control:${focusVisible},
    .control:disabled,
    .control:active {
        outline: none;
    }

    .controls {
        opacity: 0;
    }

    .label {
        display: block;
        color: ${neutralForegroundRestBehavior.var};
        cursor: pointer;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        margin-bottom: 4px;
    }

    .label__hidden {
        display: none;
        visibility: hidden;
    }

    .start,
    .end {
        margin: auto;
        fill: currentcolor;
    }

    .step-up,
    .step-down {
        padding: 2px 10px;
        cursor: pointer;
    }

    .step-up:before,
    .step-down:before {
        content: '';
        display: block;
        border: solid transparent 6px;
    }

    .step-up:before {
        border-bottom-color: ${neutralForegroundRestBehavior.var};
    }

    .step-down:before {
        border-top-color: ${neutralForegroundRestBehavior.var};
    }

    ::slotted(svg) {
        ${/* Glyph size and margin-left is temporary -
  replace when adaptive typography is figured out */
""} width: 16px;
        height: 16px;
    }

    .start {
        display: flex;
        margin-inline-start: 11px;
    }

    .end {
        display: flex;
        margin-inline-end: 11px;
    }

    :host(:hover:not([disabled])) .root {
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    :host(:active:not([disabled])) .root {
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineActiveBehavior.var};
    }

    :host(:focus-within:not([disabled])) .root {
        border-color: ${neutralFocusBehavior.var};
        box-shadow: 0 0 0 1px ${neutralFocusBehavior.var} inset;
    }

    :host(:hover:not([disabled])) .controls,
    :host(:focus-within:not([disabled])) .controls {
        opacity: 1;
    }

    :host([disabled]) .label,
    :host([readonly]) .label,
    :host([readonly]) .control,
    :host([disabled]) .control {
        cursor: ${disabledCursor};
    }

    :host([disabled]) {
        opacity: var(--disabled-opacity);
    }

    :host([disabled]) .control {
        border-color: ${neutralOutlineRestBehavior.var};
    }
`.withBehaviors(appearanceBehavior("filled", NumberFieldFilledStyles), neutralFillHoverBehavior, neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFillRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineActiveBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
      .root {
        forced-color-adjust: none;
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host(:hover:not([disabled])) .root {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.Highlight};
      }
      :host(:focus-within:enabled) .root {
        border-color: ${SystemColors.Highlight};
        box-shadow: 0 0 0 1px ${SystemColors.Highlight} inset;
      }
      .control,
      ::placeholder,
      ::-webkit-input-placeholder {
        color: ${SystemColors.FieldText};
      }
      .step-up:before {
        border-bottom-color: ${SystemColors.FieldText};
      }
      .step-down:before {
        border-top-color: ${SystemColors.FieldText};
      }
      .start,
      .end {
        fill: ${SystemColors.FieldText};
      }
      :host([disabled]) {
        opacity: 1;
      }
      :host([disabled]) .root {
        border-color: ${SystemColors.GrayText};
        background: ${SystemColors.Field};
      }
      :host([disabled]) ::placeholder,
      :host([disabled]) ::-webkit-input-placeholder,
      :host([disabled]) .label {
        color: ${SystemColors.GrayText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/number-field/index.js
var FluentNumberField = class FluentNumberField2 extends NumberField {
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (!this.appearance) {
      this.appearance = "outline";
    }
  }
};
__decorate6([
  attr
], FluentNumberField.prototype, "appearance", void 0);
FluentNumberField = __decorate6([
  customElement2({
    name: "fluent-number-field",
    shadowOptions: {
      delegatesFocus: true,
      mode: "closed"
    },
    styles: NumberFieldStyles,
    template: NumberFieldTemplate
  })
], FluentNumberField);

// node_modules/@fluentui/web-components/dist/esm/progress/progress/progress.styles.js
var ProgressStyles = css2`
  ${display("flex")} :host {
    align-items: center;
    outline: none;
    height: calc(var(--design-unit) * 1px);
    margin: calc(var(--design-unit) * 1px) 0;
  }

  .progress {
    background-color: ${neutralFillRestBehavior.var};
    border-radius: calc(var(--design-unit) * 1px);
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    position: relative;
  }

  .determinate {
    background-color: ${accentForegroundRestBehavior.var};
    border-radius: calc(var(--design-unit) * 1px);
    height: 100%;
    transition: all 0.2s ease-in-out;
    display: flex;
  }

  .indeterminate {
    height: 100%;
    border-radius: calc(var(--design-unit) * 1px);
    display: flex;
    width: 100%;
    position: relative;
    overflow: hidden;
  }

  .indeterminate-indicator-1 {
    position: absolute;
    opacity: 0;
    height: 100%;
    background-color: ${accentForegroundRestBehavior.var};
    border-radius: calc(var(--design-unit) * 1px);
    animation-timing-function: cubic-bezier(0.4, 0, 0.6, 1);
    width: 40%;
    animation: indeterminate-1 2s infinite;
  }

  .indeterminate-indicator-2 {
    position: absolute;
    opacity: 0;
    height: 100%;
    background-color: ${accentForegroundRestBehavior.var};
    border-radius: calc(var(--design-unit) * 1px);
    animation-timing-function: cubic-bezier(0.4, 0, 0.6, 1);
    width: 60%;
    animation: indeterminate-2 2s infinite;
  }

  :host(.paused) .indeterminate-indicator-1,
  :host(.paused) .indeterminate-indicator-2 {
    animation-play-state: paused;
    background-color: ${neutralFillRestBehavior.var};
  }

  :host(.paused) .determinate {
    background-color: ${neutralForegroundHintBehavior.var};
  }

  @keyframes indeterminate-1 {
    0% {
      opacity: 1;
      transform: translateX(-100%);
    }
    70% {
      opacity: 1;
      transform: translateX(300%);
    }
    70.01% {
      opacity: 0;
    }
    100% {
      opacity: 0;
      transform: translateX(300%);
    }
  }

  @keyframes indeterminate-2 {
    0% {
      opacity: 0;
      transform: translateX(-150%);
    }
    29.99% {
      opacity: 0;
    }
    30% {
      opacity: 1;
      transform: translateX(-150%);
    }
    100% {
      transform: translateX(166.66%);
      opacity: 1;
    }
  }
`.withBehaviors(accentForegroundRestBehavior, neutralFillRestBehavior, neutralForegroundHintBehavior, forcedColorsStylesheetBehavior(css2`
      .indeterminate-indicator-1,
      .indeterminate-indicator-2,
      .determinate {
        forced-color-adjust: none;
        background-color: ${SystemColors.FieldText};
      }
      .progress {
        background-color: ${SystemColors.Field};
        border: calc(var(--outline-width) * 1px) solid ${SystemColors.FieldText};
      }
      :host(.paused) .indeterminate-indicator-1,
      .indeterminate-indicator-2 {
        background-color: ${SystemColors.Field};
      }
      :host(.paused) .determinate {
        background-color: ${SystemColors.GrayText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/progress/progress/index.js
var FluentProgress = class FluentProgress2 extends BaseProgress {
};
FluentProgress = __decorate6([
  customElement2({
    name: "fluent-progress",
    template: ProgressTemplate,
    styles: ProgressStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentProgress);

// node_modules/@fluentui/web-components/dist/esm/progress/progress-ring/progress-ring.styles.js
var ProgressRingStyles = css2`
  ${display("flex")} :host {
    align-items: center;
    outline: none;
    height: calc(${heightNumber} * 1px);
    width: calc(${heightNumber} * 1px);
    margin: calc(${heightNumber} * 1px) 0;
  }

  .progress {
    height: 100%;
    width: 100%;
  }

  .background {
    stroke: ${neutralFillRestBehavior.var};
    fill: none;
    stroke-width: 2px;
  }

  .determinate {
    stroke: ${accentForegroundRestBehavior.var};
    fill: none;
    stroke-width: 2px;
    stroke-linecap: round;
    transform-origin: 50% 50%;
    transform: rotate(-90deg);
    transition: all 0.2s ease-in-out;
  }

  .indeterminate-indicator-1 {
    stroke: ${accentForegroundRestBehavior.var};
    fill: none;
    stroke-width: 2px;
    stroke-linecap: round;
    transform-origin: 50% 50%;
    transform: rotate(-90deg);
    transition: all 0.2s ease-in-out;
    animation: spin-infinite 2s linear infinite;
  }

  :host(.paused) .indeterminate-indicator-1 {
    animation-play-state: paused;
    stroke: ${neutralFillRestBehavior.var};
  }

  :host(.paused) .determinate {
    stroke: ${neutralForegroundHintBehavior.var};
  }

  @keyframes spin-infinite {
    0% {
      stroke-dasharray: 0.01px 43.97px;
      transform: rotate(0deg);
    }
    50% {
      stroke-dasharray: 21.99px 21.99px;
      transform: rotate(450deg);
    }
    100% {
      stroke-dasharray: 0.01px 43.97px;
      transform: rotate(1080deg);
    }
  }
`.withBehaviors(accentForegroundRestBehavior, neutralFillRestBehavior, neutralForegroundHintBehavior, forcedColorsStylesheetBehavior(css2`
      .indeterminate-indicator-1,
      .determinate {
        stroke: ${SystemColors.FieldText};
      }
      .background {
        stroke: ${SystemColors.Field};
      }
      :host(.paused) .indeterminate-indicator-1 {
        stroke: ${SystemColors.Field};
      }
      :host(.paused) .determinate {
        stroke: ${SystemColors.GrayText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/progress/progress-ring/index.js
var FluentProgressRing = class FluentProgressRing2 extends BaseProgress {
};
FluentProgressRing = __decorate6([
  customElement2({
    name: "fluent-progress-ring",
    template: ProgressRingTemplate,
    styles: ProgressRingStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentProgressRing);

// node_modules/@fluentui/web-components/dist/esm/radio/radio.styles.js
var RadioStyles = css2`
    ${display("inline-flex")} :host {
        --input-size: calc((${heightNumber} / 2) + var(--design-unit));
        align-items: center;
        outline: none;
        margin: calc(var(--design-unit) * 1px) 0;
        ${/*
 * Chromium likes to select label text or the default slot when
 * the radio button is clicked. Maybe there is a better solution here?
 */
""} user-select: none;
        position: relative;
        flex-direction: row;
        transition: all 0.2s ease-in-out;
    }

    .control {
        position: relative;
        width: calc(var(--input-size) * 1px);
        height: calc(var(--input-size) * 1px);
        box-sizing: border-box;
        border-radius: 50%;
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
        background: ${neutralFillInputRestBehavior.var};
        outline: none;
        cursor: pointer;
    }

    .label__hidden {
        display: none;
        visibility: hidden;
    }

    .label {
        font-family: var(--body-font);
        color: ${neutralForegroundRestBehavior.var};
        ${/* Need to discuss with Brian how HorizontalSpacingNumber can work. https://github.com/microsoft/fast/issues/2766 */
""} padding-inline-start: calc(var(--design-unit) * 2px + 2px);
        margin-inline-end: calc(var(--design-unit) * 2px + 2px);
        cursor: pointer;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
    }

    .control, .checked-indicator {
      flex-shrink: 0;
    }

    .checked-indicator {
        position: absolute;
        top: 5px;
        left: 5px;
        right: 5px;
        bottom: 5px;
        border-radius: 50%;
        display: inline-block;
        background: ${neutralForegroundRestBehavior.var};
        fill: ${neutralForegroundRestBehavior.var};
        opacity: 0;
        pointer-events: none;
    }

    :host(:enabled) .control:hover{
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    :host(:enabled) .control:active {
        background: ${neutralFillInputActiveBehavior.var};
        border-color: ${neutralOutlineActiveBehavior.var};
    }

    :host(:${focusVisible}) .control {
        box-shadow: 0 0 0 2px var(--background-color), 0 0 0 4px ${neutralFocusBehavior.var};
        border-color: ${neutralFocusBehavior.var};
    }

    :host(.disabled) .label,
    :host(.readonly) .label,
    :host(.readonly) .control,
    :host(.disabled) .control {
        cursor: ${disabledCursor};
    }

    :host(.checked) .checked-indicator {
        opacity: 1;
    }

    :host(.disabled) {
        opacity: var(--disabled-opacity);
    }
`.withBehaviors(neutralFillActiveBehavior, neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineActiveBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, neutralFillInputActiveBehavior, forcedColorsStylesheetBehavior(css2`
            .control {
                forced-color-adjust: none;
                border-color: ${SystemColors.FieldText};
                background: ${SystemColors.Field};
            }
            :host(:enabled) .control:hover, .control:active {
                border-color: ${SystemColors.Highlight};
                background: ${SystemColors.Field};
            }
            :host(:${focusVisible}) .control {
                border-color: ${SystemColors.Highlight};
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
            :host(.checked:${focusVisible}:enabled) .control {
                border-color: ${SystemColors.Highlight};
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
            :host(.checked:enabled) .control:hover, .control:active {
                border-color: ${SystemColors.Highlight};
                background: ${SystemColors.Highlight};
            }
            :host(.checked) .checked-indicator {
                background: ${SystemColors.Highlight};
                fill: ${SystemColors.Highlight};
            }
            :host(.checked) .control:hover .checked-indicator {
                background: ${SystemColors.HighlightText};
                fill: ${SystemColors.HighlightText};
            }
            :host(.disabled) {
                forced-color-adjust: none;
                opacity: 1;
            }
            :host(.disabled) .label {
                color: ${SystemColors.GrayText};
            }
            :host(.disabled) .control,
            :host(.checked.disabled) .control:hover, .control:active {
                background: ${SystemColors.Field};
                border-color: ${SystemColors.GrayText};
            }
            :host(.disabled) .checked-indicator,
            :host(.checked.disabled) .control:hover .checked-indicator {
                fill: ${SystemColors.GrayText};
                background: ${SystemColors.GrayText};
            }
        `));

// node_modules/@fluentui/web-components/dist/esm/radio/index.js
var FluentRadio = class FluentRadio2 extends Radio {
};
FluentRadio = __decorate6([
  customElement2({
    name: "fluent-radio",
    template: RadioTemplate,
    styles: RadioStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentRadio);

// node_modules/@fluentui/web-components/dist/esm/radio-group/radio-group.styles.js
var RadioGroupStyles = css2`
  ${display("flex")} :host {
    align-items: flex-start;
    margin: calc(var(--design-unit) * 1px) 0;
    flex-direction: column;
  }

  .positioning-region {
    display: flex;
    flex-wrap: wrap;
  }

  :host([orientation='vertical']) .positioning-region {
    flex-direction: column;
  }

  :host([orientation='horizontal']) .positioning-region {
    flex-direction: row;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/radio-group/index.js
var FluentRadioGroup = class FluentRadioGroup2 extends RadioGroup {
};
FluentRadioGroup = __decorate6([
  customElement2({
    name: "fluent-radio-group",
    template: RadioGroupTemplate,
    styles: RadioGroupStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentRadioGroup);

// node_modules/@fluentui/web-components/dist/esm/select/index.js
var FluentSelect = class FluentSelect2 extends Select {
  /**
   * @internal
   */
  appearanceChanged(oldValue, newValue) {
    if (oldValue !== newValue) {
      this.classList.add(newValue);
      this.classList.remove(oldValue);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (!this.appearance) {
      this.appearance = "outline";
    }
  }
};
__decorate6([
  attr({ mode: "fromView" })
], FluentSelect.prototype, "appearance", void 0);
FluentSelect = __decorate6([
  customElement2({
    name: "fluent-select",
    template: SelectTemplate,
    styles: SelectStyles
  })
], FluentSelect);

// node_modules/@fluentui/web-components/dist/esm/skeleton/skeleton.styles.js
var SkeletonStyles = css2`
  ${display("block")} :host {
    --skeleton-fill-default: #e1dfdd;
    overflow: hidden;
    width: 100%;
    position: relative;
    background-color: var(--skeleton-fill, var(--skeleton-fill-default));
    --skeleton-animation-gradient-default: linear-gradient(
      270deg,
      var(--skeleton-fill, var(--skeleton-fill-default)) 0%,
      #f3f2f1 51.13%,
      var(--skeleton-fill, var(--skeleton-fill-default)) 100%
    );
    --skeleton-animation-timing-default: ease-in-out;
  }

  :host(.rect) {
    border-radius: calc(var(--corner-radius) * 1px);
  }

  :host(.circle) {
    border-radius: 100%;
    overflow: hidden;
  }

  object {
    position: absolute;
    width: 100%;
    height: auto;
    z-index: 2;
  }

  object img {
    width: 100%;
    height: auto;
  }

  ${display("block")} span.shimmer {
    position: absolute;
    width: 100%;
    height: 100%;
    background-image: var(--skeleton-animation-gradient, var(--skeleton-animation-gradient-default));
    background-size: 0px 0px / 90% 100%;
    background-repeat: no-repeat;
    background-color: var(--skeleton-animation-fill, ${neutralFillRestBehavior.var});
    animation: shimmer 2s infinite;
    animation-timing-function: var(--skeleton-animation-timing, var(--skeleton-timing-default));
    animation-direction: normal;
    z-index: 1;
  }

  ::slotted(svg) {
    z-index: 2;
  }

  ::slotted(.pattern) {
    width: 100%;
    height: 100%;
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
`.withBehaviors(neutralFillRestBehavior);

// node_modules/@fluentui/web-components/dist/esm/skeleton/index.js
var FluentSkeleton = class FluentSkeleton2 extends Skeleton {
};
FluentSkeleton = __decorate6([
  customElement2({
    name: "fluent-skeleton",
    template: SkeletonTemplate,
    styles: SkeletonStyles
  })
], FluentSkeleton);

// node_modules/@fluentui/web-components/dist/esm/slider/slider.styles.js
var SliderStyles = css2`
    ${display("inline-grid")} :host {
        --thumb-size: calc(${heightNumber} * 0.5);
        --thumb-translate: calc(var(--thumb-size) * 0.5);
        --track-overhang: calc((var(--design-unit) / 2) * -1);
        --track-width: var(--design-unit);
        align-items: center;
        width: 100%;
        margin: calc(var(--design-unit) * 1px) 0;
        user-select: none;
        box-sizing: border-box;
        border-radius: calc(var(--corner-radius) * 1px);
        outline: none;
        cursor: pointer;
    }
    :host(.horizontal) .positioning-region {
        position: relative;
        margin: 0 8px;
        display: grid;
        grid-template-rows: calc(var(--thumb-size) * 1px) 1fr;
    }
    :host(.vertical) .positioning-region {
        position: relative;
        margin: 0 8px;
        display: grid;
        height: 100%;
        grid-template-columns: calc(var(--thumb-size) * 1px) 1fr;
    }
    :host(:${focusVisible}) .thumb-cursor {
        box-shadow: 0 0 0 2px var(--background-color), 0 0 0 4px ${neutralFocusBehavior.var};
    }
    .thumb-container {
        position: absolute;
        height: calc(var(--thumb-size) * 1px);
        width: calc(var(--thumb-size) * 1px);
        transition: all 0.2s ease;
    }
    .thumb-cursor {
        border: none;
        width: calc(var(--thumb-size) * 1px);
        height: calc(var(--thumb-size) * 1px);
        background: ${neutralForegroundRestBehavior.var};
        border-radius: 50%;
    }
    .thumb-cursor:hover {
        background: ${neutralForegroundHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }
    .thumb-cursor:active {
        background: ${neutralForegroundActiveBehavior.var};
    }
    :host(.horizontal) .thumb-container {
        transform: translateX(calc(var(--thumb-translate) * 1px));
    }
    :host(.vertical) .thumb-container {
        transform: translateY(calc(var(--thumb-translate) * 1px));
    }
    :host(.horizontal) {
        min-width: calc(var(--thumb-size) * 1px);
    }
    :host(.horizontal) .track {
        right: calc(var(--track-overhang) * 1px);
        left: calc(var(--track-overhang) * 1px);
        align-self: start;
        margin-top: calc((var(--design-unit) + calc(var(--density) + 2)) * 1px);
        height: calc(var(--track-width) * 1px);
    }
    :host(.vertical) .track {
        top: calc(var(--track-overhang) * 1px);
        bottom: calc(var(--track-overhang) * 1px);
        margin-inline-start: calc((var(--design-unit) + calc(var(--density) + 2)) * 1px);
        width: calc(var(--track-width) * 1px);
        height: 100%;
    }
    .track {
        background: ${neutralOutlineRestBehavior.var};
        position: absolute;
    }
    :host(.vertical) {
        height: 100%;
        min-height: calc(var(--design-unit) * 60px);
        min-width: calc(var(--design-unit) * 20px);
    }
    :host(.disabled), :host(.readonly) {
        cursor: ${disabledCursor};
    }
    :host(.disabled) {
        opacity: var(--disabled-opacity);
    }
`.withBehaviors(neutralFocusBehavior, neutralForegroundActiveBehavior, neutralForegroundHoverBehavior, neutralForegroundRestBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
            .thumb-cursor {
                forced-color-adjust: none;
                border-color: ${SystemColors.FieldText};
                background: ${SystemColors.FieldText};
            }
            .thumb-cursor:hover,
            .thumb-cursor:active {
                background: ${SystemColors.Highlight};
            }
            .track {
                forced-color-adjust: none;
                background: ${SystemColors.FieldText};
            }
            :host(:${focusVisible}) .thumb-cursor {
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.Highlight};
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
            :host(.disabled) {
                opacity: 1;
            }
            :host(.disabled) .track,
            :host(.disabled) .thumb-cursor {
                forced-color-adjust: none;
                background: ${SystemColors.GrayText};
            }
        `));

// node_modules/@fluentui/web-components/dist/esm/slider/index.js
var FluentSlider = class FluentSlider2 extends Slider {
};
FluentSlider = __decorate6([
  customElement2({
    name: "fluent-slider",
    template: SliderTemplate,
    styles: SliderStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentSlider);

// node_modules/@fluentui/web-components/dist/esm/slider-label/slider-label.styles.js
var SliderLabelStyles = css2`
  ${display("block")} :host {
    font-family: var(--body-font);
  }
  .root {
    position: absolute;
    display: grid;
  }
  :host(.horizontal) {
    align-self: start;
    grid-row: 2;
    margin-top: -2px;
  }
  :host(.vertical) {
    justify-self: start;
    grid-column: 2;
    margin-left: 2px;
  }
  .container {
    display: grid;
    justify-self: center;
  }
  :host(.horizontal) .container {
    grid-template-rows: auto auto;
    grid-template-columns: 0;
  }
  :host(.vertical) .container {
    grid-template-columns: auto auto;
    grid-template-rows: 0;
    min-width: calc(var(--thumb-size) * 1px);
    height: calc(var(--thumb-size) * 1px);
  }
  .label {
    justify-self: center;
    align-self: center;
    white-space: nowrap;
    max-width: 30px;
    margin: 2px 0;
  }
  .mark {
    width: calc((var(--design-unit) / 2) * 1px);
    height: calc(${heightNumber} * 0.25 * 1px);
    background: ${neutralOutlineRestBehavior.var};
    justify-self: center;
  }
  :host(.vertical) .mark {
    transform: rotate(90deg);
    align-self: center;
  }
  :host(.vertical) .label {
    margin-left: calc((var(--design-unit) / 2) * 2px);
    align-self: center;
  }
  :host(.disabled) {
    opacity: var(--disabled-opacity);
  }
`.withBehaviors(neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
      .mark {
        forced-color-adjust: none;
        background: ${SystemColors.FieldText};
      }
      :host(.disabled) {
        forced-color-adjust: none;
        opacity: 1;
      }
      :host(.disabled) .label {
        color: ${SystemColors.GrayText};
      }
      :host(.disabled) .mark {
        background: ${SystemColors.GrayText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/slider-label/index.js
var FluentSliderLabel = class FluentSliderLabel2 extends SliderLabel {
};
FluentSliderLabel = __decorate6([
  customElement2({
    name: "fluent-slider-label",
    template: SliderLabelTemplate,
    styles: SliderLabelStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentSliderLabel);

// node_modules/@fluentui/web-components/dist/esm/switch/switch.styles.js
var SwitchStyles = css2`
    :host([hidden]) {
        display: none;
    }

    ${display("inline-flex")} :host {
        align-items: center;
        outline: none;
        font-family: var(--body-font);
        margin: calc(var(--design-unit) * 1px) 0;
        ${/*
 * Chromium likes to select label text or the default slot when
 * the checkbox is clicked. Maybe there is a better solution here?
 */
""} user-select: none;
    }

    :host(.disabled) {
        opacity: var(--disabled-opacity);
    }

    :host(.disabled) .label,
    :host(.readonly) .label,
    :host(.readonly) .switch,
    :host(.disabled) .switch {
        cursor: ${disabledCursor};
    }

    .switch {
        position: relative;
        outline: none;
        box-sizing: border-box;
        width: calc(((${heightNumber} / 2) + var(--design-unit)) * 2px);
        height: calc(((${heightNumber} / 2) + var(--design-unit)) * 1px);
        background: ${neutralFillInputRestBehavior.var};
        border-radius: calc(${heightNumber} * 1px);
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
    }

    :host(:enabled) .switch:hover {
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
        cursor: pointer;
    }

    :host(:enabled) .switch:active {
        background: ${neutralFillInputActiveBehavior.var};
        border-color: ${neutralOutlineActiveBehavior.var};
    }

    :host(:${focusVisible}) .switch {
        box-shadow: 0 0 0 2px var(--background-color), 0 0 0 4px ${neutralFocusBehavior.var};
        border-color: ${neutralFocusBehavior.var};
    }

    .checked-indicator {
        position: absolute;
        height: calc((${heightNumber} - (var(--design-unit) * 5.5)) * 1px);
        width: calc((${heightNumber} - (var(--design-unit) * 5.5)) * 1px);
        top: calc(var(--design-unit) * 1px);
        background: ${neutralForegroundRestBehavior.var};
        border-radius: 50%;
        transition: all 0.2s ease-in-out;
    }

    .status-message {
        color: ${neutralForegroundRestBehavior.var};
        cursor: pointer;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
    }

    .label__hidden {
        display: none;
        visibility: hidden;
    }

    .label {
        color: ${neutralForegroundRestBehavior.var};
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        margin-inline-end: calc(var(--design-unit) * 2px + 2px);
        cursor: pointer;
    }

    ::slotted(*) {
        ${/* Need to discuss with Brian how HorizontalSpacingNumber can work. https://github.com/microsoft/fast/issues/2766 */
""} margin-inline-start: calc(var(--design-unit) * 2px + 2px);
    }

    :host([aria-checked="true"]) .checked-indicator {
        background: ${accentForegroundCutRestBehavior.var};
    }

    :host([aria-checked="true"]) .switch {
        background: ${accentFillRestBehavior.var};
    }

    :host([aria-checked="true"]:enabled) .switch:hover {
        background: ${accentFillHoverBehavior.var};
    }

    :host([aria-checked="true"]:enabled) .switch:active {
        background: ${accentFillActiveBehavior.var};
    }

    :host([aria-checked="true"]:${focusVisible}:enabled) .switch {
        box-shadow: 0 0 0 2px var(--background-color), 0 0 0 4px ${neutralFocusBehavior.var};
        border-color: transparent;
    }

    .unchecked-message {
        display: block;
    }

    .checked-message {
        display: none;
    }

    :host([aria-checked="true"]) .unchecked-message {
        display: none;
    }

    :host([aria-checked="true"]) .checked-message {
        display: block;
    }
`.withBehaviors(accentFillActiveBehavior, accentFillHoverBehavior, accentFillRestBehavior, accentForegroundCutRestBehavior, neutralFillInputActiveBehavior, neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineActiveBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, new DirectionalStyleSheetBehavior(css2`
      .checked-indicator {
        left: calc(var(--design-unit) * 1px);
      }

      :host([aria-checked='true']) .checked-indicator {
        left: calc((((${heightNumber} / 2) + var(--design-unit)) + var(--design-unit)) * 1px);
      }
    `, css2`
      .checked-indicator {
        right: calc(var(--design-unit) * 1px);
      }

      :host([aria-checked='true']) .checked-indicator {
        right: calc((((${heightNumber} / 2) + var(--design-unit)) + var(--design-unit)) * 1px);
      }
    `), forcedColorsStylesheetBehavior(css2`
            .checked-indicator,
            :host(:enabled) .switch:active .checked-indicator {
                forced-color-adjust: none;
                background: ${SystemColors.FieldText};
            }
            .switch {
                forced-color-adjust: none;
                background: ${SystemColors.Field};
                border-color: ${SystemColors.FieldText};
            }
            :host(:enabled) .switch:hover {
                background: ${SystemColors.HighlightText};
                border-color: ${SystemColors.Highlight};
            }
            :host(.checked) .switch {
                background: ${SystemColors.Highlight};
                border-color: ${SystemColors.Highlight};
            }
            :host(.checked:enabled) .switch:hover,
            :host(:enabled) .switch:active {
                background: ${SystemColors.HighlightText};
                border-color: ${SystemColors.Highlight};
            }
            :host(.checked) .checked-indicator {
                background: ${SystemColors.HighlightText};
            }
            :host(.checked:enabled) .switch:hover .checked-indicator {
                background: ${SystemColors.Highlight};
            }
            :host(:${focusVisible}) .switch {
                border-color: ${SystemColors.Highlight};
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
            :host(.checked:${focusVisible}:enabled) .switch {
                box-shadow: 0 0 0 2px ${SystemColors.Field}, 0 0 0 4px ${SystemColors.FieldText};
            }
            :host(.disabled) {
                opacity: 1;
            }
            :host(.disabled) .checked-indicator {
                background: ${SystemColors.GrayText};
            }
            :host(.disabled) .switch {
                background: ${SystemColors.Field};
                border-color: ${SystemColors.GrayText};
            }
            .status-message,
            .label {
              color: ${SystemColors.FieldText};
          }
        `));

// node_modules/@fluentui/web-components/dist/esm/switch/index.js
var FluentSwitch = class FluentSwitch2 extends Switch {
};
FluentSwitch = __decorate6([
  customElement2({
    name: "fluent-switch",
    template: SwitchTemplate,
    styles: SwitchStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentSwitch);

// node_modules/@fluentui/web-components/dist/esm/tabs/tabs.styles.js
var TabsStyles = css2`
  ${display("grid")} :host {
    box-sizing: border-box;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    color: ${neutralForegroundRestBehavior.var};
    grid-template-columns: auto 1fr auto;
    grid-template-rows: auto 1fr;
  }

  .tablist {
    display: grid;
    grid-template-rows: auto auto;
    grid-template-columns: auto;
    position: relative;
    width: max-content;
    align-self: end;
  }

  .start,
  .end {
    align-self: center;
  }

  .activeIndicator {
    grid-row: 2;
    grid-column: 1;
    width: 20px;
    height: 3px;
    border-radius: calc(var(--corner-radius) * 1px);
    justify-self: center;
    background: ${accentFillRestBehavior.var};
  }

  .activeIndicatorTransition {
    transition: transform 0.2s ease-in-out;
  }

  .tabpanel {
    grid-row: 2;
    grid-column-start: 1;
    grid-column-end: 4;
    position: relative;
  }

  :host(.vertical) {
    grid-template-rows: auto 1fr auto;
    grid-template-columns: auto 1fr;
  }

  :host(.vertical) .tablist {
    grid-row-start: 2;
    grid-row-end: 2;
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: auto 1fr;
    position: relative;
    width: max-content;
    justify-self: end;
    width: 100%;
  }

  :host(.vertical) .tabpanel {
    grid-column: 2;
    grid-row-start: 1;
    grid-row-end: 4;
  }

  :host(.vertical) .end {
    grid-row: 3;
  }

  :host(.vertical) .activeIndicator {
    grid-column: 1;
    grid-row: 1;
    width: 3px;
    height: 20px;
    border-radius: calc(var(--corner-radius) * 1px);
    align-self: center;
    background: ${accentFillRestBehavior.var};
  }

  :host(.vertical) .activeIndicatorTransition {
    transition: transform 0.2s linear;
  }
`.withBehaviors(accentFillRestBehavior, neutralForegroundRestBehavior, forcedColorsStylesheetBehavior(css2`
      .activeIndicator,
      :host(.vertical) .activeIndicator {
        forced-color-adjust: none;
        background: ${SystemColors.Highlight};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/tabs/tab/tab.styles.js
var TabStyles = css2`
    ${display("inline-flex")} :host {
        box-sizing: border-box;
        font-family: var(--body-font);
        ${/* Font size, weight, and line height are temporary -
  replace when adaptive typography is figured out */
""} font-size: 12px;
        font-weight: 400;
        line-height: 18px;
        height: calc(${heightNumber} * 1px);
        padding: 0 calc((6 + (var(--design-unit) * 2 * var(--density))) * 1px);
        color: ${neutralForegroundRestBehavior.var};
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--outline-width) * 1px) solid transparent;
        align-items: center;
        justify-content: center;
        grid-row: 1;
        cursor: pointer;
    }

    :host([aria-selected="true"]) {
        z-index: 2;
    }

    :host(:hover) {
        color: ${neutralForegroundHoverBehavior.var};
    }

    :host(:active) {
        color: ${neutralForegroundActiveBehavior.var};
    }

    :host(:${focusVisible}) {
        outline: none;
        border: calc(var(--outline-width) * 1px) solid ${neutralFocusBehavior.var};
        box-shadow: 0 0 0 calc((var(--focus-outline-width) - var(--outline-width)) * 1px)
            ${neutralFocusBehavior.var};
    }

    :host(:focus) {
        outline: none;
    }

    :host(.vertical) {
        justify-content: end;
        grid-column: 2
    }

    :host(.vertical[aria-selected="true"]) {
        z-index: 2;
    }

    :host(.vertical:hover) {
        color: ${neutralForegroundHoverBehavior.var};
    }

    :host(.vertical:active) {
        color: ${neutralForegroundActiveBehavior.var};
    }

    :host(.vertical:hover[aria-selected="true"]) {
    }
`.withBehaviors(neutralFocusBehavior, neutralForegroundRestBehavior, neutralForegroundHoverBehavior, neutralForegroundActiveBehavior, forcedColorsStylesheetBehavior(css2`
            :host {
                forced-color-adjust: none;
                border-color: transparent;
                color: ${SystemColors.ButtonText};
                fill: currentcolor;
            }
            :host(:hover),
            :host(.vertical:hover),
            :host([aria-selected="true"]:hover) {
                background: ${SystemColors.Highlight};
                color: ${SystemColors.HighlightText};
                fill: currentcolor;
            }
            :host([aria-selected="true"]) {
                background: ${SystemColors.HighlightText};
                color: ${SystemColors.Highlight};
                fill: currentcolor;
            }
            :host(:${focusVisible}) {
                border-color: ${SystemColors.ButtonText};
                box-shadow: none;
            }
        `));

// node_modules/@fluentui/web-components/dist/esm/tabs/tab/index.js
var FluentTab = class FluentTab2 extends Tab {
};
FluentTab = __decorate6([
  customElement2({
    name: "fluent-tab",
    template: TabTemplate,
    styles: TabStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentTab);

// node_modules/@fluentui/web-components/dist/esm/tabs/tab-panel/tab-panel.styles.js
var TabPanelStyles = css2`
  ${display("flex")} :host {
    box-sizing: border-box;
    font-family: var(--body-font);
    ${/* Font size, weight, and line height are temporary -
 replace when adaptive typography is figured out */
""} font-size: 12px;
    font-weight: 400;
    line-height: 18px;
    padding: 0 calc((6 + (var(--design-unit) * 2 * var(--density))) * 1px);
  }
`;

// node_modules/@fluentui/web-components/dist/esm/tabs/tab-panel/index.js
var FluentTabPanel = class FluentTabPanel2 extends TabPanel {
};
FluentTabPanel = __decorate6([
  customElement2({
    name: "fluent-tab-panel",
    template: TabPanelTemplate,
    styles: TabPanelStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentTabPanel);

// node_modules/@fluentui/web-components/dist/esm/tabs/index.js
var FluentTabs = class FluentTabs2 extends Tabs {
};
FluentTabs = __decorate6([
  customElement2({
    name: "fluent-tabs",
    template: TabsTemplate,
    styles: TabsStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentTabs);

// node_modules/@fluentui/web-components/dist/esm/text-area/text-area.styles.js
var TextAreaFilledStyles = css2`
  :host([appearance='filled']) .control {
    background: ${neutralFillRestBehavior.var};
    border-color: transparent;
  }

  :host([appearance='filled']:hover:not([disabled])) .control {
    background: ${neutralFillHoverBehavior.var};
    border-color: transparent;
  }

  :host([appearance='filled']:focus-within:not([disabled])) .control {
    border-color: transparent;
    box-shadow: none;
  }
  ${FillStateStyles}
`.withBehaviors(accentFillRestBehavior, neutralFillHoverBehavior, neutralFillRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host([appearance='filled']:hover:not([disabled])) .control,
      :host([appearance='filled']:focus-within:not([disabled])) .control {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host([appearance='filled']:not([disabled]):active)::after,
      :host([appearance='filled']:not([disabled]):focus-within:not(:active))::after {
        border-bottom-color: ${SystemColors.Highlight};
      }
    `));
var TextAreaStyles = css2`
    ${display("inline-flex")} :host {
        font-family: var(--body-font);
        outline: none;
        user-select: none;
        position: relative;
        flex-direction: column;
        vertical-align: bottom;
    }

    .control {
        box-sizing: border-box;
        position: relative;
        color: ${neutralForegroundRestBehavior.var};
        background: ${neutralFillInputRestBehavior.var};
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
        height: calc(${heightNumber} * 2px);
        font: inherit;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        padding: calc(var(--design-unit) * 1.5px) calc(var(--design-unit) * 2px + 1px);
        width: 100%;
        resize: none;
    }

    .control:hover:enabled {
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    .control:hover,
    .control:${focusVisible},
    .control:disabled,
    .control:active {
        outline: none;
    }

    :host(:focus-within) .control {
        border-color: ${neutralFocusBehavior.var};
        box-shadow: 0 0 0 1px ${neutralFocusBehavior.var} inset;
    }

    :host(.resize-both) .control {
        resize: both;
    }

    :host(.resize-horizontal) .control {
        resize: horizontal;
    }

    :host(.resize-vertical) .control {
        resize: vertical;
    }

    .label__hidden {
        display: none;
        visibility: hidden;
    }

    .label {
        display: block;
        color: ${neutralForegroundRestBehavior.var};
        cursor: pointer;
        $font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        margin-bottom: 4px;
    }

    :host([disabled]) .label,
    :host([readonly]) .label,
    :host([readonly]) .control,
    :host([disabled]) .control {
        cursor: ${disabledCursor};
    }
    :host([disabled]) {
        opacity: var(--disabled-opacity);
    }
`.withBehaviors(appearanceBehavior("filled", TextAreaFilledStyles), neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host([disabled]) {
        opacity: 1;
      }
      ::placeholder,
      ::-webkit-input-placeholder {
        color: ${SystemColors.FieldText};
      }
      :host([disabled]) ::placeholder,
      :host([disabled]) ::-webkit-input-placeholder,
      :host([disabled]) .label {
        color: ${SystemColors.GrayText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/text-area/index.js
var FluentTextArea = class FluentTextArea2 extends TextArea {
  /**
   * @internal
   */
  appearanceChanged(oldValue, newValue) {
    if (oldValue !== newValue) {
      this.classList.add(newValue);
      this.classList.remove(oldValue);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (!this.appearance) {
      this.appearance = "outline";
    }
  }
};
__decorate6([
  attr
], FluentTextArea.prototype, "appearance", void 0);
FluentTextArea = __decorate6([
  customElement2({
    name: "fluent-text-area",
    template: TextAreaTemplate,
    styles: TextAreaStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentTextArea);

// node_modules/@fluentui/web-components/dist/esm/text-field/text-field.styles.js
var TextFieldFilledStyles = css2`
  :host([appearance='filled']) .root {
    background: ${neutralFillRestBehavior.var};
    border-color: transparent;
  }

  :host([appearance='filled']:hover:not(.disabled)) .root {
    background: ${neutralFillHoverBehavior.var};
    border-color: transparent;
  }

  :host([appearance='filled']:focus-within:not(.disabled)) .root {
    border-color: transparent;
    box-shadow: none;
  }
  ${FillStateStyles}
`.withBehaviors(accentFillRestBehavior, neutralFillHoverBehavior, neutralFillRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host([appearance='filled']) .root {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host([appearance='filled']:hover:not([disabled])) .root,
      :host([appearance='filled']:focus-within:not([disabled])) .root {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host([appearance='filled']:active:not([disabled])) .root {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host([appearance='filled']:not([disabled]):active)::after,
      :host([appearance='filled']:not([disabled]):focus-within:not(:active))::after {
        border-bottom-color: ${SystemColors.Highlight};
      }
      :host([appearance='filled'][disabled]) .root {
        border-color: ${SystemColors.GrayText};
        background: ${SystemColors.Field};
      }
    `));
var TextFieldStyles = css2`
    ${display("inline-block")} :host {
        font-family: var(--body-font);
        outline: none;
        user-select: none;
        position: relative;
    }

    .root {
        box-sizing: border-box;
        position: relative;
        display: flex;
        flex-direction: row;
        color: ${neutralForegroundRestBehavior.var};
        background: ${neutralFillInputRestBehavior.var};
        border-radius: calc(var(--corner-radius) * 1px);
        border: calc(var(--outline-width) * 1px) solid ${neutralOutlineRestBehavior.var};
        height: calc(${heightNumber} * 1px);
    }

    .control {
        -webkit-appearance: none;
        background: transparent;
        border: 0;
        height: calc(100% - 4px);
        width: 100%;
        margin-top: auto;
        margin-bottom: auto;
        border: none;
        padding: 0 calc(var(--design-unit) * 2px + 1px);
        color: ${neutralForegroundRestBehavior.var};
        font-family: inherit;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
    }

    .control:hover,
    .control:${focusVisible},
    .control:disabled,
    .control:active {
        outline: none;
    }

    .label {
        display: block;
        color: ${neutralForegroundRestBehavior.var};
        cursor: pointer;
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        margin-bottom: 4px;
    }

    .label__hidden {
      display: none;
      visibility: hidden;
    }

    .start,
    .end {
        margin: auto;
        fill: currentcolor;
    }

    ::slotted(svg) {      ${/* Glyph size and margin-left is temporary -
      replace when adaptive typography is figured out */
""} width: 16px;
        height: 16px;
    }

    .start {
        margin-inline-start: 11px;
    }

    .end {
        margin-inline-end: 11px;
    }

    :host(:hover:not(.disabled)) .root {
        background: ${neutralFillInputHoverBehavior.var};
        border-color: ${neutralOutlineHoverBehavior.var};
    }

    :host(:focus-within:not(.disabled)) .root {
        border-color: ${neutralFocusBehavior.var};
        box-shadow: 0 0 0 1px ${neutralFocusBehavior.var} inset;
    }

    :host(.disabled) .label,
    :host(.readonly) .label,
    :host(.readonly) .control,
    :host(.disabled) .control {
        cursor: ${disabledCursor};
    }

    :host(.disabled) {
        opacity: var(--disabled-opacity);
    }
`.withBehaviors(appearanceBehavior("filled", TextFieldFilledStyles), neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineHoverBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
      .root {
        forced-color-adjust: none;
        background: ${SystemColors.Field};
        border-color: ${SystemColors.FieldText};
      }
      :host(:hover:not(.disabled)) .root {
        background: ${SystemColors.Field};
        border-color: ${SystemColors.Highlight};
      }
      .start,
      .end {
        fill: ${SystemColors.ButtonText};
      }
      :host(.disabled) {
        opacity: 1;
      }
      :host(.disabled) .root {
        border-color: ${SystemColors.GrayText};
        background: ${SystemColors.Field};
      }
      :host(:focus-within:enabled) .root {
        border-color: ${SystemColors.Highlight};
        box-shadow: 0 0 0 1px ${SystemColors.Highlight} inset;
      }
      .control {
        color: ${SystemColors.ButtonText};
      }
      ::placeholder,
      ::-webkit-input-placeholder {
        color: ${SystemColors.FieldText};
      }
      :host(.disabled) ::placeholder,
      :host(.disabled) ::-webkit-input-placeholder,
      :host([disabled]) .label {
        color: ${SystemColors.GrayText};
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/text-field/index.js
var FluentTextField = class FluentTextField2 extends TextField {
  /**
   * @internal
   */
  appearanceChanged(oldValue, newValue) {
    if (oldValue !== newValue) {
      this.classList.add(newValue);
      this.classList.remove(oldValue);
    }
  }
  /**
   * @internal
   */
  connectedCallback() {
    super.connectedCallback();
    if (!this.appearance) {
      this.appearance = "outline";
    }
  }
};
__decorate6([
  attr
], FluentTextField.prototype, "appearance", void 0);
FluentTextField = __decorate6([
  customElement2({
    name: "fluent-text-field",
    template: TextFieldTemplate,
    styles: TextFieldStyles,
    shadowOptions: {
      delegatesFocus: true,
      mode: "closed"
    }
  })
], FluentTextField);

// node_modules/@fluentui/web-components/dist/esm/tooltip/tooltip.styles.js
var TooltipStyles = css2`
  :host {
    --elevation: 11;
    position: relative;
    contain: layout;
    overflow: visible;
    height: 0;
    width: 0;
    z-index: 10000;
  }

  .tooltip {
    box-sizing: border-box;
    border-radius: calc(var(--corner-radius) * 1px);
    border: calc(var(--outline-width) * 1px) solid transparent;
    background: ${neutralContrastFillRestBehavior.var};
    color: ${neutralContrastForegroundRestBehavior.var};
    padding: 4px 12px;
    height: fit-content;
    width: fit-content;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    white-space: nowrap;
    ${elevation}
  }

  fluent-anchored-region {
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: visible;
    flex-direction: row;
  }

  fluent-anchored-region.right,
  fluent-anchored-region.left {
    flex-direction: column;
  }

  fluent-anchored-region.top .tooltip::after,
  fluent-anchored-region.bottom .tooltip::after,
  fluent-anchored-region.left .tooltip::after,
  fluent-anchored-region.right .tooltip::after {
    content: '';
    width: 12px;
    height: 12px;
    background: ${neutralForegroundRestBehavior.var};
    border-radius: calc(var(--corner-radius) * 1px);
    position: absolute;
  }

  fluent-anchored-region.top .tooltip::after {
    transform: rotate(45deg) translateX(-50%);
    bottom: 4px;
    left: 50%;
  }

  fluent-anchored-region.top .tooltip {
    margin-bottom: 12px;
  }

  fluent-anchored-region.bottom .tooltip::after {
    transform: rotate(45deg) translateX(-50%);
    top: 12px;
    left: 50%;
  }

  fluent-anchored-region.bottom .tooltip {
    margin-top: 12px;
  }

  fluent-anchored-region.left .tooltip::after {
    transform: rotate(45deg) translateY(-50%);
    top: 50%;
    right: 12px;
  }

  fluent-anchored-region.left .tooltip {
    margin-right: 12px;
  }

  fluent-anchored-region.right .tooltip::after {
    transform: rotate(45deg) translateY(-50%);
    top: 50%;
    left: 4px;
  }

  fluent-anchored-region.right .tooltip {
    margin-left: 12px;
  }
`.withBehaviors(accentFillActiveBehavior, accentFillHoverBehavior, accentFillRestBehavior, neutralContrastFillRestBehavior, neutralContrastForegroundRestBehavior, neutralFillHoverBehavior, neutralFillInputActiveBehavior, neutralFillInputHoverBehavior, neutralFillInputRestBehavior, neutralFillRestBehavior, neutralFocusBehavior, neutralForegroundRestBehavior, neutralOutlineRestBehavior, forcedColorsStylesheetBehavior(css2`
      :host([disabled]) {
        opacity: 1;
      }
      fluent-anchored-region.top .tooltip::after,
      fluent-anchored-region.bottom .tooltip::after,
      fluent-anchored-region.left .tooltip::after,
      fluent-anchored-region.right .tooltip::after {
        content: '';
        width: unset;
        height: unset;
      }
    `));

// node_modules/@fluentui/web-components/dist/esm/tooltip/index.js
var FluentTooltip = class FluentTooltip2 extends Tooltip {
};
FluentTooltip = __decorate6([
  customElement2({
    name: "fluent-tooltip",
    template: createTooltipTemplate("fluent"),
    styles: TooltipStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentTooltip);

// node_modules/@fluentui/web-components/dist/esm/tree-item/tree-item.styles.js
var ltr = css2`
  .expand-collapse-glyph {
    transform: rotate(-45deg);
  }
  :host(.nested) .expand-collapse-button {
    left: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));
  }
  :host([selected])::after {
    left: calc(var(--focus-outline-width) * 1px);
  }
  :host([expanded]) > .positioning-region .expand-collapse-glyph {
    transform: rotate(0deg);
  }
`;
var rtl = css2`
  .expand-collapse-glyph {
    transform: rotate(135deg);
  }
  :host(.nested) .expand-collapse-button {
    right: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));
  }
  :host([selected])::after {
    right: calc(var(--focus-outline-width) * 1px);
  }
  :host([expanded]) > .positioning-region .expand-collapse-glyph {
    transform: rotate(90deg);
  }
`;
var expandCollapseButtonSize = "((var(--base-height-multiplier) / 2) * var(--design-unit)) + ((var(--design-unit) * var(--density)) / 2)";
var expandCollapseHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-stealth-hover-over-hover", (x) => neutralFillStealthHover(neutralFillStealthHover)(x), FluentDesignSystemProvider.findProvider);
var selectedExpandCollapseHoverBehavior = cssCustomPropertyBehaviorFactory("neutral-stealth-hover-over-selected", (x) => neutralFillStealthHover(neutralFillStealthSelected)(x), FluentDesignSystemProvider.findProvider);
var TreeItemStyles = css2`
    ${display("block")} :host {
        contain: content;
        position: relative;
        outline: none;
        color: ${neutralForegroundRestBehavior.var};
        background: ${neutralFillStealthRestBehavior.var};
        cursor: pointer;
        font-family: var(--body-font);
        --expand-collapse-button-size: calc(${heightNumber} * 1px);
        --tree-item-nested-width: 0;
    }

    :host(:focus) > .positioning-region {
        outline: none;
    }

    :host(:focus) .content-region {
        outline: none;
    }

    :host(:${focusVisible}) .positioning-region {
        border: ${neutralFocusBehavior.var} calc(var(--outline-width) * 1px) solid;
        border-radius: calc(var(--corner-radius) * 1px);
        color: ${neutralForegroundActiveBehavior.var};
    }

    .positioning-region {
        display: flex;
        position: relative;
        box-sizing: border-box;
        border: transparent calc(var(--outline-width) * 1px) solid;
        height: calc((${heightNumber} + 1) * 1px);
    }

    .positioning-region::before {
        content: "";
        display: block;
        width: var(--tree-item-nested-width);
        flex-shrink: 0;
    }

    .positioning-region:hover {
        background: ${neutralFillStealthHoverBehavior.var};
    }

    .positioning-region:active {
        background: ${neutralFillStealthActiveBehavior.var};
    }

    .content-region {
        display: inline-flex;
        align-items: center;
        white-space: nowrap;
        width: 100%;
        height: calc(${heightNumber} * 1px);
        margin-inline-start: calc(var(--design-unit) * 2px + 8px);
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        font-weight: 400;
    }

    .items {
        display: none;
        ${/* Font size should be based off calc(1em + (design-unit + glyph-size-number) * 1px) -
  update when density story is figured out */
""} font-size: calc(1em + (var(--design-unit) + 16) * 1px);
    }

    .expand-collapse-button {
        background: none;
        border: none;
        outline: none;
        ${/* Width and Height should be based off calc(glyph-size-number + (design-unit * 4) * 1px) -
  update when density story is figured out */
""} width: calc((${expandCollapseButtonSize} + (var(--design-unit) * 2)) * 1px);
        height: calc((${expandCollapseButtonSize} + (var(--design-unit) * 2)) * 1px);
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        margin: 0 6px;
    }

    .expand-collapse-glyph {
        ${/* Glyph size is temporary -
replace when glyph-size var is added */
""} width: 16px;
        height: 16px;
        transition: transform 0.1s linear;
        ${/* transform needs to be localized */
""} transform: rotate(-45deg);
        pointer-events: none;
        fill: ${neutralForegroundRestBehavior.var};
    }
    .start,
    .end {
        display: flex;
        fill: currentcolor;
    }

     ::slotted(svg) {
        ${/* Glyph size is temporary -
replace when glyph-size var is added */
""} width: 16px;
        height: 16px;
    }

    .start {
        ${/* need to swap out once we understand how horizontalSpacing will work */
""} margin-inline-end: calc(var(--design-unit) * 2px + 2px);
    }

    .end {
        ${/* need to swap out once we understand how horizontalSpacing will work */
""} margin-inline-start: calc(var(--design-unit) * 2px + 2px);
    }

    :host(.expanded) > .positioning-region .expand-collapse-glyph {
        ${/* transform needs to be localized */
""} transform: rotate(0deg);
    }

    :host(.expanded) > .items {
        display: block;
    }

    :host([disabled]) .content-region {
        opacity: var(--disabled-opacity);
        cursor: ${disabledCursor};
    }

    :host(.nested) .content-region {
      position: relative;
      margin-inline-start: var(--expand-collapse-button-size);
    }

    :host(.nested) .expand-collapse-button {
        position: absolute;
    }

    :host(.nested) .expand-collapse-button:hover {
        background: ${expandCollapseHoverBehavior.var};
    }

    :host([selected]) .positioning-region {
        background: ${neutralFillStealthSelectedBehavior.var};
    }

    :host([selected]) .expand-collapse-button:hover {
      background: ${selectedExpandCollapseHoverBehavior.var};
    }

    :host([selected])::after {
        content: "";
        display: block;
        position: absolute;
        top: calc((${heightNumber} / 4) * 1px);
        width: 3px;
        height: calc((${heightNumber} / 2) * 1px);
        ${/* The french fry background needs to be calculated based on the selected background state for this control.
  We currently have no way of chaning that, so setting to accent-foreground-rest for the time being */
""} background: ${accentForegroundRestBehavior.var};
        border-radius: calc(var(--corner-radius) * 1px);
    }

    ::slotted(fluent-tree-item) {
        --tree-item-nested-width: 1em;
        --expand-collapse-button-nested-width: calc(${heightNumber} * -1px);
    }
`.withBehaviors(accentForegroundRestBehavior, expandCollapseHoverBehavior, neutralFillStealthSelectedBehavior, neutralFillStealthActiveBehavior, neutralFillStealthHoverBehavior, neutralFillStealthRestBehavior, neutralFocusBehavior, neutralFocusInnerAccentBehavior, neutralForegroundActiveBehavior, neutralForegroundRestBehavior, selectedExpandCollapseHoverBehavior, new DirectionalStyleSheetBehavior(ltr, rtl), forcedColorsStylesheetBehavior(css2`
        :host {
            forced-color-adjust: none;
            border-color: transparent;
            background: ${SystemColors.Field};
            color: ${SystemColors.FieldText};
        }
        :host .content-region {
            color: ${SystemColors.FieldText};
        }
        :host .content-region .expand-collapse-glyph,
        :host .content-region .start,
        :host .content-region .end {
            fill: ${SystemColors.FieldText};
        }
        :host .positioning-region:hover,
        :host([selected]) .positioning-region {
            background: ${SystemColors.Highlight};
        }
        :host .positioning-region:hover .content-region,
        :host([selected]) .positioning-region .content-region {
            color: ${SystemColors.HighlightText};
        }
        :host .positioning-region:hover .content-region .expand-collapse-glyph,
        :host .positioning-region:hover .content-region .start,
        :host .positioning-region:hover .content-region .end,
        :host([selected]) .content-region .expand-collapse-glyph,
        :host([selected]) .content-region .start,
        :host([selected]) .content-region .end {
            fill: ${SystemColors.HighlightText};
        }
        :host([selected])::after {
            background: ${SystemColors.Field}
        }
        :host(:${focusVisible}) .positioning-region {
            border-color: ${SystemColors.FieldText};
            box-shadow: 0 0 0 2px inset ${SystemColors.Field};
            color: ${SystemColors.FieldText};
        }
        :host([disabled]) .content-region,
        :host([disabled]) .positioning-region:hover .content-region {
            opacity: 1;
            color: ${SystemColors.GrayText};
        }
        :host([disabled]) .content-region .expand-collapse-glyph,
        :host([disabled]) .content-region .start,
        :host([disabled]) .content-region .end,
        :host([disabled]) .positioning-region:hover .content-region .expand-collapse-glyph,
        :host([disabled]) .positioning-region:hover .content-region .start,
        :host([disabled]) .positioning-region:hover .content-region .end {
            fill: ${SystemColors.GrayText};
        }
        :host([disabled]) .positioning-region:hover {
            background: ${SystemColors.Field};
        }
        .expand-collapse-glyph,
        .start,
        .end {
            fill: ${SystemColors.FieldText};
        }
        :host(.nested) .expand-collapse-button:hover {
            background: ${SystemColors.Field};
        }
        :host(.nested) .expand-collapse-button:hover .expand-collapse-glyph {
            fill: ${SystemColors.FieldText};
        }
        `));

// node_modules/@fluentui/web-components/dist/esm/tree-item/index.js
var FluentTreeItem = class FluentTreeItem2 extends TreeItem {
};
FluentTreeItem = __decorate6([
  customElement2({
    name: "fluent-tree-item",
    template: TreeItemTemplate,
    styles: TreeItemStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentTreeItem);

// node_modules/@fluentui/web-components/dist/esm/tree-view/tree-view.styles.js
var TreeViewStyles = css2`
  :host([hidden]) {
    display: none;
  }

  ${display("flex")} :host {
    flex-direction: column;
    align-items: stretch;
    min-width: fit-content;
    font-size: 0;
  }

  :host:focus-visible {
    outline: none;
  }
`;

// node_modules/@fluentui/web-components/dist/esm/tree-view/index.js
var FluentTreeView = class FluentTreeView2 extends TreeView {
};
FluentTreeView = __decorate6([
  customElement2({
    name: "fluent-tree-view",
    template: TreeViewTemplate,
    styles: TreeViewStyles,
    shadowOptions: {
      mode: "closed"
    }
  })
], FluentTreeView);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file-list/mgt-file-upload/mgt-file-upload.js
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata6 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter13 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtFileUpload = class MgtFileUpload2 extends MgtBaseComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles7;
  }
  get strings() {
    return strings3;
  }
  /**
   * Get the scopes required for file upload
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtFileUpload
   */
  static get requiredScopes() {
    return [.../* @__PURE__ */ new Set(["files.readwrite", "files.readwrite.all", "sites.readwrite.all"])];
  }
  constructor() {
    super();
    this._dragCounter = 0;
    this._dropEffect = "copy";
    this._maxChunckSize = 4 * 1024 * 1024;
    this._dialogTitle = "";
    this._dialogContent = "";
    this._dialogPrimaryButton = "";
    this._dialogSecondaryButton = "";
    this._dialogCheckBox = "";
    this._applyAll = false;
    this._applyAllConflitBehavior = null;
    this._maximumFiles = false;
    this._maximumFileSize = false;
    this._excludedFileType = false;
    this.handleonDragOver = (event) => __awaiter13(this, void 0, void 0, function* () {
      event.preventDefault();
      event.stopPropagation();
      if (event.dataTransfer.items && event.dataTransfer.items.length > 0) {
        event.dataTransfer.dropEffect = event.dataTransfer.dropEffect = this._dropEffect;
      }
    });
    this.handleonDragEnter = (event) => __awaiter13(this, void 0, void 0, function* () {
      event.preventDefault();
      event.stopPropagation();
      this._dragCounter++;
      if (event.dataTransfer.items && event.dataTransfer.items.length > 0) {
        event.dataTransfer.dropEffect = this._dropEffect;
        const dragFileBorder = this.renderRoot.querySelector("#file-upload-border");
        dragFileBorder.classList.add("visible");
      }
    });
    this.handleonDragLeave = (event) => {
      event.preventDefault();
      event.stopPropagation();
      this._dragCounter--;
      if (this._dragCounter === 0) {
        const dragFileBorder = this.renderRoot.querySelector("#file-upload-border");
        dragFileBorder.classList.remove("visible");
      }
    };
    this.handleonDrop = (event) => __awaiter13(this, void 0, void 0, function* () {
      event.preventDefault();
      event.stopPropagation();
      const dragFileBorder = this.renderRoot.querySelector("#file-upload-border");
      dragFileBorder.classList.remove("visible");
      if (event.dataTransfer && event.dataTransfer.items) {
        this.getSelectedFiles(yield this.getFilesFromUploadArea(event.dataTransfer.items));
      }
      event.dataTransfer.clearData();
      this._dragCounter = 0;
    });
    this.filesToUpload = [];
  }
  /**
   *
   * @returns
   */
  render() {
    if (this.parentElement !== null) {
      const root2 = this.parentElement;
      root2.addEventListener("dragenter", this.handleonDragEnter);
      root2.addEventListener("dragleave", this.handleonDragLeave);
      root2.addEventListener("dragover", this.handleonDragOver);
      root2.addEventListener("drop", this.handleonDrop);
    }
    return html`
        <div id="file-upload-dialog" class="file-upload-dialog">
          <!-- Modal content -->
          <fluent-card class="file-upload-dialog-content">
            <span class="file-upload-dialog-close" id="file-upload-dialog-close" >${getSvg(SvgIcon.Cancel)}</span>
            <div class="file-upload-dialog-content-text">
              <h2 class="file-upload-dialog-title">${this._dialogTitle}</h2>
              <div>${this._dialogContent}</div>
              <div class="file-upload-dialog-check-wrapper">
                <fluent-checkbox id="file-upload-dialog-check" class="file-upload-dialog-check" >
                  <span>${this._dialogCheckBox}</span>
                </fluent-checkbox>
              </div>
            </div>
            <div class="file-upload-dialog-editor">
              <fluent-button class="file-upload-dialog-ok">
              ${this._dialogPrimaryButton}
              </fluent-button>
              <fluent-button class="file-upload-dialog-cancel">
              ${this._dialogSecondaryButton}
              </fluent-button>
            </div>
          </fluent-card>
        </div>
        <div id="file-upload-border" >
        </div>
        <div class="file-upload-area-button">
        <div>
          <input
            id="file-upload-input"
            aria-label="file upload input"
            type="file"
            multiple="true"
            @change="${this.onFileUploadChange}"
          />
          <fluent-button class="file-upload-button" @click=${this.onFileUploadClick}>
            ${getSvg(SvgIcon.Upload)}${strings3.buttonUploadFile}
          </fluent-button>
        </div>
        </div>
        <div class="file-upload-Template">
        ${this.renderFolderTemplate(this.filesToUpload)}
        </div>
       `;
  }
  /**
   * Render Folder structure of files to upload
   * @param fileItems
   * @returns
   */
  renderFolderTemplate(fileItems) {
    let folderStructure = [];
    if (fileItems.length > 0) {
      const TemplateFileItems = fileItems.map((fileItem) => {
        if (folderStructure.indexOf(fileItem.fullPath.substring(0, fileItem.fullPath.lastIndexOf("/"))) === -1) {
          if (fileItem.fullPath.substring(0, fileItem.fullPath.lastIndexOf("/")) !== "") {
            folderStructure.push(fileItem.fullPath.substring(0, fileItem.fullPath.lastIndexOf("/")));
            return html`
            <div class='file-upload-table'>
              <div class='file-upload-cell'>
                <mgt-file
                  .fileDetails=${{
              name: fileItem.fullPath.substring(1, fileItem.fullPath.lastIndexOf("/")),
              folder: "Folder"
            }}
                  .view=${ViewType.oneline}
                  class="mgt-file-item"
                >
                </mgt-file>
              </div>
            </div>
            ${this.renderFileTemplate(fileItem, "file-upload-folder-tab")}`;
          } else {
            return html`${this.renderFileTemplate(fileItem, "")}`;
          }
        } else {
          return html`${this.renderFileTemplate(fileItem, "file-upload-folder-tab")}`;
        }
      });
      return html`${TemplateFileItems}`;
    } else {
      return null;
    }
  }
  /**
   * Render file upload area
   *
   * @param fileItem
   * @returns
   */
  renderFileTemplate(fileItem, folderTabStyle) {
    return html`
        <div class="${fileItem.completed ? "file-upload-table" : "file-upload-table upload"}">
          <div class="${folderTabStyle + (fileItem.fieldUploadResponse === "lastModifiedDateTime" ? " file-upload-dialog-success" : "")}">
            <div class='file-upload-cell'>
              <div style=${fileItem.fieldUploadResponse === "description" ? "opacity: 0.5;" : ""}>
                <div class="file-upload-status">
                  ${fileItem.iconStatus}
                </div>
                <mgt-file
                  .fileDetails=${fileItem.driveItem}
                  .view=${fileItem.view}
                  .line2Property=${fileItem.fieldUploadResponse}
                  class="mgt-file-item"
                  >
                </mgt-file>
              </div>
            </div>
              ${fileItem.completed === false ? this.renderFileUploadTemplate(fileItem) : null}
            </div>
          </div>
        </div>
        `;
  }
  /**
   * Render file upload progress
   *
   * @param fileItem
   * @returns
   */
  renderFileUploadTemplate(fileItem) {
    return html`
    <div class='file-upload-cell'>
      <div class='file-upload-table file-upload-name' >
        <div class='file-upload-cell'>
          <div title="${fileItem.file.name}" class='file-upload-filename'>${fileItem.file.name}</div>
        </div>
      </div>
      <div class='file-upload-table'>
        <div class='file-upload-cell'>
          <div class="${fileItem.completed ? "file-upload-table" : "file-upload-table upload"}">
            <fluent-progress class="file-upload-bar" value="${fileItem.percent}" ></fluent-progress>
            <div class='file-upload-cell' style="padding-left:5px">
              <span>${fileItem.percent}%</span>
              <span
                class="file-upload-cancel"
                @click=${(e) => this.deleteFileUploadSession(fileItem)}>
                ${getSvg(SvgIcon.Cancel)}
              </span>
            </div>
          <div>
        </div>
      </div>
    </div>
    `;
  }
  /**
   * Handle the "Upload Files" button click event to open dialog and select files.
   *
   * @param event
   * @returns
   */
  onFileUploadChange(event) {
    return __awaiter13(this, void 0, void 0, function* () {
      if (!event || event.target.files.length < 1) {
        return;
      } else {
        this.getSelectedFiles(yield this.getFilesFromUploadArea(event.target.files));
        event.target.value = null;
      }
    });
  }
  /**
   * Handle the click event on upload file button that open select files dialog to upload.
   *
   */
  onFileUploadClick() {
    const uploadInput = this.renderRoot.querySelector("#file-upload-input");
    uploadInput.click();
  }
  /**
   * Function delete existing file upload sessions
   *
   * @param fileItem
   */
  deleteFileUploadSession(fileItem) {
    return __awaiter13(this, void 0, void 0, function* () {
      try {
        if (fileItem.uploadUrl !== void 0) {
          const response = yield deleteSessionFile(this.fileUploadList.graph, fileItem.uploadUrl);
          fileItem.uploadUrl = void 0;
          fileItem.completed = true;
          this.setUploadFail(fileItem, strings3.cancelUploadFile);
        } else {
          fileItem.uploadUrl = void 0;
          fileItem.completed = true;
          this.setUploadFail(fileItem, strings3.cancelUploadFile);
        }
      } catch (_a) {
        fileItem.uploadUrl = void 0;
        fileItem.completed = true;
        this.setUploadFail(fileItem, strings3.cancelUploadFile);
      }
    });
  }
  /**
   * Get Files and initalize MgtFileUploadItem object life cycle to be uploaded
   *
   * @param inputFiles
   */
  getSelectedFiles(files) {
    return __awaiter13(this, void 0, void 0, function* () {
      let fileItems = [];
      let fileItemsCompleted = [];
      this._applyAll = false;
      this._applyAllConflitBehavior = null;
      this._maximumFiles = false;
      this._maximumFileSize = false;
      this._excludedFileType = false;
      this.filesToUpload.forEach((fileItem) => __awaiter13(this, void 0, void 0, function* () {
        if (!fileItem.completed) {
          fileItems.push(fileItem);
        } else {
          fileItemsCompleted.push(fileItem);
        }
      }));
      for (var i = 0; i < files.length; i++) {
        const file = files[i];
        const fullPath = file.fullPath === "" ? "/" + file.name : file.fullPath;
        if (fileItems.filter((item) => item.fullPath === fullPath).length === 0) {
          let acceptFile = true;
          if (fileItems.length >= this.fileUploadList.maxUploadFile) {
            acceptFile = false;
            if (!this._maximumFiles) {
              const maximumFiles = yield this.getFileUploadStatus(files[i], fullPath, "MaxFiles", this.fileUploadList);
              if (maximumFiles !== null) {
                if (maximumFiles[0] === 0) {
                  return null;
                }
                if (maximumFiles[0] === 1) {
                  this._maximumFiles = true;
                }
              }
            }
          }
          if (this.fileUploadList.maxFileSize !== void 0 && acceptFile) {
            if (files[i].size > this.fileUploadList.maxFileSize * 1024) {
              acceptFile = false;
              if (this._maximumFileSize === false) {
                const maximumFileSize = yield this.getFileUploadStatus(files[i], fullPath, "MaxFileSize", this.fileUploadList);
                if (maximumFileSize !== null) {
                  if (maximumFileSize[0] === 1) {
                    this._maximumFileSize = true;
                  }
                }
              }
            }
          }
          if (this.fileUploadList.excludedFileExtensions !== void 0) {
            if (this.fileUploadList.excludedFileExtensions.length > 0 && acceptFile) {
              if (this.fileUploadList.excludedFileExtensions.filter((fileExtension) => {
                return files[i].name.toLowerCase().indexOf(fileExtension.toLowerCase()) > -1;
              }).length > 0) {
                acceptFile = false;
                if (this._excludedFileType === false) {
                  const excludedFileType = yield this.getFileUploadStatus(files[i], fullPath, "ExcludedFileType", this.fileUploadList);
                  if (excludedFileType !== null) {
                    if (excludedFileType[0] === 1) {
                      this._excludedFileType = true;
                    }
                  }
                }
              }
            }
          }
          if (acceptFile) {
            const conflictBehavior = yield this.getFileUploadStatus(files[i], fullPath, "Upload", this.fileUploadList);
            let _completed = false;
            if (conflictBehavior !== null) {
              if (conflictBehavior[0] === -1) {
                _completed = true;
              } else {
                this._applyAll = Boolean(conflictBehavior[0]);
                this._applyAllConflitBehavior = conflictBehavior[1] ? 1 : 0;
              }
            }
            fileItems.push({
              file: files[i],
              driveItem: {
                name: files[i].name
              },
              fullPath,
              conflictBehavior: conflictBehavior !== null ? conflictBehavior[1] ? 1 : 0 : null,
              iconStatus: null,
              percent: 1,
              view: ViewType.image,
              completed: _completed,
              maxSize: this._maxChunckSize,
              minSize: 0
            });
          }
        }
      }
      fileItems = fileItems.sort((firstFile, secondFile) => {
        return firstFile.fullPath.substring(0, firstFile.fullPath.lastIndexOf("/")).localeCompare(secondFile.fullPath.substring(0, secondFile.fullPath.lastIndexOf("/")));
      });
      fileItems.forEach((fileItem) => {
        if (fileItemsCompleted.filter((item) => item.fullPath === fileItem.fullPath).length !== 0) {
          let index = fileItemsCompleted.findIndex((item) => item.fullPath === fileItem.fullPath);
          fileItemsCompleted.splice(index, 1);
        }
      });
      fileItems.push(...fileItemsCompleted);
      this.filesToUpload = fileItems;
      this.filesToUpload.forEach((fileItem) => __awaiter13(this, void 0, void 0, function* () {
        yield this.sendFileItemGraph(fileItem);
      }));
    });
  }
  /**
   * Call modal dialog to replace or keep file.
   *
   * @param file
   * @returns
   */
  getFileUploadStatus(file, fullPath, DialogStatus, fileUploadList) {
    const _super = Object.create(null, {
      requestStateUpdate: { get: () => super.requestStateUpdate }
    });
    return __awaiter13(this, void 0, void 0, function* () {
      const fileUploadDialog = this.renderRoot.querySelector("#file-upload-dialog");
      switch (DialogStatus) {
        case "Upload":
          const driveItem = yield getGraphfile(this.fileUploadList.graph, `${this.getGrapQuery(fullPath)}?$select=id`);
          if (driveItem !== null) {
            if (this._applyAll === true) {
              return [this._applyAll, this._applyAllConflitBehavior];
            }
            fileUploadDialog.classList.add("visible");
            this._dialogTitle = strings3.fileReplaceTitle;
            this._dialogContent = strings3.fileReplace.replace("{FileName}", file.name);
            this._dialogCheckBox = strings3.checkApplyAll;
            this._dialogPrimaryButton = strings3.buttonReplace;
            this._dialogSecondaryButton = strings3.buttonKeep;
            _super.requestStateUpdate.call(this, true);
            return new Promise((resolve) => __awaiter13(this, void 0, void 0, function* () {
              let fileUploadDialogClose = this.renderRoot.querySelector(".file-upload-dialog-close");
              let fileUploadDialogOk = this.renderRoot.querySelector(".file-upload-dialog-ok");
              let fileUploadDialogCancel = this.renderRoot.querySelector(".file-upload-dialog-cancel");
              let fileUploadDialogCheck = this.renderRoot.querySelector("#file-upload-dialog-check");
              fileUploadDialogCheck.checked = false;
              fileUploadDialogCheck.classList.remove("hide");
              fileUploadDialogOk.removeEventListener("click", onOkDialogClick);
              fileUploadDialogCancel.removeEventListener("click", onCancelDialogClick);
              fileUploadDialogClose.removeEventListener("click", onCloseDialogClick);
              fileUploadDialogOk.addEventListener("click", onOkDialogClick);
              fileUploadDialogCancel.addEventListener("click", onCancelDialogClick);
              fileUploadDialogClose.addEventListener("click", onCloseDialogClick);
              function onOkDialogClick() {
                fileUploadDialog.classList.remove("visible");
                resolve([
                  fileUploadDialogCheck.checked ? 1 : 0,
                  1
                  /* MgtFileUploadConflictBehavior.replace */
                ]);
              }
              function onCancelDialogClick() {
                fileUploadDialog.classList.remove("visible");
                resolve([
                  fileUploadDialogCheck.checked ? 1 : 0,
                  0
                  /* MgtFileUploadConflictBehavior.rename */
                ]);
              }
              function onCloseDialogClick() {
                fileUploadDialog.classList.remove("visible");
                resolve([-1]);
              }
            }));
          } else {
            return null;
          }
          break;
        case "MaxFiles":
          fileUploadDialog.classList.add("visible");
          this._dialogTitle = strings3.maximumFilesTitle;
          this._dialogContent = strings3.maximumFiles.split("{MaxNumber}").join(fileUploadList.maxUploadFile.toString());
          this._dialogCheckBox = strings3.checkApplyAll;
          this._dialogPrimaryButton = strings3.buttonUpload;
          this._dialogSecondaryButton = strings3.buttonReselect;
          _super.requestStateUpdate.call(this, true);
          return new Promise((resolve) => __awaiter13(this, void 0, void 0, function* () {
            let fileUploadDialogOk = this.renderRoot.querySelector(".file-upload-dialog-ok");
            let fileUploadDialogCancel = this.renderRoot.querySelector(".file-upload-dialog-cancel");
            let fileUploadDialogClose = this.renderRoot.querySelector(".file-upload-dialog-close");
            let fileUploadDialogCheck = this.renderRoot.querySelector("#file-upload-dialog-check");
            fileUploadDialogCheck.checked = false;
            fileUploadDialogCheck.classList.add("hide");
            fileUploadDialogOk.removeEventListener("click", onOkDialogClick);
            fileUploadDialogCancel.removeEventListener("click", onCancelDialogClick);
            fileUploadDialogClose.removeEventListener("click", onCancelDialogClick);
            fileUploadDialogOk.addEventListener("click", onOkDialogClick);
            fileUploadDialogCancel.addEventListener("click", onCancelDialogClick);
            fileUploadDialogClose.addEventListener("click", onCancelDialogClick);
            function onOkDialogClick() {
              fileUploadDialog.classList.remove("visible");
              resolve([1]);
            }
            function onCancelDialogClick() {
              fileUploadDialog.classList.remove("visible");
              resolve([0]);
            }
          }));
          break;
        case "ExcludedFileType":
          fileUploadDialog.classList.add("visible");
          this._dialogTitle = strings3.fileTypeTitle;
          this._dialogContent = strings3.fileType.replace("{FileName}", file.name) + " (" + fileUploadList.excludedFileExtensions.join(",") + ")";
          this._dialogCheckBox = strings3.checkAgain;
          this._dialogPrimaryButton = strings3.buttonOk;
          this._dialogSecondaryButton = strings3.buttonCancel;
          _super.requestStateUpdate.call(this, true);
          return new Promise((resolve) => __awaiter13(this, void 0, void 0, function* () {
            let fileUploadDialogOk = this.renderRoot.querySelector(".file-upload-dialog-ok");
            let fileUploadDialogCancel = this.renderRoot.querySelector(".file-upload-dialog-cancel");
            let fileUploadDialogClose = this.renderRoot.querySelector(".file-upload-dialog-close");
            let fileUploadDialogCheck = this.renderRoot.querySelector("#file-upload-dialog-check");
            fileUploadDialogCheck.checked = false;
            fileUploadDialogCheck.classList.remove("hide");
            fileUploadDialogOk.removeEventListener("click", onOkDialogClick);
            fileUploadDialogCancel.removeEventListener("click", onCancelDialogClick);
            fileUploadDialogClose.removeEventListener("click", onCancelDialogClick);
            fileUploadDialogOk.addEventListener("click", onOkDialogClick);
            fileUploadDialogCancel.addEventListener("click", onCancelDialogClick);
            fileUploadDialogClose.addEventListener("click", onCancelDialogClick);
            function onOkDialogClick() {
              fileUploadDialog.classList.remove("visible");
              resolve([fileUploadDialogCheck.checked ? 1 : 0]);
            }
            function onCancelDialogClick() {
              fileUploadDialog.classList.remove("visible");
              resolve([0]);
            }
          }));
        case "MaxFileSize":
          fileUploadDialog.classList.add("visible");
          this._dialogTitle = strings3.maximumFileSizeTitle;
          this._dialogContent = strings3.maximumFileSize.replace("{FileSize}", formatBytes(fileUploadList.maxFileSize)).replace("{FileName}", file.name) + formatBytes(file.size) + ".";
          this._dialogCheckBox = strings3.checkAgain;
          this._dialogPrimaryButton = strings3.buttonOk;
          this._dialogSecondaryButton = strings3.buttonCancel;
          _super.requestStateUpdate.call(this, true);
          return new Promise((resolve) => __awaiter13(this, void 0, void 0, function* () {
            let fileUploadDialogOk = this.renderRoot.querySelector(".file-upload-dialog-ok");
            let fileUploadDialogCancel = this.renderRoot.querySelector(".file-upload-dialog-cancel");
            let fileUploadDialogClose = this.renderRoot.querySelector(".file-upload-dialog-close");
            let fileUploadDialogCheck = this.renderRoot.querySelector("#file-upload-dialog-check");
            fileUploadDialogCheck.checked = false;
            fileUploadDialogCheck.classList.remove("hide");
            fileUploadDialogOk.removeEventListener("click", onOkDialogClick);
            fileUploadDialogCancel.removeEventListener("click", onCancelDialogClick);
            fileUploadDialogClose.removeEventListener("click", onCancelDialogClick);
            fileUploadDialogOk.addEventListener("click", onOkDialogClick);
            fileUploadDialogCancel.addEventListener("click", onCancelDialogClick);
            fileUploadDialogClose.addEventListener("click", onCancelDialogClick);
            function onOkDialogClick() {
              fileUploadDialog.classList.remove("visible");
              resolve([fileUploadDialogCheck.checked ? 1 : 0]);
            }
            function onCancelDialogClick() {
              fileUploadDialog.classList.remove("visible");
              resolve([0]);
            }
          }));
        default:
          break;
      }
    });
  }
  /**
   * Get GraphQuery based on pre defined parameters.
   *
   * @param fileItem
   * @returns
   */
  getGrapQuery(fullPath) {
    let itemPath = "";
    if (this.fileUploadList.itemPath) {
      if (this.fileUploadList.itemPath.length > 0) {
        itemPath = this.fileUploadList.itemPath.substring(0, 1) === "/" ? this.fileUploadList.itemPath : "/" + this.fileUploadList.itemPath;
      }
    }
    if (this.fileUploadList.userId && this.fileUploadList.itemId) {
      return `/users/${this.fileUploadList.userId}/drive/items/${this.fileUploadList.itemId}:${fullPath}`;
    }
    if (this.fileUploadList.userId && this.fileUploadList.itemPath) {
      return `/users/${this.fileUploadList.userId}/drive/root:${itemPath}${fullPath}`;
    }
    if (this.fileUploadList.groupId && this.fileUploadList.itemId) {
      return `/groups/${this.fileUploadList.groupId}/drive/items/${this.fileUploadList.itemId}:${fullPath}`;
    }
    if (this.fileUploadList.groupId && this.fileUploadList.itemPath) {
      return `/groups/${this.fileUploadList.groupId}/drive/root:${itemPath}${fullPath}`;
    }
    if (this.fileUploadList.driveId && this.fileUploadList.itemId) {
      return `/drives/${this.fileUploadList.driveId}/items/${this.fileUploadList.itemId}:${fullPath}`;
    }
    if (this.fileUploadList.driveId && this.fileUploadList.itemPath) {
      return `/drives/${this.fileUploadList.driveId}/root:${itemPath}${fullPath}`;
    }
    if (this.fileUploadList.siteId && this.fileUploadList.itemId) {
      return `/sites/${this.fileUploadList.siteId}/drive/items/${this.fileUploadList.itemId}:${fullPath}`;
    }
    if (this.fileUploadList.siteId && this.fileUploadList.itemPath) {
      return `/sites/${this.fileUploadList.siteId}/drive/root:${itemPath}${fullPath}`;
    }
    if (this.fileUploadList.itemId) {
      return `/me/drive/items/${this.fileUploadList.itemId}:${fullPath}`;
    }
    if (this.fileUploadList.itemPath) {
      return `/me/drive/root:${itemPath}${fullPath}`;
    }
    return `/me/drive/root:${fullPath}`;
  }
  /**
   * Send file using Upload using Graph based on length
   *
   * @param fileUpload
   * @returns
   */
  sendFileItemGraph(fileItem) {
    return __awaiter13(this, void 0, void 0, function* () {
      const graph = this.fileUploadList.graph;
      let graphQuery = "";
      if (fileItem.file.size < this._maxChunckSize) {
        try {
          if (!fileItem.completed) {
            if (fileItem.conflictBehavior === null || fileItem.conflictBehavior === 1) {
              graphQuery = `${this.getGrapQuery(fileItem.fullPath)}:/content`;
            }
            if (fileItem.conflictBehavior === 0) {
              graphQuery = `${this.getGrapQuery(fileItem.fullPath)}:/content?@microsoft.graph.conflictBehavior=rename`;
            }
            fileItem.driveItem = yield sendFileContent(graph, graphQuery, fileItem.file);
            if (fileItem.driveItem !== null) {
              this.setUploadSuccess(fileItem);
            } else {
              fileItem.driveItem = {
                name: fileItem.file.name
              };
              this.setUploadFail(fileItem, strings3.failUploadFile);
            }
          }
        } catch (error) {
          this.setUploadFail(fileItem, strings3.failUploadFile);
        }
      } else {
        if (!fileItem.completed) {
          if (fileItem.uploadUrl === void 0) {
            const response = yield getUploadSession(graph, `${this.getGrapQuery(fileItem.fullPath)}:/createUploadSession`, fileItem.conflictBehavior);
            try {
              if (response !== null) {
                fileItem.uploadUrl = response.uploadUrl;
                const driveItem = yield this.sendSessionUrlGraph(graph, fileItem);
                if (driveItem !== null) {
                  fileItem.driveItem = driveItem;
                  this.setUploadSuccess(fileItem);
                } else {
                  this.setUploadFail(fileItem, strings3.failUploadFile);
                }
              } else {
                this.setUploadFail(fileItem, strings3.failUploadFile);
              }
            } catch (_a) {
            }
          }
        }
      }
    });
  }
  /**
   * Manage slices of File to upload file by chuncks using Graph and Session Url
   *
   * @param Graph
   * @param fileItem
   * @returns
   */
  sendSessionUrlGraph(graph, fileItem) {
    const _super = Object.create(null, {
      requestStateUpdate: { get: () => super.requestStateUpdate }
    });
    return __awaiter13(this, void 0, void 0, function* () {
      while (fileItem.file.size > fileItem.minSize) {
        if (fileItem.mimeStreamString === void 0) {
          fileItem.mimeStreamString = yield this.readFileContent(fileItem.file);
        }
        const fileSlice = new Blob([fileItem.mimeStreamString.slice(fileItem.minSize, fileItem.maxSize)]);
        fileItem.percent = Math.round(fileItem.maxSize / fileItem.file.size * 100);
        _super.requestStateUpdate.call(this, true);
        if (fileItem.uploadUrl !== void 0) {
          const response = yield sendFileChunck(graph, fileItem.uploadUrl, `${fileItem.maxSize - fileItem.minSize}`, `bytes ${fileItem.minSize}-${fileItem.maxSize - 1}/${fileItem.file.size}`, fileSlice);
          if (response === null) {
            return null;
          } else if (response.id !== void 0) {
            return response;
          } else if (response.nextExpectedRanges !== void 0) {
            fileItem.minSize = parseInt(response.nextExpectedRanges[0].split("-")[0]);
            fileItem.maxSize = fileItem.minSize + this._maxChunckSize;
            if (fileItem.maxSize > fileItem.file.size) {
              fileItem.maxSize = fileItem.file.size;
            }
          }
        } else {
          return null;
        }
      }
    });
  }
  /**
   * Change the state of Mgt-File icon upload to Success
   *
   * @param fileUpload
   */
  setUploadSuccess(fileUpload) {
    fileUpload.percent = 100;
    super.requestStateUpdate(true);
    setTimeout(() => {
      fileUpload.iconStatus = getSvg(SvgIcon.Success);
      fileUpload.view = ViewType.twolines;
      fileUpload.fieldUploadResponse = "lastModifiedDateTime";
      fileUpload.completed = true;
      super.requestStateUpdate(true);
      clearFilesCache();
    }, 500);
  }
  /**
   * Change the state of Mgt-File icon upload to Fail
   *
   * @param fileUpload
   */
  setUploadFail(fileUpload, errorMessage) {
    setTimeout(() => {
      fileUpload.iconStatus = getSvg(SvgIcon.Fail);
      fileUpload.view = ViewType.twolines;
      fileUpload.driveItem.description = errorMessage;
      fileUpload.fieldUploadResponse = "description";
      fileUpload.completed = true;
      super.requestStateUpdate(true);
    }, 500);
  }
  /**
   * Retrieve File content as ArrayBuffer
   *
   * @param file
   * @returns
   */
  readFileContent(file) {
    return new Promise((resolve, reject2) => {
      const myReader = new FileReader();
      myReader.onloadend = (e) => {
        resolve(myReader.result);
      };
      myReader.onerror = (e) => {
        reject2(e);
      };
      myReader.readAsArrayBuffer(file);
    });
  }
  /**
   * Collect Files from Upload Area based on maxUploadFile
   *
   * @param uploadFilesItems
   * @returns
   */
  getFilesFromUploadArea(filesItems) {
    return __awaiter13(this, void 0, void 0, function* () {
      const folders = [];
      let entry;
      const collectFilesItems = [];
      for (let i = 0; i < filesItems.length; i++) {
        const uploadFileItem = filesItems[i];
        if (uploadFileItem.kind === "file") {
          if (uploadFileItem.getAsEntry) {
            entry = uploadFileItem.getAsEntry();
            if (entry.isDirectory) {
              folders.push(entry);
            } else {
              const file = uploadFileItem.getAsFile();
              if (file) {
                file.fullPath = "";
                collectFilesItems.push(file);
              }
            }
          } else if (uploadFileItem.webkitGetAsEntry) {
            entry = uploadFileItem.webkitGetAsEntry();
            if (entry.isDirectory) {
              folders.push(entry);
            } else {
              const file = uploadFileItem.getAsFile();
              if (file) {
                file.fullPath = "";
                collectFilesItems.push(file);
              }
            }
          } else if ("function" == typeof uploadFileItem.getAsFile) {
            const file = uploadFileItem.getAsFile();
            if (file) {
              file.fullPath = "";
              collectFilesItems.push(file);
            }
          }
          continue;
        } else {
          const fileItem = uploadFileItem;
          if (fileItem) {
            fileItem.fullPath = "";
            collectFilesItems.push(fileItem);
          }
        }
      }
      if (folders.length > 0) {
        const folderFiles = yield this.getFolderFiles(folders);
        collectFilesItems.push(...folderFiles);
      }
      return collectFilesItems;
    });
  }
  /**
   * Retrieve files from folder and subfolders to array.
   *
   * @param folders
   * @returns
   */
  getFolderFiles(folders) {
    return new Promise((resolve) => {
      let reading = 0;
      const contents = [];
      folders.forEach((entry) => {
        readEntry(entry, "");
      });
      function readEntry(entry, path) {
        if (entry.isDirectory) {
          readReaderContent(entry.createReader());
        } else {
          reading++;
          entry.file((file) => {
            reading--;
            file.fullPath = path;
            contents.push(file);
            if (reading === 0) {
              resolve(contents);
            }
          });
        }
      }
      function readReaderContent(reader) {
        reading++;
        reader.readEntries((entries) => {
          reading--;
          for (const entry of entries) {
            readEntry(entry, entry.fullPath);
          }
          if (reading === 0) {
            resolve(contents);
          }
        });
      }
    });
  }
};
__decorate8([
  property({ type: Object }),
  __metadata6("design:type", Array)
], MgtFileUpload.prototype, "filesToUpload", void 0);
__decorate8([
  property({ type: Object }),
  __metadata6("design:type", Object)
], MgtFileUpload.prototype, "fileUploadList", void 0);
MgtFileUpload = __decorate8([
  customElement("mgt-file-upload"),
  __metadata6("design:paramtypes", [])
], MgtFileUpload);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file-list/mgt-file-list-css.js
var styles8 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--file-item-background-color--hover:rgba(0, 0, 0, 0.1);--file-item-background-color--active:rgba(0, 0, 0, 0.05);--file-list-background-color:#ffffff;--file-upload-button-background-color:#f3f2f1;--file-upload-dialog-background-color:rgba(0, 0, 0, 0.1);--file-upload-dialog-content-background-color:white;--file-upload-dialog-content-color:#323130;--file-upload-dialog-primarybutton-color:white;--file-upload-dialog-primarybutton-background-color:#006cbe}.mgt-dark{--file-item-background-color--hover:#0078d4;--file-item-background-color--active:#238ada;--file-list-background-color:#424242;--file-upload-button-background-color:#006cbe;--file-upload-dialog-background-color:rgba(0, 0, 0, 0.3);--file-upload-dialog-content-background-color:#4a4a4a;--file-upload-dialog-content-color:white;--file-upload-dialog-primarybutton-color:white;--file-upload-dialog-primarybutton-background-color:#006cbe}:host{font-family:var(--default-font-family);font-size:var(--default-font-size)}:host .file-list-wrapper,mgt-file-item .file-list-wrapper{background-color:var(--file-list-background-color,#fff);box-shadow:var(--file-list-box-shadow,0 3.2px 7.2px rgba(0,0,0,.132),0 .6px 1.8px rgba(0,0,0,.108));border-radius:var(--file-list-border-radius,4px);border:var(--file-list-border,none);position:relative;color:var(--color-sub1,#323130);display:flex;flex-direction:column;border-radius:8px}:host .file-list-wrapper .file-list,mgt-file-item .file-list-wrapper .file-list{display:flex;padding:var(--file-list-padding,4px 0);margin:var(--file-list-margin,0);flex-direction:column;list-style:none}:host .file-list-wrapper .file-list .file-item,mgt-file-item .file-list-wrapper .file-list .file-item{border-top:var(--file-item-border-top,none);border-left:var(--file-item-border-left,none);border-right:var(--file-item-border-right,none);border-bottom:var(--file-item-border-bottom,none);margin:var(--file-item-margin,0 4px);border-radius:var(--file-item-border-radius,2px);cursor:pointer}:host .file-list-wrapper .file-list .file-item mgt-file,mgt-file-item .file-list-wrapper .file-list .file-item mgt-file{--file-background-color:$background-color}:host .file-list-wrapper .file-list .file-item.focused,:host .file-list-wrapper .file-list .file-item:hover,mgt-file-item .file-list-wrapper .file-list .file-item.focused,mgt-file-item .file-list-wrapper .file-list .file-item:hover{background-color:var(--file-item-background-color--hover,rgba(0,0,0,.1));border-radius:4px}:host .file-list-wrapper .file-list .file-item.focused mgt-file,:host .file-list-wrapper .file-list .file-item:hover mgt-file,mgt-file-item .file-list-wrapper .file-list .file-item.focused mgt-file,mgt-file-item .file-list-wrapper .file-list .file-item:hover mgt-file{--file-background-color:$file-item-background-color--hover}:host .file-list-wrapper .file-list .file-item.selected,:host .file-list-wrapper .file-list .file-item:active,mgt-file-item .file-list-wrapper .file-list .file-item.selected,mgt-file-item .file-list-wrapper .file-list .file-item:active{background-color:var(--file-item-background-color--active,rgba(0,0,0,.05))}:host .file-list-wrapper .file-list .file-item.selected mgt-file,:host .file-list-wrapper .file-list .file-item:active mgt-file,mgt-file-item .file-list-wrapper .file-list .file-item.selected mgt-file,mgt-file-item .file-list-wrapper .file-list .file-item:active mgt-file{--file-background-color:$file-item-background-color--active}:host .file-list-wrapper .progress-ring,mgt-file-item .file-list-wrapper .progress-ring{margin:4px auto;width:var(--progress-ring-size,24px);height:var(--progress-ring-size,24px)}:host .file-list-wrapper .show-more,mgt-file-item .file-list-wrapper .show-more{text-align:center;font-size:var(--show-more-button-font-size,12px);padding:var(--show-more-button-padding,6px);border-bottom-right-radius:var(--show-more-button-border-bottom-right-radius,8px);border-bottom-left-radius:var(--show-more-button-border-bottom-left-radius,8px);cursor:pointer;background-color:var(--show-more-button-background-color,var(--background-color-sub2,#f3f2f1))}:host .file-list-wrapper .show-more:hover,mgt-file-item .file-list-wrapper .show-more:hover{background-color:var(--show-more-button-background-color--hover,var(--file-item-background-color--hover,rgba(0,0,0,.1)))}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file-list/strings.js
var strings4 = {
  showMoreSubtitle: "Show more items"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-file-list/mgt-file-list.js
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata7 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter14 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtFileList = class MgtFileList2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles8;
  }
  get strings() {
    return strings4;
  }
  /**
   * allows developer to provide query for a file list
   *
   * @type {string}
   * @memberof MgtFileList
   */
  get fileListQuery() {
    return this._fileListQuery;
  }
  set fileListQuery(value) {
    if (value === this._fileListQuery) {
      return;
    }
    this._fileListQuery = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide an array of file queries
   *
   * @type {string[]}
   * @memberof MgtFileList
   */
  get fileQueries() {
    return this._fileQueries;
  }
  set fileQueries(value) {
    if (arraysAreEqual(this._fileQueries, value)) {
      return;
    }
    this._fileQueries = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide site id for a file
   *
   * @type {string}
   * @memberof MgtFileList
   */
  get siteId() {
    return this._siteId;
  }
  set siteId(value) {
    if (value === this._siteId) {
      return;
    }
    this._siteId = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide drive id for a file
   *
   * @type {string}
   * @memberof MgtFileList
   */
  get driveId() {
    return this._driveId;
  }
  set driveId(value) {
    if (value === this._driveId) {
      return;
    }
    this._driveId = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide group id for a file
   *
   * @type {string}
   * @memberof MgtFileList
   */
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    if (value === this._groupId) {
      return;
    }
    this._groupId = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide item id for a file
   *
   * @type {string}
   * @memberof MgtFileList
   */
  get itemId() {
    return this._itemId;
  }
  set itemId(value) {
    if (value === this._itemId) {
      return;
    }
    this._itemId = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide item path for a file
   *
   * @type {string}
   * @memberof MgtFileList
   */
  get itemPath() {
    return this._itemPath;
  }
  set itemPath(value) {
    if (value === this._itemPath) {
      return;
    }
    this._itemPath = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide user id for a file
   *
   * @type {string}
   * @memberof MgtFile
   */
  get userId() {
    return this._userId;
  }
  set userId(value) {
    if (value === this._userId) {
      return;
    }
    this._userId = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide insight type for a file
   * can be trending, used, or shared
   *
   * @type {OfficeGraphInsightString}
   * @memberof MgtFileList
   */
  get insightType() {
    return this._insightType;
  }
  set insightType(value) {
    if (value === this._insightType) {
      return;
    }
    this._insightType = value;
    this.requestStateUpdate(true);
  }
  /**
   * allows developer to provide file type to filter the list
   * can be docx
   *
   * @type {string[]}
   * @memberof MgtFileList
   */
  get fileExtensions() {
    return this._fileExtensions;
  }
  set fileExtensions(value) {
    if (arraysAreEqual(this._fileExtensions, value)) {
      return;
    }
    this._fileExtensions = value;
    this.requestStateUpdate(true);
  }
  /**
   * A number value to indicate the number of more files to load when show more button is clicked
   * @type {number}
   * @memberof MgtFileList
   */
  get pageSize() {
    return this._pageSize;
  }
  set pageSize(value) {
    if (value === this._pageSize) {
      return;
    }
    this._pageSize = value;
    this.requestStateUpdate(true);
  }
  /**
   * A number value indication for file size upload (KB)
   * @type {number}
   * @memberof MgtFileList
   */
  get maxFileSize() {
    return this._maxFileSize;
  }
  set maxFileSize(value) {
    if (value === this._maxFileSize) {
      return;
    }
    this._maxFileSize = value;
    this.requestStateUpdate(true);
  }
  /**
   * A number value to indicate the max number allowed of files to upload.
   * @type {number}
   * @memberof MgtFileList
   */
  get maxUploadFile() {
    return this._maxUploadFile;
  }
  set maxUploadFile(value) {
    if (value === this._maxUploadFile) {
      return;
    }
    this._maxUploadFile = value;
    this.requestStateUpdate(true);
  }
  /**
   * A Array of file extensions to be excluded from file upload.
   *
   * @type {string[]}
   * @memberof MgtFileList
   */
  get excludedFileExtensions() {
    return this._excludedFileExtensions;
  }
  set excludedFileExtensions(value) {
    if (arraysAreEqual(this._excludedFileExtensions, value)) {
      return;
    }
    this._excludedFileExtensions = value;
    this.requestStateUpdate(true);
  }
  /**
   * Get the scopes required for file list
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtFileList
   */
  static get requiredScopes() {
    return [.../* @__PURE__ */ new Set([...MgtFile.requiredScopes])];
  }
  constructor() {
    super();
    this._focusedItemIndex = -1;
    this.pageSize = 10;
    this.itemView = ViewType.twolines;
    this.maxUploadFile = 10;
    this.enableFileUpload = false;
    this._preloadedFiles = [];
  }
  /**
   * Override requestStateUpdate to include clearstate.
   *
   * @memberof MgtFileList
   */
  requestStateUpdate(force) {
    this.clearState();
    return super.requestStateUpdate(force);
  }
  /**
   * Reset state
   *
   * @memberof MgtFileList
   */
  clearState() {
    super.clearState();
    this.files = null;
  }
  render() {
    if (!this.files && this.isLoadingState) {
      return this.renderLoading();
    }
    if (!this.files || this.files.length === 0) {
      return this.renderNoData();
    }
    return this.renderTemplate("default", { files: this.files }) || this.renderFiles();
  }
  /**
   * Render the loading state
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtFileList
   */
  renderLoading() {
    return this.renderTemplate("loading", null) || html``;
  }
  /**
   * Render the state when no data is available
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtFileList
   */
  renderNoData() {
    return this.renderTemplate("no-data", null) || (this.enableFileUpload === true && Providers.globalProvider !== void 0 ? html`
      <fluent-design-system-provider use-defaults>
        <div id="file-list-wrapper" class="file-list-wrapper" dir=${this.direction}>
          ${this.renderFileUpload()}
        </div>
      </fluent-design-system-provider>
      ` : html``);
  }
  /**
   * Render the list of files.
   *
   * @protected
   * @param {*} files
   * @returns {TemplateResult}
   * @memberof mgtFileList
   */
  renderFiles() {
    return html`
    <fluent-design-system-provider use-defaults>
      <div id="file-list-wrapper" class="file-list-wrapper" dir=${this.direction}>
        ${this.enableFileUpload ? this.renderFileUpload() : null}
        <ul
          id="file-list"
          class="file-list"
          tabindex="0"
          @keydown="${this.onFileListKeyDown}"
          @keyup="${this.onFileListKeyUp}"
          @blur="${this.onFileListOut}"
        >
          ${repeat(this.files, (f) => f.id, (f) => html`
              <li class="file-item" @click=${(e) => this.handleItemSelect(f, e)}>
                ${this.renderFile(f)}
              </li>
            `)}
        </ul>
        ${!this.hideMoreFilesButton && this.pageIterator && (this.pageIterator.hasNext || this._preloadedFiles.length) ? this.renderMoreFileButton() : null}
      </div>
    </fluent-design-system-provider>
    `;
  }
  /**
   * Render an individual file.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof mgtFileList
   */
  renderFile(file) {
    const view = this.itemView;
    return this.renderTemplate("file", { file }, file.id) || html`
        <mgt-file .fileDetails=${file} .view=${view}></mgt-file>
      `;
  }
  /**
   * Render the button when clicked will show more files.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtFileList
   */
  renderMoreFileButton() {
    if (this._isLoadingMore) {
      return html`
        <fluent-progress-ring role="progressbar" viewBox="0 0 8 8" class="progress-ring"></fluent-progress-ring>
      `;
    } else {
      return html`<a id="show-more" class="show-more" @click=${() => this.renderNextPage()} tabindex="0" @keydown=${this.onShowMoreKeyDown}><span>${this.strings.showMoreSubtitle}<span></a>`;
    }
  }
  /**
   * Render MgtFileUpload sub component
   *
   * @returns
   */
  renderFileUpload() {
    const fileUploadConfig = {
      graph: Providers.globalProvider.graph.forComponent(this),
      driveId: this.driveId,
      excludedFileExtensions: this.excludedFileExtensions,
      groupId: this.groupId,
      itemId: this.itemId,
      itemPath: this.itemPath,
      userId: this.userId,
      siteId: this.siteId,
      maxFileSize: this.maxFileSize,
      maxUploadFile: this.maxUploadFile
    };
    return html`
        <mgt-file-upload .fileUploadList=${fileUploadConfig} ></mgt-file-upload>
      `;
  }
  /**
   * Handle accessibility keyboard enter event on 'show more items' button
   *
   * @param event
   */
  onShowMoreKeyDown(event) {
    if (event && event.code === "Enter") {
      event.preventDefault();
      this.renderNextPage();
    }
  }
  /**
   * Handle accessibility keyboard keyup events on file list
   *
   * @param event
   */
  onFileListKeyUp(event) {
    const fileList = this.renderRoot.querySelector(".file-list");
    const focusedItem = fileList.children[this._focusedItemIndex];
    if (event.code === "Enter" || event.code === "Space") {
      event.preventDefault();
      focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.remove("selected");
      focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.add("focused");
    }
  }
  /**
   * Handle accessibility keyboard keydown events (arrow up, arrow down, enter, tab) on file list
   *
   * @param event
   */
  onFileListKeyDown(event) {
    const fileList = this.renderRoot.querySelector(".file-list");
    let focusedItem;
    if (!fileList || !fileList.children.length) {
      return;
    }
    if (event.code === "ArrowUp" || event.code === "ArrowDown") {
      if (event.code === "ArrowUp") {
        if (this._focusedItemIndex === -1) {
          this._focusedItemIndex = fileList.children.length;
        }
        this._focusedItemIndex = (this._focusedItemIndex - 1 + fileList.children.length) % fileList.children.length;
      }
      if (event.code === "ArrowDown") {
        this._focusedItemIndex = (this._focusedItemIndex + 1) % fileList.children.length;
      }
      focusedItem = fileList.children[this._focusedItemIndex];
      this.updateItemBackgroundColor(fileList, focusedItem, "focused");
    }
    if (event.code === "Enter" || event.code === "Space") {
      focusedItem = fileList.children[this._focusedItemIndex];
      const file = focusedItem.children[0];
      event.preventDefault();
      this.fireCustomEvent("itemClick", file.fileDetails);
      this.updateItemBackgroundColor(fileList, focusedItem, "selected");
    }
    if (event.code === "Tab") {
      focusedItem = fileList.children[this._focusedItemIndex];
      focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.remove("focused");
    }
  }
  /**
   * Remove accessibility keyboard focused when out of file list
   *
   */
  onFileListOut() {
    const fileList = this.renderRoot.querySelector(".file-list");
    const focusedItem = fileList.children[this._focusedItemIndex];
    focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.remove("focused");
  }
  /**
   * load state into the component.
   *
   * @protected
   * @returns
   * @memberof MgtFileList
   */
  loadState() {
    return __awaiter14(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      if (!provider || provider.state === ProviderState.Loading) {
        return;
      }
      if (provider.state === ProviderState.SignedOut) {
        this.files = null;
        return;
      }
      const graph = provider.graph.forComponent(this);
      let files;
      let pageIterator;
      const getFromMyDrive = !this.driveId && !this.siteId && !this.groupId && !this.userId;
      if (this.driveId && !this.itemId && !this.itemPath || this.groupId && !this.itemId && !this.itemPath || this.siteId && !this.itemId && !this.itemPath || this.userId && !this.insightType && !this.itemId && !this.itemPath) {
        this.files = null;
      }
      if (!this.files) {
        if (this.fileListQuery) {
          pageIterator = yield getFilesByListQueryIterator(graph, this.fileListQuery, this.pageSize);
        } else if (this.fileQueries) {
          files = yield getFilesByQueries(graph, this.fileQueries);
        } else if (getFromMyDrive) {
          if (this.itemId) {
            pageIterator = yield getFilesByIdIterator(graph, this.itemId, this.pageSize);
          } else if (this.itemPath) {
            pageIterator = yield getFilesByPathIterator(graph, this.itemPath, this.pageSize);
          } else if (this.insightType) {
            files = yield getMyInsightsFiles(graph, this.insightType);
          } else {
            pageIterator = yield getFilesIterator(graph, this.pageSize);
          }
        } else if (this.driveId) {
          if (this.itemId) {
            pageIterator = yield getDriveFilesByIdIterator(graph, this.driveId, this.itemId, this.pageSize);
          } else if (this.itemPath) {
            pageIterator = yield getDriveFilesByPathIterator(graph, this.driveId, this.itemPath, this.pageSize);
          }
        } else if (this.groupId) {
          if (this.itemId) {
            pageIterator = yield getGroupFilesByIdIterator(graph, this.groupId, this.itemId, this.pageSize);
          } else if (this.itemPath) {
            pageIterator = yield getGroupFilesByPathIterator(graph, this.groupId, this.itemPath, this.pageSize);
          }
        } else if (this.siteId) {
          if (this.itemId) {
            pageIterator = yield getSiteFilesByIdIterator(graph, this.siteId, this.itemId, this.pageSize);
          } else if (this.itemPath) {
            pageIterator = yield getSiteFilesByPathIterator(graph, this.siteId, this.itemPath, this.pageSize);
          }
        } else if (this.userId) {
          if (this.itemId) {
            pageIterator = yield getUserFilesByIdIterator(graph, this.userId, this.itemId, this.pageSize);
          } else if (this.itemPath) {
            pageIterator = yield getUserFilesByPathIterator(graph, this.userId, this.itemPath, this.pageSize);
          } else if (this.insightType) {
            files = yield getUserInsightsFiles(graph, this.userId, this.insightType);
          }
        }
        if (pageIterator) {
          this.pageIterator = pageIterator;
          this._preloadedFiles = [...this.pageIterator.value];
          if (this._preloadedFiles.length >= this.pageSize) {
            files = this._preloadedFiles.splice(0, this.pageSize);
          } else {
            files = this._preloadedFiles.splice(0, this._preloadedFiles.length);
          }
        }
        let filteredByFileExtension;
        if (this.fileExtensions && this.fileExtensions !== null) {
          if (this.pageIterator && this.pageIterator.value) {
            while (this.pageIterator.hasNext) {
              yield fetchNextAndCacheForFilesPageIterator(this.pageIterator);
            }
            files = this.pageIterator.value;
            this._preloadedFiles = [];
          }
          filteredByFileExtension = files.filter((file) => {
            for (const e of this.fileExtensions) {
              if (e == this.getFileExtension(file.name)) {
                return file;
              }
            }
          });
        }
        if (filteredByFileExtension && filteredByFileExtension.length >= 0) {
          this.files = filteredByFileExtension;
          if (this.pageSize) {
            files = this.files.splice(0, this.pageSize);
            this.files = files;
          }
        } else {
          this.files = files;
        }
      }
    });
  }
  /**
   * Handle the click event on an item.
   *
   * @protected
   * @memberof MgtFileList
   */
  handleItemSelect(item, event) {
    this.fireCustomEvent("itemClick", item);
    if (event) {
      const fileList = this.renderRoot.querySelector(".file-list");
      const nodes = Array.from(fileList.children);
      const li = event.target.closest("li");
      const index = nodes.indexOf(li);
      this._focusedItemIndex = index;
      for (let i = 0; i < fileList.children.length; i++) {
        fileList.children[i].classList.remove("focused");
      }
    }
  }
  /**
   * Handle the click event on button to show next page.
   *
   * @protected
   * @memberof MgtFileList
   */
  renderNextPage() {
    return __awaiter14(this, void 0, void 0, function* () {
      if (this._preloadedFiles.length > 0) {
        this.files = [
          ...this.files,
          ...this._preloadedFiles.splice(0, Math.min(this.pageSize, this._preloadedFiles.length))
        ];
      } else {
        if (this.pageIterator.hasNext) {
          this._isLoadingMore = true;
          const root2 = this.renderRoot.querySelector("file-list-wrapper");
          if (root2 && root2.animate) {
            root2.animate([
              {
                height: "auto",
                transformOrigin: "top left"
              },
              {
                height: "auto",
                transformOrigin: "top left"
              }
            ], {
              duration: 1e3,
              easing: "ease-in-out",
              fill: "both"
            });
          }
          yield fetchNextAndCacheForFilesPageIterator(this.pageIterator);
          this._isLoadingMore = false;
          this.files = this.pageIterator.value;
        }
      }
      this.requestUpdate();
    });
  }
  /**
   * Get file extension string from file name
   *
   * @param name file name
   * @returns {string} file extension
   */
  getFileExtension(name) {
    const re = /(?:\.([^.]+))?$/;
    const fileExtension = re.exec(name)[1] || "";
    return fileExtension;
  }
  /**
   * Handle remove and add css class on accessibility keyboard select and focus
   *
   * @param fileList HTML element
   * @param focusedItem HTML element
   * @param className background class to be applied
   */
  updateItemBackgroundColor(fileList, focusedItem, className) {
    for (let i = 0; i < fileList.children.length; i++) {
      fileList.children[i].classList.remove(className);
    }
    if (focusedItem) {
      focusedItem.classList.add(className);
      focusedItem.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
    }
  }
  /**
   * Handle reload of File List and condition to clear cache
   *
   * @param clearCache boolean, if true clear cache
   */
  reload(clearCache = false) {
    if (clearCache) {
      clearFilesCache();
    }
    this.requestStateUpdate(true);
  }
};
__decorate9([
  property({
    attribute: "file-list-query"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "fileListQuery", null);
__decorate9([
  property({
    attribute: "file-queries",
    converter: (value, type) => {
      if (value) {
        return value.split(",").map((v) => v.trim());
      } else {
        return null;
      }
    }
  }),
  __metadata7("design:type", Array),
  __metadata7("design:paramtypes", [Array])
], MgtFileList.prototype, "fileQueries", null);
__decorate9([
  property({ type: Object }),
  __metadata7("design:type", Array)
], MgtFileList.prototype, "files", void 0);
__decorate9([
  property({
    attribute: "site-id"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "siteId", null);
__decorate9([
  property({
    attribute: "drive-id"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "driveId", null);
__decorate9([
  property({
    attribute: "group-id"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "groupId", null);
__decorate9([
  property({
    attribute: "item-id"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "itemId", null);
__decorate9([
  property({
    attribute: "item-path"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "itemPath", null);
__decorate9([
  property({
    attribute: "user-id"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "userId", null);
__decorate9([
  property({
    attribute: "insight-type"
  }),
  __metadata7("design:type", String),
  __metadata7("design:paramtypes", [String])
], MgtFileList.prototype, "insightType", null);
__decorate9([
  property({
    attribute: "item-view",
    converter: (value) => {
      if (!value || value.length === 0) {
        return ViewType.threelines;
      }
      value = value.toLowerCase();
      if (typeof ViewType[value] === "undefined") {
        return ViewType.threelines;
      } else {
        return ViewType[value];
      }
    }
  }),
  __metadata7("design:type", Number)
], MgtFileList.prototype, "itemView", void 0);
__decorate9([
  property({
    attribute: "file-extensions",
    converter: (value, type) => {
      return value.split(",").map((v) => v.trim());
    }
  }),
  __metadata7("design:type", Array),
  __metadata7("design:paramtypes", [Array])
], MgtFileList.prototype, "fileExtensions", null);
__decorate9([
  property({
    attribute: "page-size",
    type: Number
  }),
  __metadata7("design:type", Number),
  __metadata7("design:paramtypes", [Number])
], MgtFileList.prototype, "pageSize", null);
__decorate9([
  property({
    attribute: "hide-more-files-button",
    type: Boolean
  }),
  __metadata7("design:type", Boolean)
], MgtFileList.prototype, "hideMoreFilesButton", void 0);
__decorate9([
  property({
    attribute: "max-file-size",
    type: Number
  }),
  __metadata7("design:type", Number),
  __metadata7("design:paramtypes", [Number])
], MgtFileList.prototype, "maxFileSize", null);
__decorate9([
  property({
    attribute: "enable-file-upload",
    type: Boolean
  }),
  __metadata7("design:type", Boolean)
], MgtFileList.prototype, "enableFileUpload", void 0);
__decorate9([
  property({
    attribute: "max-upload-file",
    type: Number
  }),
  __metadata7("design:type", Number),
  __metadata7("design:paramtypes", [Number])
], MgtFileList.prototype, "maxUploadFile", null);
__decorate9([
  property({
    attribute: "excluded-file-extensions",
    converter: (value, type) => {
      return value.split(",").map((v) => v.trim());
    }
  }),
  __metadata7("design:type", Array),
  __metadata7("design:paramtypes", [Array])
], MgtFileList.prototype, "excludedFileExtensions", null);
__decorate9([
  internalProperty(),
  __metadata7("design:type", Boolean)
], MgtFileList.prototype, "_isLoadingMore", void 0);
MgtFileList = __decorate9([
  customElement("mgt-file-list"),
  __metadata7("design:paramtypes", [])
], MgtFileList);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-get/mgt-get.js
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata8 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter15 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ResponseType2;
(function(ResponseType3) {
  ResponseType3["json"] = "json";
  ResponseType3["image"] = "image";
})(ResponseType2 || (ResponseType2 = {}));
var getResponseInvalidationTime = (currentInvalidationPeriod) => currentInvalidationPeriod || CacheService.config.response.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsResponseCacheEnabled = () => CacheService.config.response.isEnabled && CacheService.config.isEnabled;
var MgtGet = class MgtGet2 extends MgtTemplatedComponent {
  constructor() {
    super(...arguments);
    this.scopes = [];
    this.version = "v1.0";
    this.type = ResponseType2.json;
    this.maxPages = 3;
    this.pollingRate = 0;
    this.cacheEnabled = false;
    this.cacheInvalidationPeriod = 0;
    this.isPolling = false;
    this.isRefreshing = false;
  }
  /**
   * Synchronizes property values when attributes change.
   *
   * @param {*} name
   * @param {*} oldValue
   * @param {*} newValue
   * @memberof MgtPersonCard
   */
  attributeChangedCallback(name, oldval, newval) {
    super.attributeChangedCallback(name, oldval, newval);
    this.requestStateUpdate();
  }
  /**
   * Refresh the data
   *
   * @param {boolean} [hardRefresh=false]
   * if false (default), the component will only update if the data changed
   * if true, the data will be first cleared and reloaded completely
   * @memberof MgtGet
   */
  refresh(hardRefresh = false) {
    this.isRefreshing = true;
    if (hardRefresh) {
      this.clearState();
    }
    this.requestStateUpdate(hardRefresh);
  }
  /**
   * Clears state of the component
   *
   * @protected
   * @memberof MgtGet
   */
  clearState() {
    this.response = null;
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    if (this.isLoadingState && !this.response) {
      return this.renderTemplate("loading", null);
    } else if (this.error) {
      return this.renderTemplate("error", this.error);
    } else if (this.hasTemplate("value") && this.response && this.response.value) {
      let valueContent;
      if (Array.isArray(this.response.value)) {
        let loading = null;
        if (this.isLoadingState && !this.isPolling) {
          loading = this.renderTemplate("loading", null);
        }
        valueContent = html`
          ${this.response.value.map((v) => this.renderTemplate("value", v, v.id))} ${loading}
        `;
      } else {
        valueContent = this.renderTemplate("value", this.response);
      }
      if (this.hasTemplate("default")) {
        const defaultContent = this.renderTemplate("default", this.response);
        if (this.templates["value"].templateOrder > this.templates["default"].templateOrder) {
          return html`
            ${defaultContent}${valueContent}
          `;
        } else {
          return html`
            ${valueContent}${defaultContent}
          `;
        }
      } else {
        return valueContent;
      }
    } else if (this.response) {
      return this.renderTemplate("default", this.response) || html``;
    } else if (this.hasTemplate("no-data")) {
      return this.renderTemplate("no-data", null);
    } else {
      return html``;
    }
  }
  /**
   * load state into the component.
   *
   * @protected
   * @returns
   * @memberof MgtGet
   */
  loadState() {
    return __awaiter15(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      this.error = null;
      if (!provider || provider.state !== ProviderState.SignedIn) {
        return;
      }
      if (this.resource) {
        try {
          let cache3;
          const key = `${this.version}${this.resource}`;
          let response = null;
          if (this.shouldRetrieveCache()) {
            cache3 = CacheService.getCache(schemas.get, schemas.get.stores.responses);
            const result2 = getIsResponseCacheEnabled() ? yield cache3.getValue(key) : null;
            if (result2 && getResponseInvalidationTime(this.cacheInvalidationPeriod) > Date.now() - result2.timeCached) {
              response = JSON.parse(result2.response);
            }
          }
          if (!response) {
            let uri = this.resource;
            let isDeltaLink = false;
            if (this.response && this.response["@odata.deltaLink"]) {
              uri = this.response["@odata.deltaLink"];
              isDeltaLink = true;
            } else {
              isDeltaLink = new URL(uri, "https://graph.microsoft.com").pathname.endsWith("delta");
            }
            const graph = provider.graph.forComponent(this);
            let request = graph.api(uri).version(this.version);
            if (this.scopes && this.scopes.length) {
              request = request.middlewareOptions(prepScopes(...this.scopes));
            }
            if (this.type === ResponseType2.json) {
              response = yield request.get();
              if (isDeltaLink && this.response && Array.isArray(this.response.value) && Array.isArray(response.value)) {
                response.value = this.response.value.concat(response.value);
              }
              if (!this.isPolling && !equals(this.response, response)) {
                this.response = response;
              }
              if (response && Array.isArray(response.value) && response["@odata.nextLink"]) {
                let pageCount = 1;
                let page = response;
                while ((pageCount < this.maxPages || this.maxPages <= 0 || isDeltaLink && this.pollingRate) && page && page["@odata.nextLink"]) {
                  pageCount++;
                  const nextResource = page["@odata.nextLink"].split(this.version)[1];
                  page = yield graph.client.api(nextResource).version(this.version).get();
                  if (page && page.value && page.value.length) {
                    page.value = response.value.concat(page.value);
                    response = page;
                    if (!this.isPolling) {
                      this.response = response;
                    }
                  }
                }
              }
            } else {
              if (this.resource.indexOf("/photo/$value") === -1 && this.resource.indexOf("/thumbnails/") === -1) {
                throw new Error("Only /photo/$value and /thumbnails/ endpoints support the image type");
              }
              let image;
              if (this.resource.indexOf("/photo/$value") > -1) {
                const sanitizedResource = this.resource.replace("/photo/$value", "");
                const photoResponse = yield getPhotoForResource(graph, sanitizedResource, this.scopes);
                if (photoResponse) {
                  image = photoResponse.photo;
                }
              } else if (this.resource.indexOf("/thumbnails/") > -1) {
                const imageResponse = yield getDocumentThumbnail(graph, this.resource, this.scopes);
                if (imageResponse) {
                  image = imageResponse.thumbnail;
                }
              }
              if (image) {
                response = {
                  image
                };
              }
            }
            if (this.shouldUpdateCache() && response) {
              cache3 = CacheService.getCache(schemas.get, schemas.get.stores.responses);
              cache3.putValue(key, { response: JSON.stringify(response) });
            }
          }
          if (!equals(this.response, response)) {
            this.response = response;
          }
        } catch (e) {
          this.error = e;
        }
        if (this.response) {
          this.error = null;
          if (this.pollingRate) {
            setTimeout(() => __awaiter15(this, void 0, void 0, function* () {
              this.isPolling = true;
              yield this.loadState();
              this.isPolling = false;
            }), this.pollingRate);
          }
        }
      } else {
        this.response = null;
      }
      this.isRefreshing = false;
      this.fireCustomEvent("dataChange", { response: this.response, error: this.error });
    });
  }
  shouldRetrieveCache() {
    return getIsResponseCacheEnabled() && this.cacheEnabled && !(this.isRefreshing || this.isPolling);
  }
  shouldUpdateCache() {
    return getIsResponseCacheEnabled() && this.cacheEnabled;
  }
};
__decorate10([
  property({
    attribute: "resource",
    reflect: true,
    type: String
  }),
  __metadata8("design:type", String)
], MgtGet.prototype, "resource", void 0);
__decorate10([
  property({
    attribute: "scopes",
    converter: (value, type) => {
      return value ? value.toLowerCase().split(",") : null;
    },
    reflect: true
  }),
  __metadata8("design:type", Array)
], MgtGet.prototype, "scopes", void 0);
__decorate10([
  property({
    attribute: "version",
    reflect: true,
    type: String
  }),
  __metadata8("design:type", String)
], MgtGet.prototype, "version", void 0);
__decorate10([
  property({
    attribute: "type",
    reflect: true,
    type: ResponseType2
  }),
  __metadata8("design:type", String)
], MgtGet.prototype, "type", void 0);
__decorate10([
  property({
    attribute: "max-pages",
    reflect: true,
    type: Number
  }),
  __metadata8("design:type", Number)
], MgtGet.prototype, "maxPages", void 0);
__decorate10([
  property({
    attribute: "polling-rate",
    reflect: true,
    type: Number
  }),
  __metadata8("design:type", Number)
], MgtGet.prototype, "pollingRate", void 0);
__decorate10([
  property({
    attribute: "cache-enabled",
    reflect: true,
    type: Boolean
  }),
  __metadata8("design:type", Boolean)
], MgtGet.prototype, "cacheEnabled", void 0);
__decorate10([
  property({
    attribute: "cache-invalidation-period",
    reflect: true,
    type: Number
  }),
  __metadata8("design:type", Number)
], MgtGet.prototype, "cacheInvalidationPeriod", void 0);
__decorate10([
  property({ attribute: false }),
  __metadata8("design:type", Object)
], MgtGet.prototype, "response", void 0);
__decorate10([
  property({ attribute: false }),
  __metadata8("design:type", Object)
], MgtGet.prototype, "error", void 0);
MgtGet = __decorate10([
  customElement("mgt-get")
], MgtGet);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-login/mgt-login-css.js
var styles9 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--button-color:#323130;--popup-color:#323130}.mgt-dark{--button-color:#f3f2f1;--popup-color:#f3f2f1}:host,mgt-login{--font-size:14px;--font-weight:600;--width:'100%';--height:'100%';--margin:0;--padding:12px 20px;--popup-command-font-size:12px;--popup-command-margin:16px 0 0;--popup-padding:24px 48px 16px 24px}:host .root,mgt-login .root{position:relative;display:inline-block}:host .login-button,mgt-login .login-button{display:flex;align-items:center;font-family:var(--default-font-family);font-size:var(--font-size);font-weight:var(--font-weight);width:var(--width);height:var(--height);margin:var(--margin);padding:var(--padding);color:var(--button-color,#323130);background-color:var(--button-background-color,transparent);border:none;cursor:pointer;transition:color .3s,background-color .3s;word-spacing:inherit;text-indent:inherit;letter-spacing:inherit}:host .login-button mgt-person,mgt-login .login-button mgt-person{--color-sub1:set-var(button__color, $theme-default, $login)}:host .login-button:hover,mgt-login .login-button:hover{color:var(--button-color--hover,#0078d4);--color:var(--button-color--hover, #0078d4);background-color:var(--button-background-color--hover,var(--background-color--hover,#edebe9));--color-sub1:var(--button-color--hover, #0078d4);border-radius:4px}:host .login-button:focus,mgt-login .login-button:focus{outline:0}:host .login-button:disabled,mgt-login .login-button:disabled{opacity:.4;pointer-events:none}:host .login-button.no-click,mgt-login .login-button.no-click{pointer-events:none}:host .login-button:focus-visible,mgt-login .login-button:focus-visible{outline:auto}:host .login-icon+span,mgt-login .login-icon+span{margin-left:6px}:host .popup,mgt-login .popup{font-family:var(--default-font-family);background-color:var(--popup-background-color,var(--background-color,#fff));min-width:240px;z-index:1;color:var(--popup-color,#323130);border-radius:8px}:host .popup mgt-person,mgt-login .popup mgt-person{--color-sub1:set-var(popup__color, $theme-default, $login)}:host .popup-content,mgt-login .popup-content{display:flex;flex-direction:column;padding:var(--popup-padding);border-radius:8px}:host .popup-commands ul,mgt-login .popup-commands ul{list-style-type:none;margin:var(--popup-command-margin);padding:0}:host .popup-command,mgt-login .popup-command{font-family:var(--default-font-family);font-size:var(--popup-command-font-size);font-weight:var(--font-weight);color:#0078d4;background-color:var(--popup-background-color,var(--background-color,#fff));border:none;padding:0;cursor:pointer;transition:color .3s;word-spacing:inherit;text-indent:inherit;letter-spacing:inherit}:host .popup-command:hover,mgt-login .popup-command:hover{color:#005a9e}[dir=rtl]{--popup-padding:24px 24px 16px 48px}[dir=rtl] mgt-person .details{--details-spacing:0px 12px 0px 0px}[dir=rtl] mgt-person .details.small{--details-spacing:0px 6px 0px 0px}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-login/strings.js
var strings5 = {
  signInLinkSubtitle: "Sign In",
  signOutLinkSubtitle: "Sign Out"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-login/mgt-login.js
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata9 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter16 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtLogin = class MgtLogin2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles9;
  }
  get strings() {
    return strings5;
  }
  /**
   * Gets the flyout element
   *
   * @protected
   * @type {MgtFlyout}
   * @memberof MgtLogin
   */
  get flyout() {
    return this.renderRoot.querySelector(".flyout");
  }
  /**
   * Get the scopes required for login
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtLogin
   */
  static get requiredScopes() {
    return [.../* @__PURE__ */ new Set(["user.read", ...MgtPerson.requiredScopes])];
  }
  constructor() {
    super();
    this._isFlyoutOpen = false;
  }
  /**
   * Invoked each time the custom element is appended into a document-connected element
   *
   * @memberof MgtLogin
   */
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", (e) => e.stopPropagation());
  }
  /**
   * Initiate login
   *
   * @returns {Promise<void>}
   * @memberof MgtLogin
   */
  login() {
    return __awaiter16(this, void 0, void 0, function* () {
      if (this.userDetails || !this.fireCustomEvent("loginInitiated")) {
        return;
      }
      const provider = Providers.globalProvider;
      if (provider && provider.login) {
        yield provider.login();
        if (provider.state === ProviderState.SignedIn) {
          this.fireCustomEvent("loginCompleted");
        } else {
          this.fireCustomEvent("loginFailed");
        }
      }
    });
  }
  /**
   * Initiate logout
   *
   * @returns {Promise<void>}
   * @memberof MgtLogin
   */
  logout() {
    return __awaiter16(this, void 0, void 0, function* () {
      if (!this.fireCustomEvent("logoutInitiated")) {
        return;
      }
      const provider = Providers.globalProvider;
      if (provider && provider.logout) {
        yield provider.logout();
        this.userDetails = null;
        this.hideFlyout();
        this.fireCustomEvent("logoutCompleted");
      }
    });
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    return html`
      <div class="root" dir=${this.direction}>
        <div>
          ${this.renderButton()}
        </div>
        ${this.renderFlyout()}
      </div>
    `;
  }
  /**
   * Load state into the component.
   *
   * @protected
   * @returns
   * @memberof MgtLogin
   */
  loadState() {
    return __awaiter16(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      if (provider && !this.userDetails) {
        if (provider.state === ProviderState.SignedIn) {
          this.userDetails = yield getUserWithPhoto(provider.graph.forComponent(this));
          if (this.userDetails.personImage) {
            this._image = this.userDetails.personImage;
          }
          this.fireCustomEvent("loginCompleted");
        } else {
          this.userDetails = null;
        }
      }
    });
  }
  /**
   * Render the button.
   *
   * @protected
   * @memberof MgtLogin
   */
  renderButton() {
    const provider = Providers.globalProvider;
    const signedInState = ProviderState.SignedIn;
    let ariaLabel = this.strings.signInLinkSubtitle;
    if (provider) {
      if (provider.state === signedInState) {
        ariaLabel = this.userDetails ? this.userDetails.displayName : this.strings.signInLinkSubtitle;
      }
    }
    const classes = {
      "login-button": true,
      "no-click": this._isFlyoutOpen
    };
    return html`
      <button aria-label=${ariaLabel} ?disabled="${this.isLoadingState}" @click=${this.onClick} class=${classMap(classes)} role="button">
        ${this.renderButtonContent()}
      </button>
    `;
  }
  /**
   * Render the details flyout.
   *
   * @protected
   * @memberof MgtLogin
   */
  renderFlyout() {
    return html`
      <mgt-flyout
        class="flyout"
        light-dismiss
        @opened=${() => this._isFlyoutOpen = true}
        @closed=${() => this._isFlyoutOpen = false}
      >
        <div slot="flyout">
          ${this.renderFlyoutContent()}
        </div>
      </mgt-flyout>
    `;
  }
  /**
   * Render the flyout menu content.
   *
   * @protected
   * @returns
   * @memberof MgtLogin
   */
  renderFlyoutContent() {
    if (!this.userDetails) {
      return;
    }
    return html`
      <div class="popup">
        <div class="popup-content">
          <div>
            ${this.renderFlyoutPersonDetails(this.userDetails, this._image)}
          </div>
          <div class="popup-commands">
            ${this.renderFlyoutCommands()}
          </div>
        </div>
      </div>
    `;
  }
  /**
   * Render the flyout person details.
   *
   * @protected
   * @returns
   * @memberof MgtLogin
   */
  renderFlyoutPersonDetails(personDetails, personImage) {
    const template2 = this.renderTemplate("flyout-person-details", { personDetails, personImage });
    return template2 || html`
        <mgt-person .personDetails=${personDetails} .personImage=${personImage} .view=${ViewType.twolines} />
      `;
  }
  /**
   * Render the flyout commands.
   *
   * @protected
   * @returns
   * @memberof MgtLogin
   */
  renderFlyoutCommands() {
    const template2 = this.renderTemplate("flyout-commands", { handleSignOut: () => this.logout() });
    return template2 || html`
        <ul>
          <li>
            <button class="popup-command" @click=${this.logout} aria-label=${this.strings.signOutLinkSubtitle}>
              ${this.strings.signOutLinkSubtitle}
            </button>
          </li>
        </ul>
      `;
  }
  /**
   * Render the button content.
   *
   * @protected
   * @returns
   * @memberof MgtLogin
   */
  renderButtonContent() {
    if (this.userDetails) {
      return this.renderSignedInButtonContent(this.userDetails, this._image);
    } else {
      return this.renderSignedOutButtonContent();
    }
  }
  /**
   * Render the button content when the user is signed in.
   *
   * @protected
   * @returns
   * @memberof MgtLogin
   */
  renderSignedInButtonContent(personDetails, personImage) {
    const template2 = this.renderTemplate("signed-in-button-content", { personDetails, personImage });
    return template2 || html`
        <mgt-person .personDetails=${this.userDetails} .personImage=${this._image} .view=${ViewType.oneline} />
      `;
  }
  /**
   * Clears state of the component
   *
   * @protected
   * @memberof MgtLogin
   */
  clearState() {
    this.userDetails = null;
    this._image = null;
  }
  /**
   * Render the button content when the user is not signed in.
   *
   * @protected
   * @returns
   * @memberof MgtLogin
   */
  renderSignedOutButtonContent() {
    const template2 = this.renderTemplate("signed-out-button-content", null);
    return template2 || html`
        <i class="login-icon ms-Icon ms-Icon--Contact"></i>
        <span>${this.strings.signInLinkSubtitle}</span>
      `;
  }
  /**
   * Show the flyout and its content.
   *
   * @protected
   * @memberof MgtLogin
   */
  showFlyout() {
    const flyout = this.flyout;
    if (flyout) {
      flyout.open();
    }
  }
  /**
   * Dismiss the flyout.
   *
   * @protected
   * @memberof MgtLogin
   */
  hideFlyout() {
    const flyout = this.flyout;
    if (flyout) {
      flyout.close();
    }
  }
  onClick() {
    if (this.userDetails) {
      this.showFlyout();
    } else {
      this.login();
    }
  }
};
__decorate11([
  property({
    attribute: "user-details",
    type: Object
  }),
  __metadata9("design:type", Object)
], MgtLogin.prototype, "userDetails", void 0);
__decorate11([
  property({ attribute: false }),
  __metadata9("design:type", Boolean)
], MgtLogin.prototype, "_isFlyoutOpen", void 0);
MgtLogin = __decorate11([
  customElement("mgt-login"),
  __metadata9("design:paramtypes", [])
], MgtLogin);

// node_modules/@microsoft/mgt-components/dist/es6/graph/graph.groups.js
var __awaiter17 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var GroupType;
(function(GroupType2) {
  GroupType2[GroupType2["any"] = 0] = "any";
  GroupType2[GroupType2["unified"] = 1] = "unified";
  GroupType2[GroupType2["security"] = 2] = "security";
  GroupType2[GroupType2["mailenabledsecurity"] = 4] = "mailenabledsecurity";
  GroupType2[GroupType2["distribution"] = 8] = "distribution";
})(GroupType || (GroupType = {}));
var getGroupsInvalidationTime = () => CacheService.config.groups.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
var getIsGroupsCacheEnabled = () => CacheService.config.groups.isEnabled && CacheService.config.isEnabled;
function findGroups(graph, query, top = 10, groupTypes = GroupType.any, groupFilters = "") {
  return __awaiter17(this, void 0, void 0, function* () {
    const scopes = "Group.Read.All";
    let cache3;
    const key = `${query ? query : "*"}*${groupTypes}*${groupFilters}`;
    if (getIsGroupsCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.groups, schemas.groups.stores.groupsQuery);
      const cacheGroupQuery = yield cache3.getValue(key);
      if (cacheGroupQuery && getGroupsInvalidationTime() > Date.now() - cacheGroupQuery.timeCached) {
        if (cacheGroupQuery.top >= top) {
          return cacheGroupQuery.groups.map((x) => JSON.parse(x)).slice(0, top + 1);
        }
      }
    }
    let filterQuery = "";
    let responses;
    let batchedResult = [];
    if (query !== "") {
      filterQuery = `(startswith(displayName,'${query}') or startswith(mailNickname,'${query}') or startswith(mail,'${query}'))`;
    }
    if (groupFilters) {
      filterQuery += `${query ? " and " : ""}${groupFilters}`;
    }
    if (groupTypes !== GroupType.any) {
      const batch = graph.createBatch();
      const filterGroups = [];
      if (GroupType.unified === (groupTypes & GroupType.unified)) {
        filterGroups.push("groupTypes/any(c:c+eq+'Unified')");
      }
      if (GroupType.security === (groupTypes & GroupType.security)) {
        filterGroups.push("(mailEnabled eq false and securityEnabled eq true)");
      }
      if (GroupType.mailenabledsecurity === (groupTypes & GroupType.mailenabledsecurity)) {
        filterGroups.push("(mailEnabled eq true and securityEnabled eq true)");
      }
      if (GroupType.distribution === (groupTypes & GroupType.distribution)) {
        filterGroups.push("(mailEnabled eq true and securityEnabled eq false)");
      }
      filterQuery = filterQuery ? `${filterQuery} and ` : "";
      for (let filter2 of filterGroups) {
        batch.get(filter2, `/groups?$filter=${filterQuery + filter2}`, ["Group.Read.All"]);
      }
      try {
        responses = yield batch.executeAll();
        for (let i = 0; i < filterGroups.length; i++) {
          if (responses.get(filterGroups[i]).content.value) {
            for (let group of responses.get(filterGroups[i]).content.value) {
              let repeat3 = batchedResult.filter((batchedGroup) => batchedGroup.id === group.id);
              if (repeat3.length === 0) {
                batchedResult.push(group);
              }
              repeat3 = [];
            }
          }
        }
      } catch (_) {
        try {
          let queries = [];
          for (let filter2 of filterGroups) {
            queries.push(yield graph.api("groups").filter(`${filterQuery} and ${filter2}`).top(top).count(true).header("ConsistencyLevel", "eventual").middlewareOptions(prepScopes(scopes)).get());
          }
          return Promise.all(queries);
        } catch (_2) {
          return [];
        }
      }
    } else {
      if (batchedResult.length === 0) {
        const result2 = yield graph.api("groups").filter(filterQuery).top(top).count(true).header("ConsistencyLevel", "eventual").middlewareOptions(prepScopes(scopes)).get();
        if (getIsGroupsCacheEnabled() && result2) {
          cache3.putValue(key, { groups: result2.value.map((x) => JSON.stringify(x)), top });
        }
        return result2 ? result2.value : null;
      }
    }
    return batchedResult;
  });
}
function getGroup(graph, id, requestedProps) {
  return __awaiter17(this, void 0, void 0, function* () {
    const scopes = "Group.Read.All";
    let cache3;
    if (getIsGroupsCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.groups, schemas.groups.stores.groups);
      const group = yield cache3.getValue(id);
      if (group && getGroupsInvalidationTime() > Date.now() - group.timeCached) {
        const cachedData = group.group ? JSON.parse(group.group) : null;
        const uniqueProps = requestedProps && cachedData ? requestedProps.filter((prop) => !Object.keys(cachedData).includes(prop)) : null;
        if (!uniqueProps || uniqueProps.length <= 1) {
          return cachedData;
        }
      }
    }
    let apiString = `/groups/${id}`;
    if (requestedProps) {
      apiString = apiString + "?$select=" + requestedProps.toString();
    }
    const response = yield graph.api(apiString).middlewareOptions(prepScopes(scopes)).get();
    if (getIsGroupsCacheEnabled()) {
      cache3.putValue(id, { group: JSON.stringify(response) });
    }
    return response;
  });
}
function getGroupsForGroupIds(graph, groupIds, filters = "") {
  return __awaiter17(this, void 0, void 0, function* () {
    if (!groupIds || groupIds.length === 0) {
      return [];
    }
    const batch = graph.createBatch();
    const groupDict = {};
    const notInCache = [];
    let cache3;
    if (getIsGroupsCacheEnabled()) {
      cache3 = CacheService.getCache(schemas.groups, schemas.groups.stores.groups);
    }
    for (const id of groupIds) {
      groupDict[id] = null;
      let group = null;
      if (getIsGroupsCacheEnabled()) {
        group = yield cache3.getValue(id);
      }
      if (group && getGroupsInvalidationTime() > Date.now() - group.timeCached) {
        groupDict[id] = group.group ? JSON.parse(group.group) : null;
      } else if (id !== "") {
        let apiUrl = `/groups/${id}`;
        if (filters) {
          apiUrl = `${apiUrl}?$filters=${filters}`;
        }
        batch.get(id, apiUrl, ["Group.Read.All"]);
        notInCache.push(id);
      }
    }
    try {
      const responses = yield batch.executeAll();
      for (const id of groupIds) {
        const response = responses.get(id);
        if (response && response.content) {
          groupDict[id] = response.content;
          if (getIsGroupsCacheEnabled()) {
            cache3.putValue(id, { group: JSON.stringify(response.content) });
          }
        }
      }
      return Promise.all(Object.values(groupDict));
    } catch (_) {
      try {
        groupIds.filter((id) => notInCache.includes(id)).forEach((id) => groupDict[id] = getGroup(graph, id));
        if (getIsGroupsCacheEnabled()) {
          groupIds.filter((id) => notInCache.includes(id)).forEach((id) => __awaiter17(this, void 0, void 0, function* () {
            return cache3.putValue(id, { group: JSON.stringify(yield groupDict[id]) });
          }));
        }
        return Promise.all(Object.values(groupDict));
      } catch (_2) {
        return [];
      }
    }
  });
}
function findGroupsFromGroupIds(graph, query, groupIds, top = 10, groupTypes = GroupType.any, filters = "") {
  return __awaiter17(this, void 0, void 0, function* () {
    const foundGroups = [];
    const graphGroups = yield findGroups(graph, query, top, groupTypes, filters);
    if (graphGroups) {
      for (let i = 0; i < graphGroups.length; i++) {
        const group = graphGroups[i];
        if (group.id && groupIds.includes(group.id)) {
          foundGroups.push(group);
        }
      }
    }
    return foundGroups;
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-spinner/mgt-spinner-css.js
var styles10 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}:host .spinner{border:2px solid #c7e0f4;border-top:2px solid #0078d4;border-radius:50%;width:20px;height:20px;animation:spin 2s linear infinite}@keyframes spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-spinner/mgt-spinner.js
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MgtSpinner = class MgtSpinner2 extends MgtBaseComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * user the `css` tag function.
   */
  static get styles() {
    return styles10;
  }
  /**
   * Render the loading spinner
   *
   * @returns
   * @memberof MgtSpinner
   */
  render() {
    return html`
      <div class="spinner"></div>
    `;
  }
};
MgtSpinner = __decorate12([
  customElement("mgt-spinner")
], MgtSpinner);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-people-picker/mgt-people-picker-css.js
var styles11 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--selected-person-background-color:#f3f2f1}.mgt-dark{--selected-person-background-color:#4f4f4f}:host{font-family:var(--default-font-family);font-size:14px;height:24px;display:contents;overflow:hidden;position:absolute;width:135px;left:0;top:0;border-radius:12px}:host .root,mgt-people-picker .root{display:block}.people-picker{background-color:var(--input-background-color,#fff);border-top:var(--input-border-top,var(--input-border,2px solid #605e5c));border-right:var(--input-border-right,var(--input-border,2px solid #605e5c));border-bottom:var(--input-border-bottom,var(--input-border,2px solid #605e5c));border-left:var(--input-border-left,var(--input-border,2px solid #605e5c));padding:6px 0 0}.people-picker:hover{border-color:var(--input-border-color--hover,#323130)}.people-picker.focused{border-color:var(--input-border-color--focus,#0078d4)}.people-picker.disabled{pointer-events:none}.people-picker .people-picker-inner{flex:1 1 auto;display:flex;flex-wrap:wrap;vertical-align:middle;list-style-type:none;font-style:normal;font-weight:400;overflow:hidden}.people-picker .flyout .search-box{margin:1px 2px 8px}.people-picker .flyout .search-box.search-box-start{line-height:normal;margin-inline-start:0;margin-inline-end:0}.people-picker .flyout .search-box__input{box-sizing:border-box;border-width:0;border-style:none;width:100%;display:flex;flex:1 0 auto;font-family:var(--default-font-family);position:relative;outline:0;font-style:normal;font-weight:400;font-size:14px;background-color:var(--input-background-color,#fff);color:var(--color-sub1,#323130);word-spacing:inherit;text-indent:inherit;letter-spacing:inherit}.people-picker .flyout .search-box__input::placeholder{color:var(--placeholder-color,#605e5c)}.people-picker .flyout .flyout-root{padding:0;border-radius:2px;min-width:260px;overflow-y:auto;text-align:left;list-style-type:none;background-color:var(--dropdown-background-color,var(--list-background-color,#fff));max-height:var(--mgt-flyout-set-height,unset);border-radius:8px}.people-picker .flyout .flyout-root li{cursor:pointer}.people-picker .flyout .flyout-root .people-list{list-style:none;padding:0}.people-picker .flyout .flyout-root .people-list .list-person{display:flex;flex-direction:row;align-items:center;padding:12px;font-style:normal;font-weight:600;font-size:14px;margin:var(--file-item-margin,4px);border-radius:4px}.people-picker .flyout .flyout-root .people-list .list-person:hover{background-color:var(--dropdown-item-hover-background,var(--input-background-color--hover,#edebe9))}.people-picker .flyout .flyout-root .people-list .list-person:hover .people-person-text-area{color:var(--dropdown-item-text-hover-color,#000)}.people-picker .flyout .flyout-root .people-list .list-person.focused{background-color:var(--dropdown-item-hover-background,var(--input-background-color--hover,#edebe9))}.people-picker .flyout .flyout-root .people-list .list-person.focused .people-person-text-area{color:var(--dropdown-item-text-hover-color,#000)}.people-picker .flyout .flyout-root .people-list .list-person .people-person-text-area{margin-left:13px;flex:1 1 0;max-height:40px;overflow:hidden;color:var(--dropdown-item-text-color,#000)}.people-picker .flyout .flyout-root .people-list .list-person .people-person-text-area .people-person-text{font-size:14px;font-weight:400;margin:0;padding:0}.people-picker .flyout .flyout-root .people-list .list-person .people-person-text-area .people-person-text.highlight-search-text{font-weight:700}.people-picker .selected-list{list-style:none;padding:0;display:contents}.people-picker .selected-list__person-wrapper,.people-picker .selected-list__person-wrapper-highlighted,.people-picker .selected-list__person-wrapper-highlighted:hover{display:flex;margin:0 5px 6px 0;align-items:center;border-radius:12px;height:24px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;position:relative;background-color:var(--selected-person-background-color,#f3f2f1)}.people-picker .selected-list__person-wrapper-highlighted__person,.people-picker .selected-list__person-wrapper__person{overflow:hidden;min-width:100%;--avatar-size-s:24px;margin-left:0;--color:var(--color-sub1, #323130);color:var(--color-sub1,#323130);padding-bottom:1px;padding-right:4px}.people-picker .selected-list__person-wrapper-highlighted__overflow,.people-picker .selected-list__person-wrapper__overflow{margin-left:25px}.people-picker .selected-list__person-wrapper-highlighted__overflow__gradient,.people-picker .selected-list__person-wrapper__overflow__gradient{content:'';position:absolute;margin-right:23px;width:10px;height:90%;top:0;right:0;background-image:linear-gradient(to right,rgba(255,255,255,0) 0,rgba(255,255,255,0) 60%,var(--selected-person-background-color,#f3f2f1) 100%);background-image:-moz-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 60%,var(--selected-person-background-color,#f3f2f1) 100%);background-image:-o-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 60%,var(--selected-person-background-color,#f3f2f1) 100%);background-image:-ms-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 60%,var(--selected-person-background-color,#f3f2f1) 100%);background-image:-webkit-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 60%,var(--selected-person-background-color,#f3f2f1) 100%);background-image:none}.people-picker .selected-list__person-wrapper-highlighted__overflow__close-icon,.people-picker .selected-list__person-wrapper__overflow__close-icon{font-family:FabricMDL2Icons;cursor:pointer;background-color:var(--selected-person-background-color,#f3f2f1);color:var(--color-sub1,#323130);display:flex;flex-direction:column;align-items:center;position:absolute;height:24px;width:24px;right:0;top:0;border-radius:12px;line-height:24px}.people-picker .selected-list__person-wrapper-highlighted__overflow__close-icon:focus,.people-picker .selected-list__person-wrapper-highlighted__overflow__close-icon:focus-visible,.people-picker .selected-list__person-wrapper__overflow__close-icon:focus,.people-picker .selected-list__person-wrapper__overflow__close-icon:focus-visible{outline-offset:-4px;outline-width:1px;outline-style:solid}.people-picker .selected-list__person-wrapper-highlighted,.people-picker .selected-list__person-wrapper-highlighted:hover{background:#005393}.people-picker .selected-list__person-wrapper-highlighted__person{color:#fff;--color:white}.people-picker .selected-list__person-wrapper-highlighted__overflow__gradient{background-image:none}.people-picker .selected-list__person-wrapper-highlighted__overflow__close-icon{background:#005393;color:#fff;line-height:24px}.people-picker .selected-list__person-wrapper-highlighted:hover{background-color:#006cbe}mgt-person{--avatar-size-s:32px;margin-left:12px;cursor:default}:host .loading-text,:host .search-error-text,mgt-people-picker .loading-text,mgt-people-picker .search-error-text{font-family:var(--default-font-family);font-style:normal;font-weight:600;font-size:14px;line-height:19px;text-align:center;margin-left:50px;margin-right:50px;color:#0078d4}:host .message-parent,mgt-people-picker .message-parent{padding:2px;margin-top:30px;margin-bottom:30px;display:flex;flex-direction:column;align-items:center;justify-content:center;vertical-align:middle}:host .people-person-job-title,mgt-people-picker .people-person-job-title{flex:100%;order:3;font-weight:400;font-size:12px}:host .people-person-job-title.uppercase,mgt-people-picker .people-person-job-title.uppercase{text-transform:uppercase}mgt-flyout{flex:1 0 auto}[dir=rtl] mgt-person{margin:0 12px 0 0}[dir=rtl] .selected-list{margin-right:8px!important}.people-picker [dir=rtl] .selected-list__person-wrapper-highlighted,[dir=rtl] .people-picker .selected-list__person-wrapper-highlighted,[dir=rtl] .selected-list__person-wrapper{margin-left:6px!important}.people-picker [dir=rtl] .selected-list__person-wrapper-highlighted__person,[dir=rtl] .people-picker .selected-list__person-wrapper-highlighted__person,[dir=rtl] .selected-list__person-wrapper__person{margin-right:0!important;margin-left:4px!important}.people-picker [dir=rtl] .selected-list__person-wrapper-highlighted__overflow__gradient,[dir=rtl] .people-picker .selected-list__person-wrapper-highlighted__overflow__gradient,[dir=rtl] .selected-list__person-wrapper__overflow__gradient{right:auto!important;position:absolute!important;margin-right:0!important;width:10px!important;height:90%;top:0}.people-picker [dir=rtl] .selected-list__person-wrapper-highlighted__overflow__close-icon,[dir=rtl] .people-picker .selected-list__person-wrapper-highlighted__overflow__close-icon,[dir=rtl] .selected-list__person-wrapper__overflow__close-icon{right:auto!important;margin-left:5px!important;left:0!important}[dir=rtl] .people-person-text-area{margin-right:13px;margin-left:0!important}[dir=rtl] .flyout-root{text-align:right!important}@media (forced-colors:active) and (prefers-color-scheme:dark){svg,svg>path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important;color:#fff!important}.flyout-root{border:1px solid #fff}.people-list .list-person{border:solid 1px #fff}}@media (forced-colors:active) and (prefers-color-scheme:light){svg,svg>path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important;color:#000!important}.flyout-root{border:1px solid #000}.people-list .list-person{border:solid 1px #000}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-people-picker/strings.js
var strings6 = {
  inputPlaceholderText: "Start typing a name",
  noResultsFound: `We didn't find any matches.`,
  loadingMessage: "Loading...",
  suggestedContact: "suggested contact",
  suggestedContacts: "suggested contacts",
  selected: "selected",
  removeSelectedItem: "remove selected item"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-people-picker/mgt-people-picker.js
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata10 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter18 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtPeoplePicker = class MgtPeoplePicker2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * user the `css` tag function.
   */
  static get styles() {
    return styles11;
  }
  /**
   * The strings to be used for localizing the component.
   *
   * @readonly
   * @protected
   * @memberof MgtPeoplePicker
   */
  get strings() {
    return strings6;
  }
  /**
   * Gets the flyout element
   *
   * @protected
   * @type {MgtFlyout}
   * @memberof MgtLogin
   */
  get flyout() {
    return this.renderRoot.querySelector(".flyout");
  }
  /**
   * Gets the input element
   *
   * @protected
   * @type {MgtFlyout}
   * @memberof MgtLogin
   */
  get input() {
    return this.renderRoot.querySelector(".search-box__input");
  }
  /**
   * value determining if search is filtered to a group.
   * @type {string}
   */
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    if (this._groupId === value) {
      return;
    }
    this._groupId = value;
    this.requestStateUpdate(true);
  }
  /**
   * array of groups for search to be filtered by.
   * @type {string[]}
   */
  get groupIds() {
    return this._groupIds;
  }
  set groupIds(value) {
    if (arraysAreEqual(this._groupIds, value)) {
      return;
    }
    this._groupIds = value;
    this.requestStateUpdate(true);
  }
  /**
   * value determining if search is filtered to a group.
   * @type {PersonType}
   */
  get type() {
    return this._type;
  }
  set type(value) {
    if (this._type === value) {
      return;
    }
    this._type = value;
    this.requestStateUpdate(true);
  }
  /**
   * type of group to search for - requires personType to be
   * set to "Group" or "All"
   * @type {GroupType}
   */
  get groupType() {
    return this._groupType;
  }
  set groupType(value) {
    if (this._groupType === value) {
      return;
    }
    this._groupType = value;
    this.requestStateUpdate(true);
  }
  /**
   * The type of user to search for. Default is any.
   *
   * @readonly
   * @type {UserType}
   * @memberof MgtPeoplePicker
   */
  get userType() {
    return this._userType;
  }
  set userType(value) {
    if (this._userType === value) {
      return;
    }
    this._userType = value;
    this.requestStateUpdate(true);
  }
  /**
   * whether the return should contain a flat list of all nested members
   * @type {boolean}
   */
  get transitiveSearch() {
    return this._transitiveSearch;
  }
  set transitiveSearch(value) {
    if (this.transitiveSearch !== value) {
      this._transitiveSearch = value;
      this.requestStateUpdate(true);
    }
  }
  /**
   * containing object of IDynamicPerson.
   * @type {IDynamicPerson[]}
   */
  get people() {
    return this._people;
  }
  set people(value) {
    if (!arraysAreEqual(this._people, value)) {
      this._people = value;
      this.requestStateUpdate(true);
    }
  }
  /**
   * determining how many people to show in list.
   * @type {number}
   */
  get showMax() {
    return this._showMax;
  }
  set showMax(value) {
    if (value !== this._showMax) {
      this._showMax = value;
      this.requestStateUpdate(true);
    }
  }
  /**
   * array of user picked people.
   * @type {IDynamicPerson[]}
   */
  get selectedPeople() {
    return this._selectedPeople;
  }
  set selectedPeople(value) {
    if (!value)
      value = [];
    if (!arraysAreEqual(this._selectedPeople, value)) {
      this._selectedPeople = value;
    }
  }
  /**
   * array of people to be selected upon initialization
   *
   * @type {string[]}
   * @memberof MgtPeoplePicker
   */
  get defaultSelectedUserIds() {
    return this._defaultSelectedUserIds;
  }
  set defaultSelectedUserIds(value) {
    if (!arraysAreEqual(this._defaultSelectedUserIds, value)) {
      this._defaultSelectedUserIds = value;
      this.requestStateUpdate(true);
    }
  }
  /**
   * array of groups to be selected upon initialization
   *
   * @type {string[]}
   * @memberof MgtPeoplePicker
   */
  get defaultSelectedGroupIds() {
    return this._defaultSelectedGroupIds;
  }
  set defaultSelectedGroupIds(value) {
    if (!arraysAreEqual(this._defaultSelectedGroupIds, value)) {
      this._defaultSelectedGroupIds = value;
      this.requestStateUpdate(true);
    }
  }
  /**
   * Array of the only users to be searched.
   *
   * @type {string[]}
   * @memberof MgtPeoplePicker
   */
  get userIds() {
    return this._userIds;
  }
  set userIds(value) {
    if (arraysAreEqual(this._userIds, value)) {
      return;
    }
    this._userIds = value;
    this.requestStateUpdate(true);
  }
  /**
   * Filters that can be set on the user properties query.
   */
  get userFilters() {
    return this._userFilters;
  }
  set userFilters(value) {
    this._userFilters = value;
    this.requestStateUpdate(true);
  }
  /**
   * Filters that can be set on the people query properties.
   */
  get peopleFilters() {
    return this._peopleFilters;
  }
  set peopleFilters(value) {
    this._peopleFilters = value;
    this.requestStateUpdate(true);
  }
  /**
   * Filters that can be set on the group query properties.
   */
  get groupFilters() {
    return this._groupFilters;
  }
  set groupFilters(value) {
    this._groupFilters = value;
    this.requestStateUpdate(true);
  }
  /**
   * Get the scopes required for people picker
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtPeoplePicker
   */
  static get requiredScopes() {
    return [
      .../* @__PURE__ */ new Set(["user.read.all", "people.read", "group.read.all", "user.readbasic.all", ...MgtPerson.requiredScopes])
    ];
  }
  constructor() {
    super();
    this._type = PersonType.person;
    this._groupType = GroupType.any;
    this._userType = UserType.any;
    this._selectedPeople = [];
    this._arrowSelectionCount = -1;
    this._highlightedUsers = [];
    this._currentHighlightedUserPos = 0;
    this._isFocused = false;
    this._setAnyEmail = false;
    this.clearState();
    this._showLoading = true;
    this.showMax = 6;
    this.disableImages = false;
    this.disabled = false;
    this.allowAnyEmail = false;
    this.addEventListener("copy", this.handleCopy);
    this.addEventListener("cut", this.handleCut);
    this.addEventListener("paste", this.handlePaste);
  }
  /**
   * Focuses the input element when focus is called
   *
   * @param {FocusOptions} [options]
   * @memberof MgtPeoplePicker
   */
  focus(options) {
    if (!this.input) {
      return;
    }
    this.input.focus(options);
    this.input.select();
  }
  /**
   * Queries the microsoft graph for a user based on the user id and adds them to the selectedPeople array
   *
   * @param {readonly string []} an array of user ids to add to selectedPeople
   * @returns {Promise<void>}
   * @memberof MgtPeoplePicker
   */
  selectUsersById(userIds) {
    return __awaiter18(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      const graph = Providers.globalProvider.graph;
      if (provider && provider.state === ProviderState.SignedIn) {
        for (const id in userIds) {
          const userId = userIds[id];
          try {
            const personDetails = yield getUser(graph, userId);
            this.addPerson(personDetails);
          } catch (e) {
            if (e.message && e.message.includes("does not exist") && this.allowAnyEmail) {
              if (isValidEmail(userId)) {
                const anyMailUser = {
                  mail: userId,
                  displayName: userId
                };
                this.addPerson(anyMailUser);
              }
            }
          }
        }
      }
    });
  }
  /**
   * Queries the microsoft graph for a group of users from a group id, and adds them to the selectedPeople
   *
   * @param {readonly string []} an array of group ids to add to selectedPeople
   * @returns {Promise<void>}
   * @memberof MgtPeoplePicker
   */
  selectGroupsById(groupIds) {
    return __awaiter18(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      const graph = Providers.globalProvider.graph;
      if (provider && provider.state === ProviderState.SignedIn) {
        for (const id in groupIds) {
          try {
            const groupDetails = yield getGroup(graph, groupIds[id]);
            this.addPerson(groupDetails);
          } catch (e) {
          }
        }
      }
    });
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.
   * Setting properties inside this method will not trigger the element to update.
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  render() {
    const defaultTemplate = this.renderTemplate("default", { people: this._foundPeople });
    if (defaultTemplate) {
      return defaultTemplate;
    }
    const selectedPeopleTemplate = this.renderSelectedPeople(this.selectedPeople);
    const inputTemplate = this.renderInput();
    const flyoutTemplate = this.renderFlyout(inputTemplate);
    const inputClasses = {
      focused: this._isFocused,
      "people-picker": true,
      disabled: this.disabled
    };
    return html`
       <div dir=${this.direction} class=${classMap(inputClasses)}>
          <div class="people-picker-inner">${selectedPeopleTemplate} ${flyoutTemplate}</div>
       </div>
     `;
  }
  /**
   * Clears state of the component
   *
   * @protected
   * @memberof MgtPeoplePicker
   */
  clearState() {
    this.selectedPeople = [];
    this.userInput = "";
    this._highlightedUsers = [];
    this._currentHighlightedUserPos = 0;
  }
  /**
   * Request to reload the state.
   * Use reload instead of load to ensure loading events are fired.
   *
   * @protected
   * @memberof MgtBaseComponent
   */
  requestStateUpdate(force) {
    if (force) {
      this._groupPeople = null;
      this._foundPeople = null;
      this.selectedPeople = [];
      this.defaultPeople = null;
    }
    return super.requestStateUpdate(force);
  }
  /**
   * Render the input text box.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  renderInput() {
    var _a;
    const hasSelectedPeople = ((_a = this.selectedPeople) === null || _a === void 0 ? void 0 : _a.length) > 0;
    const placeholder = !this.disabled ? this.placeholder ? this.placeholder : this.strings.inputPlaceholderText : this.placeholder || "";
    const selectionMode = this.selectionMode ? this.selectionMode : "multiple";
    const inputClasses = {
      "search-box": true,
      "search-box-start": hasSelectedPeople
    };
    if (selectionMode === "single" && this.selectedPeople.length >= 1) {
      this.lostFocus();
      return html``;
    }
    return html`
       <div class="${classMap(inputClasses)}">
         <input
           id="people-picker-input"
           class="search-box__input"
           type="text"
           role="combobox"
           placeholder=${placeholder}
           autocomplete="off"
           aria-label=${this.ariaLabel || ""}
           aria-controls="suggestions-list"
           aria-haspopup="listbox"
           aria-autocomplete="list"
           aria-expanded="false"
           @click="${this.handleInputClick}"
           @focus="${this.gainedFocus}"
           @keydown="${this.onUserKeyDown}"
           @keyup="${this.onUserKeyUp}"
           @input="${this.onUserInput}"
           @blur=${this.lostFocus}
           ?disabled=${this.disabled}
         />
       </div>
     `;
  }
  /**
   * Render the selected people tokens.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  renderSelectedPeople(selectedPeople) {
    if (!selectedPeople || !selectedPeople.length) {
      return html``;
    }
    return html`
       <ul
        id="selected-list"
        aria-label="${this.strings.selected}"
        class="selected-list"
        >${selectedPeople.slice(0, selectedPeople.length).map((person) => html`
             <li
             class="selected-list__person-wrapper">
               ${this.renderTemplate("selected-person", { person }, `selected-${person.id ? person.id : person.displayName}`) || this.renderSelectedPerson(person)}

               <div class="selected-list__person-wrapper__overflow">
                 <div class="selected-list__person-wrapper__overflow__gradient"></div>
                 <div
                   tabindex="0"
                   role="button"
                   aria-label="${this.strings.removeSelectedItem} ${person.displayName}"
                   class="selected-list__person-wrapper__overflow__close-icon"
                   @click="${(e) => this.removePerson(person, e)}"
                   @keydown="${(e) => this.handleRemovePersonKeyDown(person, e)}"
                 >
                   \uE711
                 </div>
               </div>
              </li>
           `)}</ul>
     `;
  }
  /**
   * Render the flyout chrome.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  renderFlyout(anchor) {
    return html`
       <mgt-flyout light-dismiss class="flyout">
         ${anchor}
         <div slot="flyout" class="flyout-root" @wheel=${(e) => this.handleSectionScroll(e)}>
           ${this.renderFlyoutContent()}
         </div>
       </mgt-flyout>
     `;
  }
  /**
   * Render the appropriate state in the results flyout.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  renderFlyoutContent() {
    if (this.isLoadingState || this._showLoading) {
      return this.renderLoading();
    }
    const people = this._foundPeople;
    if (!people || people.length === 0 || this.showMax === 0) {
      return this.renderNoData();
    } else {
      return this.renderSearchResults(people);
    }
  }
  /**
   * Render the loading state.
   *
   * @protected
   * @returns
   * @memberof MgtPeoplePicker
   */
  renderLoading() {
    return this.renderTemplate("loading", null) || html`
         <div class="message-parent">
           <mgt-spinner></mgt-spinner>
           <div label="loading-text" aria-label="loading" class="loading-text">
             ${this.strings.loadingMessage}
           </div>
         </div>
       `;
  }
  /**
   * Render the state when no results are found for the search query.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  renderNoData() {
    if (!this._isFocused) {
      return;
    }
    return this.renderTemplate("error", null) || this.renderTemplate("no-data", null) || html`
         <div class="message-parent">
           <div label="search-error-text" aria-label=${this.strings.noResultsFound} class="search-error-text">
             ${this.strings.noResultsFound}
           </div>
         </div>
       `;
  }
  /**
   * Render the list of search results.
   *
   * @protected
   * @param {IDynamicPerson[]} people
   * @returns
   * @memberof MgtPeoplePicker
   */
  renderSearchResults(people) {
    const filteredPeople = people.filter((person) => person.id);
    return html`
      <ul
        id="suggestions-list"
        aria-label="${this.strings.suggestedContacts}"
        class="people-list"
        role="listbox">
         ${repeat(filteredPeople, (person) => person.id, (person) => {
      return html`
               <li
                id="${person.id}"
                aria-label=" ${this.strings.suggestedContact} ${person.displayName}"
                class="list-person"
                role="option"
                @click="${(e) => this.handleSuggestionClick(person)}">
                 ${this.renderPersonResult(person)}
               </li>
             `;
    })}
       </ul>
     `;
  }
  /**
   * Render an individual person search result.
   *
   * @protected
   * @param {IDynamicPerson} person
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  renderPersonResult(person) {
    const user = person;
    const subTitle = user.jobTitle || user.mail;
    const classes = {
      "people-person-job-title": true,
      uppercase: !!user.jobTitle
    };
    return this.renderTemplate("person", { person }, person.id) || html`
         <mgt-person
          .personDetails=${person}
          .fetchImage=${!this.disableImages}
          .personCardInteraction=${PersonCardInteraction.none}
         ></mgt-person>
         <div class="people-person-text-area" id="${person.displayName}">
           ${this.renderHighlightText(person)}
           <span class="${classMap(classes)}">${subTitle}</span>
         </div>
       `;
  }
  /**
   * Render an individual selected person token.
   *
   * @protected
   * @param {IDynamicPerson} person
   * @returns {TemplateResult}
   * @memberof MgtPeoplePicker
   */
  renderSelectedPerson(person) {
    return html`
       <mgt-person
         tabindex="-1"
         class="selected-list__person-wrapper__person"
         .personDetails=${person}
         .fetchImage=${!this.disableImages}
         .view=${ViewType.oneline}
         .personCardInteraction=${PersonCardInteraction.click}
       ></mgt-person>
     `;
  }
  /**
   * Async query to Graph for members of group if determined by developer.
   * set's `this.groupPeople` to those members.
   */
  loadState() {
    var _a, _b;
    return __awaiter18(this, void 0, void 0, function* () {
      let people = this.people;
      const input = this.userInput.toLowerCase();
      const provider = Providers.globalProvider;
      if (people) {
        if (input) {
          const displayNameMatch = people.filter((person) => person === null || person === void 0 ? void 0 : person.displayName.toLowerCase().includes(input));
          people = displayNameMatch;
        }
        this._showLoading = false;
      } else if (!people && provider && provider.state === ProviderState.SignedIn) {
        const graph = provider.graph.forComponent(this);
        if (!input.length && this._isFocused) {
          if (this.defaultPeople) {
            people = this.defaultPeople;
          } else {
            if (this.groupId || this.groupIds) {
              if (this._groupPeople === null) {
                if (this.groupId) {
                  try {
                    if (this.type === PersonType.group) {
                      this._groupPeople = yield findGroupMembers(graph, null, this.groupId, this.showMax, this.type, this.transitiveSearch);
                    } else {
                      this._groupPeople = yield findGroupMembers(graph, null, this.groupId, this.showMax, this.type, this.transitiveSearch, this.userFilters, this.peopleFilters);
                    }
                  } catch (_) {
                    this._groupPeople = [];
                  }
                } else if (this.groupIds) {
                  if (this.type === PersonType.group) {
                    try {
                      this._groupPeople = yield getGroupsForGroupIds(graph, this.groupIds, this.groupFilters);
                    } catch (_) {
                      this._groupPeople = [];
                    }
                  } else {
                    try {
                      const peopleInGroups = yield findUsersFromGroupIds(graph, "", this.groupIds, this.showMax, this.type, this.transitiveSearch, this.userFilters);
                      this._groupPeople = peopleInGroups;
                    } catch (_) {
                      this._groupPeople = [];
                    }
                  }
                }
              }
              people = this._groupPeople || [];
            } else if (this.type === PersonType.person || this.type === PersonType.any) {
              if (this.userIds) {
                people = yield getUsersForUserIds(graph, this.userIds, "", this.userFilters);
              } else {
                const isUserOrContactType = this.userType === UserType.user || this.userType === UserType.contact;
                if (this._userFilters && isUserOrContactType) {
                  people = yield getUsers(graph, this._userFilters, this.showMax);
                } else {
                  people = yield getPeople(graph, this.userType, this._peopleFilters);
                }
              }
            } else if (this.type === PersonType.group) {
              if (this.groupIds) {
                try {
                  people = yield this.getGroupsForGroupIds(graph, people);
                } catch (_) {
                }
              } else {
                let groups = (yield findGroups(graph, "", this.showMax, this.groupType, this._groupFilters)) || [];
                if (groups.length > 0 && groups[0]["value"]) {
                  groups = groups[0]["value"];
                }
                people = groups;
              }
            }
            this.defaultPeople = people;
          }
        }
        this._showLoading = false;
        if ((((_a = this.defaultSelectedUserIds) === null || _a === void 0 ? void 0 : _a.length) > 0 || ((_b = this.defaultSelectedGroupIds) === null || _b === void 0 ? void 0 : _b.length) > 0) && !this.selectedPeople.length && !this.defaultSelectedUsers) {
          this.defaultSelectedUsers = yield getUsersForUserIds(graph, this.defaultSelectedUserIds, "", this.userFilters);
          this.defaultSelectedGroups = yield getGroupsForGroupIds(graph, this.defaultSelectedGroupIds, this.peopleFilters);
          this.defaultSelectedGroups = this.defaultSelectedGroups.filter((group) => {
            return group !== null;
          });
          this.defaultSelectedUsers = this.defaultSelectedUsers.filter((user) => {
            return user !== null;
          });
          this.selectedPeople = [...this.defaultSelectedUsers, ...this.defaultSelectedGroups];
          this.requestUpdate();
          this.fireCustomEvent("selectionChanged", this.selectedPeople);
        }
        if (input) {
          people = [];
          if (this.groupId) {
            people = (yield findGroupMembers(graph, input, this.groupId, this.showMax, this.type, this.transitiveSearch, this.userFilters, this.peopleFilters)) || [];
          } else {
            if (this.type === PersonType.person || this.type === PersonType.any) {
              try {
                if (this.userType === UserType.contact || this.userType === UserType.user) {
                  if (this.userIds && this.userIds.length) {
                    people = yield getUsersForUserIds(graph, this.userIds, input, this._userFilters);
                  } else {
                    people = yield findUsers(graph, input, this.showMax, this._userFilters);
                  }
                } else {
                  if (!this.groupIds) {
                    if (this.userIds && this.userIds.length) {
                      people = yield getUsersForUserIds(graph, this.userIds, input, this._userFilters);
                    } else {
                      people = (yield findPeople(graph, input, this.showMax, this.userType, this._peopleFilters)) || [];
                    }
                  } else {
                    try {
                      people = yield findUsersFromGroupIds(graph, input, this.groupIds, this.showMax, this.type, this.transitiveSearch, this.userFilters);
                    } catch (_) {
                    }
                  }
                }
              } catch (e) {
              }
              if (people && people.length < this.showMax && this.userType !== UserType.contact && this.type !== PersonType.person) {
                try {
                  const users = (yield findUsers(graph, input, this.showMax, this._userFilters)) || [];
                  const peopleIds = new Set(people.map((p) => p.id));
                  for (const user of users) {
                    if (!peopleIds.has(user.id)) {
                      people.push(user);
                    }
                  }
                } catch (e) {
                }
              }
            }
            if ((this.type === PersonType.group || this.type === PersonType.any) && people.length < this.showMax) {
              if (this.groupIds) {
                try {
                  people = yield findGroupsFromGroupIds(graph, input, this.groupIds, this.showMax, this.groupType, this.userFilters);
                } catch (_) {
                }
              } else {
                let groups = [];
                try {
                  groups = (yield findGroups(graph, input, this.showMax, this.groupType, this._groupFilters)) || [];
                  people = people.concat(groups);
                } catch (e) {
                }
              }
            }
          }
        }
      }
      this._foundPeople = this.filterPeople(people);
    });
  }
  /**
   * Gets the Groups in a list of group IDs.
   *
   * @param graph the graph object
   * @param people already found groups
   * @returns groups found
   */
  getGroupsForGroupIds(graph, people) {
    return __awaiter18(this, void 0, void 0, function* () {
      const groups = yield getGroupsForGroupIds(graph, this.groupIds, this.groupFilters);
      for (const group of groups) {
        people = people.concat(group);
      }
      people = people.filter((person) => person);
      return people;
    });
  }
  /**
   * Hide the results flyout.
   *
   * @protected
   * @memberof MgtPeoplePicker
   */
  hideFlyout() {
    const flyout = this.flyout;
    if (flyout) {
      flyout.close();
    }
    if (this.input) {
      this.input.setAttribute("aria-expanded", "false");
      this.input.setAttribute("aria-activedescendant", "");
    }
    this._arrowSelectionCount = -1;
  }
  /**
   * Show the results flyout.
   *
   * @protected
   * @memberof MgtPeoplePicker
   */
  showFlyout() {
    const flyout = this.flyout;
    if (flyout) {
      flyout.open();
    }
    if (this.input) {
      this.input.setAttribute("aria-expanded", "true");
    }
  }
  /**
   * Removes person from selected people
   * @param person - person and details pertaining to user selected
   */
  removePerson(person, e) {
    var _a;
    e.stopPropagation();
    const filteredPersonArr = this.selectedPeople.filter((p) => {
      if (!person.id && p.displayName) {
        return p.displayName !== person.displayName;
      }
      return p.id !== person.id;
    });
    this.selectedPeople = filteredPersonArr;
    this.loadState();
    this.fireCustomEvent("selectionChanged", this.selectedPeople);
    (_a = this.input) === null || _a === void 0 ? void 0 : _a.focus();
  }
  /**
   * Checks if key pressed is an `Enter` key before removing person
   * @param person
   * @param e
   */
  handleRemovePersonKeyDown(person, e) {
    if (e.key === "Enter") {
      this.removePerson(person, e);
    }
  }
  /**
   * Tracks when user selects person from picker
   * @param person - contains details pertaining to selected user
   * @param event - tracks user event
   */
  addPerson(person) {
    if (person) {
      setTimeout(() => {
        this.clearInput();
      }, 50);
      const duplicatePeople = this.selectedPeople.filter((p) => {
        if (!person.id && p.displayName) {
          return p.displayName === person.displayName;
        }
        return p.id === person.id;
      });
      if (duplicatePeople.length === 0) {
        this.selectedPeople = [...this.selectedPeople, person];
        this.fireCustomEvent("selectionChanged", this.selectedPeople);
        this.loadState();
        this._foundPeople = [];
        this._arrowSelectionCount = -1;
      }
    }
  }
  clearInput() {
    this.clearHighlighted();
    if (this.selectionMode !== "single") {
      this.input.value = "";
    }
    this.userInput = "";
  }
  // handle input click
  handleInputClick() {
    if (!this.flyout.isOpen) {
      this.handleUserSearch();
    }
  }
  // handle input focus
  gainedFocus() {
    this.clearHighlighted();
    this._isFocused = true;
    this.loadState();
  }
  // handle input blur
  lostFocus() {
    this._isFocused = false;
    this._arrowSelectionCount = -1;
    if (this.input) {
      this.input.setAttribute("aria-expanded", "false");
      this.input.setAttribute("aria-activedescendant", "");
    }
    const peopleList = this.renderRoot.querySelector(".people-list");
    if (peopleList) {
      for (let i = 0; i < peopleList.children.length; i++) {
        peopleList.children[i].classList.remove("focused");
        peopleList.children[i].setAttribute("aria-selected", "false");
      }
    }
    this.requestUpdate();
  }
  renderHighlightText(person) {
    let first = "";
    let last2 = "";
    let highlight = "";
    const displayName = person.displayName;
    const highlightLocation = displayName.toLowerCase().indexOf(this.userInput.toLowerCase());
    if (highlightLocation !== -1) {
      const userInputLength = this.userInput.length;
      if (highlightLocation === 0) {
        first = "";
        highlight = displayName.slice(0, userInputLength);
        last2 = displayName.slice(userInputLength, displayName.length);
      } else if (highlightLocation === displayName.length) {
        first = displayName.slice(0, highlightLocation);
        highlight = displayName.slice(highlightLocation, displayName.length);
        last2 = "";
      } else {
        first = displayName.slice(0, highlightLocation);
        highlight = displayName.slice(highlightLocation, highlightLocation + userInputLength);
        last2 = displayName.slice(highlightLocation + userInputLength, displayName.length);
      }
    } else {
      first = person.displayName;
    }
    return html`
       <div>
         <span class="people-person-text">${first}</span
         ><span class="people-person-text highlight-search-text">${highlight}</span
         ><span class="people-person-text">${last2}</span>
       </div>
     `;
  }
  /**
   * Handles input from the key up events on the keyboard.
   */
  onUserKeyUp(event) {
    const isPaste = (event.ctrlKey || event.metaKey) && event.key === "v";
    const isCmdOrCtrlKey = ["ControlLeft", "ControlRight"].includes(event.code) || event.ctrlKey || event.metaKey;
    const isArrowKey = ["ArrowDown", "ArrowRight", "ArrowUp", "ArrowLeft"].includes(event.code);
    if (!isPaste && isCmdOrCtrlKey || isArrowKey) {
      if (isCmdOrCtrlKey || ["ArrowLeft", "ArrowRight"].includes(event.code)) {
        this.hideFlyout();
      }
      if (["ArrowDown"].includes(event.code)) {
        if (!this.flyout.isOpen && this._isFocused) {
          this.handleUserSearch();
        }
      }
      return;
    }
    if (event.shiftKey) {
      return;
    }
    if (event.code === "ShiftLeft") {
      return;
    }
    if (event.code === "Tab") {
      return;
    }
    if (event.code === "Enter") {
      return;
    }
    if (event.code === "Escape") {
      this.clearInput();
      this._foundPeople = [];
      this._arrowSelectionCount = -1;
      return;
    }
    if (event.code === "Backspace" && this.userInput.length === 0 && this.selectedPeople.length > 0) {
      this.clearHighlighted();
      this.selectedPeople = this.selectedPeople.splice(0, this.selectedPeople.length - 1);
      this.loadState();
      this.hideFlyout();
      this.fireCustomEvent("selectionChanged", this.selectedPeople);
      return;
    }
    if (event.code === "Comma" || event.code === "Semicolon") {
      if (this.allowAnyEmail) {
        this._setAnyEmail = true;
        event.preventDefault();
        event.stopPropagation();
      }
      return;
    }
  }
  onUserInput(event) {
    const input = event.target;
    this.userInput = input.value;
    if (this.userInput) {
      const validEmail = isValidEmail(this.userInput);
      if (validEmail && this.allowAnyEmail) {
        if (this._setAnyEmail) {
          this.handleAnyEmail();
        }
      } else {
        this.handleUserSearch();
      }
      this._setAnyEmail = false;
    }
  }
  handleAnyEmail() {
    this._showLoading = false;
    this._arrowSelectionCount = -1;
    if (isValidEmail(this.userInput)) {
      const anyMailUser = {
        mail: this.userInput,
        displayName: this.userInput
      };
      this.addPerson(anyMailUser);
    }
    this.hideFlyout();
    if (this.input) {
      this.input.focus();
      this._isFocused = true;
    }
  }
  // handle suggestion list item click
  handleSuggestionClick(person) {
    this.addPerson(person);
    this.hideFlyout();
    this.input.focus();
  }
  /**
   * Tracks event on user input in search
   * @param input - input text
   */
  handleUserSearch() {
    if (!this._debouncedSearch) {
      this._debouncedSearch = debounce(() => __awaiter18(this, void 0, void 0, function* () {
        const loadingTimeout = setTimeout(() => {
          this._showLoading = true;
        }, 50);
        yield this.loadState();
        clearTimeout(loadingTimeout);
        this._showLoading = false;
        this._arrowSelectionCount = -1;
        this.showFlyout();
      }), 400);
    }
    this._debouncedSearch();
  }
  /**
   * Tracks event on user search (keydown)
   * @param event - event tracked on user input (keydown)
   */
  onUserKeyDown(event) {
    const selectedList = this.renderRoot.querySelector(".selected-list");
    const isCmdOrCtrlKey = event.ctrlKey || event.metaKey;
    if (isCmdOrCtrlKey && selectedList) {
      const selectedPeople = selectedList.querySelectorAll("mgt-person.selected-list__person-wrapper__person");
      this.hideFlyout();
      if (isCmdOrCtrlKey && event.code === "ArrowLeft") {
        this._currentHighlightedUserPos = (this._currentHighlightedUserPos - 1 + selectedPeople.length) % selectedPeople.length;
        if (this._currentHighlightedUserPos >= 0 && !Number.isNaN(this._currentHighlightedUserPos)) {
          this._highlightedUsers.push(selectedPeople[this._currentHighlightedUserPos]);
        } else {
          this._currentHighlightedUserPos = 0;
        }
      } else if (isCmdOrCtrlKey && event.code === "ArrowRight") {
        const person = this._highlightedUsers.pop();
        if (person) {
          const personParent = person.parentElement;
          if (personParent) {
            this.clearHighlighted(personParent);
            this._currentHighlightedUserPos++;
          }
        }
      } else if (isCmdOrCtrlKey && event.code === "KeyA") {
        this._highlightedUsers = [];
        selectedPeople.forEach((person) => this._highlightedUsers.push(person));
      }
      if (this._highlightedUsers) {
        this.highlightSelectedPeople(this._highlightedUsers);
      }
      return;
    }
    this.clearHighlighted();
    if (!this.flyout.isOpen) {
      return;
    }
    const input = event.target;
    if (event.key === "ArrowUp" || event.key === "ArrowDown") {
      this.handleArrowSelection(event);
      if (input.value.length > 0) {
        event.preventDefault();
      }
    }
    if (event.code === "Enter") {
      if (!event.shiftKey && this._foundPeople) {
        event.preventDefault();
        event.stopPropagation();
        const foundPerson = this._foundPeople[this._arrowSelectionCount];
        if (foundPerson) {
          this.addPerson(foundPerson);
          this.hideFlyout();
          this.input.value = "";
        }
      } else if (this.allowAnyEmail) {
        this.handleAnyEmail();
      }
    }
    if (event.code == "Escape") {
      event.stopPropagation();
    }
    if (event.code === "Tab") {
      this.hideFlyout();
    }
    if (event.code === "Comma" || event.code === "Semicolon") {
      if (this.allowAnyEmail) {
        event.preventDefault();
        event.stopPropagation();
        this.userInput = input.value;
        this.handleAnyEmail();
      }
    }
  }
  /**
   * Gets the text of the highlighed people and writes it to the clipboard
   */
  writeHighlightedText() {
    return __awaiter18(this, void 0, void 0, function* () {
      const copyText = [];
      for (let i = 0; i < this._highlightedUsers.length; i++) {
        const element = this._highlightedUsers[i];
        const _personDetails = element._personDetails;
        const { id, displayName, email, userPrincipalName, scoredEmailAddresses } = _personDetails;
        let emailAddress;
        if (scoredEmailAddresses && scoredEmailAddresses.length > 0) {
          emailAddress = scoredEmailAddresses.pop().address;
        } else {
          emailAddress = userPrincipalName || email;
        }
        copyText.push({ id, displayName, email: emailAddress });
      }
      let copiedTextStr = "";
      if (copyText.length > 0) {
        copiedTextStr = JSON.stringify(copyText);
      }
      yield navigator.clipboard.writeText(copiedTextStr);
    });
  }
  /**
   * Handles the cut event when it is fired
   */
  handleCut() {
    return __awaiter18(this, void 0, void 0, function* () {
      yield this.writeHighlightedText();
      this.removeHighlightedOnCut();
    });
  }
  /**
   * Handles the copy event when it is fired
   */
  handleCopy() {
    return __awaiter18(this, void 0, void 0, function* () {
      yield this.writeHighlightedText();
    });
  }
  /**
   * Parses the copied people text and adds them when you paste
   */
  handlePaste() {
    return __awaiter18(this, void 0, void 0, function* () {
      try {
        const copiedText = yield navigator.clipboard.readText();
        if (copiedText) {
          try {
            const people = JSON.parse(copiedText);
            if (people && people.length > 0) {
              for (const person of people) {
                this.addPerson(person);
              }
            }
          } catch (error) {
            if (error instanceof SyntaxError) {
              const _delimeters = [",", ";"];
              let listOfUsers;
              try {
                for (let i = 0; i < _delimeters.length; i++) {
                  listOfUsers = copiedText.split(_delimeters[i]);
                  if (listOfUsers.length > 1) {
                    this.hideFlyout();
                    this.selectUsersById(listOfUsers);
                    break;
                  }
                }
              } catch (error2) {
              }
            }
          }
        }
      } catch (error) {
      }
    });
  }
  /**
   * Removes only the highlighted elements from the peoplePicker during cut operations.
   */
  removeHighlightedOnCut() {
    this.selectedPeople = this.selectedPeople.splice(0, this.selectedPeople.length - this._highlightedUsers.length);
    this._highlightedUsers = [];
    this._currentHighlightedUserPos = 0;
    this.loadState();
    this.hideFlyout();
    this.fireCustomEvent("selectionChanged", this.selectedPeople);
  }
  /**
   * Changes the color class to show which people are selected for copy/cut-paste
   * @param people list of selected people classes
   */
  highlightSelectedPeople(people) {
    for (let i = 0; i < people.length; i++) {
      const person = people[i];
      const parentElement = person.parentElement;
      parentElement.setAttribute("class", "selected-list__person-wrapper-highlighted");
      const personNodes = Array.from(parentElement.getElementsByClassName("selected-list__person-wrapper__person"));
      if (personNodes && personNodes.length > 0) {
        const personNode = personNodes.pop();
        personNode.setAttribute("class", "selected-list__person-wrapper-highlighted__person");
      }
      const gradientNodes = Array.from(parentElement.getElementsByClassName("selected-list__person-wrapper__overflow__gradient"));
      if (gradientNodes && gradientNodes.length > 0) {
        const gradientNode = gradientNodes.pop();
        gradientNode.setAttribute("class", "selected-list__person-wrapper-highlighted__overflow__gradient");
      }
      const closeIconNodes = Array.from(parentElement.getElementsByClassName("selected-list__person-wrapper__overflow__close-icon"));
      if (closeIconNodes && closeIconNodes.length > 0) {
        const closeIconNode = closeIconNodes.pop();
        closeIconNode.setAttribute("class", "selected-list__person-wrapper-highlighted__overflow__close-icon");
      }
    }
  }
  /**
   * Defaults the people class back to the normal view
   */
  clearHighlighted(node) {
    if (node) {
      this.clearNodeHighlights(node);
    } else {
      for (let i = 0; i < this._highlightedUsers.length; i++) {
        const person = this._highlightedUsers[i];
        const parentElement = person.parentElement;
        if (parentElement) {
          this.clearNodeHighlights(parentElement);
        }
      }
      this._highlightedUsers = [];
      this._currentHighlightedUserPos = 0;
    }
  }
  /**
   * Returns the original classes of a highlighted person element
   * @param node a highlighted node element
   */
  clearNodeHighlights(node) {
    node.setAttribute("class", "selected-list__person-wrapper");
    const personNodes = Array.from(node.getElementsByClassName("selected-list__person-wrapper-highlighted__person"));
    if (personNodes && personNodes.length > 0) {
      const personNode = personNodes.pop();
      personNode.setAttribute("class", "selected-list__person-wrapper__person");
    }
    const gradientNodes = Array.from(node.getElementsByClassName("selected-list__person-wrapper-highlighted__overflow__gradient"));
    if (gradientNodes && gradientNodes.length > 0) {
      const gradientNode = gradientNodes.pop();
      gradientNode.setAttribute("class", "selected-list__person-wrapper__overflow__gradient");
    }
    const closeIconNodes = Array.from(node.getElementsByClassName("selected-list__person-wrapper-highlighted__overflow__close-icon"));
    if (closeIconNodes && closeIconNodes.length > 0) {
      const closeIconNode = closeIconNodes.pop();
      closeIconNode.setAttribute("class", "selected-list__person-wrapper__overflow__close-icon");
    }
  }
  /**
   * Tracks user key selection for arrow key selection of people
   * @param event - tracks user key selection
   */
  handleArrowSelection(event) {
    const peopleList = this.renderRoot.querySelector(".people-list");
    if (peopleList && peopleList.children.length) {
      if (event) {
        if (event.key === "ArrowUp") {
          if (this._arrowSelectionCount === -1) {
            this._arrowSelectionCount = 0;
          } else {
            this._arrowSelectionCount = (this._arrowSelectionCount - 1 + peopleList.children.length) % peopleList.children.length;
          }
        }
        if (event.key === "ArrowDown") {
          if (this._arrowSelectionCount === -1) {
            this._arrowSelectionCount = 0;
          } else {
            this._arrowSelectionCount = (this._arrowSelectionCount + 1) % peopleList.children.length;
          }
        }
      }
      for (let i = 0; i < peopleList.children.length; i++) {
        peopleList.children[i].classList.remove("focused");
        peopleList.children[i].setAttribute("aria-selected", "false");
      }
      const focusedItem = peopleList.children[this._arrowSelectionCount];
      if (focusedItem) {
        focusedItem.classList.add("focused");
        focusedItem.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "nearest" });
        focusedItem.setAttribute("aria-selected", "true");
        this.input.setAttribute("aria-activedescendant", peopleList.children[this._arrowSelectionCount].id);
      }
    }
  }
  /**
   * Filters people searched from already selected people
   * @param people - array of people returned from query to Graph
   */
  filterPeople(people) {
    if (people && people.length > 0) {
      people = people.filter((person) => person);
      const idFilter = this.selectedPeople.map((el) => {
        return el.id ? el.id : el.displayName;
      });
      const filtered = people.filter((person) => {
        if (person === null || person === void 0 ? void 0 : person.id) {
          return idFilter.indexOf(person.id) === -1;
        } else {
          return idFilter.indexOf(person === null || person === void 0 ? void 0 : person.displayName) === -1;
        }
      });
      const dupsSet = /* @__PURE__ */ new Set();
      for (let i = 0; i < filtered.length; i++) {
        const person = JSON.stringify(filtered[i]);
        dupsSet.add(person);
      }
      const uniquePeople = [];
      dupsSet.forEach((person) => {
        const p = JSON.parse(person);
        uniquePeople.push(p);
      });
      return uniquePeople;
    }
  }
  // stop propagating wheel event to flyout so mouse scrolling works
  handleSectionScroll(e) {
    const target = this.renderRoot.querySelector(".flyout-root");
    if (target) {
      if (!(e.deltaY < 0 && target.scrollTop === 0) && !(e.deltaY > 0 && target.clientHeight + target.scrollTop >= target.scrollHeight - 1)) {
        e.stopPropagation();
      }
    }
  }
};
__decorate13([
  property({ attribute: "group-id", converter: (value) => value.trim() }),
  __metadata10("design:type", String),
  __metadata10("design:paramtypes", [Object])
], MgtPeoplePicker.prototype, "groupId", null);
__decorate13([
  property({
    attribute: "group-ids",
    converter: (value) => {
      return value.split(",").map((v) => v.trim());
    }
  }),
  __metadata10("design:type", Array),
  __metadata10("design:paramtypes", [Object])
], MgtPeoplePicker.prototype, "groupIds", null);
__decorate13([
  property({
    attribute: "type",
    converter: (value, type) => {
      value = value.toLowerCase();
      if (!value || value.length === 0) {
        return PersonType.any;
      }
      if (typeof PersonType[value] === "undefined") {
        return PersonType.any;
      } else {
        return PersonType[value];
      }
    }
  }),
  __metadata10("design:type", Object),
  __metadata10("design:paramtypes", [Object])
], MgtPeoplePicker.prototype, "type", null);
__decorate13([
  property({
    attribute: "group-type",
    converter: (value, type) => {
      if (!value || value.length === 0) {
        return GroupType.any;
      }
      const values2 = value.split(",");
      const groupTypes = [];
      for (let v of values2) {
        v = v.trim();
        if (typeof GroupType[v] !== "undefined") {
          groupTypes.push(GroupType[v]);
        }
      }
      if (groupTypes.length === 0) {
        return GroupType.any;
      }
      const gt2 = groupTypes.reduce((a, c) => a | c);
      return gt2;
    }
  }),
  __metadata10("design:type", Number),
  __metadata10("design:paramtypes", [Object])
], MgtPeoplePicker.prototype, "groupType", null);
__decorate13([
  property({
    attribute: "user-type",
    converter: (value, type) => {
      value = value.toLowerCase();
      if (!value || value.length === 0) {
        return UserType.any;
      }
      if (typeof UserType[value] === "undefined") {
        return UserType.any;
      } else {
        return UserType[value];
      }
    }
  }),
  __metadata10("design:type", String),
  __metadata10("design:paramtypes", [Object])
], MgtPeoplePicker.prototype, "userType", null);
__decorate13([
  property({
    attribute: "transitive-search",
    type: Boolean
  }),
  __metadata10("design:type", Boolean),
  __metadata10("design:paramtypes", [Boolean])
], MgtPeoplePicker.prototype, "transitiveSearch", null);
__decorate13([
  property({
    attribute: "people",
    type: Object
  }),
  __metadata10("design:type", Array),
  __metadata10("design:paramtypes", [Array])
], MgtPeoplePicker.prototype, "people", null);
__decorate13([
  property({
    attribute: "show-max",
    type: Number
  }),
  __metadata10("design:type", Number),
  __metadata10("design:paramtypes", [Number])
], MgtPeoplePicker.prototype, "showMax", null);
__decorate13([
  property({
    attribute: "disable-images",
    type: Boolean
  }),
  __metadata10("design:type", Boolean)
], MgtPeoplePicker.prototype, "disableImages", void 0);
__decorate13([
  property({
    attribute: "selected-people",
    type: Array
  }),
  __metadata10("design:type", Array),
  __metadata10("design:paramtypes", [Array])
], MgtPeoplePicker.prototype, "selectedPeople", null);
__decorate13([
  property({
    attribute: "default-selected-user-ids",
    converter: (value) => {
      return value.split(",").map((v) => v.trim());
    },
    type: String
  }),
  __metadata10("design:type", Array),
  __metadata10("design:paramtypes", [Object])
], MgtPeoplePicker.prototype, "defaultSelectedUserIds", null);
__decorate13([
  property({
    attribute: "default-selected-group-ids",
    converter: (value) => {
      return value.split(",").map((v) => v.trim());
    },
    type: String
  }),
  __metadata10("design:type", Array),
  __metadata10("design:paramtypes", [Object])
], MgtPeoplePicker.prototype, "defaultSelectedGroupIds", null);
__decorate13([
  property({
    attribute: "placeholder",
    type: String
  }),
  __metadata10("design:type", String)
], MgtPeoplePicker.prototype, "placeholder", void 0);
__decorate13([
  property({
    attribute: "disabled",
    type: Boolean
  }),
  __metadata10("design:type", Boolean)
], MgtPeoplePicker.prototype, "disabled", void 0);
__decorate13([
  property({
    attribute: "allow-any-email",
    type: Boolean
  }),
  __metadata10("design:type", Boolean)
], MgtPeoplePicker.prototype, "allowAnyEmail", void 0);
__decorate13([
  property({
    attribute: "selection-mode",
    type: String
  }),
  __metadata10("design:type", String)
], MgtPeoplePicker.prototype, "selectionMode", void 0);
__decorate13([
  property({
    attribute: "user-ids",
    converter: (value) => {
      return value.split(",").map((v) => v.trim());
    },
    type: String
  }),
  __metadata10("design:type", Array),
  __metadata10("design:paramtypes", [Array])
], MgtPeoplePicker.prototype, "userIds", null);
__decorate13([
  property({ attribute: "user-filters" }),
  __metadata10("design:type", String),
  __metadata10("design:paramtypes", [String])
], MgtPeoplePicker.prototype, "userFilters", null);
__decorate13([
  property({ attribute: "people-filters" }),
  __metadata10("design:type", String),
  __metadata10("design:paramtypes", [String])
], MgtPeoplePicker.prototype, "peopleFilters", null);
__decorate13([
  property({ attribute: "group-filters" }),
  __metadata10("design:type", String),
  __metadata10("design:paramtypes", [String])
], MgtPeoplePicker.prototype, "groupFilters", null);
__decorate13([
  property({
    attribute: "aria-label",
    type: String
  }),
  __metadata10("design:type", String)
], MgtPeoplePicker.prototype, "ariaLabel", void 0);
__decorate13([
  state(),
  __metadata10("design:type", Boolean)
], MgtPeoplePicker.prototype, "_showLoading", void 0);
__decorate13([
  state(),
  __metadata10("design:type", Object)
], MgtPeoplePicker.prototype, "_isFocused", void 0);
__decorate13([
  state(),
  __metadata10("design:type", Boolean)
], MgtPeoplePicker.prototype, "_setAnyEmail", void 0);
__decorate13([
  state(),
  __metadata10("design:type", Array)
], MgtPeoplePicker.prototype, "_foundPeople", void 0);
MgtPeoplePicker = __decorate13([
  customElement("mgt-people-picker"),
  __metadata10("design:paramtypes", [])
], MgtPeoplePicker);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/mgt-person-card.graph.js
var __awaiter19 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var userProperties = "businessPhones,companyName,department,displayName,givenName,jobTitle,mail,mobilePhone,officeLocation,preferredLanguage,surname,userPrincipalName,id,accountEnabled";
var batchKeys = {
  directReports: "directReports",
  files: "files",
  messages: "messages",
  people: "people",
  person: "person"
};
function getPersonCardGraphData(graph, personDetails, isMe, config) {
  return __awaiter19(this, void 0, void 0, function* () {
    const userId = personDetails.id;
    const email = getEmailFromGraphEntity(personDetails);
    const isContactOrGroup = "classification" in personDetails || "personType" in personDetails && (personDetails.personType.subclass === "PersonalContact" || personDetails.personType.class === "Group");
    const batch = graph.createBatch();
    if (!isContactOrGroup) {
      if (config.sections.organization) {
        buildOrgStructureRequest(batch, userId);
        if (typeof config.sections.organization !== "boolean" && config.sections.organization.showWorksWith) {
          buildWorksWithRequest(batch, userId);
        }
      }
    }
    if (config.sections.mailMessages && email) {
      buildMessagesWithUserRequest(batch, email);
    }
    if (config.sections.files) {
      buildFilesRequest(batch, isMe ? null : email);
    }
    let response;
    const data = {};
    try {
      response = yield batch.executeAll();
    } catch (_a) {
    }
    if (response) {
      for (const [key, value] of response) {
        data[key] = value.content.value || value.content;
      }
    }
    if (!isContactOrGroup && config.sections.profile) {
      try {
        const profile = yield getProfile(graph, userId);
        if (profile) {
          data.profile = profile;
        }
      } catch (_b) {
      }
    }
    if (data.directReports && data.directReports.length > 0) {
      data.directReports = data.directReports.filter((report) => report.accountEnabled);
    }
    return data;
  });
}
function buildOrgStructureRequest(batch, userId) {
  const expandManagers = `manager($levels=max;$select=${userProperties})`;
  batch.get(batchKeys.person, `users/${userId}?$expand=${expandManagers}&$select=${userProperties}&$count=true`, ["user.read.all"], {
    ConsistencyLevel: "eventual"
  });
  batch.get(batchKeys.directReports, `users/${userId}/directReports?$select=${userProperties}`);
}
function buildWorksWithRequest(batch, userId) {
  batch.get(batchKeys.people, `users/${userId}/people?$filter=personType/class eq 'Person'`, ["People.Read.All"]);
}
function buildMessagesWithUserRequest(batch, emailAddress) {
  batch.get(batchKeys.messages, `me/messages?$search="from:${emailAddress}"`, ["Mail.ReadBasic"]);
}
function buildFilesRequest(batch, emailAddress) {
  let request;
  if (emailAddress) {
    request = `me/insights/shared?$filter=lastshared/sharedby/address eq '${emailAddress}'`;
  } else {
    request = "me/insights/used";
  }
  batch.get(batchKeys.files, request, ["Sites.Read.All"]);
}
function getProfile(graph, userId) {
  return __awaiter19(this, void 0, void 0, function* () {
    const profile = yield graph.api(`/users/${userId}/profile`).version("beta").get();
    return profile;
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/mgt-person-card-css.js
var styles12 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--person-card-details-item-color:#201f1e}.mgt-dark{--person-card-details-item-color:#faf9f8}:host{background:var(--person-card-background-color,var(--background-color,#fff));width:var(--mgt-flyout-set-width,340px);font-family:var(--default-font-family);overflow:hidden;user-select:none;box-shadow:var(--box-shadow,0 3.2px 7.2px 0 rgba(0,0,0,.132));border-radius:8px}:host .small{max-height:100vh;overflow-y:auto;overflow-x:hidden}:host .nav{height:0;position:relative;z-index:100}:host .nav__back{padding:8px;height:32px;width:32px;align-items:center;justify-content:center}:host .nav__back svg{fill:var(--person-card-nav-back-arrow-color,#0078d4)}:host .nav__back:hover{cursor:pointer}:host .nav__back:hover svg{fill:var(--person-card-nav-back-arrow-hover-color,#000)}:host .person-details-container{display:flex;flex-direction:column;width:calc(var(--mgt-flyout-set-width,340px) - 40px);padding:20px}:host .person-details-container .person-image{--presence-background-color:var(--person-card-background-color, var(--background-color, #ffffff));--presence-icon-color:var(--person-card-background-color, var(--background-color, #ffffff));--avatar-size:75px;--font-size:var(--person-card-display-name-font-size, 20px);--color:var(--person-card-display-name-color, var(--color-sub1, #323130));--line2-font-size:var(--person-card-title-font-size, 14px);--line2-color:var(--person-card-title-color);--line3-font-size:var(--person-card-subtitle-font-size, 12px);--line3-color:var(--person-card-subtitle-color)}:host .person-details-container .base-icons{display:flex;-webkit-align-items:center;align-items:center;max-width:120px;margin-top:16px}:host .person-details-container .base-icons .icon{display:flex;align-items:center;cursor:pointer;font-size:12px;white-space:nowrap;margin:-11px -13px;padding:11px 13px}:host .person-details-container .base-icons .icon:not(:last-child){margin-right:20px}:host .person-details-container .base-icons .icon svg{fill:var(--icon-color,#605e5c)}:host .person-details-container .base-icons .icon span{margin-left:8px;color:var(--person-card-base-links-color,#023b8f)}:host .person-details-container .base-icons .icon:hover{color:var(--person-card-base-links-hover-color,#012e7f)}:host .expanded-details-container{display:flex;flex-direction:column;position:relative}:host .expanded-details-container .expanded-details-button{display:flex;justify-content:center;align-items:center;height:28px;background:var(--person-card-background-color,var(--background-color,#fff));border-top:1px solid var(--line-seperator-color,#edebe9)}:host .expanded-details-container .expanded-details-button svg path{stroke:#1a1a1a}:host .expanded-details-container .expanded-details-button:hover{background-color:var(--background-color--hover,#edebe9)}:host .section-nav{display:flex;padding:0 14px;border-bottom:1px solid var(--tab-line-color,#edebe9)}:host .section-nav__icon{all:initial;box-sizing:border-box;width:48px;padding:12px;display:flex;align-items:center;justify-content:center;border:2px solid transparent;margin-bottom:-1px;cursor:pointer}:host .section-nav__icon svg{width:20px;height:20px;fill:var(--icon-color,#605e5c)}:host .section-nav__icon:hover{background:var(--tab-background-color--hover,#edebe9)}:host .section-nav__icon:focus{border-color:#000}:host .section-nav__icon.active{border-bottom-color:var(--person-card-tab-nav-color,#0078d4);border-bottom-style:solid;border-left-color:none;border-right-color:none;border-top-color:none;border-top-style:none;border-left-style:none;border-right-style:none}:host .section-nav__icon.active svg{fill:var(--person-card-tab-nav-color,#0078d4)}:host .loading{margin:40px 20px;display:flex;justify-content:center;height:360px}:host .section-host{max-height:360px;min-height:360px;overflow-y:auto;overflow-x:hidden}:host .section-host.small{overflow-y:hidden}:host .quick-message{display:flex;flex-direction:row;border-bottom:1px solid var(--tab-line-color,#edebe9);padding:12px 10px 8px 10px}:host .quick-message__input{flex-grow:1;padding-left:8px;border:none;border-radius:2px;color:var(--color-sub1,#323130);background-color:var(--background-color-sub2,#f3f2f1)}:host .quick-message__send{all:initial;height:32px;width:32px;display:flex;align-items:center;justify-content:center}:host .quick-message__send svg{fill:var(--color-sub2,#717171);height:18px;width:18px}:host .quick-message__send:hover svg{fill:var(--color-sub1,#323130)}:host .sections .section{padding:14px 0;display:flex;flex-direction:column;position:relative}:host .sections .section:not(:last-child):after{position:absolute;content:'';width:90%;transform:translateX(-50%);border-bottom:1px solid var(--tab-line-color,#edebe9);left:50%;bottom:0}:host .sections .section__header{display:flex;flex-direction:row;padding:0 20px}:host .sections .section__title{flex-grow:1;color:var(--title-color-subtitle,#323130);font-size:14px;font-weight:600}:host .sections .section__show-more{color:var(--person-card-show-more-color,#0078d4);font-size:12px;font-weight:600;align-self:center}:host .sections .section__show-more:hover{cursor:pointer;color:var(--person-card-show-more-hover-color,#005a9e)}:host .sections .section__content{margin-top:14px}:host .sections .section .additional-details{padding:0 20px}[dir=rtl] .base-icons span{margin-right:8px}[dir=rtl] .nav__back{width:20px!important;-moz-transform:scaleX(-1);-o-transform:scaleX(-1);-webkit-transform:scaleX(-1);transform:scaleX(-1);filter:FlipH;-ms-filter:FlipH}@media (forced-colors:active) and (prefers-color-scheme:dark){.root{border:1px solid #fff;border-radius:inherit}.root svg,.root svg>path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}.expanded-details-container>svg,.expanded-details-container>svg>path,svg,svg>path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){.root{border:1px solid #000;border-radius:inherit}.root svg,.root svg>path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}.expanded-details-container>svg,.expanded-details-container>svg>path,svg,svg>path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/BasePersonCardSection.js
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata11 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var BasePersonCardSection = class extends MgtTemplatedComponent {
  /**
   * Set the person details to render
   *
   * @type {IDynamicPerson}
   * @memberof BasePersonCardSection
   */
  get personDetails() {
    return this._personDetails;
  }
  set personDetails(value) {
    if (this._personDetails === value) {
      return;
    }
    this._personDetails = value;
    this.requestStateUpdate();
  }
  /**
   * Determines the appropriate view state: full or compact
   *
   * @protected
   * @type {boolean}
   * @memberof BasePersonCardSection
   */
  get isCompact() {
    return this._isCompact;
  }
  constructor() {
    super();
    this._isCompact = false;
    this._personDetails = null;
  }
  /**
   * Set the section to compact view mode
   *
   * @returns
   * @memberof BasePersonCardSection
   */
  asCompactView() {
    this._isCompact = true;
    this.requestUpdate();
    return this;
  }
  /**
   * Set the section to full view mode
   *
   * @returns
   * @memberof BasePersonCardSection
   */
  asFullView() {
    this._isCompact = false;
    this.requestUpdate();
    return this;
  }
  /**
   * Reset any state in the section
   *
   * @protected
   * @abstract
   * @memberof BasePersonCardSection
   */
  clearState() {
    this._isCompact = false;
    this._personDetails = null;
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    return this.isCompact ? this.renderCompactView() : this.renderFullView();
  }
  /**
   * Render a spinner while the component loads state
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof BasePersonCardSection
   */
  renderLoading() {
    return html`
      <div class="loading">
        <mgt-spinner></mgt-spinner>
      </div>
    `;
  }
  /**
   * Render the section in a empty data state
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardContact
   */
  renderNoData() {
    return html`
      <div class="no-data">No data</div>
    `;
  }
  /**
   * Navigate the card to a different user.
   *
   * @protected
   * @memberof BasePersonCardSection
   */
  navigateCard(person) {
    let parent2 = this.parentNode;
    while (parent2) {
      parent2 = parent2.parentNode;
      if (parent2 && parent2.host && parent2.host.tagName === "MGT-PERSON-CARD") {
        parent2 = parent2.host;
        break;
      }
    }
    const personCard = parent2;
    personCard.navigate(person);
  }
};
__decorate14([
  property({
    attribute: "person-details",
    type: Object
  }),
  __metadata11("design:type", Object),
  __metadata11("design:paramtypes", [Object])
], BasePersonCardSection.prototype, "personDetails", null);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-contact/mgt-person-card-contact-css.js
var styles13 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}:host .loading,:host .no-data{margin:0 20px;display:flex;justify-content:center}:host .no-data{font-family:var(--default-font-family, "Segoe UI");font-style:normal;font-weight:600;font-size:14px;color:var(--font-color,#323130);line-height:19px}:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host{position:relative;user-select:none}:host .root{padding:20px 0}:host .root .title{font-size:14px;font-weight:600;color:var(--title-color-subtitle,#323130);margin:0 20px 12px 20px}:host .root .part{display:grid;grid-template-columns:auto 1fr auto}:host .root .part .part__icon{display:flex;min-width:20px;width:20px;height:20px;align-items:center;justify-content:center;margin-left:20px;margin-top:10px;line-height:20px}:host .root .part .part__details{margin:10px 14px;overflow:hidden}:host .root .part .part__details .part__title{font-size:12px;color:var(--title-color-sub2,#717171);line-height:20px}:host .root .part .part__details .part__value{grid-column:2;color:var(--color-sub1,#323130);font-size:14px;font-weight:400}:host .root .part .part__details .part__value .part__link{color:var(--person-card-contact-link-color,#0078d4);font-family:var(--default-font-family);font-size:14px;cursor:pointer;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:100%;display:inline-block}:host .root .part .part__details .part__value .part__link:hover{color:var(--person-card-contact-link-hover-color,#004578)}:host .root .part .part__copy{width:32px;height:100%;background-color:var(--background-color-sub2,#f3f2f1);visibility:hidden;display:flex;align-items:center;justify-content:center}:host .root .part .part__copy svg{fill:var(--color-sub1,#323130);cursor:pointer}:host .root .part:hover{background-color:var(--background-color--hover,#edebe9);cursor:pointer}:host .root .part:hover .part__copy{visibility:visible}:host .root.compact{padding:0}:host .root.compact .part{height:30px;align-items:center}:host .root.compact .part__details{margin:0}:host .root.compact .part__title{display:none}:host .root.compact .part__icon{margin-top:0;margin-right:6px}[dir=rtl] .part__link.phone{text-align:right;direction:ltr}[dir=rtl] .part__icon{margin:10px 20px 0 0!important}[dir=rtl].compact .part__icon{margin-left:6px!important;margin-top:0!important}@media (forced-colors:active) and (prefers-color-scheme:dark){.root svg{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}.root svg path,.root svg rect{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){.root svg{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}.root svg path,.root svg rect{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-contact/strings.js
var strings7 = {
  contactSectionTitle: "Contact",
  emailTitle: "Email",
  chatTitle: "Teams",
  businessPhoneTitle: "Business Phone",
  cellPhoneTitle: "Mobile Phone",
  departmentTitle: "Department",
  titleTitle: "Title",
  officeLocationTitle: "Office Location",
  copyToClipboardButton: "Copy to clipboard"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-contact/mgt-person-card-contact.js
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata12 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtPersonCardContact = class MgtPersonCardContact2 extends BasePersonCardSection {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles13;
  }
  get strings() {
    return strings7;
  }
  /**
   * Returns true if the component has data it can render
   *
   * @readonly
   * @abstract
   * @type {boolean}
   * @memberof BasePersonCardSection
   */
  get hasData() {
    if (!this._contactParts) {
      return false;
    }
    const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
    return !!availableParts.length;
  }
  // tslint:enable: object-literal-sort-keys
  constructor(person) {
    super();
    this._contactParts = {
      email: {
        icon: getSvg(SvgIcon.Email, "#929292"),
        onClick: () => this.sendEmail(getEmailFromGraphEntity(this._person)),
        showCompact: true,
        title: this.strings.emailTitle
      },
      chat: {
        icon: getSvg(SvgIcon.Chat, "#929292"),
        onClick: () => {
          var _a;
          return this.sendChat((_a = this._person) === null || _a === void 0 ? void 0 : _a.userPrincipalName);
        },
        showCompact: false,
        title: this.strings.chatTitle
      },
      businessPhone: {
        icon: getSvg(SvgIcon.Phone, "#929292"),
        onClick: () => {
          var _a, _b;
          return this.sendCall(((_b = (_a = this._person) === null || _a === void 0 ? void 0 : _a.businessPhones) === null || _b === void 0 ? void 0 : _b.length) > 0 ? this._person.businessPhones[0] : null);
        },
        showCompact: true,
        title: this.strings.businessPhoneTitle
      },
      cellPhone: {
        icon: getSvg(SvgIcon.CellPhone, "#929292"),
        onClick: () => {
          var _a;
          return this.sendCall((_a = this._person) === null || _a === void 0 ? void 0 : _a.mobilePhone);
        },
        showCompact: true,
        title: this.strings.cellPhoneTitle
      },
      department: {
        icon: getSvg(SvgIcon.Department, "#929292"),
        showCompact: false,
        title: this.strings.departmentTitle
      },
      title: {
        icon: getSvg(SvgIcon.Person, "#929292"),
        showCompact: false,
        title: this.strings.titleTitle
      },
      officeLocation: {
        icon: getSvg(SvgIcon.OfficeLocation, "#929292"),
        showCompact: true,
        title: this.strings.officeLocationTitle
      }
    };
    this.sendCall = (phone) => {
      this.sendLink("tel:", phone);
    };
    this._person = person;
    this._contactParts.email.value = getEmailFromGraphEntity(this._person);
    this._contactParts.chat.value = this._person.userPrincipalName;
    this._contactParts.cellPhone.value = this._person.mobilePhone;
    this._contactParts.department.value = this._person.department;
    this._contactParts.title.value = this._person.jobTitle;
    this._contactParts.officeLocation.value = this._person.officeLocation;
    if (this._person.businessPhones && this._person.businessPhones.length) {
      this._contactParts.businessPhone.value = this._person.businessPhones[0];
    }
  }
  /**
   * The name for display in the overview section.
   *
   * @readonly
   * @type {string}
   * @memberof MgtPersonCardContact
   */
  get displayName() {
    return this.strings.contactSectionTitle;
  }
  // Defines the skeleton for what contact fields are available and what they do.
  /**
   * Render the icon for display in the navigation ribbon.
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardContact
   */
  renderIcon() {
    return getSvg(SvgIcon.Contact);
  }
  /**
   * Reset any state in the section
   *
   * @protected
   * @memberof MgtPersonCardContact
   */
  clearState() {
    super.clearState();
    for (const key of Object.keys(this._contactParts)) {
      this._contactParts[key].value = null;
    }
  }
  /**
   * Render the compact view
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardContact
   */
  renderCompactView() {
    let contentTemplate;
    if (!this.hasData) {
      return null;
    }
    const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
    let compactParts = Object.values(availableParts).filter((p) => !!p.value && p.showCompact);
    if (!compactParts || !compactParts.length) {
      compactParts = Object.values(availableParts).slice(0, 2);
    }
    contentTemplate = html`
      ${compactParts.map((p) => this.renderContactPart(p))}
    `;
    return html`
      <div class="root compact" dir=${this.direction}>
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render the full view
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardContact
   */
  renderFullView() {
    let contentTemplate;
    if (this.hasData) {
      const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
      contentTemplate = html`
        ${availableParts.map((part) => this.renderContactPart(part))}
      `;
    }
    return html`
      <div class="root" dir=${this.direction}>
        <div class="title" tabindex="0">${this.displayName}</div>
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render a specific contact part
   *
   * @protected
   * @param {IContactPart} part
   * @returns {TemplateResult}
   * @memberof MgtPersonCardContact
   */
  renderContactPart(part) {
    let isPhone = false;
    if (part.title === "Mobile Phone" || part.title === "Business Phone") {
      isPhone = true;
    }
    const partLinkClasses = {
      part__link: true,
      phone: isPhone
    };
    const valueTemplate = part.onClick ? html`
          <span class=${classMap(partLinkClasses)} @click=${(e) => part.onClick(e)}>${part.value}</span>
        ` : html`
          ${part.value}
        `;
    return html`
      <div class="part" @click=${(e) => this.handlePartClick(e, part.value)} tabindex="0">
        <div class="part__icon" aria-label=${part.title} title=${part.title}>${part.icon}</div>
        <div class="part__details">
          <div class="part__title">${part.title}</div>
          <div class="part__value" title=${part.title}>${valueTemplate}</div>
        </div>
        <div class="part__copy" aria-role="button" aria-label=${this.strings.copyToClipboardButton} title=${this.strings.copyToClipboardButton}>
          ${getSvg(SvgIcon.Copy)}
        </div>
      </div>
    `;
  }
  /**
   * Handle the click event for contact parts
   *
   * @protected
   * @memberof MgtPersonCardContact
   */
  handlePartClick(e, value) {
    if (value) {
      navigator.clipboard.writeText(value);
    }
  }
  sendLink(protocol, resource) {
    if (resource) {
      window.open(`${protocol}${resource}`, "_blank", "noreferrer");
    } else {
      console.error(`Target resource for ${protocol} link was not provided: resource: ${resource}`);
    }
  }
  /**
   * Send a chat message to the user
   *
   * @protected
   * @memberof MgtPersonCardContact
   */
  sendChat(upn) {
    if (!upn) {
      console.error("Can't send chat when upn is not provided");
      return;
    }
    const url = `https://teams.microsoft.com/l/chat/0/0?users=${upn}`;
    const openWindow = () => window.open(url, "_blank", "noreferrer");
    if (TeamsHelper.isAvailable) {
      TeamsHelper.executeDeepLink(url, (status) => {
        if (!status) {
          openWindow();
        }
      });
    } else {
      openWindow();
    }
  }
  /**
   * Send an email to the user
   *
   * @protected
   * @memberof MgtPersonCardContact
   */
  sendEmail(email) {
    this.sendLink("mailto:", email);
  }
};
MgtPersonCardContact = __decorate15([
  customElement("mgt-person-card-contact"),
  __metadata12("design:paramtypes", [Object])
], MgtPersonCardContact);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-files/mgt-person-card-files-css.js
var styles14 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}:host .loading,:host .no-data{margin:0 20px;display:flex;justify-content:center}:host .no-data{font-family:var(--default-font-family, "Segoe UI");font-style:normal;font-weight:600;font-size:14px;color:var(--font-color,#323130);line-height:19px}:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host{position:relative;user-select:none}:host .root{padding:20px 0}:host .root.compact{padding:0}:host .root .title{font-size:14px;font-weight:600;color:var(--title-color-subtitle,#323130);margin:0 20px 12px 20px}:host .root .file{display:flex;align-items:center;padding:11px 20px}:host .root .file:hover{background-color:var(--background-color--hover,#edebe9);cursor:pointer}:host .root .file:last-child{margin-bottom:unset}:host .root .file .file__icon{width:28px;min-width:28px;height:28px;margin-right:12px;display:flex;align-items:center;justify-content:center}:host .root .file .file__icon img{height:28px;width:28px}:host .root .file .file__details{min-width:0;margin-right:40px}:host .root .file .file__details .file__name{font-size:14px;color:var(--color-sub1,#323130)}:host .root .file .file__details .file__last-modified{font-size:12px;color:var(--color-sub2,#717171)}:host .root .file .file__details>div{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[dir=rtl] .file__icon{margin-right:0!important}[dir=rtl] .file__details{margin-right:12px!important}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-files/strings.js
var strings8 = {
  filesSectionTitle: "Files",
  sharedTextSubtitle: "Shared"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-files/mgt-person-card-files.js
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata13 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtPersonCardFiles = class MgtPersonCardFiles2 extends BasePersonCardSection {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles14;
  }
  get strings() {
    return strings8;
  }
  constructor(files) {
    super();
    this._files = files;
  }
  /**
   * The name for display in the overview section.
   *
   * @readonly
   * @type {string}
   * @memberof MgtPersonCardFiles
   */
  get displayName() {
    return this.strings.filesSectionTitle;
  }
  /**
   * Reset any state in the section
   *
   * @protected
   * @memberof MgtPersonCardFiles
   */
  clearState() {
    super.clearState();
    this._files = null;
  }
  /**
   * Render the icon for display in the navigation ribbon.
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardFiles
   */
  renderIcon() {
    return getSvg(SvgIcon.Files);
  }
  /**
   * Render the compact view
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardFiles
   */
  renderCompactView() {
    let contentTemplate;
    if (this.isLoadingState) {
      contentTemplate = this.renderLoading();
    } else if (!this._files || !this._files.length) {
      contentTemplate = this.renderNoData();
    } else {
      contentTemplate = html`
        ${this._files.slice(0, 3).map((file) => this.renderFile(file))}
      `;
    }
    return html`
      <div class="root compact" dir=${this.direction}>
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render the full view
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardFiles
   */
  renderFullView() {
    let contentTemplate;
    if (this.isLoadingState) {
      contentTemplate = this.renderLoading();
    } else if (!this._files || !this._files.length) {
      contentTemplate = this.renderNoData();
    } else {
      contentTemplate = html`
        ${this._files.map((file) => this.renderFile(file))}
      `;
    }
    return html`
      <div class="root" dir=${this.direction}>
        <div class="title">${this.strings.filesSectionTitle}</div>
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render a file item
   *
   * @protected
   * @param {IFile} file
   * @returns {TemplateResult}
   * @memberof MgtPersonCardFiles
   */
  renderFile(file) {
    const lastModifiedTemplate = file.lastShared ? html`
          <div class="file__last-modified">
            ${this.strings.sharedTextSubtitle} ${getRelativeDisplayDate(new Date(file.lastShared.sharedDateTime))}
          </div>
        ` : null;
    return html`
      <div class="file" @click=${(e) => this.handleFileClick(file)} tabindex="0">
        <div class="file__icon">
          <img alt="${file.resourceVisualization.title}" src=${getFileTypeIconUri(file.resourceVisualization.type, 48, "svg")} />
        </div>
        <div class="file__details">
          <div class="file__name">${file.resourceVisualization.title}</div>
          ${lastModifiedTemplate}
        </div>
      </div>
    `;
  }
  handleFileClick(file) {
    if (file.resourceReference && file.resourceReference.webUrl) {
      window.open(file.resourceReference.webUrl, "_blank", "noreferrer");
    }
  }
};
MgtPersonCardFiles = __decorate16([
  customElement("mgt-person-card-files"),
  __metadata13("design:paramtypes", [Array])
], MgtPersonCardFiles);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-messages/mgt-person-card-messages-css.js
var styles15 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}:host .loading,:host .no-data{margin:0 20px;display:flex;justify-content:center}:host .no-data{font-family:var(--default-font-family, "Segoe UI");font-style:normal;font-weight:600;font-size:14px;color:var(--font-color,#323130);line-height:19px}:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host{position:relative;user-select:none}:host .root{padding:20px 0}:host .root.compact{padding:0}:host .root .title{font-size:14px;font-weight:600;color:var(--title-color-subtitle,#323130);margin:0 20px 12px 20px}:host .root .message{padding:8px 20px;display:flex;align-items:center;justify-content:space-between}:host .root .message:hover{background-color:var(--background-color--hover,#edebe9);cursor:pointer}:host .root .message:last-child{margin-bottom:unset}:host .root .message .message__detail{min-width:0;line-height:normal}:host .root .message .message__detail .message__subject{color:var(--color,#000);font-size:16px}:host .root .message .message__detail .message__from{font-size:12px;color:var(--color-sub1,#323130)}:host .root .message .message__detail .message__message{font-size:12px;color:var(--color-sub2,#717171)}:host .root .message .message__detail>div{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host .root .message .message__date{font-size:12px;color:var(--color-sub2,#717171);margin-left:10px;white-space:nowrap}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-messages/strings.js
var strings9 = {
  emailsSectionTitle: "Emails"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-messages/mgt-person-card-messages.js
var __decorate17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata14 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtPersonCardMessages = class MgtPersonCardMessages2 extends BasePersonCardSection {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles15;
  }
  get strings() {
    return strings9;
  }
  constructor(messages) {
    super();
    this._messages = messages;
  }
  /**
   * The name for display in the overview section.
   *
   * @readonly
   * @type {string}
   * @memberof MgtPersonCardMessages
   */
  get displayName() {
    return this.strings.emailsSectionTitle;
  }
  /**
   * Reset any state in the section
   *
   * @protected
   * @memberof MgtPersonCardMessages
   */
  clearState() {
    super.clearState();
    this._messages = [];
  }
  /**
   * Render the icon for display in the navigation ribbon.
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardMessages
   */
  renderIcon() {
    return getSvg(SvgIcon.Messages);
  }
  /**
   * Render the compact view
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardMessages
   */
  renderCompactView() {
    let contentTemplate;
    if (this.isLoadingState) {
      contentTemplate = this.renderLoading();
    } else if (!this._messages || !this._messages.length) {
      contentTemplate = this.renderNoData();
    } else {
      const messageTemplates = this._messages ? this._messages.slice(0, 3).map((message) => this.renderMessage(message)) : [];
      contentTemplate = html`
        ${messageTemplates}
      `;
    }
    return html`
      <div class="root compact">
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render the full view
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardMessages
   */
  renderFullView() {
    let contentTemplate;
    if (this.isLoadingState) {
      contentTemplate = this.renderLoading();
    } else if (!this._messages || !this._messages.length) {
      contentTemplate = this.renderNoData();
    } else {
      contentTemplate = html`
        ${this._messages.slice(0, 5).map((message) => this.renderMessage(message))}
      `;
    }
    return html`
      <div class="root">
        <div class="title" tabindex="0">${this.strings.emailsSectionTitle}</div>
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render a message item
   *
   * @protected
   * @param {IMessage} message
   * @returns {TemplateResult}
   * @memberof MgtPersonCardMessages
   */
  renderMessage(message) {
    return html`
      <div class="message" @click=${() => this.handleMessageClick(message)}>
        <div class="message__detail">
          <div class="message__subject">${message.subject}</div>
          <div class="message__from">${message.from.emailAddress.name}</div>
          <div class="message__message">${message.bodyPreview}</div>
        </div>
        <div class="message__date">${getRelativeDisplayDate(new Date(message.receivedDateTime))}</div>
      </div>
    `;
  }
  handleMessageClick(message) {
    window.open(message.webLink, "_blank", "noreferrer");
  }
};
MgtPersonCardMessages = __decorate17([
  customElement("mgt-person-card-messages"),
  __metadata14("design:paramtypes", [Array])
], MgtPersonCardMessages);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-organization/mgt-person-card-organization-css.js
var styles16 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}:host .loading,:host .no-data{margin:0 20px;display:flex;justify-content:center}:host .no-data{font-family:var(--default-font-family, "Segoe UI");font-style:normal;font-weight:600;font-size:14px;color:var(--font-color,#323130);line-height:19px}:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host{position:relative;user-select:none}:host .root{padding:20px 0}:host .root.compact{padding:0}:host .root.compact .coworker .coworker__image{height:40px;width:40px;border-radius:40px;--avatar-size:40px;--avatar-size-s:40px;margin-right:12px}:host .root.compact .coworker .coworker__name{font-size:14px}:host .root.compact .coworker .coworker__title{font-size:12px}:host .root .title{font-size:14px;font-weight:600;color:var(--title-color-subtitle,#323130);margin:0 20px 20px 20px}:host .root .subtitle{color:var(--title-color-sub2,#717171);font-size:14px;margin:0 20px 8px 20px}:host .root .divider{display:flex;background:var(--line-seperator-color,#edebe9);height:1px;margin-top:26px;margin-bottom:18px;margin-left:20px;margin-right:20px}:host .root .org-member{height:74px;box-sizing:border-box;border-radius:2px;padding:12px;display:flex;align-items:center;margin-left:20px;margin-right:20px}:host .root .org-member.org-member--target{background-color:var(--background-color-sub2,#f3f2f1);border:1px solid var(--person-card-active-org-member-color,#0078d4)}:host .root .org-member.org-member--direct-report:not(:last-child){border-bottom:none}:host .root .org-member:not(.org-member--target){background-color:var(--background-color-sub1,#faf9f8);border:1px solid var(--line-seperator-color,#edebe9)}:host .root .org-member:not(.org-member--target):hover{cursor:pointer;background-color:var(--background-color--hover,#edebe9)}:host .root .org-member .org-member__person{flex-grow:1}:host .root .org-member .org-member__person mgt-person{--avatar-size:48px;--avatar-size-s:48px;--font-size:16px;--color:#323130;--line2-font-size:14px;--line3-font-size:14px;--line2-text-transform:uppercase;--line2-color:#797775;--line3-color:#797775;--line3-text-transform:uppercase;margin-right:8px;max-width:230px}:host .root .org-member .org-member__details{flex-grow:1}:host .root .org-member .org-member__details .org-member__name{font-size:16px;color:var(--color-sub1,#323130);font-weight:600}:host .root .org-member .org-member__details .org-member__department,:host .root .org-member .org-member__details .org-member__title{font-weight:14px;color:var(--color-sub2,#717171)}:host .root .org-member__separator{border:1px solid var(--line-seperator-color,#edebe9);box-sizing:border-box;width:0;margin:0 50%;height:14px}:host .root .coworker{display:flex;align-items:center;padding:10px 20px}:host .root .coworker:hover{cursor:pointer;background-color:var(--background-color--hover,#edebe9)}:host .root .coworker .coworker__person{height:46px;width:46px;border-radius:46px;margin-right:8px}:host .root .coworker .coworker__person mgt-person{--font-size:16px;--line2-text-transform:uppercase;--line2-font-size:14px;--line2-color:set-var(color__sub2, $theme-default, $common);--avatar-size:46px}:host .root .direct-report__compact{padding:12px 20px}:host .root .direct-report__compact .direct-report{cursor:pointer;width:38px;margin-right:4px;display:inline;--avatar-size:38px}[dir=rtl] .org-member .org-member__more{-moz-transform:scaleX(-1);-o-transform:scaleX(-1);-webkit-transform:scaleX(-1);transform:scaleX(-1);filter:FlipH;-ms-filter:FlipH}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg,:host svg>path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host svg,:host svg>path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-organization/strings.js
var strings10 = {
  reportsToSectionTitle: "Reports to",
  directReportsSectionTitle: "Direct reports",
  organizationSectionTitle: "Organization",
  youWorkWithSubSectionTitle: "You work with",
  userWorksWithSubSectionTitle: "works with"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-organization/mgt-person-card-organization.js
var __decorate18 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata15 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtPersonCardOrganization = class MgtPersonCardOrganization2 extends BasePersonCardSection {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles16;
  }
  /**
   * returns component strings
   *
   * @readonly
   * @protected
   * @memberof MgtBaseComponent
   */
  get strings() {
    return strings10;
  }
  constructor(state2, me) {
    super();
    this._state = state2;
    this._me = me;
  }
  /**
   * Reset any state in the section
   *
   * @protected
   * @memberof MgtPersonCardMessages
   */
  clearState() {
    super.clearState();
    this._state = null;
    this._me = null;
  }
  /**
   * The name for display in the overview section.
   *
   * @readonly
   * @type {string}
   * @memberof MgtPersonCardOrganization
   */
  get displayName() {
    const { person, directReports } = this._state;
    if (!person.manager && directReports && directReports.length) {
      return `${this.strings.directReportsSectionTitle} (${directReports.length})`;
    }
    return this.strings.reportsToSectionTitle;
  }
  /**
   * Render the icon for display in the navigation ribbon.
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderIcon() {
    return getSvg(SvgIcon.Organization);
  }
  /**
   * Render the compact view
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderCompactView() {
    let contentTemplate;
    if (!this._state || !this._state.person) {
      return null;
    }
    const { person, directReports } = this._state;
    if (!person) {
      return null;
    } else if (person.manager) {
      contentTemplate = this.renderCoworker(person.manager);
    } else if (directReports && directReports.length) {
      contentTemplate = this.renderCompactDirectReports();
    }
    return html`
      <div class="root compact">
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render the full view
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderFullView() {
    let contentTemplate;
    if (!this._state || !this._state.person) {
      return null;
    }
    const { person, directReports, people } = this._state;
    if (!person && !directReports && !people) {
      return null;
    } else {
      const managerTemplates = this.renderManagers();
      const currentUserTemplate = this.renderCurrentUser();
      const directReportsTemplate = this.renderDirectReports();
      const coworkersTemplate = this.renderCoworkers();
      contentTemplate = html`
        ${managerTemplates} ${currentUserTemplate} ${directReportsTemplate} ${coworkersTemplate}
      `;
    }
    return html`
      <div class="root" dir=${this.direction}>
        <div class="title" tabindex="0">${this.strings.organizationSectionTitle}</div>
        ${contentTemplate}
      </div>
    `;
  }
  /**
   * Render a manager org member
   *
   * @protected
   * @param {User} person
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderManager(person) {
    return html`
      <div class="org-member" @keydown=${(e) => {
      e.code === "Enter" ? this.navigateCard(person) : "";
    }} @click=${() => this.navigateCard(person)}>
        <div class="org-member__person">
          <mgt-person
            .personDetails=${person}
            .line2Property=${"jobTitle"}
            .line3Property=${"department"}
            .fetchImage=${true}
            .view=${ViewType.threelines}
          ></mgt-person>
        </div>
        <div tabindex="0" class="org-member__more">
          ${getSvg(SvgIcon.ExpandRight)}
        </div>
      </div>
      <div class="org-member__separator"></div>
    `;
  }
  /**
   * Render a manager org member
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderManagers() {
    const { person } = this._state;
    if (!person || !person.manager) {
      return null;
    }
    const managers = [];
    let currentManager = person;
    while (currentManager.manager) {
      managers.push(currentManager.manager);
      currentManager = currentManager.manager;
    }
    if (!managers.length) {
      return null;
    }
    return managers.reverse().map((manager) => this.renderManager(manager));
  }
  /**
   * Render a direct report
   *
   * @protected
   * @param {User} person
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderDirectReports() {
    const { directReports } = this._state;
    if (!directReports || !directReports.length) {
      return null;
    }
    return html`
      <div class="org-member__separator"></div>
      <div>
        ${directReports.map((person) => html`
            <div class="org-member org-member--direct-report" @keydown=${(e) => {
      e.code === "Enter" ? this.navigateCard(person) : "";
    }} @click=${() => this.navigateCard(person)}>
              <div class="org-member__person">
                <mgt-person
                  .personDetails=${person}
                  .line2Property=${"jobTitle"}
                  .line3Property=${"department"}
                  .fetchImage=${true}
                  .view=${ViewType.twolines}
                ></mgt-person>
              </div>
              <div tabindex="0" class="org-member__more">
                ${getSvg(SvgIcon.ExpandRight)}
              </div>
            </div>
          `)}
      </div>
    `;
  }
  /**
   * Render direct reports in compact view
   *
   * @protected
   * @param {User} person
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderCompactDirectReports() {
    const { directReports } = this._state;
    return html`
      <div class="direct-report__compact">
        ${directReports.slice(0, 6).map((person) => html`
            <div class="direct-report" @keydown=${(e) => {
      e.code === "Enter" ? this.navigateCard(person) : "";
    }} @click=${() => this.navigateCard(person)} @keydown=${(e) => {
      e.code === "Enter" ? this.navigateCard(person) : "";
    }}>
              <mgt-person .personDetails=${person} .fetchImage=${true}></mgt-person>
            </div>
          `)}
      </div>
    `;
  }
  /**
   * Render the user/self member
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderCurrentUser() {
    const { person } = this._state;
    return html`
      <div class="org-member org-member--target">
        <div class="org-member__person">
          <mgt-person
            .personDetails=${person}
            .line2Property=${"jobTitle"}
            .line3Property=${"department"}
            .fetchImage=${true}
            .view=${ViewType.threelines}
          ></mgt-person>
        </div>
      </div>
    `;
  }
  /**
   * Render a coworker org member
   *
   * @protected
   * @param {User} person
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderCoworker(person) {
    return html`
      <div class="coworker" @keydown=${(e) => {
      e.code === "Enter" ? this.navigateCard(person) : "";
    }} @click=${() => this.navigateCard(person)}>
        <div class="coworker__person">
          <mgt-person
            .personDetails=${person}
            .line2Property=${"jobTitle"}
            .fetchImage=${true}
            .view=${ViewType.twolines}
          ></mgt-person>
        </div>
      </div>
    `;
  }
  /**
   * Render a coworker org member
   *
   * @protected
   * @param {User} person
   * @returns {TemplateResult}
   * @memberof MgtPersonCardOrganization
   */
  renderCoworkers() {
    const { people } = this._state;
    if (!people || !people.length) {
      return null;
    }
    const subtitle = this._me.id === this._state.person.id ? this.strings.youWorkWithSubSectionTitle : `${this._state.person.givenName} ${this.strings.userWorksWithSubSectionTitle}`;
    return html`
      <div class="divider"></div>
      <div class="subtitle" tabindex="0">${subtitle}</div>
      <div>
        ${people.slice(0, 6).map((person) => this.renderCoworker(person))}
      </div>
    `;
  }
};
MgtPersonCardOrganization = __decorate18([
  customElement("mgt-person-card-organization"),
  __metadata15("design:paramtypes", [Object, Object])
], MgtPersonCardOrganization);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-profile/mgt-person-card-profile-css.js
var styles17 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}:host .loading,:host .no-data{margin:0 20px;display:flex;justify-content:center}:host .no-data{font-family:var(--default-font-family, "Segoe UI");font-style:normal;font-weight:600;font-size:14px;color:var(--font-color,#323130);line-height:19px}:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host{position:relative;user-select:none}:host .root{padding:20px 0}:host .root.compact{padding:0}:host .root .title{font-size:14px;font-weight:600;color:var(--title-color-subtitle,#323130);margin:0 20px 12px 20px}:host .root section{margin-bottom:24px;padding:0 20px}:host .root section:last-child{margin:0}:host .root section .section__title{font-size:14px;color:var(--title-color-sub2,#717171)}:host .root section .section__content{display:flex;flex-direction:column;margin-top:10px}:host .root .token-list{display:flex;flex-direction:row;flex-wrap:wrap;margin-top:-10px}:host .root .token-list .token-list__item{text-overflow:ellipsis;white-space:nowrap;display:inline-block;overflow:hidden;font-size:14px;align-items:center;background:var(--background-color-sub2,#f3f2f1);border-radius:2px;max-height:28px;padding:4px 8px;margin-right:10px;margin-top:10px;color:var(--color-sub1,#323130)}:host .root .token-list .token-list__item:last-child{margin-right:initial}:host .root .token-list .token-list__item.overflow{display:none}:host .root .token-list .token-list__item:hover{color:var(--color-sub1,#323130)}:host .root .token-list .token-list__item.token-list__item--show-overflow{cursor:pointer;user-select:unset}:host .root .data-list__item{margin-bottom:20px}:host .root .data-list__item:last-child{margin-bottom:initial}:host .root .data-list__item .data-list__item__header{display:flex;justify-content:space-between;align-items:center}:host .root .data-list__item .data-list__item__content{font-size:12px;line-height:16px;color:var(--color-sub2,#717171);margin-top:4px}:host .root .data-list__item .data-list__item__title{font-size:14px;line-height:16px;color:var(--title-color-subtitle,#323130)}:host .root .data-list__item .data-list__item__date-range{color:var(--color-sub2,#717171);font-size:10px;line-height:12px}:host .root .language__proficiency{opacity:.77}:host .root .work-position .work-position__company{color:#0078d4}:host .root .work-position .work-position__location{font-size:10px;color:var(--color-sub2,#717171);line-height:16px}:host .root .educational-activity .educational-activity__degree{font-size:12px;line-height:14px;color:var(--color-sub3,#727170)}:host .root .birthday{display:flex;align-items:center;margin-top:-6px}:host .root .birthday .birthday__icon{margin-right:8px}:host .root .birthday .birthday__date{font-size:12px;color:var(--color-sub1,#323130)}[dir=rtl] .token-list__item{margin-right:0!important}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-profile/strings.js
var strings11 = {
  SkillsAndExperienceSectionTitle: "Skills & Experience",
  AboutCompactSectionTitle: "About",
  SkillsSubSectionTitle: "Skills",
  LanguagesSubSectionTitle: "Languages",
  WorkExperienceSubSectionTitle: "Work Experience",
  EducationSubSectionTitle: "Education",
  professionalInterestsSubSectionTitle: "Professional Interests",
  personalInterestsSubSectionTitle: "Personal Interests",
  birthdaySubSectionTitle: "Birthday",
  currentYearSubtitle: "Current"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/sections/mgt-person-card-profile/mgt-person-card-profile.js
var __decorate19 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata16 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtPersonCardProfile = class MgtPersonCardProfile2 extends BasePersonCardSection {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles17;
  }
  get strings() {
    return strings11;
  }
  /**
   * The name for display in the overview section.
   *
   * @readonly
   * @type {string}
   * @memberof MgtPersonCardProfile
   */
  get displayName() {
    return this.strings.SkillsAndExperienceSectionTitle;
  }
  /**
   * Returns true if the profile contains data
   * that can be rendered
   *
   * @readonly
   * @type {boolean}
   * @memberof MgtPersonCardProfile
   */
  get hasData() {
    if (!this.profile) {
      return false;
    }
    const { languages, skills, positions, educationalActivities } = this.profile;
    return [
      this._birthdayAnniversary,
      this._personalInterests && this._personalInterests.length,
      this._professionalInterests && this._professionalInterests.length,
      languages && languages.length,
      skills && skills.length,
      positions && positions.length,
      educationalActivities && educationalActivities.length
    ].filter((v) => !!v).length > 0;
  }
  /**
   * The user's profile metadata
   *
   * @protected
   * @type {IProfile}
   * @memberof MgtPersonCardProfile
   */
  get profile() {
    return this._profile;
  }
  set profile(value) {
    if (value === this._profile) {
      return;
    }
    this._profile = value;
    this._birthdayAnniversary = value && value.anniversaries ? value.anniversaries.find(this.isBirthdayAnniversary) : null;
    this._personalInterests = value && value.interests ? value.interests.filter(this.isPersonalInterest) : null;
    this._professionalInterests = value && value.interests ? value.interests.filter(this.isProfessionalInterest) : null;
  }
  constructor(profile) {
    super();
    this.profile = profile;
  }
  /**
   * Render the icon for display in the navigation ribbon.
   *
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderIcon() {
    return getSvg(SvgIcon.Profile);
  }
  /**
   * Reset any state in the section
   *
   * @protected
   * @memberof MgtPersonCardProfile
   */
  clearState() {
    super.clearState();
    this.profile = null;
  }
  /**
   * Render the compact view
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderCompactView() {
    return html`
      <div class="root compact" dir=${this.direction}>
        ${this.renderSubSections().slice(0, 2)}
      </div>
    `;
  }
  /**
   * Render the full view
   *
   * @protected
   * @returns
   * @memberof MgtPersonCardProfile
   */
  renderFullView() {
    this.initPostRenderOperations();
    return html`
      <div class="root" dir=${this.direction}>
        <div class="title">${this.strings.AboutCompactSectionTitle}</div>
        ${this.renderSubSections()}
      </div>
    `;
  }
  /**
   * Renders all subSections of the profile
   * Defines order of how they render
   *
   * @protected
   * @return {*}
   * @memberof MgtPersonCardProfile
   */
  renderSubSections() {
    const subSections = [
      this.renderSkills(),
      this.renderBirthday(),
      this.renderLanguages(),
      this.renderWorkExperience(),
      this.renderEducation(),
      this.renderProfessionalInterests(),
      this.renderPersonalInterests()
    ];
    return subSections.filter((s) => !!s);
  }
  /**
   * Render the user's known languages
   *
   * @protected
   * @returns
   * @memberof MgtPersonCardProfile
   */
  renderLanguages() {
    const { languages } = this._profile;
    if (!(languages && languages.length)) {
      return null;
    }
    const languageItems = [];
    for (const language of languages) {
      let proficiency = null;
      if (language.proficiency && language.proficiency.length) {
        proficiency = html`
          <span class="language__proficiency" tabindex="0">
            &nbsp;(${language.proficiency})
          </span>
        `;
      }
      languageItems.push(html`
        <div class="token-list__item language">
          <span class="language__title" tabindex="0">${language.displayName}</span>
          ${proficiency}
        </div>
      `);
    }
    const languageTitle = languageItems.length ? this.strings.LanguagesSubSectionTitle : "";
    return html`
      <section>
        <div class="section__title" tabindex="0">${languageTitle}</div>
        <div class="section__content">
          <div class="token-list">
            ${languageItems}
          </div>
        </div>
      </section>
    `;
  }
  /**
   * Render the user's skills
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderSkills() {
    const { skills } = this._profile;
    if (!(skills && skills.length)) {
      return null;
    }
    const skillItems = [];
    for (const skill of skills) {
      skillItems.push(html`
        <div class="token-list__item skill" tabindex="0">
          ${skill.displayName}
        </div>
      `);
    }
    const skillsTitle = skillItems.length ? this.strings.SkillsSubSectionTitle : "";
    return html`
      <section>
        <div class="section__title" tabindex="0">${skillsTitle}</div>
        <div class="section__content">
          <div class="token-list">
            ${skillItems}
          </div>
        </div>
      </section>
    `;
  }
  /**
   * Render the user's work experience timeline
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderWorkExperience() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const { positions } = this._profile;
    if (!(positions && positions.length)) {
      return null;
    }
    const positionItems = [];
    for (const position of this._profile.positions) {
      if (position.detail.description || position.detail.jobTitle !== "") {
        positionItems.push(html`
          <div class="data-list__item work-position">
            <div class="data-list__item__header">
              <div class="data-list__item__title" tabindex="0">${(_a = position.detail) === null || _a === void 0 ? void 0 : _a.jobTitle}</div>
              <div class="data-list__item__date-range" tabindex="0">
                ${this.getDisplayDateRange(position.detail)}
              </div>
            </div>
            <div class="data-list__item__content">
              <div class="work-position__company" tabindex="0">
                ${(_c = (_b = position === null || position === void 0 ? void 0 : position.detail) === null || _b === void 0 ? void 0 : _b.company) === null || _c === void 0 ? void 0 : _c.displayName}
              </div>
              <div class="work-position__location" tabindex="0">
                ${(_f = (_e = (_d = position === null || position === void 0 ? void 0 : position.detail) === null || _d === void 0 ? void 0 : _d.company) === null || _e === void 0 ? void 0 : _e.address) === null || _f === void 0 ? void 0 : _f.city}, ${(_j = (_h = (_g = position === null || position === void 0 ? void 0 : position.detail) === null || _g === void 0 ? void 0 : _g.company) === null || _h === void 0 ? void 0 : _h.address) === null || _j === void 0 ? void 0 : _j.state}
              </div>
            </div>
          </div>
        `);
      }
    }
    const workExperienceTitle = positionItems.length ? this.strings.WorkExperienceSubSectionTitle : "";
    return html`
      <section>
        <div class="section__title" tabindex="0">${workExperienceTitle}</div>
        <div class="section__content">
          <div class="data-list">
            ${positionItems}
          </div>
        </div>
      </section>
    `;
  }
  /**
   * Render the user's education timeline
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderEducation() {
    const { educationalActivities } = this._profile;
    if (!(educationalActivities && educationalActivities.length)) {
      return null;
    }
    const positionItems = [];
    for (const educationalActivity of educationalActivities) {
      positionItems.push(html`
        <div class="data-list__item educational-activity">
          <div class="data-list__item__header">
            <div class="data-list__item__title" tabindex="0">${educationalActivity.institution.displayName}</div>
            <div class="data-list__item__date-range" tabindex="0">
              ${this.getDisplayDateRange(educationalActivity)}
            </div>
          </div>
          <div class="data-list__item__content">
            <div class="educational-activity__degree" tabindex="0">
              ${educationalActivity.program.displayName || "Bachelors Degree"}
            </div>
          </div>
        </div>
      `);
    }
    const educationTitle = positionItems.length ? this.strings.EducationSubSectionTitle : "";
    return html`
      <section>
        <div class="section__title" tabindex="0">${educationTitle}</div>
        <div class="section__content">
          <div class="data-list">
            ${positionItems}
          </div>
        </div>
      </section>
    `;
  }
  /**
   * Render the user's professional interests
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderProfessionalInterests() {
    if (!this._professionalInterests || !this._professionalInterests.length) {
      return null;
    }
    const interestItems = [];
    for (const interest of this._professionalInterests) {
      interestItems.push(html`
        <div class="token-list__item interest interest--professional" tabindex="0">
          ${interest.displayName}
        </div>
      `);
    }
    const professionalInterests = interestItems.length ? this.strings.professionalInterestsSubSectionTitle : "";
    return html`
      <section>
        <div class="section__title" tabindex="0">${professionalInterests}</div>
        <div class="section__content">
          <div class="token-list">
            ${interestItems}
          </div>
        </div>
      </section>
    `;
  }
  /**
   * Render the user's personal interests
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderPersonalInterests() {
    if (!this._personalInterests || !this._personalInterests.length) {
      return null;
    }
    const interestItems = [];
    for (const interest of this._personalInterests) {
      interestItems.push(html`
        <div class="token-list__item interest interest--personal" tabindex="0">
          ${interest.displayName}
        </div>
      `);
    }
    const personalInterests = interestItems.length ? this.strings.personalInterestsSubSectionTitle : "";
    return html`
      <section>
        <div class="section__title" tabindex="0">${personalInterests}</div>
        <div class="section__content">
          <div class="token-list">
            ${interestItems}
          </div>
        </div>
      </section>
    `;
  }
  /**
   * Render the user's birthday
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCardProfile
   */
  renderBirthday() {
    if (!this._birthdayAnniversary || !this._birthdayAnniversary.date) {
      return null;
    }
    return html`
      <section>
        <div class="section__title" tabindex="0">Birthday</div>
        <div class="section__content">
          <div class="birthday">
            <div class="birthday__icon">
              ${getSvg(SvgIcon.Birthday)}
            </div>
            <div class="birthday__date" tabindex="0">
              ${this.getDisplayDate(new Date(this._birthdayAnniversary.date))}
            </div>
          </div>
        </div>
      </section>
    `;
  }
  isPersonalInterest(interest) {
    return interest.categories && interest.categories.includes("personal");
  }
  isProfessionalInterest(interest) {
    return interest.categories && interest.categories.includes("professional");
  }
  isBirthdayAnniversary(anniversary) {
    return anniversary.type === "birthday";
  }
  getDisplayDate(date) {
    return date.toLocaleString("default", {
      day: "numeric",
      month: "long"
    });
  }
  // tslint:disable-next-line: completed-docs
  getDisplayDateRange(event) {
    const start = new Date(event.startMonthYear).getFullYear();
    if (start === 0) {
      return null;
    }
    const end = event.endMonthYear ? new Date(event.endMonthYear).getFullYear() : this.strings.currentYearSubtitle;
    return `${start} — ${end}`;
  }
  initPostRenderOperations() {
    setTimeout(() => {
      try {
        const sections = this.shadowRoot.querySelectorAll("section");
        sections.forEach((section) => {
          this.handleTokenOverflow(section);
        });
      } catch (_a) {
      }
    }, 0);
  }
  handleTokenOverflow(section) {
    const tokenLists = section.querySelectorAll(".token-list");
    if (!tokenLists || !tokenLists.length) {
      return;
    }
    for (const tokenList of Array.from(tokenLists)) {
      const items = tokenList.querySelectorAll(".token-list__item");
      if (!items || !items.length) {
        continue;
      }
      let overflowItems = null;
      let itemRect = items[0].getBoundingClientRect();
      const tokenListRect = tokenList.getBoundingClientRect();
      const maxtop = itemRect.height * 2 + tokenListRect.top;
      for (let i = 0; i < items.length - 1; i++) {
        itemRect = items[i].getBoundingClientRect();
        if (itemRect.top > maxtop) {
          overflowItems = Array.from(items).slice(i, items.length);
          break;
        }
      }
      if (overflowItems) {
        overflowItems.forEach((i) => i.classList.add("overflow"));
        const overflowToken = document.createElement("div");
        overflowToken.classList.add("token-list__item");
        overflowToken.classList.add("token-list__item--show-overflow");
        overflowToken.tabIndex = 0;
        overflowToken.innerText = `+ ${overflowItems.length} more`;
        const revealOverflow = () => {
          overflowToken.remove();
          overflowItems.forEach((i) => i.classList.remove("overflow"));
        };
        overflowToken.addEventListener("click", (e) => {
          revealOverflow();
        });
        overflowToken.addEventListener("keydown", (e) => {
          if (e.code === "Enter") {
            revealOverflow();
          }
        });
        tokenList.appendChild(overflowToken);
      }
    }
  }
};
MgtPersonCardProfile = __decorate19([
  customElement("mgt-person-card-profile"),
  __metadata16("design:paramtypes", [Object])
], MgtPersonCardProfile);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/strings.js
var strings12 = {
  sendEmailLinkSubtitle: "Send email",
  startChatLinkSubtitle: "Start chat",
  showMoreSectionButton: "Show more",
  endOfCard: "End of the card"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-person-card/mgt-person-card.js
var __decorate20 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata17 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter20 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtPersonCard_1;
var MgtPersonCard = MgtPersonCard_1 = class MgtPersonCard2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles12;
  }
  get strings() {
    return strings12;
  }
  /**
   * Get the scopes required for the person card
   * The scopes depend on what sections are shown
   *
   * Use the `MgtPersonCard.config` object to configure
   * what sections are shown
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtPersonCard
   */
  static get requiredScopes() {
    return MgtPersonCard_1.getScopes();
  }
  static getScopes() {
    const scopes = [];
    if (this.config.sections.files) {
      scopes.push("Sites.Read.All");
    }
    if (this.config.sections.mailMessages) {
      scopes.push("Mail.ReadBasic");
    }
    if (this.config.sections.organization) {
      scopes.push("User.Read.All");
      if (typeof this.config.sections.organization !== "boolean" && this.config.sections.organization.showWorksWith) {
        scopes.push("People.Read.All");
      }
    }
    if (this.config.sections.profile) {
      scopes.push("User.Read.All");
    }
    if (this.config.useContactApis) {
      scopes.push("Contacts.Read");
    }
    if (scopes.indexOf("User.Read.All") < 0) {
      scopes.push("User.ReadBasic.All");
      scopes.push("User.Read");
    }
    if (scopes.indexOf("People.Read.All") < 0) {
      scopes.push("People.Read");
    }
    return [...new Set(scopes)];
  }
  /**
   * Global configuration object for
   * all person card components
   *
   * @static
   * @type {MgtPersonCardConfig}
   * @memberof MgtPersonCard
   */
  static get config() {
    return this._config;
  }
  /**
   * Set the person details to render
   *
   * @type {IDynamicPerson}
   * @memberof MgtPersonCard
   */
  get personDetails() {
    return this._personDetails;
  }
  set personDetails(value) {
    if (this._personDetails === value) {
      return;
    }
    this._personDetails = value;
    this.personImage = this.getImage();
    this.requestStateUpdate();
  }
  /**
   * user-id property allows developer to use id value for component
   * @type {string}
   */
  get userId() {
    return this._userId;
  }
  set userId(value) {
    if (value === this._userId) {
      return;
    }
    this._userId = value;
    this.personDetails = null;
    this.state = null;
    this.requestStateUpdate();
  }
  get internalPersonDetails() {
    return this.state && this.state.person || this.personDetails;
  }
  constructor() {
    super();
    this._chatInput = "";
    this._currentSection = null;
    this._history = [];
    this.sections = [];
  }
  /**
   * Synchronizes property values when attributes change.
   *
   * @param {*} name
   * @param {*} oldValue
   * @param {*} newValue
   * @memberof MgtPersonCard
   */
  attributeChangedCallback(name, oldValue, newValue) {
    super.attributeChangedCallback(name, oldValue, newValue);
    if (oldValue === newValue) {
      return;
    }
    switch (name) {
      case "person-query":
        this.personDetails = null;
        this.state = null;
        this.requestStateUpdate();
        break;
    }
  }
  /**
   * Navigate the card to a different person.
   *
   * @protected
   * @memberof MgtPersonCard
   */
  navigate(person) {
    this._history.push({
      personDetails: this.personDetails,
      personImage: this.getImage(),
      state: this.state
    });
    this._personDetails = person;
    this.state = null;
    this.personImage = null;
    this._currentSection = null;
    this.sections = [];
    this.requestStateUpdate();
  }
  /**
   * Navigate the card back to the previous person
   *
   * @returns {void}
   * @memberof MgtPersonCard
   */
  goBack() {
    if (!this._history || !this._history.length) {
      return;
    }
    const historyState = this._history.pop();
    this._currentSection = null;
    this.state = historyState.state;
    this._personDetails = historyState.state;
    this.personImage = historyState.personImage;
    this.loadSections();
  }
  /**
   * Navigate the card back to first person and clear history
   *
   * @returns {void}
   * @memberof MgtPersonCard
   */
  clearHistory() {
    this._currentSection = null;
    if (!this._history || !this._history.length) {
      return;
    }
    const historyState = this._history[0];
    this._history = [];
    this.state = historyState.state;
    this._personDetails = historyState.state;
    this.personImage = historyState.personImage;
    this.loadSections();
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    if (!this.internalPersonDetails) {
      return this.renderNoData();
    }
    const person = this.internalPersonDetails;
    const image = this.getImage();
    if (this.hasTemplate("default")) {
      return this.renderTemplate("default", {
        person: this.internalPersonDetails,
        personImage: image
      });
    }
    const navigationTemplate = this._history && this._history.length ? html`
            <div class="nav">
              <div class="nav__back" tabindex="0" @keydown=${(e) => {
      e.code === "Enter" ? this.goBack() : "";
    }} @click=${() => this.goBack()}>${getSvg(SvgIcon.Back)}</div>
            </div>
          ` : null;
    let personDetailsTemplate = this.renderTemplate("person-details", {
      person: this.internalPersonDetails,
      personImage: image
    });
    if (!personDetailsTemplate) {
      const personTemplate = this.renderPerson();
      const contactIconsTemplate = this.renderContactIcons(person);
      personDetailsTemplate = html`
        ${personTemplate} ${contactIconsTemplate}
      `;
    }
    const expandedDetailsTemplate = this.isExpanded ? this.renderExpandedDetails() : this.renderExpandedDetailsButton();
    this._windowHeight = window.innerHeight && document.documentElement.clientHeight ? Math.min(window.innerHeight, document.documentElement.clientHeight) : window.innerHeight || document.documentElement.clientHeight;
    if (this._windowHeight < 250) {
      this._smallView = true;
    }
    const tabLocker = this.lockTabNavigation ? html`<div @keydown=${this.handleEndOfCard} aria-label=${this.strings.endOfCard} tabindex="0" id="end-of-container"></div>` : html``;
    return html`
      <div class="root" dir=${this.direction}>
      <div class=${this._smallView ? "small" : ""}>
          ${navigationTemplate}
          <div class="person-details-container">${personDetailsTemplate}</div>
          <div class="expanded-details-container">${expandedDetailsTemplate}</div>
          ${tabLocker}
        </div>
      </div>
    `;
  }
  handleEndOfCard(e) {
    if (e && e.code === "Tab") {
      const endOfCardEl = this.renderRoot.querySelector("#end-of-container");
      if (endOfCardEl) {
        endOfCardEl.blur();
        const imageCardEl = this.renderRoot.querySelector("mgt-person");
        if (imageCardEl) {
          imageCardEl.focus();
        }
      }
    }
  }
  /**
   * Render the state when no data is available.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderNoData() {
    return this.renderTemplate("no-data", null) || html``;
  }
  /**
   * Render a display image for the person.
   *
   * @protected
   * @param {*} image
   * @memberof MgtPersonCard
   */
  renderPerson() {
    const avatarSize = "large";
    return html`
      <mgt-person
        tabindex="0"
        class="person-image"
        .personDetails=${this.internalPersonDetails}
        .personImage=${this.getImage()}
        .personPresence=${this.personPresence}
        .showPresence=${this.showPresence}
        .avatarSize=${avatarSize}
        .view=${ViewType.threelines}
        .line2Property=${"jobTitle"}
        .line3Property=${"department"}
      ></mgt-person>
    `;
  }
  /**
   * Render person subtitle.
   *
   * @protected
   * @param {IDynamicPerson} person
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderPersonSubtitle(person) {
    person = person || this.internalPersonDetails;
    if (!person.department) {
      return;
    }
    return html`
      <div class="department">${person.department}</div>
    `;
  }
  /**
   * Render the various icons for contacting the person.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderContactIcons(person) {
    if (this.isExpanded) {
      return;
    }
    person = person || this.internalPersonDetails;
    const userPerson = person;
    let email;
    if (getEmailFromGraphEntity(person)) {
      email = html`
        <div class="icon" @click=${() => this.emailUser()} tabindex=0>
          ${getSvg(SvgIcon.SmallEmail)}
          <span>${this.strings.sendEmailLinkSubtitle}</span>
        </div>
      `;
    }
    let chat;
    if (userPerson.userPrincipalName) {
      chat = html`
        <div class="icon" @click=${() => this.chatUser()} tabindex=0>
          ${getSvg(SvgIcon.SmallChat)}
          <span>${this.strings.startChatLinkSubtitle}</span>
        </div>
      `;
    }
    return html`
      <div class="base-icons">
        ${email} ${chat}
      </div>
    `;
  }
  /**
   * Render the button used to expand the expanded details.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderExpandedDetailsButton() {
    return html`
      <div 
        class="expanded-details-button" 
        @click=${() => this.showExpandedDetails()} 
        @keydown=${this.handleKeyDown}
        tabindex=0>
          ${getSvg(SvgIcon.ExpandDown)}
      </div>
    `;
  }
  /**
   * Render expanded details.
   *
   * @protected
   * @param {IDynamicPerson} [person]
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderExpandedDetails(person) {
    if (!this.state && this.isStateLoading) {
      return html`
        <div class="loading">
          <mgt-spinner></mgt-spinner>
        </div>
      `;
    }
    const provider = Providers.globalProvider;
    if (provider.state === ProviderState.SignedOut) {
      this.loadSections();
    }
    person = person || this.internalPersonDetails;
    const sectionNavTemplate = this.renderSectionNavigation();
    const currentSectionTemplate = this.renderCurrentSection();
    return html`
      <div class="section-nav">
        ${sectionNavTemplate}
      </div>
      <div class="section-host ${this._smallView ? "small" : ""}" @wheel=${(e) => this.handleSectionScroll(e)} tabindex=0>
        ${currentSectionTemplate}
      </div>
    `;
  }
  /**
   * Render the navigation ribbon for subsections
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderSectionNavigation() {
    if (!this.sections || this.sections.length < 2 && !this.hasTemplate("additional-details")) {
      return;
    }
    const currentSectionIndex = this._currentSection ? this.sections.indexOf(this._currentSection) : -1;
    const navIcons = this.sections.map((section, i) => {
      const classes = classMap({
        active: i === currentSectionIndex,
        "section-nav__icon": true
      });
      const tagName = section.tagName;
      const ariaLabel = tagName.substring(16, tagName.length).toLowerCase();
      return html`
        <button
          aria-label=${ariaLabel}
          tabindex=0
          class=${classes}
          @click=${() => this.updateCurrentSection(section)}>
            ${section.renderIcon()}</button>
      `;
    });
    const overviewClasses = classMap({
      active: currentSectionIndex === -1,
      "section-nav__icon": true
    });
    return html`
      <button 
        aria-label="overview"
        tabindex=0 
        class=${overviewClasses}
        @click=${() => this.updateCurrentSection(null)}>
          ${getSvg(SvgIcon.Overview)}
      </button>
      ${navIcons}
    `;
  }
  /**
   * Render the default section with compact views for each subsection.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderOverviewSection() {
    function handleKeyDown(e, section) {
      e.code === "Enter" ? this.updateCurrentSection(section) : "";
    }
    const compactTemplates = this.sections.map((section) => html`
        <div class="section">
          <div class="section__header">
            <div class="section__title" tabindex="0">${section.displayName}</div>
            <a 
              class="section__show-more"
              tabindex=0
              @keydown=${(e) => handleKeyDown(e, section)}
              @click=${() => this.updateCurrentSection(section)}>
                ${this.strings.showMoreSectionButton}</a>
          </div>
          <div class="section__content">${section.asCompactView()}</div>
        </div>
      `);
    const additionalDetails = this.renderTemplate("additional-details", {
      person: this.internalPersonDetails,
      personImage: this.getImage(),
      state: this.state
    });
    if (additionalDetails) {
      compactTemplates.splice(1, 0, html`
          <div class="section">
            <div class="additional-details">${additionalDetails}</div>
          </div>
        `);
    }
    return html`
      <div class="sections">
        ${compactTemplates}
      </div>
    `;
  }
  /**
   * Render the actively selected section.
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtPersonCard
   */
  renderCurrentSection() {
    if ((!this.sections || !this.sections.length) && !this.hasTemplate("additional-details")) {
      return;
    }
    if (this.sections.length === 1 && !this.hasTemplate("additional-details")) {
      return html`
        ${this.sections[0].asFullView()}
      `;
    }
    if (!this._currentSection) {
      return this.renderOverviewSection();
    }
    return html`
      ${this._currentSection.asFullView()}
    `;
  }
  /**
   * load state into the component
   *
   * @protected
   * @returns
   * @memberof MgtPersonCard
   */
  loadState() {
    var _a;
    return __awaiter20(this, void 0, void 0, function* () {
      if (this.state) {
        return;
      }
      if (!this.personDetails && this.inheritDetails) {
        let parent2 = this.parentElement;
        while (parent2 && parent2.tagName !== "MGT-PERSON") {
          parent2 = parent2.parentElement;
        }
        let parentPerson = parent2.personDetails || parent2["personDetailsInternal"];
        if (parent2 && parentPerson) {
          this.personDetails = parentPerson;
          this.personImage = parent2.personImage;
        }
      }
      const provider = Providers.globalProvider;
      if (!provider || provider.state !== ProviderState.SignedIn) {
        return;
      }
      const graph = provider.graph.forComponent(this);
      this.isStateLoading = true;
      if (!this._me) {
        this._me = yield Providers.me();
      }
      if (this.personDetails) {
        const user = this.personDetails;
        const id = user.userPrincipalName || user.id;
        if (id && !getEmailFromGraphEntity(user)) {
          const person = yield getUserWithPhoto(graph, id);
          this.personDetails = person;
          this.personImage = this.getImage();
        }
      } else if (this.userId || this.personQuery === "me") {
        const person = yield getUserWithPhoto(graph, this.userId);
        this.personDetails = person;
        this.personImage = this.getImage();
      } else if (this.personQuery) {
        const people = yield findPeople(graph, this.personQuery, 1);
        if (people && people.length) {
          this.personDetails = people[0];
          getPersonImage(graph, this.personDetails, MgtPersonCard_1.config.useContactApis).then((image) => {
            if (image) {
              this.personDetails.personImage = image;
              this.personImage = image;
            }
          });
        }
      }
      const defaultPresence = {
        activity: "Offline",
        availability: "Offline",
        id: null
      };
      if (!this.personPresence && this.showPresence) {
        try {
          if (this.personDetails && this.personDetails.id) {
            getUserPresence(graph, this.personDetails.id).then((presence) => {
              this.personPresence = presence;
            });
          } else {
            this.personPresence = defaultPresence;
          }
        } catch (_) {
          this.personPresence = defaultPresence;
        }
      }
      if ((_a = this.personDetails) === null || _a === void 0 ? void 0 : _a.id) {
        this.state = yield getPersonCardGraphData(graph, this.personDetails, this._me === this.personDetails.id, MgtPersonCard_1.config);
      }
      this.loadSections();
      this.isStateLoading = false;
    });
  }
  /**
   * Send a chat message to the user from the quick message input.
   *
   * @protected
   * @returns {void}
   * @memberof MgtPersonCard
   */
  sendQuickMessage() {
    const message = this._chatInput.trim();
    if (!message || !message.length) {
      return;
    }
    this.chatUser(message);
  }
  /**
   * Use the mailto: protocol to initiate a new email to the user.
   *
   * @protected
   * @memberof MgtPersonCard
   */
  emailUser() {
    const user = this.internalPersonDetails;
    if (user) {
      const email = getEmailFromGraphEntity(user);
      if (email) {
        window.open("mailto:" + email, "_blank", "noreferrer");
      }
    }
  }
  /**
   * Use the tel: protocol to initiate a new call to the user.
   *
   * @protected
   * @memberof MgtPersonCard
   */
  callUser() {
    const user = this.personDetails;
    const person = this.personDetails;
    if (user && user.businessPhones && user.businessPhones.length) {
      const phone = user.businessPhones[0];
      if (phone) {
        window.open("tel:" + phone, "_blank", "noreferrer");
      }
    } else if (person && person.phones && person.phones.length) {
      const businessPhones = this.getPersonBusinessPhones(person);
      const phone = businessPhones[0];
      if (phone) {
        window.open("tel:" + phone, "_blank", "noreferrer");
      }
    }
  }
  /**
   * Initiate a chat message to the user via deeplink.
   *
   * @protected
   * @memberof MgtPersonCard
   */
  chatUser(message = null) {
    const user = this.personDetails;
    if (user && user.userPrincipalName) {
      const users = user.userPrincipalName;
      let url = `https://teams.microsoft.com/l/chat/0/0?users=${users}`;
      if (message && message.length) {
        url += `&message=${message}`;
      }
      const openWindow = () => window.open(url, "_blank", "noreferrer");
      if (TeamsHelper.isAvailable) {
        TeamsHelper.executeDeepLink(url, (status) => {
          if (!status) {
            openWindow();
          }
        });
      } else {
        openWindow();
      }
    }
  }
  /**
   * Display the expanded details panel.
   *
   * @protected
   * @memberof MgtPersonCard
   */
  showExpandedDetails() {
    const root2 = this.renderRoot.querySelector(".root");
    if (root2 && root2.animate) {
      root2.animate([
        {
          height: "auto",
          transformOrigin: "top left"
        },
        {
          height: "auto",
          transformOrigin: "top left"
        }
      ], {
        duration: 1e3,
        easing: "ease-in-out",
        fill: "both"
      });
    }
    this.isExpanded = true;
    this.fireCustomEvent("expanded", null, true);
  }
  loadSections() {
    this.sections = [];
    if (!this.internalPersonDetails) {
      return;
    }
    const contactSections = new MgtPersonCardContact(this.internalPersonDetails);
    if (contactSections.hasData) {
      this.sections.push(contactSections);
    }
    if (!this.state) {
      return;
    }
    const { person, directReports, messages, files, profile } = this.state;
    if (MgtPersonCard_1.config.sections.organization && (person && person.manager || directReports && directReports.length)) {
      this.sections.push(new MgtPersonCardOrganization(this.state, this._me));
    }
    if (MgtPersonCard_1.config.sections.mailMessages && messages && messages.length) {
      this.sections.push(new MgtPersonCardMessages(messages));
    }
    if (MgtPersonCard_1.config.sections.files && files && files.length) {
      this.sections.push(new MgtPersonCardFiles(files));
    }
    if (MgtPersonCard_1.config.sections.profile && profile) {
      const profileSection = new MgtPersonCardProfile(profile);
      if (profileSection.hasData) {
        this.sections.push(profileSection);
      }
    }
  }
  getImage() {
    if (this.personImage) {
      return this.personImage;
    }
    const person = this.personDetails;
    return person && person.personImage ? person.personImage : null;
  }
  getPersonBusinessPhones(person) {
    const phones = person.phones;
    const businessPhones = [];
    for (const p of phones) {
      if (p.type === "business") {
        businessPhones.push(p.number);
      }
    }
    return businessPhones;
  }
  updateCurrentSection(section) {
    const sectionHost = this.renderRoot.querySelector(".section-host");
    sectionHost.scrollTop = 0;
    this._currentSection = section;
    this.requestUpdate();
  }
  handleSectionScroll(e) {
    const target = this.renderRoot.querySelector(".section-host");
    if (target) {
      if (!(e.deltaY < 0 && target.scrollTop === 0) && !(e.deltaY > 0 && target.clientHeight + target.scrollTop >= target.scrollHeight - 1)) {
        e.stopPropagation();
      }
    }
  }
  handleKeyDown(e) {
    if (e) {
      if (e.keyCode === 13) {
        this.showExpandedDetails();
      }
    }
  }
};
MgtPersonCard._config = {
  sections: {
    files: true,
    mailMessages: true,
    organization: { showWorksWith: true },
    profile: true
  },
  useContactApis: true
};
__decorate20([
  property({
    attribute: "person-details",
    type: Object
  }),
  __metadata17("design:type", Object),
  __metadata17("design:paramtypes", [Object])
], MgtPersonCard.prototype, "personDetails", null);
__decorate20([
  property({
    attribute: "person-query"
  }),
  __metadata17("design:type", String)
], MgtPersonCard.prototype, "personQuery", void 0);
__decorate20([
  property({
    attribute: "lock-tab-navigation",
    type: Boolean
  }),
  __metadata17("design:type", Boolean)
], MgtPersonCard.prototype, "lockTabNavigation", void 0);
__decorate20([
  property({
    attribute: "user-id"
  }),
  __metadata17("design:type", String),
  __metadata17("design:paramtypes", [String])
], MgtPersonCard.prototype, "userId", null);
__decorate20([
  property({
    attribute: "person-image",
    type: String
  }),
  __metadata17("design:type", String)
], MgtPersonCard.prototype, "personImage", void 0);
__decorate20([
  property({
    attribute: "fetch-image",
    type: Boolean
  }),
  __metadata17("design:type", Boolean)
], MgtPersonCard.prototype, "fetchImage", void 0);
__decorate20([
  property({
    attribute: "is-expanded",
    type: Boolean
  }),
  __metadata17("design:type", Boolean)
], MgtPersonCard.prototype, "isExpanded", void 0);
__decorate20([
  property({
    attribute: "inherit-details",
    type: Boolean
  }),
  __metadata17("design:type", Boolean)
], MgtPersonCard.prototype, "inheritDetails", void 0);
__decorate20([
  property({
    attribute: "show-presence",
    type: Boolean
  }),
  __metadata17("design:type", Boolean)
], MgtPersonCard.prototype, "showPresence", void 0);
__decorate20([
  property({
    attribute: "person-presence",
    type: Object
  }),
  __metadata17("design:type", Object)
], MgtPersonCard.prototype, "personPresence", void 0);
__decorate20([
  internalProperty(),
  __metadata17("design:type", Object)
], MgtPersonCard.prototype, "state", void 0);
__decorate20([
  internalProperty(),
  __metadata17("design:type", Boolean)
], MgtPersonCard.prototype, "isStateLoading", void 0);
MgtPersonCard = MgtPersonCard_1 = __decorate20([
  customElement("mgt-person-card"),
  __metadata17("design:paramtypes", [])
], MgtPersonCard);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks/mgt-tasks-css.js
var styles18 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--task-border:1px solid #e1dfdd;--task-complete-border:2px dotted #e1dfdd;--task-new-add-button-disabled-background:#edebe9;--task-icon-color:#000000}.mgt-dark{--task-border:1px solid #717171;--task-complete-border:2px dotted #717171;--task-new-add-button-disabled-background:#4f4f4f;--task-icon-color:#ffffff}:host{font-family:var(--default-font-family);display:flex;flex-direction:column;background-color:var(--background-color-sub1,#faf9f8);padding:var(--tasks-padding,12px);color:var(--color-sub1,#323130)}:host input[type=date]::-webkit-calendar-picker-indicator,:host input[type=date]::-webkit-inner-spin-button{display:none;-webkit-appearance:none}:host .TaskIcon{font-family:FabricMDL2Icons;user-select:none;-moz-user-select:none;-ms-user-select:none}:host .TaskIcon.Divider{vertical-align:initial;margin:0 12px;font-size:16px}:host .Header{padding:var(--tasks-header-padding,0);margin:var(--tasks-header-margin,0 0 12px 0);padding:var(--tasks-title-padding,0);display:flex;align-items:center;justify-content:space-between}:host .Header .header__loading{max-width:90px;width:100%;height:20px;background:#f2f2f2}:host .Header select{font-family:var(--default-font-family, "Segoe UI");font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px);border:none;-moz-appearance:none;-webkit-appearance:none;cursor:pointer}:host .Header select::-ms-expand{display:none}:host .Header .PlanTitle{font-family:var(--default-font-family, "Segoe UI");font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px)}:host .Header .AddBar{display:flex}:host .Header .AddBar .AddBarItem{flex:1 1 auto}:host .Header .NewTaskDue{display:flex}:host .Header .NewTaskDue input{flex:1 1 auto;background-color:var(--background-color-sub1,#faf9f8)}:host .Header .TitleCont{flex:1 1 auto;display:flex;align-items:center;height:var(--tasks-new-button-height,34px)}:host .Header .NewTaskButton{flex:0 0 auto;display:flex;justify-content:center;align-items:center;width:var(--tasks-new-button-width,auto);height:var(--tasks-new-button-height,32px);border-radius:2px;padding:0 20px;background:var(--tasks-new-button-background,#0078d4);border:var(--tasks-new-button-border,solid 1px transparent);color:var(--tasks-new-button-color,#fff);user-select:none;-moz-user-select:none;-ms-user-select:none;cursor:pointer}:host .Header .NewTaskButton span{font-size:14px;font-weight:600;letter-spacing:.1px;line-height:14px}:host .Header .NewTaskButton .TaskIcon{margin-right:8px}:host .Header .NewTaskButton.hidden{visibility:hidden}:host .Header .NewTaskButton:hover{background:var(--tasks-new-button-hover-background,#106ebe)}:host .Header .NewTaskButton:active{background:var(--tasks-new-button-active-background,#005a9e)}:host .Task{position:relative;margin:var(--task-margin,0 0 18px 0);padding:var(--task-padding,0 0 0 0);background-color:var(--tasks-background-color,var(--background-color,#fff));border:var(--task-border,1px solid #e1dfdd);border-radius:8px}:host .Task .TaskContent{display:flex}:host .Task .TaskContent .Divider{position:absolute;height:2px;left:0;right:0;bottom:0;background-color:var(--background-color-sub1,#faf9f8)}:host .Task .TaskContent .TaskDetailsContainer{flex:1;display:grid;display:-ms-grid;grid-template-columns:auto 1fr;-ms-grid-columns:auto 1fr;grid-template-rows:auto auto auto auto;-ms-grid-rows:auto auto auto auto;justify-content:space-between;align-items:flex-start;color:var(--task-detail-color,var(--color-sub2,#717171));font-size:12px;font-weight:600;white-space:normal;margin-bottom:12px}:host .Task .TaskContent .TaskDetailsContainer .TaskDetail{width:100%;height:100%;margin:4px 24px 6px 0;display:flex;justify-content:flex-start;align-items:center}:host .Task .TaskContent .TaskDetailsContainer .TaskTitle{color:var(--task-title-color,var(--title-color-subtitle,#323130));font-size:14px;font-weight:600;grid-row:1;-ms-grid-row:1;grid-column:1/3;-ms-grid-column:1;-ms-grid-column-span:2;margin:22px 0 4px}:host .Task .TaskContent .TaskDetailsContainer .TaskGroup{min-height:24px;grid-row:2;-ms-grid-row:2;grid-column:1;-ms-grid-column:1}:host .Task .TaskContent .TaskDetailsContainer .TaskBucket{min-height:24px;grid-row:2;-ms-grid-row:2;grid-column:2;-ms-grid-column:2}:host .Task .TaskContent .TaskDetailsContainer .TaskDue{justify-content:flex-end;align-items:flex-start;grid-row:4;-ms-grid-row:4;grid-column:1/3;-ms-grid-column:1;-ms-grid-column-span:2}:host .Task .TaskContent .TaskDetailsContainer.tablet{grid-template-columns:1fr .5fr 1fr .5fr;-ms-grid-columns:1fr .5fr 1fr .5fr;grid-template-rows:auto auto;-ms-grid-rows:auto auto}:host .Task .TaskContent .TaskDetailsContainer.tablet.NoPlan{grid-template-columns:0 1fr 1fr 1fr;-ms-grid-columns:0 1fr 1fr 1fr}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskDetail{margin:4px 24px 6px 0}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskTitle{grid-row:1;-ms-grid-row:1;grid-column:1/5;-ms-grid-column:1;-ms-grid-column-span:4}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskGroup{grid-row:2;-ms-grid-row:2;grid-column:1;-ms-grid-column:1}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskBucket{grid-row:2;-ms-grid-row:2;grid-column:2;-ms-grid-column:2}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskAssignee{grid-row:2;-ms-grid-row:2;grid-column:3;-ms-grid-column:3}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskDue{justify-content:flex-start;align-items:center;grid-row:2;-ms-grid-row:2;grid-column:4;-ms-grid-column:4}:host .Task .TaskContent .TaskDetailsContainer.desktop{grid-template-columns:2fr 1fr .5fr 1fr .5fr;-ms-grid-columns:2fr 1fr .5fr 1fr .5fr;grid-template-rows:auto;-ms-grid-rows:auto;margin:0}:host .Task .TaskContent .TaskDetailsContainer.desktop.NoPlan{grid-template-columns:2fr 0 1fr 1fr 1fr;-ms-grid-columns:2fr 0 1fr 1fr 1fr}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskDetail{margin:0 24px 0 0}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskTitle{padding:0;grid-row:1;-ms-grid-row:1;grid-column:1;-ms-grid-column:1}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskGroup{min-height:61px;grid-row:1;-ms-grid-row:1;grid-column:2;-ms-grid-column:2}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskBucket{grid-row:1;-ms-grid-row:1;grid-column:3;-ms-grid-column:3}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskAssignee{grid-row:1;-ms-grid-row:1;grid-column:4;-ms-grid-column:4}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskDue{justify-content:flex-start;align-items:center;grid-row:1;-ms-grid-row:1;grid-column:5;-ms-grid-column:5}:host .Task .TaskContent .TaskDetailsContainer svg{vertical-align:middle;margin-right:4px}:host .Task .TaskContent .TaskDetailsContainer svg path{fill:var(--task-detail-color,var(--color-sub2,#717171))}:host .Task .TaskContent .TaskDetailsContainer select,:host .Task .TaskContent .TaskDetailsContainer span{vertical-align:middle;color:var(--color-sub2,#717171)}:host .Task .TaskContent .TaskDetailsContainer .TaskIcon{color:#797775;margin-right:8px}:host .Task .TaskContent .TaskDetailsContainer mgt-people{color:var(--task-detail-color,var(--color-sub2,#717171));font-size:16px}:host .Task .TaskContent .TaskDetailsContainer mgt-person{display:inline-block}:host .Task .TaskContent .TaskDetailsContainer .Picker{background-color:var(--background-color-sub1,#faf9f8);-webkit-background-clip:padding-box;-moz-background-clip:padding-box;background-clip:padding-box;width:var(--mgt-flyout-set-width,350px);color:var(--task-detail-color,var(--color-sub2,#717171))}:host .Task .TaskContent .TaskDetailsContainer .Picker mgt-people-picker{--separator-margin:0px 10px 0px 10px}:host .Task .TaskContent .TaskDetailsContainer input,:host .Task .TaskContent .TaskDetailsContainer select{color:var(--task-detail-color,var(--color-sub2,#717171));font-size:.9em;background-color:var(--background-color-sub1,#faf9f8)}:host .Task .TaskCheckContainer{font-family:FabricMDL2Icons;display:inline-block;border-radius:50%;color:#fff;cursor:pointer;display:flex;align-items:var(--task-icon-alignment,flex-start);margin:21px 10px 20px 20px;user-select:none;-moz-user-select:none;-ms-user-select:none}:host .Task .TaskCheckContainer.Complete .TaskCheck{background-color:var(--task-icon-background-completed,#00ad56);border:var(--task-icon-border-completed,solid 1px #fff);color:var(--task-icon-color-completed,#fff)}:host .Task .TaskCheckContainer.Complete .TaskContent .TaskDetailsContainer .TaskTitle{text-decoration:line-through;color:var(--color-sub3,#727170)}:host .Task .TaskCheckContainer .TaskCheck{font-family:FabricMDL2Icons;font-size:12px;display:inline-block;width:18px;height:18px;border-radius:var(--task-icon-border-radius,50%);border:var(--task-icon-border,solid 1px #797775);color:var(--task-icon-color,#000);display:flex;justify-content:center;align-items:center;background-color:var(--task-icon-background,transparent);user-select:none;-moz-user-select:none;-ms-user-select:none}:host .Task .TaskCheckContainer .TaskCheck.Loading .TaskCheckContent{animation:rotateIcon 2s infinite linear}:host .Task .TaskOptions{cursor:pointer;user-select:none;-moz-user-select:none;-ms-user-select:none;margin:16px 8px 0 0}:host .Task.ReadOnly .TaskCheckContainer{cursor:default}:host .Task.Complete{background:var(--task-complete-background,var(--background-color-sub1,#faf9f8));border:var(--task-complete-border,2px dotted #e1dfdd)}:host .Task.Complete .TaskContent .TaskDetailsContainer .TaskTitle{text-decoration:line-through;color:var(--color-sub3,#727170)}:host .Task.NewTask{margin:var(--task-new-margin,var(--task-margin,0 0 24px 0));display:flex;flex-direction:row}:host .Task.NewTask .SelfAssign{display:none}:host .Task.NewTask .AssignTo{border:0;background:0 0}:host .Task.NewTask .FakeCheckBox{width:15px;height:15px;cursor:pointer;margin:0 5px 0 5px}:host .Task.NewTask .FakeCheckBox::after{font-family:FabricMDL2Icons;content:'\uE739'}:host .Task.NewTask .FakeCheckBox~:checked{font-family:FabricMDL2Icons;content:'\uE73A'}:host .Task.NewTask .TaskContent{flex:1 1 auto;align-content:center;vertical-align:middle;margin:0 0 0 12px}:host .Task.NewTask .TaskContent .TaskDetailsContainer{display:flex;flex-direction:column;align-items:stretch;margin:0}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle{display:flex;height:32px;padding:2px}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input{flex:1;font-family:var(--default-font-family, "Segoe UI");margin:var(--task-new-input-margin,0 24px 0 16px);padding:var(--task-new-input-padding,6px);font-size:var(--task-new-input-font-size,14px);font-weight:600;border:var(--task-new-border,none);border-bottom:1px solid #e1dfdd;outline:0;border-radius:0;background-color:var(--background-color-sub1,#faf9f8)}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input:hover{border-bottom:1px solid #106ebe}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input:active{border-bottom:1px solid #005a9e}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskTitle input:focus{border-bottom:1px solid #0078d4}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails{display:flex;justify-content:stretch;align-items:center;flex-wrap:wrap;margin:14px 0 14px 4px}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskGroup{margin:8px 16px}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskBucket{margin:8px 16px}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskDue{margin:8px 16px}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskAssignee{margin:8px 16px;min-width:80px}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails .TaskPeople label{display:flex;align-content:center;align-items:center}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails input,:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails select{font-family:var(--default-font-family);font-size:12px;font-weight:600;border:var(--task-new-select-border,none);border-bottom:1px solid #e1dfdd}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails input:hover,:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails select:hover{border-bottom:1px solid #106ebe}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails input:active,:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails select:active{border-bottom:1px solid #005a9e}:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails input:focus,:host .Task.NewTask .TaskContent .TaskDetailsContainer .TaskDetails select:focus{border-bottom:1px solid #0078d4}:host .Task.NewTask .TaskAddButtonContainer{margin-right:28px}:host .Task.NewTask .TaskAddButtonContainer .TaskAdd,:host .Task.NewTask .TaskAddButtonContainer .TaskCancel{justify-content:center;align-items:center;cursor:pointer;flex:0 0 auto;display:flex;width:var(--tasks-new-button-width,100px);height:var(--tasks-new-button-height,32px);border-radius:4px;border:var(--tasks-new-button-border,solid 1px #e5e5e5);font-family:var(--default-font-family, "Segoe UI");font-size:14px;line-height:20px}:host .Task.NewTask .TaskAddButtonContainer .TaskAdd{color:#fff;background:var(--task-new-add-button-background,#0078d4);margin:22px 0 12px auto}:host .Task.NewTask .TaskAddButtonContainer .TaskCancel{color:var(--task-new-cancel-button-color,var(--color-sub1,#323130))}:host .Task.NewTask .TaskAddButtonContainer.Disabled .TaskAdd{color:var(--task-new-cancel-button-color,var(--color-sub1,#323130));background:var(--task-new-add-button-disabled-background,#fff);cursor:default}:host .Task.LoadingTask .TaskCheckContainer{cursor:default}:host .Task.LoadingTask .TaskDetails{display:flex}:host .Task.LoadingTask .TaskCheck{background:#f2f2f2;border-color:#f2f2f2;cursor:default}:host .Task.LoadingTask .TaskDetailIcon{width:16px;height:16px;margin:5px;background:#f2f2f2}:host .Task.LoadingTask .TaskTitle{background:#f2f2f2;max-width:400px;height:20px;margin-right:20px!important}:host .Task.LoadingTask .TaskDetail{margin-right:12px;display:flex;flex-direction:row;align-items:center}:host .Task.LoadingTask .TaskDetailName{width:81px;height:10px;background:#f2f2f2}@keyframes rotateIcon{from{transform:rotate(0)}to{transform:rotate(360deg)}}[dir=rtl] mgt-arrow-options{--arrow-options-left:auto}[dir=rtl] mgt-dot-options{--dot-options-translateX:translateX(60px)}[dir=rtl] .TaskDetails{margin-right:14px!important}[dir=rtl] .TaskIcon{margin-left:8px}[dir=rtl] .TaskDetail svg{margin-left:4px}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host svg{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks/mgt-tasks.graph.planner.js
var __awaiter21 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function addPlannerTask(graph, newTask) {
  return graph.api("/planner/tasks").header("Cache-Control", "no-store").middlewareOptions(prepScopes("Group.ReadWrite.All")).post(newTask);
}
function assignPeopleToPlannerTask(graph, taskId, people, eTag) {
  return setPlannerTaskDetails(graph, taskId, {
    assignments: people
  }, eTag);
}
function removePlannerTask(graph, taskId, eTag) {
  return graph.api(`/planner/tasks/${taskId}`).header("Cache-Control", "no-store").header("If-Match", eTag).middlewareOptions(prepScopes("Group.ReadWrite.All")).delete();
}
function setPlannerTaskComplete(graph, taskId, eTag) {
  return setPlannerTaskDetails(graph, taskId, {
    percentComplete: 100
  }, eTag);
}
function setPlannerTaskIncomplete(graph, taskId, eTag) {
  return setPlannerTaskDetails(graph, taskId, {
    percentComplete: 0
  }, eTag);
}
function setPlannerTaskDetails(graph, taskId, details, eTag) {
  return __awaiter21(this, void 0, void 0, function* () {
    return yield graph.api(`/planner/tasks/${taskId}`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Group.ReadWrite.All")).header("If-Match", eTag).patch(JSON.stringify(details));
  });
}
function getPlansForGroup(graph, groupId) {
  return __awaiter21(this, void 0, void 0, function* () {
    const scopes = "Group.Read.All";
    const uri = `/groups/${groupId}/planner/plans`;
    const plans = yield graph.api(uri).header("Cache-Control", "no-store").middlewareOptions(prepScopes(scopes)).get();
    return plans ? plans.value : null;
  });
}
function getSinglePlannerPlan(graph, planId) {
  return __awaiter21(this, void 0, void 0, function* () {
    const plan = yield graph.api(`/planner/plans/${planId}`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Group.Read.All")).get();
    return plan;
  });
}
function getBucketsForPlannerPlan(graph, planId) {
  return __awaiter21(this, void 0, void 0, function* () {
    const buckets = yield graph.api(`/planner/plans/${planId}/buckets`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Group.Read.All")).get();
    return buckets && buckets.value;
  });
}
function getAllMyPlannerPlans(graph) {
  return __awaiter21(this, void 0, void 0, function* () {
    const plans = yield graph.api("/me/planner/plans").header("Cache-Control", "no-store").middlewareOptions(prepScopes("Group.Read.All")).get();
    return plans && plans.value;
  });
}
function getTasksForPlannerBucket(graph, bucketId) {
  return __awaiter21(this, void 0, void 0, function* () {
    const tasks = yield graph.api(`/planner/buckets/${bucketId}/tasks`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Group.Read.All")).get();
    return tasks && tasks.value;
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks/mgt-tasks.graph.todo.js
var __awaiter22 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function addTodoTask(graph, newTask) {
  return __awaiter22(this, void 0, void 0, function* () {
    const { parentFolderId = null } = newTask;
    if (parentFolderId) {
      return yield graph.api(`/me/outlook/taskFolders/${parentFolderId}/tasks`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.ReadWrite")).post(newTask);
    } else {
      return yield graph.api("/me/outlook/tasks").header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.ReadWrite")).post(newTask);
    }
  });
}
function getAllMyTodoGroups(graph) {
  return __awaiter22(this, void 0, void 0, function* () {
    const groups = yield graph.api("/me/outlook/taskGroups").header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.Read")).get();
    return groups && groups.value;
  });
}
function getAllTodoTasksForFolder(graph, folderId) {
  return __awaiter22(this, void 0, void 0, function* () {
    const tasks = yield graph.api(`/me/outlook/taskFolders/${folderId}/tasks`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.Read")).get();
    return tasks && tasks.value;
  });
}
function getFoldersForTodoGroup(graph, groupId) {
  return __awaiter22(this, void 0, void 0, function* () {
    const folders = yield graph.api(`/me/outlook/taskGroups/${groupId}/taskFolders`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.Read")).get();
    return folders && folders.value;
  });
}
function getSingleTodoGroup(graph, groupId) {
  return __awaiter22(this, void 0, void 0, function* () {
    const group = yield graph.api(`/me/outlook/taskGroups/${groupId}`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.Read")).get();
    return group;
  });
}
function removeTodoTask(graph, taskId, eTag) {
  return __awaiter22(this, void 0, void 0, function* () {
    return yield graph.api(`/me/outlook/tasks/${taskId}`).header("Cache-Control", "no-store").header("If-Match", eTag).middlewareOptions(prepScopes("Tasks.ReadWrite")).delete();
  });
}
function setTodoTaskComplete(graph, taskId, eTag) {
  return __awaiter22(this, void 0, void 0, function* () {
    return yield setTodoTaskDetails(graph, taskId, {
      isReminderOn: false,
      status: "completed"
    }, eTag);
  });
}
function setTodoTaskIncomplete(graph, taskId, eTag) {
  return __awaiter22(this, void 0, void 0, function* () {
    return yield setTodoTaskDetails(graph, taskId, {
      isReminderOn: true,
      status: "notStarted"
    }, eTag);
  });
}
function setTodoTaskDetails(graph, taskId, task, eTag) {
  return __awaiter22(this, void 0, void 0, function* () {
    return yield graph.api(`/me/outlook/tasks/${taskId}`).header("Cache-Control", "no-store").header("If-Match", eTag).middlewareOptions(prepScopes("Tasks.ReadWrite")).patch(task);
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks/task-sources.js
var __awaiter23 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var TaskSourceBase = class {
  constructor(graph) {
    this.graph = BetaGraph.fromGraph(graph);
  }
};
var PlannerTaskSource = class extends TaskSourceBase {
  /**
   * returns promise with all of users plans
   *
   * @returns {Promise<ITaskGroup[]>}
   * @memberof PlannerTaskSource
   */
  getTaskGroups() {
    return __awaiter23(this, void 0, void 0, function* () {
      const plans = yield getAllMyPlannerPlans(this.graph);
      return plans.map((plan) => ({ id: plan.id, title: plan.title }));
    });
  }
  /**
   * returns promise with all of plans for group id
   *
   * @param {string} id
   * @returns {Promise<ITaskGroup[]>}
   * @memberof PlannerTaskSource
   */
  getTaskGroupsForGroup(id) {
    return __awaiter23(this, void 0, void 0, function* () {
      const plans = yield getPlansForGroup(this.graph, id);
      return plans.map((plan) => ({ id: plan.id, title: plan.title }));
    });
  }
  /**
   * returns promise single TaskGroup or plan from plan.id
   *
   * @param {string} id
   * @returns {Promise<ITaskGroup>}
   * @memberof PlannerTaskSource
   */
  getTaskGroup(id) {
    return __awaiter23(this, void 0, void 0, function* () {
      const plan = yield getSinglePlannerPlan(this.graph, id);
      return { id: plan.id, title: plan.title, _raw: plan };
    });
  }
  /**
   * returns promise with Bucket for a plan from bucket.id
   *
   * @param {string} id
   * @returns {Promise<ITaskFolder[]>}
   * @memberof PlannerTaskSource
   */
  getTaskFoldersForTaskGroup(id) {
    return __awaiter23(this, void 0, void 0, function* () {
      const buckets = yield getBucketsForPlannerPlan(this.graph, id);
      return buckets.map((bucket) => ({
        _raw: bucket,
        id: bucket.id,
        name: bucket.name,
        parentId: bucket.planId
      }));
    });
  }
  /**
   * get all task from a Bucket given task id
   *
   * @param {string} id
   * @returns {Promise<ITask[]>}
   * @memberof PlannerTaskSource
   */
  getTasksForTaskFolder(id) {
    return __awaiter23(this, void 0, void 0, function* () {
      const tasks = yield getTasksForPlannerBucket(this.graph, id);
      return tasks.map((task) => ({
        _raw: task,
        assignments: task.assignments,
        completed: task.percentComplete === 100,
        dueDate: task.dueDateTime && new Date(task.dueDateTime),
        eTag: task["@odata.etag"],
        id: task.id,
        immediateParentId: task.bucketId,
        name: task.title,
        topParentId: task.planId
      }));
    });
  }
  /**
   * set task in planner to complete state by id
   *
   * @param {string} id
   * @param {string} eTag
   * @returns {Promise<any>}
   * @memberof PlannerTaskSource
   */
  setTaskComplete(id, eTag) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield setPlannerTaskComplete(this.graph, id, eTag);
    });
  }
  /**
   * set task in planner to incomplete state by id
   *
   * @param {string} id
   * @param {string} eTag
   * @returns {Promise<any>}
   * @memberof PlannerTaskSource
   */
  setTaskIncomplete(id, eTag) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield setPlannerTaskIncomplete(this.graph, id, eTag);
    });
  }
  /**
   * add new task to bucket
   *
   * @param {ITask} newTask
   * @returns {Promise<any>}
   * @memberof PlannerTaskSource
   */
  addTask(newTask) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield addPlannerTask(this.graph, {
        assignments: newTask.assignments,
        bucketId: newTask.immediateParentId,
        dueDateTime: newTask.dueDate && newTask.dueDate.toISOString(),
        planId: newTask.topParentId,
        title: newTask.name
      });
    });
  }
  /**
   * Assigns people to task
   *
   * @param {string} id
   * @param {string} eTag
   * @param {*} people
   * @returns {Promise<any>}
   * @memberof PlannerTaskSource
   */
  assignPeopleToTask(id, eTag, people) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield assignPeopleToPlannerTask(this.graph, id, eTag, people);
    });
  }
  /**
   * remove task from bucket
   *
   * @param {string} id
   * @param {string} eTag
   * @returns {Promise<any>}
   * @memberof PlannerTaskSource
   */
  removeTask(id, eTag) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield removePlannerTask(this.graph, id, eTag);
    });
  }
  /**
   * assigns task to the signed in user
   *
   * @param {ITask} task
   * @param {string} myId
   * @returns {boolean}
   * @memberof PlannerTaskSource
   */
  isAssignedToMe(task, myId) {
    const keys2 = Object.keys(task.assignments);
    return keys2.includes(myId);
  }
};
var TodoTaskSource = class extends TaskSourceBase {
  /**
   * get all Outlook task groups
   *
   * @returns {Promise<ITaskGroup[]>}
   * @memberof TodoTaskSource
   */
  getTaskGroups() {
    return __awaiter23(this, void 0, void 0, function* () {
      const groups = yield getAllMyTodoGroups(this.graph);
      return groups.map((group) => ({
        _raw: group,
        id: group.id,
        secondaryId: group.groupKey,
        title: group.name
      }));
    });
  }
  /**
   * get a single OutlookTaskGroup from id
   *
   * @param {string} id
   * @returns {Promise<ITaskGroup>}
   * @memberof TodoTaskSource
   */
  getTaskGroup(id) {
    return __awaiter23(this, void 0, void 0, function* () {
      const group = yield getSingleTodoGroup(this.graph, id);
      return { id: group.id, secondaryId: group.groupKey, title: group.name, _raw: group };
    });
  }
  /**
   * get all OutlookTaskFolder for group by id
   *
   * @param {string} id
   * @returns {Promise<ITaskFolder[]>}
   * @memberof TodoTaskSource
   */
  getTaskFoldersForTaskGroup(id) {
    return __awaiter23(this, void 0, void 0, function* () {
      const folders = yield getFoldersForTodoGroup(this.graph, id);
      return folders.map((folder) => ({
        _raw: folder,
        id: folder.id,
        name: folder.name,
        parentId: id
      }));
    });
  }
  /**
   * gets all tasks for OutLook Task Folder by id
   *
   * @param {string} id
   * @param {string} parId
   * @returns {Promise<ITask[]>}
   * @memberof TodoTaskSource
   */
  getTasksForTaskFolder(id, parId) {
    return __awaiter23(this, void 0, void 0, function* () {
      const tasks = yield getAllTodoTasksForFolder(this.graph, id);
      return tasks.map((task) => ({
        _raw: task,
        assignments: {},
        completed: !!task.completedDateTime,
        dueDate: task.dueDateTime && new Date(task.dueDateTime.dateTime + "Z"),
        eTag: task["@odata.etag"],
        id: task.id,
        immediateParentId: id,
        name: task.subject,
        topParentId: parId
      }));
    });
  }
  /**
   * set task in planner to complete state by id
   *
   * @param {string} id
   * @param {string} eTag
   * @returns {Promise<any>}
   * @memberof TodoTaskSource
   */
  setTaskComplete(id, eTag) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield setTodoTaskComplete(this.graph, id, eTag);
    });
  }
  /**
   * Assigns people to task
   *
   * @param {string} id
   * @param {string} eTag
   * @param {*} people
   * @returns {Promise<any>}
   * @memberof PlannerTaskSource
   */
  assignPeopleToTask(id, eTag, people) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield assignPeopleToPlannerTask(this.graph, id, eTag, people);
    });
  }
  /**
   * set task in planner to incomplete state by id
   *
   * @param {string} id
   * @param {string} eTag
   * @returns {Promise<any>}
   * @memberof TodoTaskSource
   */
  setTaskIncomplete(id, eTag) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield setTodoTaskIncomplete(this.graph, id, eTag);
    });
  }
  /**
   * add new task to planner
   *
   * @param {ITask} newTask
   * @returns {Promise<any>}
   * @memberof TodoTaskSource
   */
  addTask(newTask) {
    return __awaiter23(this, void 0, void 0, function* () {
      const task = {
        parentFolderId: newTask.immediateParentId,
        subject: newTask.name
      };
      if (newTask.dueDate) {
        task.dueDateTime = {
          dateTime: newTask.dueDate.toISOString(),
          timeZone: "UTC"
        };
      }
      return yield addTodoTask(this.graph, task);
    });
  }
  /**
   * remove task from planner by id
   *
   * @param {string} id
   * @param {string} eTag
   * @returns {Promise<any>}
   * @memberof TodoTaskSource
   */
  removeTask(id, eTag) {
    return __awaiter23(this, void 0, void 0, function* () {
      return yield removeTodoTask(this.graph, id, eTag);
    });
  }
  /**
   * if task is assigned in to user logged in
   *
   * @param {ITask} task
   * @param {string} myId
   * @returns {boolean}
   * @memberof TodoTaskSource
   */
  isAssignedToMe(task, myId) {
    return true;
  }
  /**
   * returns promise with all of plans for group id
   *
   * @param {string} id
   * @returns {Promise<ITaskGroup[]>}
   * @memberof PlannerTaskSource
   */
  getTaskGroupsForGroup(id) {
    return __awaiter23(this, void 0, void 0, function* () {
      return void 0;
    });
  }
};

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-arrow-options/mgt-arrow-options-css.js
var styles19 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host,mgt-arrow-options{position:relative;font-family:var(--default-font-family)}:host .ArrowIcon,mgt-arrow-options .ArrowIcon{font-family:FabricMDL2Icons;margin:0 0 0 20px;user-select:none;-moz-user-select:none;-ms-user-select:none}:host .Header,mgt-arrow-options .Header{cursor:pointer}:host .Header:hover,mgt-arrow-options .Header:hover{color:var(--theme-primary-color)}:host .Menu,mgt-arrow-options .Menu{position:absolute;left:var(--arrow-options-left,0);box-shadow:var(--box-shadow-color,rgba(0,0,0,.092)) 0 0 40px 5px;background:var(--background-color,#fff);z-index:1;display:none;color:var(--color,#000);white-space:nowrap}:host .Menu.Open,mgt-arrow-options .Menu.Open{display:block}:host .MenuOption,mgt-arrow-options .MenuOption{padding:20px;cursor:pointer;user-select:none;-moz-user-select:none;-ms-user-select:none;display:flex;align-items:center;justify-content:stretch;justify-items:stretch}:host .MenuOption:first,mgt-arrow-options .MenuOption:first{padding:12px 20px 20px 20px}:host .MenuOption:hover,mgt-arrow-options .MenuOption:hover{background-color:var(--background-color--hover,#edebe9)}:host .MenuOption:active,mgt-arrow-options .MenuOption:active{background-color:var(--background-color--active,#e1dfdd)}:host .MenuOptionCheck,mgt-arrow-options .MenuOptionCheck{font-family:FabricMDL2Icons;color:transparent;margin-right:10px}:host .MenuOptionCheck.CurrentValue,mgt-arrow-options .MenuOptionCheck.CurrentValue{color:#0078d4}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-arrow-options/mgt-arrow-options.js
var __decorate21 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata18 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtArrowOptions = class MgtArrowOptions2 extends MgtBaseComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * user the `css` tag function.
   */
  static get styles() {
    return styles19;
  }
  constructor() {
    super();
    this.value = "";
    this.options = {};
    this._clickHandler = (e) => this.open = false;
  }
  // tslint:disable-next-line: completed-docs
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("click", this._clickHandler);
  }
  // tslint:disable-next-line: completed-docs
  disconnectedCallback() {
    window.removeEventListener("click", this._clickHandler);
    super.disconnectedCallback();
  }
  /**
   * Handles clicking for header menu, utilizing boolean switch open
   *
   * @param {MouseEvent} e attaches to Header to open menu
   * @memberof MgtArrowOptions
   */
  onHeaderClick(e) {
    const keys2 = Object.keys(this.options);
    if (keys2.length > 1) {
      e.preventDefault();
      e.stopPropagation();
      this.open = !this.open;
    }
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    return html`
      <span class="Header" @click=${(e) => this.onHeaderClick(e)}>
        <span class="CurrentValue">${this.value}</span>
      </span>
      <div class=${classMap({ Menu: true, Open: this.open, Closed: !this.open })}>
        ${this.getMenuOptions()}
      </div>
    `;
  }
  getMenuOptions() {
    const keys2 = Object.keys(this.options);
    const funcs = this.options;
    return keys2.map((opt) => html`
        <div
          class="MenuOption"
          @click="${(e) => {
      this.open = false;
      funcs[opt](e);
    }}"
        >
          <span class=${classMap({ MenuOptionCheck: true, CurrentValue: this.value === opt })}>
            \uE73E
          </span>
          <span class="MenuOptionName">${opt}</span>
        </div>
      `);
  }
};
__decorate21([
  property({ type: Boolean }),
  __metadata18("design:type", Boolean)
], MgtArrowOptions.prototype, "open", void 0);
__decorate21([
  property({ type: String }),
  __metadata18("design:type", String)
], MgtArrowOptions.prototype, "value", void 0);
__decorate21([
  property({ type: Object }),
  __metadata18("design:type", Object)
], MgtArrowOptions.prototype, "options", void 0);
MgtArrowOptions = __decorate21([
  customElement("mgt-arrow-options"),
  __metadata18("design:paramtypes", [])
], MgtArrowOptions);

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-dot-options/mgt-dot-options-css.js
var styles20 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}:host,mgt-dot-options{font-family:var(--default-font-family)}:host .DotIcon,mgt-dot-options .DotIcon{display:inline-block;font-family:FabricMDL2Icons;min-width:40px;min-height:30px;text-align:center;line-height:30px}:host .Menu,mgt-dot-options .Menu{position:absolute;box-shadow:var(--box-shadow-color,rgba(0,0,0,.092)) 0 0 40px 5px;background:var(--background-color,#fff);z-index:1;display:none;color:var(--color,#000);white-space:nowrap;transform:var(--dot-options-translateX,translateX(-50px))}:host .DotMenu.Open .Menu,mgt-dot-options .DotMenu.Open .Menu{display:block}:host .DotMenu .DotItem,mgt-dot-options .DotMenu .DotItem{direction:ltr;text-align:left;padding:10px 10px 8px 10px}:host .DotMenu .DotItem:hover,mgt-dot-options .DotMenu .DotItem:hover{background:var(--background-color--hover,#edebe9)}:host .DotMenu .DotItem:active,mgt-dot-options .DotMenu .DotItem:active{background:var(--background-color--active,#e1dfdd)}:host .DotMenu .DotItemName,mgt-dot-options .DotMenu .DotItemName{direction:rtl}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/sub-components/mgt-dot-options/mgt-dot-options.js
var __decorate22 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata19 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var MgtDotOptions = class MgtDotOptions2 extends MgtBaseComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * user the `css` tag function.
   */
  static get styles() {
    return styles20;
  }
  constructor() {
    super();
    this._clickHandler = null;
    this._clickHandler = (e) => this.open = false;
  }
  // tslint:disable-next-line: completed-docs
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("click", this._clickHandler);
  }
  // tslint:disable-next-line: completed-docs
  disconnectedCallback() {
    window.removeEventListener("click", this._clickHandler);
    super.disconnectedCallback();
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    return html`
      <div tabindex="0" class=${classMap({ DotMenu: true, Open: this.open })}
        @click=${(e) => this.onDotClick(e)}
        @keydown=${(e) => this.onDotKeydown(e)}>
        <span class="DotIcon">\uE712</span>
        <div tabindex="0" class="Menu">
          ${Object.keys(this.options).map((prop) => this.getMenuOption(prop, this.options[prop]))}
        </div>
      </div>
    `;
  }
  /**
   * Used by the render method to attach click handler to each dot item
   *
   * @param {string} name
   * @param {((e: Event) => void | any)} click
   * @returns
   * @memberof MgtDotOptions
   */
  getMenuOption(name, click) {
    return html`
      <div
        class="DotItem"
        @click="${(e) => {
      e.preventDefault();
      e.stopPropagation();
      click(e);
      this.open = false;
    }}"
        @keydown="${(e) => {
      this.handleKeydownMenuOption;
      click(e);
      this.open = false;
    }}"
      >
        <span class="DotItemName">
          ${name}
        </span>
      </div>
    `;
  }
  onDotClick(e) {
    e.preventDefault();
    e.stopPropagation();
    this.open = !this.open;
  }
  onDotKeydown(e) {
    if (e.code === "Enter") {
      e.preventDefault();
      e.stopPropagation();
      this.open = !this.open;
    }
  }
  handleKeydownMenuOption(e) {
    if (e.code === "Enter") {
      e.preventDefault();
      e.stopPropagation();
    }
  }
};
__decorate22([
  property({ type: Boolean }),
  __metadata19("design:type", Boolean)
], MgtDotOptions.prototype, "open", void 0);
__decorate22([
  property({ type: Object }),
  __metadata19("design:type", Object)
], MgtDotOptions.prototype, "options", void 0);
MgtDotOptions = __decorate22([
  customElement("mgt-dot-options"),
  __metadata19("design:paramtypes", [])
], MgtDotOptions);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks/strings.js
var strings13 = {
  removeTaskSubtitle: "Delete Task",
  cancelNewTaskSubtitle: "Cancel",
  newTaskPlaceholder: "Adding task...",
  addTaskButtonSubtitle: "Add"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks/mgt-tasks.js
var __decorate23 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata20 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter24 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var TasksSource;
(function(TasksSource2) {
  TasksSource2[TasksSource2["planner"] = 0] = "planner";
  TasksSource2[TasksSource2["todo"] = 1] = "todo";
})(TasksSource || (TasksSource = {}));
var TASK_RES = {
  todo: {
    BASE_SELF_ASSIGNED: "All Tasks",
    BUCKETS_SELF_ASSIGNED: "All Tasks",
    BUCKET_NOT_FOUND: "Folder not found",
    PLANS_SELF_ASSIGNED: "All groups",
    PLAN_NOT_FOUND: "Group not found"
  },
  // tslint:disable-next-line: object-literal-sort-keys
  planner: {
    BASE_SELF_ASSIGNED: "Assigned to Me",
    BUCKETS_SELF_ASSIGNED: "All Tasks",
    BUCKET_NOT_FOUND: "Bucket not found",
    PLANS_SELF_ASSIGNED: "All Plans",
    PLAN_NOT_FOUND: "Plan not found"
  }
};
var plannerAssignment = {
  "@odata.type": "microsoft.graph.plannerAssignment",
  orderHint: "string !"
};
var MgtTasks = class MgtTasks2 extends MgtTemplatedComponent {
  /**
   * determines whether todo, or planner functionality for task component
   *
   * @readonly
   * @type {TasksStringResource}
   * @memberof MgtTasks
   */
  get res() {
    switch (this.dataSource) {
      case TasksSource.todo:
        return TASK_RES.todo;
      case TasksSource.planner:
      default:
        return TASK_RES.planner;
    }
  }
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles18;
  }
  get strings() {
    return strings13;
  }
  /**
   * Get whether new task view is visible
   *
   * @memberof MgtTasks
   */
  get isNewTaskVisible() {
    return this._isNewTaskVisible;
  }
  /**
   * Set whether new task is visible
   *
   * @memberof MgtTasks
   */
  set isNewTaskVisible(value) {
    this._isNewTaskVisible = value;
    if (!value) {
      this._newTaskDueDate = null;
      this._newTaskName = "";
      this._newTaskGroupId = "";
    }
  }
  /**
   * Get the scopes required for tasks
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtTasks
   */
  static get requiredScopes() {
    return [
      .../* @__PURE__ */ new Set([
        "group.read.all",
        "group.readwrite.all",
        "tasks.read",
        "tasks.readwrite",
        ...MgtPeople.requiredScopes,
        ...MgtPeoplePicker.requiredScopes
      ])
    ];
  }
  constructor() {
    super();
    this.dataSource = TasksSource.planner;
    this._me = null;
    this.clearState();
    this.previousMediaQuery = this.mediaQuery;
    this.onResize = this.onResize.bind(this);
  }
  /**
   * updates provider state
   *
   * @memberof MgtTasks
   */
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("resize", this.onResize);
  }
  /**
   * removes updates on provider state
   *
   * @memberof MgtTasks
   */
  disconnectedCallback() {
    window.removeEventListener("resize", this.onResize);
    super.disconnectedCallback();
  }
  /**
   * Synchronizes property values when attributes change.
   *
   * @param {*} name
   * @param {*} oldValue
   * @param {*} newValue
   * @memberof MgtTasks
   */
  attributeChangedCallback(name, oldVal, newVal) {
    super.attributeChangedCallback(name, oldVal, newVal);
    if (name === "data-source") {
      if (this.dataSource === TasksSource.planner) {
        this._currentGroup = this.initialId;
        this._currentFolder = this.initialBucketId;
      } else if (this.dataSource === TasksSource.todo) {
        this._currentGroup = null;
        this._currentFolder = this.initialId;
      }
      this.clearState();
      this.requestStateUpdate();
    }
  }
  clearState() {
    this._newTaskFolderId = "";
    this._newTaskGroupId = "";
    this._newTaskDueDate = null;
    this._newTaskName = "";
    this._newTaskBeingAdded = false;
    this._tasks = [];
    this._folders = [];
    this._groups = [];
    this._hiddenTasks = [];
    this._loadingTasks = [];
    this._hasDoneInitialLoad = false;
    this._inTaskLoad = false;
    this._todoDefaultSet = false;
  }
  /**
   * Invoked when the element is first updated. Implement to perform one time
   * work on the element after update.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param _changedProperties Map of changed properties with old values
   */
  firstUpdated(changedProperties) {
    super.firstUpdated(changedProperties);
    if (this.initialId && !this._currentGroup) {
      if (this.dataSource === TasksSource.planner) {
        this._currentGroup = this.initialId;
      } else if (this.dataSource === TasksSource.todo) {
        this._currentFolder = this.initialId;
      }
    }
    if (this.dataSource === TasksSource.planner && this.initialBucketId && !this._currentFolder) {
      this._currentFolder = this.initialBucketId;
    }
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    let tasks = this._tasks.filter((task) => this.isTaskInSelectedGroupFilter(task)).filter((task) => this.isTaskInSelectedFolderFilter(task)).filter((task) => !this._hiddenTasks.includes(task.id));
    if (this.taskFilter) {
      tasks = tasks.filter((task) => this.taskFilter(task._raw));
    }
    const loadingTask = this._inTaskLoad && !this._hasDoneInitialLoad ? this.renderLoadingTask() : null;
    let header;
    if (!this.hideHeader) {
      header = html`
        <div class="Header" dir=${this.direction}>
          ${this.renderPlanOptions()}
        </div>
      `;
    }
    return html`
      ${header}
      <div class="Tasks" dir=${this.direction}>
        ${this._isNewTaskVisible ? this.renderNewTask() : null} ${loadingTask}
        ${repeat(tasks, (task) => task.id, (task) => this.renderTask(task))}
      </div>
    `;
  }
  /**
   * loads tasks from dataSource
   *
   * @returns
   * @memberof MgtTasks
   */
  loadState() {
    return __awaiter24(this, void 0, void 0, function* () {
      const ts = this.getTaskSource();
      if (!ts) {
        return;
      }
      const provider = Providers.globalProvider;
      if (!provider || provider.state !== ProviderState.SignedIn) {
        return;
      }
      this._inTaskLoad = true;
      let meTask;
      if (!this._me) {
        const graph = provider.graph.forComponent(this);
        meTask = getMe(graph);
      }
      if (this.groupId && this.dataSource === TasksSource.planner) {
        yield this._loadTasksForGroup(ts);
      } else if (this.targetId) {
        if (this.dataSource === TasksSource.todo) {
          yield this._loadTargetTodoTasks(ts);
        } else {
          yield this._loadTargetPlannerTasks(ts);
        }
      } else {
        yield this._loadAllTasks(ts);
      }
      if (meTask) {
        this._me = yield meTask;
      }
      this._inTaskLoad = false;
      this._hasDoneInitialLoad = true;
    });
  }
  onResize() {
    if (this.mediaQuery !== this.previousMediaQuery) {
      this.previousMediaQuery = this.mediaQuery;
      this.requestUpdate();
    }
  }
  _loadTargetTodoTasks(ts) {
    return __awaiter24(this, void 0, void 0, function* () {
      const groups = yield ts.getTaskGroups();
      const folders = (yield Promise.all(groups.map((group) => ts.getTaskFoldersForTaskGroup(group.id)))).reduce((cur, ret) => [...cur, ...ret], []);
      const tasks = (yield Promise.all(folders.map((folder) => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);
      this._tasks = tasks;
      this._folders = folders;
      this._groups = groups;
      this._currentGroup = null;
    });
  }
  _loadTargetPlannerTasks(ts) {
    return __awaiter24(this, void 0, void 0, function* () {
      const group = yield ts.getTaskGroup(this.targetId);
      let folders = yield ts.getTaskFoldersForTaskGroup(group.id);
      if (this.targetBucketId) {
        folders = folders.filter((folder) => folder.id === this.targetBucketId);
      }
      const tasks = (yield Promise.all(folders.map((folder) => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);
      this._tasks = tasks;
      this._folders = folders;
      this._groups = [group];
    });
  }
  _loadAllTasks(ts) {
    return __awaiter24(this, void 0, void 0, function* () {
      const groups = yield ts.getTaskGroups();
      const folders = (yield Promise.all(groups.map((group) => ts.getTaskFoldersForTaskGroup(group.id)))).reduce((cur, ret) => [...cur, ...ret], []);
      if (!this.initialId && this.dataSource === TasksSource.todo && !this._todoDefaultSet) {
        this._todoDefaultSet = true;
        const defaultFolder = folders.find((d) => d._raw.isDefaultFolder);
        if (defaultFolder) {
          this._currentFolder = defaultFolder.id;
        }
      }
      const tasks = (yield Promise.all(folders.map((folder) => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);
      this._tasks = tasks;
      this._folders = folders;
      this._groups = groups;
    });
  }
  _loadTasksForGroup(ts) {
    return __awaiter24(this, void 0, void 0, function* () {
      const groups = yield ts.getTaskGroupsForGroup(this.groupId);
      const folders = (yield Promise.all(groups.map((group) => ts.getTaskFoldersForTaskGroup(group.id)))).reduce((cur, ret) => [...cur, ...ret], []);
      const tasks = (yield Promise.all(folders.map((folder) => ts.getTasksForTaskFolder(folder.id, folder.parentId)))).reduce((cur, ret) => [...cur, ...ret], []);
      this._tasks = tasks;
      this._folders = folders;
      this._groups = groups;
    });
  }
  addTask(name, dueDate, topParentId, immediateParentId, assignments = {}) {
    return __awaiter24(this, void 0, void 0, function* () {
      const ts = this.getTaskSource();
      if (!ts) {
        return;
      }
      const newTask = {
        assignments,
        dueDate,
        immediateParentId,
        name,
        topParentId
      };
      this._newTaskBeingAdded = true;
      const task = yield ts.addTask(newTask);
      this.fireCustomEvent("taskAdded", task);
      yield this.requestStateUpdate();
      this._newTaskBeingAdded = false;
      this.isNewTaskVisible = false;
    });
  }
  completeTask(task) {
    return __awaiter24(this, void 0, void 0, function* () {
      const ts = this.getTaskSource();
      if (!ts) {
        return;
      }
      this._loadingTasks = [...this._loadingTasks, task.id];
      yield ts.setTaskComplete(task.id, task.eTag);
      this.fireCustomEvent("taskChanged", task);
      yield this.requestStateUpdate();
      this._loadingTasks = this._loadingTasks.filter((id) => id !== task.id);
    });
  }
  uncompleteTask(task) {
    return __awaiter24(this, void 0, void 0, function* () {
      const ts = this.getTaskSource();
      if (!ts) {
        return;
      }
      this._loadingTasks = [...this._loadingTasks, task.id];
      yield ts.setTaskIncomplete(task.id, task.eTag);
      this.fireCustomEvent("taskChanged", task);
      yield this.requestStateUpdate();
      this._loadingTasks = this._loadingTasks.filter((id) => id !== task.id);
    });
  }
  removeTask(task) {
    return __awaiter24(this, void 0, void 0, function* () {
      const ts = this.getTaskSource();
      if (!ts) {
        return;
      }
      this._hiddenTasks = [...this._hiddenTasks, task.id];
      yield ts.removeTask(task.id, task.eTag);
      this.fireCustomEvent("taskRemoved", task);
      yield this.requestStateUpdate();
      this._hiddenTasks = this._hiddenTasks.filter((id) => id !== task.id);
    });
  }
  assignPeople(task, people) {
    return __awaiter24(this, void 0, void 0, function* () {
      const ts = this.getTaskSource();
      if (!ts) {
        return;
      }
      let savedSelectedPeople = [];
      if (task) {
        if (task.assignments) {
          savedSelectedPeople = Object.keys(task.assignments).sort();
        }
      }
      const newPeopleIds = people.map((person) => {
        return person.id;
      });
      const isEqual2 = newPeopleIds.length === savedSelectedPeople.length && newPeopleIds.sort().every((value, index) => {
        return value === savedSelectedPeople[index];
      });
      if (isEqual2) {
        return;
      }
      const peopleObj = {};
      if (people.length === 0) {
        for (let i = 0; i < savedSelectedPeople.length; i++) {
          peopleObj[savedSelectedPeople[i]] = null;
        }
      }
      if (people) {
        for (let i = 0; i < savedSelectedPeople.length; i++) {
          for (let j = 0; j < people.length; j++) {
            if (savedSelectedPeople[i] !== people[j].id) {
              peopleObj[savedSelectedPeople[i]] = null;
              break;
            } else {
              peopleObj[savedSelectedPeople[i]] = plannerAssignment;
            }
          }
        }
        for (let i = 0; i < people.length; i++) {
          peopleObj[people[i].id] = plannerAssignment;
        }
      }
      if (task) {
        this._loadingTasks = [...this._loadingTasks, task.id];
        yield ts.assignPeopleToTask(task.id, peopleObj, task.eTag);
        yield this.requestStateUpdate();
        this._loadingTasks = this._loadingTasks.filter((id) => id !== task.id);
      }
    });
  }
  onAddTaskClick(e) {
    const picker = this.getPeoplePicker(null);
    const peopleObj = {};
    if (picker) {
      for (const person of picker.selectedPeople) {
        if (picker.selectedPeople.length) {
          peopleObj[person.id] = plannerAssignment;
        }
      }
    }
    if (!this._newTaskBeingAdded && this._newTaskName && (this._currentGroup || this._newTaskGroupId)) {
      this.addTask(this._newTaskName, this._newTaskDueDate, !this._currentGroup ? this._newTaskGroupId : this._currentGroup, !this._currentFolder ? this._newTaskFolderId : this._currentFolder, peopleObj);
    }
  }
  onAddTaskKeyDown(e) {
    if (e.code === "Enter") {
      this.onAddTaskClick;
    }
  }
  newTaskButtonKeydown(e) {
    if (e.code === "Enter") {
      this.isNewTaskVisible = !this.isNewTaskVisible;
    }
  }
  newTaskVisible(e) {
    if (e.code === "Enter") {
      this.isNewTaskVisible = false;
    }
  }
  renderPlanOptions() {
    const p = Providers.globalProvider;
    if (!p || p.state !== ProviderState.SignedIn) {
      return null;
    }
    if (this._inTaskLoad && !this._hasDoneInitialLoad) {
      return html`
        <span class="LoadingHeader"></span>
      `;
    }
    const addButton = this.readOnly || this._isNewTaskVisible ? null : html`
            <div
              tabindex="0"
              class="AddBarItem NewTaskButton"
              @click="${() => {
      this.isNewTaskVisible = !this.isNewTaskVisible;
    }}"
              @keydown="${this.newTaskButtonKeydown}"
            >
              <span class="TaskIcon"></span>
              <span>${this.strings.addTaskButtonSubtitle}</span>
            </div>
          `;
    if (this.dataSource === TasksSource.planner) {
      const currentGroup = this._groups.find((d) => d.id === this._currentGroup) || {
        title: this.res.BASE_SELF_ASSIGNED
      };
      const groupOptions = {
        [this.res.BASE_SELF_ASSIGNED]: (e) => {
          this._currentGroup = null;
          this._currentFolder = null;
        }
      };
      for (const group of this._groups) {
        groupOptions[group.title] = (e) => {
          this._currentGroup = group.id;
          this._currentFolder = null;
        };
      }
      const groupSelect = html`
        <mgt-arrow-options .options="${groupOptions}" .value="${currentGroup.title}"></mgt-arrow-options>
      `;
      const divider = !this._currentGroup ? null : html`
            <span class="TaskIcon Divider">/</span>
          `;
      const currentFolder = this._folders.find((d) => d.id === this._currentFolder) || {
        name: this.res.BUCKETS_SELF_ASSIGNED
      };
      const folderOptions = {
        [this.res.BUCKETS_SELF_ASSIGNED]: (e) => {
          this._currentFolder = null;
        }
      };
      for (const folder of this._folders.filter((d) => d.parentId === this._currentGroup)) {
        folderOptions[folder.name] = (e) => {
          this._currentFolder = folder.id;
        };
      }
      const folderSelect = this.targetBucketId ? html`
            <span class="PlanTitle">
              ${this._folders[0] && this._folders[0].name}
            </span>
          ` : html`
            <mgt-arrow-options .options="${folderOptions}" .value="${currentFolder.name}"></mgt-arrow-options>
          `;
      return html`
        <div class="TitleCont">
          ${groupSelect} ${divider} ${!this._currentGroup ? null : folderSelect}
        </div>
        ${addButton}
      `;
    } else {
      const folder = this._folders.find((d) => d.id === this.targetId) || { name: this.res.BUCKETS_SELF_ASSIGNED };
      const currentFolder = this._folders.find((d) => d.id === this._currentFolder) || {
        name: this.res.BUCKETS_SELF_ASSIGNED
      };
      const folderOptions = {};
      for (const d of this._folders) {
        folderOptions[d.name] = () => {
          this._currentFolder = d.id;
        };
      }
      folderOptions[this.res.BUCKETS_SELF_ASSIGNED] = (e) => {
        this._currentFolder = null;
      };
      const folderSelect = this.targetId ? html`
            <span class="PlanTitle">
              ${folder.name}
            </span>
          ` : html`
            <mgt-arrow-options .value="${currentFolder.name}" .options="${folderOptions}"></mgt-arrow-options>
          `;
      return html`
        <span class="TitleCont">
          ${folderSelect}
        </span>
        ${addButton}
      `;
    }
  }
  renderNewTask() {
    const taskTitle = html`
      <input
        type="text"
        placeholder=${this.strings.newTaskPlaceholder}
        .value="${this._newTaskName}"
        label="new-taskName-input"
        aria-label="new-taskName-input"
        role="textbox"
        @input="${(e) => {
      this._newTaskName = e.target.value;
    }}"
      />
    `;
    const groups = this._groups;
    if (groups.length > 0 && !this._newTaskGroupId) {
      this._newTaskGroupId = groups[0].id;
    }
    const group = this.dataSource === TasksSource.todo ? null : this._currentGroup ? html`
            <span class="NewTaskGroup">
              ${this.renderPlannerIcon()}
              <span>${this.getPlanTitle(this._currentGroup)}</span>
            </span>
          ` : html`
            <span class="NewTaskGroup">
              ${this.renderPlannerIcon()}
              <select aria-label="new task group"
                .value="${this._newTaskGroupId}"
                @change="${(e) => {
      this._newTaskGroupId = e.target.value;
    }}"
              >
                ${this._groups.map((plan) => html`
                    <option value="${plan.id}">${plan.title}</option>
                  `)}
              </select>
            </span>
          `;
    const folders = this._folders.filter((folder) => this._currentGroup && folder.parentId === this._currentGroup || !this._currentGroup && folder.parentId === this._newTaskGroupId);
    if (folders.length > 0 && !this._newTaskFolderId) {
      this._newTaskFolderId = folders[0].id;
    }
    const taskFolder = this._currentFolder ? html`
          <span class="NewTaskBucket">
            ${this.renderBucketIcon()}
            <span>${this.getFolderName(this._currentFolder)}</span>
          </span>
        ` : html`
          <span class="NewTaskBucket">
            ${this.renderBucketIcon()}
            <select aria-label="new task bucket"
              .value="${this._newTaskFolderId}"
              @change="${(e) => {
      this._newTaskFolderId = e.target.value;
    }}"
            >
              ${folders.map((folder) => html`
                  <option value="${folder.id}">${folder.name}</option>
                `)}
            </select>
          </span>
        `;
    const taskDue = html`
      <span class="NewTaskDue">
      ${this.renderCalendarIcon()}
        <input
          type="date"
          label="new-taskDate-input"
          aria-label="new-taskDate-input"
          role="textbox"
          .value="${this.dateToInputValue(this._newTaskDueDate)}"
          @change="${(e) => {
      const value = e.target.value;
      if (value) {
        this._newTaskDueDate = new Date(value + "T17:00");
      } else {
        this._newTaskDueDate = null;
      }
    }}"
        />
      </span>
    `;
    const taskPeople = this.dataSource === TasksSource.todo ? null : this.renderAssignedPeople(null);
    const taskAdd = this._newTaskBeingAdded ? html`
          <div class="TaskAddButtonContainer"></div>
        ` : html`
          <div class="TaskAddButtonContainer ${this._newTaskName === "" ? "Disabled" : ""}">
            <div tabindex="0" class="TaskIcon TaskAdd"
              @click="${this.onAddTaskClick}"
              @keydown="${this.onAddTaskKeyDown}">
              <span>${this.strings.addTaskButtonSubtitle}</span>
            </div>
            <div tabindex="0" class="TaskIcon TaskCancel"
              @click="${() => this.isNewTaskVisible = false}"
              @keydown="${this.newTaskVisible}">
              <span>${this.strings.cancelNewTaskSubtitle}</span>
            </div>
          </div>
        `;
    return html`
      <div class="Task NewTask Incomplete">
        <div class="TaskContent">
          <div class="TaskDetailsContainer">
            <div class="TaskTitle">
              ${taskTitle}
            </div>
            <div class="TaskDetails">
              ${group} ${taskFolder} ${taskDue} ${taskPeople}
            </div>
          </div>
        </div>
        ${taskAdd}
      </div>
    `;
  }
  togglePeoplePicker(task) {
    const picker = this.getPeoplePicker(task);
    const mgtPeople = this.getMgtPeople(task);
    const flyout = this.getFlyout(task);
    if (picker && mgtPeople && flyout) {
      if (flyout.isOpen) {
        flyout.close();
      } else {
        picker.selectedPeople = mgtPeople.people;
        flyout.open();
        window.requestAnimationFrame(() => {
          picker.focus();
        });
      }
    }
  }
  updateAssignedPeople(task) {
    const picker = this.getPeoplePicker(task);
    const mgtPeople = this.getMgtPeople(task);
    if (picker && picker.selectedPeople !== mgtPeople.people) {
      mgtPeople.people = picker.selectedPeople;
      this.assignPeople(task, picker.selectedPeople);
    }
  }
  getPeoplePicker(task) {
    const taskId = task ? task.id : "newTask";
    const picker = this.renderRoot.querySelector(`.picker-${taskId}`);
    return picker;
  }
  getMgtPeople(task) {
    const taskId = task ? task.id : "newTask";
    const mgtPeople = this.renderRoot.querySelector(`.people-${taskId}`);
    return mgtPeople;
  }
  getFlyout(task) {
    const taskId = task ? task.id : "newTask";
    const flyout = this.renderRoot.querySelector(`.flyout-${taskId}`);
    return flyout;
  }
  renderTask(task) {
    const { name = "Task", completed = false, dueDate } = task;
    const isLoading = this._loadingTasks.includes(task.id);
    const taskCheckClasses = {
      Complete: !isLoading && completed,
      Loading: isLoading,
      TaskCheck: true,
      TaskIcon: true
    };
    const taskCheckContent = isLoading ? html`
          
        ` : completed ? html`
          
        ` : null;
    const taskCheck = html`
      <span tabindex="0" class=${classMap(taskCheckClasses)}><span class="TaskCheckContent">${taskCheckContent}</span></span>
    `;
    const groupTitle = this._currentGroup ? null : this.getPlanTitle(task.topParentId);
    const folderTitle = this._currentFolder ? null : this.getFolderName(task.immediateParentId);
    const context = { task: Object.assign(Object.assign({}, task._raw), { groupTitle, folderTitle }) };
    const taskTemplate = this.renderTemplate("task", context, task.id);
    if (taskTemplate) {
      return taskTemplate;
    }
    let taskDetails = this.renderTemplate("task-details", context, `task-details-${task.id}`);
    if (!taskDetails) {
      const group = this.dataSource === TasksSource.todo || this._currentGroup ? null : html`
              <div class="TaskDetail TaskGroup">
                ${this.renderPlannerIcon()}
                <span>${this.getPlanTitle(task.topParentId)}</span>
              </div>
            `;
      const folder = this._currentFolder ? null : html`
            <div class="TaskDetail TaskBucket">
              ${this.renderBucketIcon()}
              <span>${this.getFolderName(task.immediateParentId)}</span>
            </div>
          `;
      const taskDue = !dueDate ? null : html`
            <div class="TaskDetail TaskDue">
              <span>Due ${getShortDateString(dueDate)}</span>
            </div>
          `;
      const taskPeople = this.dataSource !== TasksSource.todo ? this.renderAssignedPeople(task) : null;
      taskDetails = html`
        <div class="TaskTitle">
          ${name}
        </div>
        ${group} ${folder} ${taskPeople} ${taskDue}
      `;
    }
    const taskOptions = this.readOnly || this.hideOptions ? null : html`
            <div class="TaskOptions">
              <mgt-dot-options
                .options="${{
      [this.strings.removeTaskSubtitle]: () => this.removeTask(task)
    }}"
              ></mgt-dot-options>
            </div>
          `;
    return html`
      <div
        class=${classMap({
      Complete: completed,
      Incomplete: !completed,
      ReadOnly: this.readOnly,
      Task: true
    })}
      >
        <div
          class="TaskContent"
          @click=${() => {
      this.handleTaskClick(task);
    }}
        >
          <span
            class=${classMap({
      Complete: completed,
      Incomplete: !completed,
      TaskCheckContainer: true
    })}
            @click="${(e) => {
      if (!this.readOnly) {
        if (!task.completed) {
          this.completeTask(task);
        } else {
          this.uncompleteTask(task);
        }
        e.stopPropagation();
        e.preventDefault();
      }
    }}"
            @keydown="${(e) => {
      if (e.code === "Enter") {
        if (!this.readOnly) {
          if (!task.completed) {
            this.completeTask(task);
          } else {
            this.uncompleteTask(task);
          }
          e.stopPropagation();
          e.preventDefault();
        }
      }
    }}"
          >
            ${taskCheck}
          </span>
          <div class="TaskDetailsContainer ${this.mediaQuery} ${this._currentGroup ? "NoPlan" : ""}">
            ${taskDetails}
          </div>
          ${taskOptions}

        </div>
      </div>
    `;
  }
  renderAssignedPeople(task) {
    let assignedPeopleHTML = null;
    const taskAssigneeClasses = {
      NewTaskAssignee: task === null,
      TaskAssignee: task !== null,
      TaskDetail: task !== null
    };
    const assignedPeople = task ? Object.keys(task.assignments).map((key) => {
      return key;
    }) : [];
    const noPeopleTemplate = html`
      <template data-type="no-data">
        <i class="login-icon ms-Icon ms-Icon--Contact"></i>
      </template>
    `;
    const taskId = task ? task.id : "newTask";
    taskAssigneeClasses[`flyout-${taskId}`] = true;
    assignedPeopleHTML = html`
      <mgt-people
        class="people-${taskId}"
        .userIds="${assignedPeople}"
        .personCardInteraction=${PersonCardInteraction.none}
        @click=${(e) => {
      this.togglePeoplePicker(task);
      e.stopPropagation();
    }}
        @keydown=${(e) => {
      if (e.code === "Enter") {
        this.togglePeoplePicker(task);
        e.stopPropagation();
      }
    }}
        >${noPeopleTemplate}
      </mgt-people>
    `;
    return html`
      <mgt-flyout light-dismiss class=${classMap(taskAssigneeClasses)} @closed=${(e) => this.updateAssignedPeople(task)}>
        ${assignedPeopleHTML}
        <div slot="flyout" class=${classMap({ Picker: true })}>
          <mgt-people-picker
            class="picker-${taskId}"
            @click=${(e) => e.stopPropagation()}
            @keydown=${(e) => {
      if (e.code === "Enter") {
        e.stopPropagation();
      }
    }}
          ></mgt-people-picker>
        </div>
      </mgt-flyout>
    `;
  }
  handleTaskClick(task) {
    if (task) {
      this.fireCustomEvent("taskClick", { task: task._raw });
    }
  }
  renderLoadingTask() {
    return html`
      <div class="Task LoadingTask">
        <div class="TaskContent">
          <div class="TaskCheckContainer">
            <div class="TaskCheck"></div>
          </div>
          <div class="TaskDetailsContainer">
            <div class="TaskTitle"></div>
            <div class="TaskDetails">
              <span class="TaskDetail">
                <div class="TaskDetailIcon"></div>
                <div class="TaskDetailName"></div>
              </span>
              <span class="TaskDetail">
                <div class="TaskDetailIcon"></div>
                <div class="TaskDetailName"></div>
              </span>
            </div>
          </div>
        </div>
      </div>
    `;
  }
  renderPlannerIcon() {
    return html`
      <svg width="16" height="18" viewBox="0 0 16 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M7.223 1.156C6.98 1.26 6.769 1.404 6.586 1.586C6.403 1.768 6.261 1.98 6.157 2.223C6.052 2.465 6 2.724 6 3H2V17H14V3H10C10 2.724 9.948 2.465 9.844 2.223C9.74 1.98 9.596 1.768 9.414 1.586C9.231 1.404 9.02 1.26 8.777 1.156C8.535 1.053 8.276 1 8 1C7.723 1 7.465 1.053 7.223 1.156ZM5 4H7V3C7 2.86 7.026 2.729 7.078 2.609C7.13 2.49 7.202 2.385 7.293 2.293C7.384 2.202 7.49 2.131 7.609 2.079C7.73 2.026 7.859 2 8 2C8.14 2 8.271 2.026 8.39 2.079C8.511 2.131 8.616 2.202 8.707 2.293C8.798 2.385 8.87 2.49 8.922 2.609C8.974 2.729 9 2.86 9 3V4H11V5H5V4ZM12 6V4H13V16H3V4H4V6H12Z"
          fill="#3C3C3C"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M7.35156 12.3517L5.49956 14.2037L4.14856 12.8517L4.85156 12.1487L5.49956 12.7967L6.64856 11.6487L7.35156 12.3517Z"
          fill="#3C3C3C"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M7.35156 8.35168L5.49956 10.2037L4.14856 8.85168L4.85156 8.14868L5.49956 8.79668L6.64856 7.64868L7.35156 8.35168Z"
          fill="#3C3C3C"
        />
        <path fill-rule="evenodd" clip-rule="evenodd" d="M8 14H12.001V13H8V14Z" fill="#3C3C3C" />
        <path fill-rule="evenodd" clip-rule="evenodd" d="M8 10H12.001V9H8V10Z" fill="#3C3C3C" />
      </svg>
    `;
  }
  renderBucketIcon() {
    return html`
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M14 2H2V4H3H5H6H10H11H13H14V2ZM10 5H6V6H10V5ZM5 5H3V14H13V5H11V6C11 6.55228 10.5523 7 10 7H6C5.44772 7 5 6.55228 5 6V5ZM1 5H2V14V15H3H13H14V14V5H15V4V2V1H14H2H1V2V4V5Z"
          fill="#3C3C3C"
        />
      </svg>
    `;
  }
  /**
   * Render a calendar icon.
   *
   * @protected
   * @returns
   * @memberof MgtTodo
   */
  renderCalendarIcon() {
    return html`
          <svg width="16" height="20" viewBox="0 0 16 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M5 11C5.55228 11 6 10.5523 6 10C6 9.44771 5.55228 9 5 9C4.44772 9 4 9.44771 4 10C4 10.5523 4.44772 11 5 11ZM6 13C6 13.5523 5.55228 14 5 14C4.44772 14 4 13.5523 4 13C4 12.4477 4.44772 12 5 12C5.55228 12 6 12.4477 6 13ZM8 11C8.55229 11 9 10.5523 9 10C9 9.44771 8.55229 9 8 9C7.44771 9 7 9.44771 7 10C7 10.5523 7.44771 11 8 11ZM9 13C9 13.5523 8.55229 14 8 14C7.44771 14 7 13.5523 7 13C7 12.4477 7.44771 12 8 12C8.55229 12 9 12.4477 9 13ZM11 11C11.5523 11 12 10.5523 12 10C12 9.44771 11.5523 9 11 9C10.4477 9 10 9.44771 10 10C10 10.5523 10.4477 11 11 11ZM15 5.5C15 4.11929 13.8807 3 12.5 3H3.5C2.11929 3 1 4.11929 1 5.5V14.5C1 15.8807 2.11929 17 3.5 17H12.5C13.8807 17 15 15.8807 15 14.5V5.5ZM2 7H14V14.5C14 15.3284 13.3284 16 12.5 16H3.5C2.67157 16 2 15.3284 2 14.5V7ZM3.5 4H12.5C13.3284 4 14 4.67157 14 5.5V6H2V5.5C2 4.67157 2.67157 4 3.5 4Z" fill="#717171"/>
          </svg>
        `;
  }
  getTaskSource() {
    const p = Providers.globalProvider;
    if (!p || p.state !== ProviderState.SignedIn) {
      return null;
    }
    const graph = p.graph.forComponent(this);
    if (this.dataSource === TasksSource.planner) {
      return new PlannerTaskSource(graph);
    } else if (this.dataSource === TasksSource.todo) {
      return new TodoTaskSource(graph);
    } else {
      return null;
    }
  }
  getPlanTitle(planId) {
    if (!planId) {
      return this.res.BASE_SELF_ASSIGNED;
    } else if (planId === this.res.PLANS_SELF_ASSIGNED) {
      return this.res.PLANS_SELF_ASSIGNED;
    } else {
      return (this._groups.find((plan) => plan.id === planId) || {
        title: this.res.PLAN_NOT_FOUND
      }).title;
    }
  }
  getFolderName(bucketId) {
    if (!bucketId) {
      return this.res.BUCKETS_SELF_ASSIGNED;
    }
    return (this._folders.find((buck) => buck.id === bucketId) || {
      name: this.res.BUCKET_NOT_FOUND
    }).name;
  }
  isTaskInSelectedGroupFilter(task) {
    return task.topParentId === this._currentGroup || !this._currentGroup && this.getTaskSource().isAssignedToMe(task, this._me.id);
  }
  isTaskInSelectedFolderFilter(task) {
    return task.immediateParentId === this._currentFolder || !this._currentFolder;
  }
  dateToInputValue(date) {
    if (date) {
      return new Date(date.getTime() - date.getTimezoneOffset() * 6e4).toISOString().split("T")[0];
    }
    return null;
  }
};
__decorate23([
  property({ attribute: "read-only", type: Boolean }),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "readOnly", void 0);
__decorate23([
  property({
    attribute: "data-source",
    converter: (value, type) => {
      value = value.toLowerCase();
      return TasksSource[value] || TasksSource.planner;
    }
  }),
  __metadata20("design:type", Number)
], MgtTasks.prototype, "dataSource", void 0);
__decorate23([
  property({ attribute: "target-id", type: String }),
  __metadata20("design:type", String)
], MgtTasks.prototype, "targetId", void 0);
__decorate23([
  property({ attribute: "target-bucket-id", type: String }),
  __metadata20("design:type", String)
], MgtTasks.prototype, "targetBucketId", void 0);
__decorate23([
  property({ attribute: "initial-id", type: String }),
  __metadata20("design:type", String)
], MgtTasks.prototype, "initialId", void 0);
__decorate23([
  property({ attribute: "initial-bucket-id", type: String }),
  __metadata20("design:type", String)
], MgtTasks.prototype, "initialBucketId", void 0);
__decorate23([
  property({ attribute: "hide-header", type: Boolean }),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "hideHeader", void 0);
__decorate23([
  property({ attribute: "hide-options", type: Boolean }),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "hideOptions", void 0);
__decorate23([
  property({ attribute: "group-id", type: String }),
  __metadata20("design:type", String)
], MgtTasks.prototype, "groupId", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "_isNewTaskVisible", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "_newTaskBeingAdded", void 0);
__decorate23([
  property(),
  __metadata20("design:type", String)
], MgtTasks.prototype, "_newTaskName", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Date)
], MgtTasks.prototype, "_newTaskDueDate", void 0);
__decorate23([
  property(),
  __metadata20("design:type", String)
], MgtTasks.prototype, "_newTaskGroupId", void 0);
__decorate23([
  property(),
  __metadata20("design:type", String)
], MgtTasks.prototype, "_newTaskFolderId", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Array)
], MgtTasks.prototype, "_groups", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Array)
], MgtTasks.prototype, "_folders", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Array)
], MgtTasks.prototype, "_tasks", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Array)
], MgtTasks.prototype, "_hiddenTasks", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Array)
], MgtTasks.prototype, "_loadingTasks", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "_inTaskLoad", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "_hasDoneInitialLoad", void 0);
__decorate23([
  property(),
  __metadata20("design:type", Boolean)
], MgtTasks.prototype, "_todoDefaultSet", void 0);
__decorate23([
  property(),
  __metadata20("design:type", String)
], MgtTasks.prototype, "_currentGroup", void 0);
__decorate23([
  property(),
  __metadata20("design:type", String)
], MgtTasks.prototype, "_currentFolder", void 0);
MgtTasks = __decorate23([
  customElement("mgt-tasks"),
  __metadata20("design:paramtypes", [])
], MgtTasks);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-teams-channel-picker/mgt-teams-channel-picker-css.js
var styles21 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--dropdown-item-selected-background:#deecf9;--arrow-fill:#000000}.mgt-dark{--dropdown-item-selected-background:#333d47;--arrow-fill:#605e5c}:host{font-family:var(--default-font-family)}.root{position:relative}.root .input-wrapper{font-family:var(--default-font-family);display:flex;flex-wrap:wrap;align-items:center;padding:4px 10px;position:relative;background-color:var(--input-background-color,#fff);font-size:14px;color:var(--color-sub1,#323130);height:29px;line-height:19px;cursor:text;border-top:var(--input-border-top,var(--input-border,2px solid #605e5c));border-right:var(--input-border-right,var(--input-border,2px solid #605e5c));border-bottom:var(--input-border-bottom,var(--input-border,2px solid #605e5c));border-left:var(--input-border-left,var(--input-border,2px solid #605e5c))}.root .input-wrapper:hover{border-color:var(--input-border-color--hover,#323130)}.root .input-wrapper.focused{border-color:var(--input-border-color--focus,#0078d4)}.root .input-wrapper .selected-team{padding-right:10px;border:none;display:flex;position:relative;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;align-items:center;height:24px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.root .input-wrapper .selected-team .arrow{margin-left:8px;margin-right:8px}.root .input-wrapper .selected-team .selected-team-name{font-weight:700}.root .input-wrapper .selected-team .search-wrapper{margin-left:12px;height:18px;display:flex;flex-wrap:nowrap;align-items:center;margin-right:30px}.root .input-wrapper .search-wrapper{overflow:hidden;height:18px;display:flex;flex-wrap:nowrap;align-items:center;margin-right:30px}.root .input-wrapper .hide-icon{display:none}.root .input-wrapper .team-chosen-input{display:inline-block;border:none;line-height:normal;outline:0;font-family:var(--default-font-family);font-style:normal;font-weight:400;font-size:14px;line-height:19px;background-color:transparent;color:var(--color-sub1,#323130);padding-left:5px}.root .input-wrapper .team-chosen-input::placeholder{color:var(--placeholder-color,#605e5c)}.root .input-wrapper .team-chosen-input[contenteditable]:empty::after{content:attr(data-placeholder);color:var(--placeholder-color,#605e5c)}.root .input-wrapper .search-icon{margin-top:1px;align-self:flex-start;font-family:FabricMDL2Icons;color:var(--accent-color,#0078d4);line-height:normal}.root .input-wrapper .input-search{height:19px}.root .input-wrapper .input-search-start{white-space:nowrap;line-height:normal;margin-inline-start:0;margin-inline-end:0}.root .input-wrapper::after{content:'';position:absolute;width:100%;height:90%;top:2px;right:2px;background-image:linear-gradient(to right,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-moz-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-o-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-ms-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-webkit-linear-gradient(left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%)}.root .close-icon{display:inline-block;position:absolute;right:10px;top:12px;line-height:normal;font-family:FabricMDL2Icons;cursor:pointer;color:var(--placeholder-color,#605e5c);background-color:var(--input-background-color,#fff)}.root .close-icon:hover{color:var(--color-sub1,#323130)}.root .dropdown{padding-top:5px;padding-bottom:11px;position:absolute;box-shadow:0 1.3289px 2.65781px rgba(180,180,180,.182),0 1.3289px 2.65781px rgba(68,68,68,.3);border-radius:8px;background-color:var(--dropdown-background-color,var(--list-background-color,#fff));z-index:1;width:100%;text-align:left;list-style-type:none;font-family:var(--default-font-family);font-style:normal;font-weight:400;color:var(--color-sub1,#323130);display:none;max-height:346px;overflow-y:auto}.root .dropdown.visible{display:block}.root .dropdown .item .arrow svg{fill:var(--arrow-fill,#000)}.root .dropdown .item.list-team{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;-o-user-select:none;display:flex;flex-direction:row;align-items:center;padding:5px 12px 6px 14px;margin:6px 4px 4px 4px;border-radius:4px;font-family:var(--default-font-family);font-style:normal;font-weight:600;font-size:16px;color:var(--color-sub1,#323130);flex-flow:nowrap;position:relative;overflow:hidden;white-space:nowrap;background-color:transparent}.root .dropdown .item.list-team:after{content:'';position:absolute;width:36px;height:100%;top:0;right:0;background-image:-webkit-linear-gradient(right,var(--dropdown-background-color,var(--list-background-color,#fff)),rgba(var(--dropdown-background-color,var(--list-background-color,#fff)),0));background-image:-moz-linear-gradient(right,var(--dropdown-background-color,var(--list-background-color,#fff)),rgba(var(--dropdown-background-color,var(--list-background-color,#fff)),0));background-image:-ms-linear-gradient(right,var(--dropdown-background-color,var(--list-background-color,#fff)),rgba(var(--dropdown-background-color,var(--list-background-color,#fff)),0));background-image:-o-linear-gradient(right,var(--dropdown-background-color,var(--list-background-color,#fff)),rgba(var(--dropdown-background-color,var(--list-background-color,#fff)),0));background-image:linear-gradient(to left,var(--dropdown-background-color,var(--list-background-color,#fff)),rgba(var(--dropdown-background-color,var(--list-background-color,#fff)),0))}.root .dropdown .item.list-team:hover{background-color:var(--dropdown-item-hover-background,var(--input-background-color--hover,#edebe9))}.root .dropdown .item.list-team .arrow{margin-right:5px;margin-bottom:1px}.root .dropdown .item.selected{background-color:var(--dropdown-item-selected-background,#deecf9)}.root .dropdown .item.focused{background-color:var(--dropdown-item-hover-background,var(--input-background-color--hover,#edebe9))}.root .dropdown .channel-display{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;-o-user-select:none;cursor:pointer;padding-left:21px;padding-right:10px}.root .dropdown .channel-display .showing{padding-left:10px;padding-top:4px;padding-bottom:4px}.root .dropdown .channel-display .showing .channel-name-text{font-size:14px;font-weight:400;color:var(--color-sub1,#323130);margin:0;padding:0}.root .dropdown .channel-display .showing .channel-name-text.highlight-search-text{font-weight:700}.root .dropdown .channel-display:hover{background-color:var(--dropdown-item-hover-background,var(--input-background-color--hover,#edebe9))}.root .dropdown .loading-text,.root .dropdown .search-error-text{font-family:var(--default-font-family);font-style:normal;font-weight:600;font-size:14px;color:var(--color-sub1,#323130);line-height:19px;text-align:center}.root .dropdown .message-parent{padding:2px;margin-top:30px;margin-bottom:30px;display:flex;flex-direction:column;align-items:center;justify-content:center;vertical-align:middle}.root .dropdown .message-parent .loading-text{margin-top:3px;margin-left:9px;color:#0078d4}[dir=rtl] .input-wrapper::after{content:'';position:absolute;width:99%;height:90%;top:2px;left:0;background-image:linear-gradient(to left,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-moz-linear-gradient(right,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-o-linear-gradient(right,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-ms-linear-gradient(right,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%);background-image:-webkit-linear-gradient(right,rgba(255,255,255,0) 0,rgba(255,255,255,0) 80%,var(--input-background-color,#fff) 100%)}[dir=rtl] .search-wrapper{margin-right:0!important}[dir=rtl] .search-icon{margin-left:8px!important}[dir=rtl] .channel-display{padding:0 34px 0 10px!important}[dir=rtl] .close-icon{right:auto;left:10px}[dir=rtl] .dropdown{text-align:right}[dir=rtl] .arrow{-moz-transform:scaleX(-1);-o-transform:scaleX(-1);-webkit-transform:scaleX(-1);transform:scaleX(-1);filter:FlipH;-ms-filter:FlipH;margin-right:0;margin-left:5px}[dir=rtl] .selected-team{padding-left:10px}@media (forced-colors:active) and (prefers-color-scheme:dark){.root svg{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){.root svg{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-teams-channel-picker/mgt-teams-channel-picker.graph.js
var __awaiter25 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function getAllMyTeams(graph) {
  return __awaiter25(this, void 0, void 0, function* () {
    const scopes = "team.readbasic.all";
    const teams = yield graph.api("/me/joinedTeams").select(["displayName", "id", "isArchived"]).middlewareOptions(prepScopes(scopes)).get();
    return teams ? teams.value : null;
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-teams-channel-picker/strings.js
var strings14 = {
  inputPlaceholderText: "Select a channel",
  noResultsFound: `We didn't find any matches.`,
  loadingMessage: "Loading..."
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-teams-channel-picker/mgt-teams-channel-picker.js
var __decorate24 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata21 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter26 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtTeamsChannelPicker_1;
var MgtTeamsChannelPicker = MgtTeamsChannelPicker_1 = class MgtTeamsChannelPicker2 extends MgtTemplatedComponent {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * user the `css` tag function.
   */
  static get styles() {
    return styles21;
  }
  get strings() {
    return strings14;
  }
  /**
   * Global Configuration object for all
   * teams channel picker components
   *
   * @static
   * @type {MgtTeamsChannelPickerConfig}
   * @memberof MgtTeamsChannelPicker
   */
  static get config() {
    return this._config;
  }
  /**
   * Gets Selected item to be used
   *
   * @readonly
   * @type {SelectedChannel}
   * @memberof MgtTeamsChannelPicker
   */
  get selectedItem() {
    if (this._selectedItemState) {
      return { channel: this._selectedItemState.item, team: this._selectedItemState.parent.item };
    } else {
      return null;
    }
  }
  /**
   * Get the scopes required for teams channel picker
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtTeamsChannelPicker
   */
  static get requiredScopes() {
    if (this.config.useTeamsBasedScopes) {
      return ["team.readbasic.all", "channel.readbasic.all"];
    } else {
      return ["user.read.all", "group.read.all"];
    }
  }
  set items(value) {
    if (this._items === value) {
      return;
    }
    this._items = value;
    this._treeViewState = value ? this.generateTreeViewState(value) : [];
    this.resetFocusState();
  }
  get items() {
    return this._items;
  }
  // User input in search
  get _input() {
    return this.renderRoot.querySelector(".team-chosen-input");
  }
  constructor() {
    super();
    this._inputValue = "";
    this._isFocused = false;
    this._treeViewState = [];
    this._focusList = [];
    this._focusedIndex = -1;
    this.handleWindowClick = this.handleWindowClick.bind(this);
    this.addEventListener("keydown", (e) => this.onUserKeyDown(e));
    this.addEventListener("focus", (_) => this.loadTeamsIfNotLoaded());
    this.addEventListener("mouseover", (_) => this.loadTeamsIfNotLoaded());
  }
  /**
   * Invoked each time the custom element is appended into a document-connected element
   *
   * @memberof MgtTeamsChannelPicker
   */
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("click", this.handleWindowClick);
  }
  /**
   * Invoked each time the custom element is disconnected from the document's DOM
   *
   * @memberof MgtTeamsChannelPicker
   */
  disconnectedCallback() {
    window.removeEventListener("click", this.handleWindowClick);
    super.disconnectedCallback();
  }
  /**
   * selects a channel by looking up the id in the Graph
   *
   * @param {string} channelId MicrosoftGraph.Channel.id
   * @returns {Promise<return>} A promise that will resolve to true if channel was selected
   * @memberof MgtTeamsChannelPicker
   */
  selectChannelById(channelId) {
    return __awaiter26(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      if (provider && provider.state === ProviderState.SignedIn) {
        if (!this.items) {
          yield this.requestStateUpdate();
        }
        for (const item of this._treeViewState) {
          for (const channel of item.channels) {
            if (channel.item.id === channelId) {
              this.selectChannel(channel);
              return true;
            }
          }
        }
      }
      return false;
    });
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.
   * Setting properties inside this method will not trigger the element to update.
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  render() {
    const inputClasses = {
      focused: this._isFocused,
      "input-wrapper": true
    };
    const iconClasses = {
      focused: this._isFocused && !!this._selectedItemState,
      "search-icon": true
    };
    const dropdownClasses = {
      dropdown: true,
      visible: this._isDropdownVisible
    };
    const searchClasses = {
      "hide-icon": !!this._selectedItemState,
      "search-wrapper": true
    };
    return this.renderTemplate("default", { teams: this.items }) || html`
        <div class="root" @blur=${this.lostFocus} dir=${this.direction}>
          <div class=${classMap(inputClasses)} @click=${this.gainedFocus}>
            ${this.renderSelected()}
            <div class=${classMap(searchClasses)}>${this.renderSearchIcon()} ${this.renderInput()}</div>
          </div>
          ${this.renderCloseButton()}
          <div class=${classMap(dropdownClasses)}>${this.renderDropdown()}</div>
        </div>
      `;
  }
  /**
   * Renders selected channel
   *
   * @protected
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderSelected() {
    if (!this._selectedItemState) {
      return html``;
    }
    return html`
      <li class="selected-team" title=${this._selectedItemState.item.displayName}>
        <div class="selected-team-name">${this._selectedItemState.parent.item.displayName}</div>
        <div class="arrow">${getSvg(SvgIcon.TeamSeparator, "#B3B0AD")}</div>
        ${this._selectedItemState.item.displayName}
        <div class="search-wrapper">${this.renderSearchIcon()} ${this.renderInput()}</div>
      </li>
    `;
  }
  /**
   * Clears the state of the component
   *
   * @protected
   * @memberof MgtTeamsChannelPicker
   */
  clearState() {
    this._items = [];
    this._inputValue = "";
    this._treeViewState = [];
    this._focusList = [];
  }
  /**
   * Renders search icon
   *
   * @protected
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderSearchIcon() {
    return html`
      <div class="search-icon">
        ${getSvg(SvgIcon.Search, "#252424")}
      </div>
    `;
  }
  /**
   * Renders input field
   *
   * @protected
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderInput() {
    const rootClasses = {
      "input-search": !!this._selectedItemState,
      "input-search-start": !this._selectedItemState
    };
    return html`
      <div class="${classMap(rootClasses)}">
        <span
          id="teams-channel-picker-input"
          class="team-chosen-input"
          type="text"
          label="teams-channel-picker-input"
          aria-label="Select a channel"
          data-placeholder="${!!this._selectedItemState ? "" : this.strings.inputPlaceholderText} "
          role="searchbox"
          @keyup=${(e) => this.handleInputChanged(e)}
          contenteditable
        ></span>
      </div>
    `;
  }
  /**
   * Renders close button
   *
   * @protected
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderCloseButton() {
    return html`
      <div tabindex="0" class="close-icon"
        @keydown="${() => this.selectChannel(null)}"
        @click="${() => this.selectChannel(null)}"> 
      </div>
    `;
  }
  /**
   * Renders dropdown content
   *
   * @param {ChannelPickerItemState[]} items
   * @param {number} [level=0]
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderDropdown() {
    if (this.isLoadingState || !this._treeViewState) {
      return this.renderLoading();
    }
    if (this._treeViewState) {
      if (!this.isLoadingState && this._treeViewState.length === 0 && this._inputValue.length > 0) {
        return this.renderError();
      }
      return this.renderDropdownList(this._treeViewState);
    }
    return html``;
  }
  /**
   * Renders the dropdown list recursively
   *
   * @protected
   * @param {ChannelPickerItemState[]} items
   * @param {number} [level=0]
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderDropdownList(items, level = 0) {
    if (items && items.length) {
      return items.map((treeItem, index) => {
        const isLeaf = !treeItem.channels;
        const renderChannels = !isLeaf && treeItem.isExpanded;
        return html`
          ${this.renderItem(treeItem)}
          ${renderChannels ? this.renderDropdownList(treeItem.channels, level + 1) : html``}
        `;
      });
    }
    return null;
  }
  /**
   * Renders each Channel or Team
   *
   * @param {ChannelPickerItemState} itemState
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderItem(itemState) {
    let icon = null;
    if (itemState.channels) {
      icon = itemState.isExpanded ? getSvg(SvgIcon.ArrowDown, "#252424") : getSvg(SvgIcon.ArrowRight, "#252424");
    }
    let isSelected = false;
    if (this.selectedItem) {
      if (this.selectedItem.channel === itemState.item) {
        isSelected = true;
      }
    }
    const classes = {
      focused: this._focusList[this._focusedIndex] === itemState,
      item: true,
      "list-team": itemState.channels ? true : false,
      selected: isSelected
    };
    const dropDown = this.renderRoot.querySelector(".dropdown");
    if (dropDown.children[this._focusedIndex]) {
      dropDown.children[this._focusedIndex].scrollIntoView(false);
    }
    return html`
      <div @click=${() => this.handleItemClick(itemState)} class="${classMap(classes)}">
        <div class="arrow">
          ${icon}
        </div>
        ${itemState.channels ? itemState.item.displayName : this.renderHighlightedText(itemState.item)}
      </div>
    `;
  }
  /**
   * Renders the channel with the query text higlighted
   *
   * @protected
   * @param {*} channel
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderHighlightedText(channel) {
    let channels = {};
    const highlightLocation = channel.displayName.toLowerCase().indexOf(this._inputValue.toLowerCase());
    if (highlightLocation !== -1) {
      if (highlightLocation === 0) {
        channels.first = "";
        channels.highlight = channel.displayName.slice(0, this._inputValue.length);
        channels.last = channel.displayName.slice(this._inputValue.length, channel.displayName.length);
      } else if (highlightLocation === channel.displayName.length) {
        channels.first = channel.displayName.slice(0, highlightLocation);
        channels.highlight = channel.displayName.slice(highlightLocation, channel.displayName.length);
        channels.last = "";
      } else {
        channels.first = channel.displayName.slice(0, highlightLocation);
        channels.highlight = channel.displayName.slice(highlightLocation, highlightLocation + this._inputValue.length);
        channels.last = channel.displayName.slice(highlightLocation + this._inputValue.length, channel.displayName.length);
      }
    } else {
      channels.last = channel.displayName;
    }
    return html`
      <div class="channel-display">
        <div class="showing">
          <span class="channel-name-text">${channels.first}</span
          ><span class="channel-name-text highlight-search-text">${channels.highlight}</span
          ><span class="channel-name-text">${channels.last}</span>
        </div>
      </div>
    `;
  }
  /**
   * Renders an error message when no channel or teams match the query
   *
   * @protected
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderError() {
    const template2 = this.renderTemplate("error", null, "error");
    return template2 || html`
        <div class="message-parent">
          <div label="search-error-text" aria-label="We didn't find any matches." class="search-error-text">
            ${this.strings.noResultsFound}
          </div>
        </div>
      `;
  }
  /**
   * Renders loading spinner while channels are fetched from the Graph
   *
   * @protected
   * @returns
   * @memberof MgtTeamsChannelPicker
   */
  renderLoading() {
    const template2 = this.renderTemplate("loading", null, "loading");
    return template2 || html`
        <div class="message-parent">
          <mgt-spinner></mgt-spinner>
          <div label="loading-text" aria-label="loading" class="loading-text">
            ${this.strings.loadingMessage}
          </div>
        </div>
      `;
  }
  /**
   * Queries Microsoft Graph for Teams & respective channels then sets to items list
   *
   * @protected
   * @memberof MgtTeamsChannelPicker
   */
  loadState() {
    return __awaiter26(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      let teams;
      if (provider && provider.state === ProviderState.SignedIn) {
        const graph = provider.graph.forComponent(this);
        if (!(yield provider.getAccessTokenForScopes(...MgtTeamsChannelPicker_1.requiredScopes))) {
          return;
        }
        teams = yield getAllMyTeams(graph);
        teams = teams.filter((t) => !t.isArchived);
        const batch = graph.createBatch();
        const scopes = ["team.readbasic.all"];
        for (const team of teams) {
          batch.get(team.id, `teams/${team.id}/channels`, scopes);
        }
        const responses = yield batch.executeAll();
        for (const team of teams) {
          const response = responses.get(team.id);
          if (response && response.content && response.content.value) {
            team.channels = response.content.value.map((c) => {
              return {
                item: c
              };
            });
          }
        }
        this.items = teams.map((t) => {
          return {
            channels: t.channels,
            item: t
          };
        });
      }
      this.filterList();
      this.resetFocusState();
    });
  }
  handleItemClick(item) {
    if (item.channels) {
      item.isExpanded = !item.isExpanded;
    } else {
      this.selectChannel(item);
    }
    this._focusedIndex = -1;
    this.resetFocusState();
  }
  handleInputChanged(e) {
    if (this._inputValue !== e.target.textContent) {
      this._inputValue = e.target.textContent;
    } else {
      return;
    }
    this.gainedFocus();
    if (!this.debouncedSearch) {
      this.debouncedSearch = debounce(() => {
        this.filterList();
      }, 400);
    }
    this.debouncedSearch();
  }
  filterList() {
    if (this.items) {
      this._treeViewState = this.generateTreeViewState(this.items, this._inputValue);
      this._focusedIndex = -1;
      this.resetFocusState();
    }
  }
  generateTreeViewState(tree, filterString = "", parent2 = null) {
    const treeView = [];
    filterString = filterString.toLowerCase();
    if (tree) {
      for (const state2 of tree) {
        let stateItem;
        if (filterString.length === 0 || state2.item.displayName.toLowerCase().includes(filterString)) {
          stateItem = { item: state2.item, parent: parent2 };
          if (state2.channels) {
            stateItem.channels = this.generateTreeViewState(state2.channels, "", stateItem);
            stateItem.isExpanded = filterString.length > 0;
          }
        } else if (state2.channels) {
          const newStateItem = { item: state2.item, parent: parent2 };
          const channels = this.generateTreeViewState(state2.channels, filterString, newStateItem);
          if (channels.length > 0) {
            stateItem = newStateItem;
            stateItem.channels = channels;
            stateItem.isExpanded = true;
          }
        }
        if (stateItem) {
          treeView.push(stateItem);
        }
      }
    }
    return treeView;
  }
  // generates a flat list from a tree to facilitate easier focus
  // navigation
  generateFocusList(items) {
    if (!items || items.length === 0) {
      return [];
    }
    let array = [];
    for (const item of items) {
      array.push(item);
      if (item.channels && item.isExpanded) {
        array = [...array, ...this.generateFocusList(item.channels)];
      }
    }
    return array;
  }
  resetFocusState() {
    this._focusList = this.generateFocusList(this._treeViewState);
    this.requestUpdate();
  }
  loadTeamsIfNotLoaded() {
    if (!this.items && !this.isLoadingState) {
      this.requestStateUpdate();
    }
  }
  handleWindowClick(e) {
    if (e.target !== this) {
      this.lostFocus();
    }
  }
  onUserKeyDown(event) {
    if (event.keyCode === 13) {
      event.preventDefault();
    }
    if (this._treeViewState.length === 0) {
      return;
    }
    const currentFocusedItem = this._focusList[this._focusedIndex];
    switch (event.keyCode) {
      case 40:
        this._focusedIndex = (this._focusedIndex + 1) % this._focusList.length;
        this.requestUpdate();
        event.preventDefault();
        break;
      case 38:
        if (this._focusedIndex === -1) {
          this._focusedIndex = this._focusList.length;
        }
        this._focusedIndex = (this._focusedIndex - 1 + this._focusList.length) % this._focusList.length;
        this.requestUpdate();
        event.preventDefault();
        break;
      case 39:
        if (currentFocusedItem && currentFocusedItem.channels && !currentFocusedItem.isExpanded) {
          currentFocusedItem.isExpanded = true;
          this.resetFocusState();
          event.preventDefault();
        }
        break;
      case 37:
        if (currentFocusedItem && currentFocusedItem.channels && currentFocusedItem.isExpanded) {
          currentFocusedItem.isExpanded = false;
          this.resetFocusState();
          event.preventDefault();
        }
        break;
      case 9:
        if (!currentFocusedItem) {
          this.lostFocus();
          break;
        }
      case 13:
        if (currentFocusedItem && currentFocusedItem.channels) {
          currentFocusedItem.isExpanded = !currentFocusedItem.isExpanded;
          this.resetFocusState();
          event.preventDefault();
        } else if (currentFocusedItem && !currentFocusedItem.channels) {
          this.selectChannel(currentFocusedItem);
          this.resetFocusState();
          this._focusedIndex = -1;
          event.preventDefault();
        }
        break;
      case 8:
        if (this._inputValue.length === 0 && this._selectedItemState) {
          this.selectChannel(null);
          event.preventDefault();
        }
        break;
      case 27:
        this.selectChannel(this._selectedItemState);
        this._focusedIndex = -1;
        this.resetFocusState();
        event.preventDefault();
        break;
    }
  }
  gainedFocus() {
    this._isFocused = true;
    const input = this._input;
    if (input) {
      input.focus();
    }
    this._isDropdownVisible = true;
  }
  lostFocus() {
    this._isFocused = false;
    const input = this._input;
    if (input) {
      input.textContent = this._inputValue = "";
    }
    this._isDropdownVisible = false;
    this.filterList();
  }
  selectChannel(item) {
    if (this._selectedItemState !== item) {
      this._selectedItemState = item;
      this.fireCustomEvent("selectionChanged", item ? [this.selectedItem] : []);
    }
    const input = this._input;
    if (input) {
      input.textContent = this._inputValue = "";
    }
    this.requestUpdate();
    this.lostFocus();
  }
};
MgtTeamsChannelPicker._config = {
  useTeamsBasedScopes: false
};
__decorate24([
  property({ attribute: false }),
  __metadata21("design:type", Object)
], MgtTeamsChannelPicker.prototype, "_isDropdownVisible", void 0);
MgtTeamsChannelPicker = MgtTeamsChannelPicker_1 = __decorate24([
  customElement("mgt-teams-channel-picker"),
  __metadata21("design:paramtypes", [])
], MgtTeamsChannelPicker);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks-base/strings.js
var strings15 = {
  cancelNewTaskSubtitle: "Cancel",
  newTaskPlaceholder: "Adding task...",
  addTaskButtonSubtitle: "Add",
  removeTaskSubtitle: "Delete Task"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-tasks-base/mgt-tasks-base.js
var __decorate25 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata22 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter27 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtTasksBase = class extends MgtTemplatedComponent {
  /**
   * The name of a potential new task
   *
   * @readonly
   * @protected
   * @type {string}
   * @memberof MgtTasksBase
   */
  get newTaskName() {
    return this._newTaskName;
  }
  get strings() {
    return strings15;
  }
  constructor() {
    super();
    this.clearState();
    this._previousMediaQuery = this.mediaQuery;
    this.onResize = this.onResize.bind(this);
  }
  /**
   * Synchronizes property values when attributes change.
   *
   * @param {*} name
   * @param {*} oldValue
   * @param {*} newValue
   * @memberof MgtTasks
   */
  attributeChangedCallback(name, oldVal, newVal) {
    super.attributeChangedCallback(name, oldVal, newVal);
    switch (name) {
      case "target-id":
      case "initial-id":
        this.clearState();
        this.requestStateUpdate();
        break;
    }
  }
  /**
   * updates provider state
   *
   * @memberof MgtTasks
   */
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("resize", this.onResize);
  }
  /**
   * removes updates on provider state
   *
   * @memberof MgtTasks
   */
  disconnectedCallback() {
    window.removeEventListener("resize", this.onResize);
    super.disconnectedCallback();
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  render() {
    const provider = Providers.globalProvider;
    if (!provider || provider.state !== ProviderState.SignedIn) {
      return html``;
    }
    if (this.isLoadingState) {
      return this.renderLoadingTask();
    }
    const headerTemplate = !this.hideHeader ? this.renderHeader() : null;
    const newTaskTemplate = this._isNewTaskVisible ? this.renderNewTaskPanel() : null;
    const tasksTemplate = this.isLoadingState ? this.renderLoadingTask() : this.renderTasks();
    return html`
      ${headerTemplate} ${newTaskTemplate}
      <div class="Tasks" dir=${this.direction}>
        ${tasksTemplate}
      </div>
    `;
  }
  /**
   * Render the header part of the component.
   *
   * @protected
   * @returns
   * @memberof MgtTodo
   */
  renderHeader() {
    const headerContentTemplate = this.renderHeaderContent();
    const addClasses = classMap({
      AddBarItem: true,
      NewTaskButton: true,
      hidden: this.readOnly || this._isNewTaskVisible
    });
    return html`
      <div class="Header" dir=${this.direction}>
        ${headerContentTemplate}
        <button class="${addClasses}" @click="${() => this.showNewTaskPanel()}">
          <span class="TaskIcon"></span>
          <span>${this.strings.addTaskButtonSubtitle}</span>
        </button>
      </div>
    `;
  }
  /**
   * Render a task in a loading state.
   *
   * @protected
   * @returns
   * @memberof MgtTodo
   */
  renderLoadingTask() {
    return html`
      <div class="Task LoadingTask">
        <div class="TaskContent">
          <div class="TaskCheckContainer">
            <div class="TaskCheck"></div>
          </div>
          <div class="TaskDetailsContainer">
            <div class="TaskTitle"></div>
            <div class="TaskDetails">
              <span class="TaskDetail">
                <div class="TaskDetailIcon"></div>
                <div class="TaskDetailName"></div>
              </span>
              <span class="TaskDetail">
                <div class="TaskDetailIcon"></div>
                <div class="TaskDetailName"></div>
              </span>
            </div>
          </div>
        </div>
      </div>
    `;
  }
  /**
   * Render the panel for creating a new task
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtTasksBase
   */
  renderNewTaskPanel() {
    const newTaskName = this._newTaskName;
    const taskTitle = html`
      <input
        type="text"
        placeholder="${this.strings.newTaskPlaceholder}"
        .value="${newTaskName}"
        label="new-taskName-input"
        aria-label="new-taskName-input"
        role="textbox"
        @input="${(e) => {
      this._newTaskName = e.target.value;
      this.requestUpdate();
    }}"
      />
    `;
    const taskAddClasses = classMap({
      Disabled: !this._isNewTaskBeingAdded && (!newTaskName || !newTaskName.length),
      TaskAddButtonContainer: true
    });
    const taskAddTemplate = !this._isNewTaskBeingAdded ? html`
          <div
            tabindex='0'
            class="TaskIcon TaskAdd"
            @click="${() => this.addTask()}"
            @keypress="${(e) => {
      if (e.key === "Enter" || e.key === " ")
        this.addTask();
    }}"
          >
          <span>${this.strings.addTaskButtonSubtitle}</span>
          </div>
          <div
            role='button'
            tabindex='0'
            class="TaskIcon TaskCancel"
            @click="${() => this.hideNewTaskPanel()}"
            @keypress="${(e) => {
      if (e.key === "Enter" || e.key === " ")
        this.hideNewTaskPanel();
    }}">
            <span>${this.strings.cancelNewTaskSubtitle}</span>
          </div>
        ` : null;
    const newTaskDetailsTemplate = this.renderNewTaskDetails();
    return html`
      <div dir=${this.direction} class="Task NewTask Incomplete">
        <div class="TaskContent">
          <div class="TaskDetailsContainer">
            <div class="TaskTitle">
              ${taskTitle}
            </div>
            <div class="TaskDetails">
              ${newTaskDetailsTemplate}
            </div>
          </div>
        </div>
        <div class="${taskAddClasses}">
          ${taskAddTemplate}
        </div>
      </div>
    `;
  }
  /**
   * Render a bucket icon.
   *
   * @protected
   * @returns
   * @memberof MgtTodo
   */
  renderBucketIcon() {
    return html`
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M14 2H2V4H3H5H6H10H11H13H14V2ZM10 5H6V6H10V5ZM5 5H3V14H13V5H11V6C11 6.55228 10.5523 7 10 7H6C5.44772 7 5 6.55228 5 6V5ZM1 5H2V14V15H3H13H14V14V5H15V4V2V1H14H2H1V2V4V5Z"
          fill="#3C3C3C"
        />
      </svg>
    `;
  }
  /**
   * Render a calendar icon.
   *
   * @protected
   * @returns
   * @memberof MgtTodo
   */
  renderCalendarIcon() {
    return html`
        <svg width="16" height="20" viewBox="0 0 16 20" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M5 11C5.55228 11 6 10.5523 6 10C6 9.44771 5.55228 9 5 9C4.44772 9 4 9.44771 4 10C4 10.5523 4.44772 11 5 11ZM6 13C6 13.5523 5.55228 14 5 14C4.44772 14 4 13.5523 4 13C4 12.4477 4.44772 12 5 12C5.55228 12 6 12.4477 6 13ZM8 11C8.55229 11 9 10.5523 9 10C9 9.44771 8.55229 9 8 9C7.44771 9 7 9.44771 7 10C7 10.5523 7.44771 11 8 11ZM9 13C9 13.5523 8.55229 14 8 14C7.44771 14 7 13.5523 7 13C7 12.4477 7.44771 12 8 12C8.55229 12 9 12.4477 9 13ZM11 11C11.5523 11 12 10.5523 12 10C12 9.44771 11.5523 9 11 9C10.4477 9 10 9.44771 10 10C10 10.5523 10.4477 11 11 11ZM15 5.5C15 4.11929 13.8807 3 12.5 3H3.5C2.11929 3 1 4.11929 1 5.5V14.5C1 15.8807 2.11929 17 3.5 17H12.5C13.8807 17 15 15.8807 15 14.5V5.5ZM2 7H14V14.5C14 15.3284 13.3284 16 12.5 16H3.5C2.67157 16 2 15.3284 2 14.5V7ZM3.5 4H12.5C13.3284 4 14 4.67157 14 5.5V6H2V5.5C2 4.67157 2.67157 4 3.5 4Z" fill="#717171"/>
        </svg>
      `;
  }
  /**
   * Create a new todo task and add it to the list
   *
   * @protected
   * @returns
   * @memberof MgtTasksBase
   */
  addTask() {
    return __awaiter27(this, void 0, void 0, function* () {
      if (this._isNewTaskBeingAdded || !this.newTaskName) {
        return;
      }
      this._isNewTaskBeingAdded = true;
      yield this.requestUpdate();
      try {
        yield this.createNewTask();
      } finally {
        this._isNewTaskBeingAdded = false;
        this._isNewTaskVisible = false;
        this.requestUpdate();
      }
    });
  }
  /**
   * Clear the form data from the new task panel.
   *
   * @protected
   * @memberof MgtTasksBase
   */
  clearNewTaskData() {
    this._newTaskName = "";
  }
  /**
   * Clear the component state.
   *
   * @protected
   * @memberof MgtTasksBase
   */
  clearState() {
    this.clearNewTaskData();
    this._isNewTaskVisible = false;
    this.requestUpdate();
  }
  /**
   * Handle when a task is clicked
   *
   * @protected
   * @param {Event} e
   * @param {TodoTask} task
   * @memberof MgtTasksBase
   */
  handleTaskClick(e, task) {
    this.fireCustomEvent("taskClick", { task });
  }
  /**
   * Convert a date to a properly formatted string
   *
   * @protected
   * @param {Date} date
   * @returns
   * @memberof MgtTasksBase
   */
  dateToInputValue(date) {
    if (date) {
      return new Date(date.getTime() - date.getTimezoneOffset() * 6e4).toISOString().split("T")[0];
    }
    return null;
  }
  showNewTaskPanel() {
    this._isNewTaskVisible = true;
    this.requestUpdate();
  }
  hideNewTaskPanel() {
    this._isNewTaskVisible = false;
    this.clearNewTaskData();
    this.requestUpdate();
  }
  onResize() {
    if (this.mediaQuery !== this._previousMediaQuery) {
      this._previousMediaQuery = this.mediaQuery;
      this.requestUpdate();
    }
  }
};
__decorate25([
  property({ attribute: "read-only", type: Boolean }),
  __metadata22("design:type", Boolean)
], MgtTasksBase.prototype, "readOnly", void 0);
__decorate25([
  property({ attribute: "hide-header", type: Boolean }),
  __metadata22("design:type", Boolean)
], MgtTasksBase.prototype, "hideHeader", void 0);
__decorate25([
  property({ attribute: "hide-options", type: Boolean }),
  __metadata22("design:type", Boolean)
], MgtTasksBase.prototype, "hideOptions", void 0);
__decorate25([
  property({ attribute: "target-id", type: String }),
  __metadata22("design:type", String)
], MgtTasksBase.prototype, "targetId", void 0);
__decorate25([
  property({ attribute: "initial-id", type: String }),
  __metadata22("design:type", String)
], MgtTasksBase.prototype, "initialId", void 0);

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-todo/graph.todo.js
var __awaiter28 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var TaskStatus;
(function(TaskStatus2) {
  TaskStatus2[TaskStatus2["notStarted"] = 0] = "notStarted";
  TaskStatus2[TaskStatus2["inProgress"] = 1] = "inProgress";
  TaskStatus2[TaskStatus2["completed"] = 2] = "completed";
  TaskStatus2[TaskStatus2["deferred"] = 3] = "deferred";
  TaskStatus2[TaskStatus2["waitingOnOthers"] = 4] = "waitingOnOthers";
})(TaskStatus || (TaskStatus = {}));
var TaskImportance;
(function(TaskImportance2) {
  TaskImportance2[TaskImportance2["low"] = 0] = "low";
  TaskImportance2[TaskImportance2["normal"] = 1] = "normal";
  TaskImportance2[TaskImportance2["high"] = 2] = "high";
})(TaskImportance || (TaskImportance = {}));
var WellknownListName;
(function(WellknownListName2) {
  WellknownListName2[WellknownListName2["none"] = 0] = "none";
  WellknownListName2[WellknownListName2["default"] = 1] = "default";
  WellknownListName2[WellknownListName2["flaggedEmails"] = 2] = "flaggedEmails";
  WellknownListName2[WellknownListName2["unknownFutureValue"] = 3] = "unknownFutureValue";
})(WellknownListName || (WellknownListName = {}));
function getTodoTasks(graph, listId) {
  return __awaiter28(this, void 0, void 0, function* () {
    const tasks = yield graph.api(`/me/todo/lists/${listId}/tasks`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.Read")).get();
    return tasks && tasks.value;
  });
}
function getTodoTaskLists(graph) {
  return __awaiter28(this, void 0, void 0, function* () {
    const taskLists = yield graph.api("/me/todo/lists").header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.Read")).get();
    return taskLists && taskLists.value;
  });
}
function getTodoTaskList(graph, listId) {
  return __awaiter28(this, void 0, void 0, function* () {
    const taskList = yield graph.api(`/me/todo/lists/${listId}`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.Read")).get();
    return taskList;
  });
}
function createTodoTask(graph, listId, taskData) {
  return __awaiter28(this, void 0, void 0, function* () {
    const task = yield graph.api(`/me/todo/lists/${listId}/tasks`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.ReadWrite")).post(taskData);
    return task;
  });
}
function deleteTodoTask(graph, listId, taskId) {
  return __awaiter28(this, void 0, void 0, function* () {
    yield graph.api(`/me/todo/lists/${listId}/tasks/${taskId}`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.ReadWrite")).delete();
  });
}
function updateTodoTask(graph, listId, taskId, taskData) {
  return __awaiter28(this, void 0, void 0, function* () {
    const task = yield graph.api(`/me/todo/lists/${listId}/tasks/${taskId}`).header("Cache-Control", "no-store").middlewareOptions(prepScopes("Tasks.ReadWrite")).patch(taskData);
    return task;
  });
}

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-todo/mgt-todo-css.js
var styles22 = [
  css`
:host([hidden]){display:none}:host{display:block;--default-font-family:'Segoe UI','Segoe UI Web (West European)','Segoe UI',-apple-system,BlinkMacSystemFont,Roboto,'Helvetica Neue',sans-serif;--default-font-size:14px;--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}.ms-Icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.ms-Icon--ChevronDown::before{content:'\\\E70D'}.ms-Icon--ChevronUp::before{content:'\\\E70E'}.ms-Icon--Contact::before{content:'\\\E77B'}.ms-Icon--AddFriend::before{content:'\\\E8FA'}.ms-Icon--OutlookLogoInverse::before{content:'\\\EB6D'}.mgt-light{--color:#000000;--color-sub1:#323130;--color-sub2:#717171;--color-sub3:#727170;--background-color:#ffffff;--background-color--hover:#edebe9;--background-color--active:#e1dfdd;--background-color-sub1:#faf9f8;--background-color-sub2:#f3f2f1;--box-shadow:0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132);--box-shadow-color:rgba(0, 0, 0, 0.092);--icon-color:#605e5c;--tab-line-color:#edebe9;--tab-line-color--hover:#727170;--tab-background-color--hover:#edebe9;--title-color-main:#000000;--title-color-subtitle:#323130;--title-color-sub2:#717171;--line-seperator-color:#edebe9;--placeholder-color:#605e5c;--placeholder-color--focus:#323130;--input-background-color:#ffffff;--input-background-color--hover:#edebe9;--input-border:2px solid #605e5c;--input-border-top:var(--input-border, 2px solid #605e5c);--input-border-right:var(--input-border, 2px solid #605e5c);--input-border-bottom:var(--input-border, 2px solid #605e5c);--input-border-left:var(--input-border, 2px solid #605e5c);--input-border-color--hover:#323130;--input-border-color--focus:#0078d4;--list-background-color:#ffffff;--list-item-background-color--hover:#edebe9;--dropdown-item-text-color:#000000;--dropdown-item-text-hover-color:#000000}.mgt-dark{--color:#ffffff;--color-sub1:#f3f2f1;--color-sub2:#c8c6c4;--color-sub3:#727170;--background-color:#000000;--background-color--hover:#323130;--background-color--active:#4f4f4f;--background-color-sub1:#161514;--background-color-sub2:#4f4f4f;--box-shadow:0 5px 14px 0 rgba(0, 0, 0, 0.8);--box-shadow-color:black;--icon-color:#717171;--tab-line-color:#3b3a39;--tab-line-color--hover:#727170;--tab-background-color--hover:#323130;--title-color-main:#ffffff;--title-color-subtitle:#f3f2f1;--title-color-sub2:#c8c6c4;--line-seperator-color:#3b3a39;--placeholder-color:#717171;--placeholder-color--focus:#f3f2f1;--input-background-color:#000000;--input-background-color--hover:#323130;--input-border:2px solid #8a8886;--input-border-top:var(--input-border, 2px solid #8a8886);--input-border-right:var(--input-border, 2px solid #8a8886);--input-border-bottom:var(--input-border, 2px solid #8a8886);--input-border-left:var(--input-border, 2px solid #8a8886);--input-border-color--hover:#a19f9d;--input-border-color--focus:#0078d4;--list-background-color:#161514;--list-item-background-color--hover:#323130;--dropdown-item-text-color:#ffffff;--dropdown-item-text-hover-color:#ffffff}.mgt-light{--task-border:1px solid #e1dfdd;--task-complete-border:2px dotted #e1dfdd;--task-new-add-button-disabled-background:#edebe9;--task-icon-color:#000000}.mgt-dark{--task-border:1px solid #717171;--task-complete-border:2px dotted #717171;--task-new-add-button-disabled-background:#4f4f4f;--task-icon-color:#ffffff}:host{font-family:var(--default-font-family);display:flex;flex-direction:column;background-color:var(--background-color-sub1,#faf9f8);padding:var(--tasks-padding,12px);color:var(--color-sub1,#323130)}:host input[type=date]::-webkit-calendar-picker-indicator,:host input[type=date]::-webkit-inner-spin-button{display:none;-webkit-appearance:none}:host .TaskIcon{font-family:FabricMDL2Icons;user-select:none;-moz-user-select:none;-ms-user-select:none}:host .TaskIcon.Divider{vertical-align:initial;margin:0 12px;font-size:16px}:host .Header{padding:var(--tasks-header-padding,0);margin:var(--tasks-header-margin,0 0 12px 0);padding:var(--tasks-title-padding,0);display:flex;align-items:center;justify-content:space-between}:host .Header .header__loading{max-width:90px;width:100%;height:20px;background:#f2f2f2}:host .Header select{font-family:var(--default-font-family, "Segoe UI");font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px);border:none;-moz-appearance:none;-webkit-appearance:none;cursor:pointer}:host .Header select::-ms-expand{display:none}:host .Header .PlanTitle{font-family:var(--default-font-family, "Segoe UI");font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px)}:host .Header .AddBar{display:flex}:host .Header .AddBar .AddBarItem{flex:1 1 auto}:host .Header .NewTaskDue{display:flex}:host .Header .NewTaskDue input{flex:1 1 auto;background-color:var(--background-color-sub1,#faf9f8)}:host .Header .TitleCont{flex:1 1 auto;display:flex;align-items:center;height:var(--tasks-new-button-height,34px)}:host .Header .NewTaskButton{flex:0 0 auto;display:flex;justify-content:center;align-items:center;width:var(--tasks-new-button-width,auto);height:var(--tasks-new-button-height,32px);border-radius:2px;padding:0 20px;background:var(--tasks-new-button-background,#0078d4);border:var(--tasks-new-button-border,solid 1px transparent);color:var(--tasks-new-button-color,#fff);user-select:none;-moz-user-select:none;-ms-user-select:none;cursor:pointer}:host .Header .NewTaskButton span{font-size:14px;font-weight:600;letter-spacing:.1px;line-height:14px}:host .Header .NewTaskButton .TaskIcon{margin-right:8px}:host .Header .NewTaskButton.hidden{visibility:hidden}:host .Header .NewTaskButton:hover{background:var(--tasks-new-button-hover-background,#106ebe)}:host .Header .NewTaskButton:active{background:var(--tasks-new-button-active-background,#005a9e)}:host .Task{position:relative;margin:var(--task-margin,0 0 18px 0);padding:var(--task-padding,0 0 0 0);background-color:var(--tasks-background-color,var(--background-color,#fff));border:var(--task-border,1px solid #e1dfdd);border-radius:8px}:host .Task .TaskContent{display:flex}:host .Task .TaskContent .Divider{position:absolute;height:2px;left:0;right:0;bottom:0;background-color:var(--background-color-sub1,#faf9f8)}:host .Task .TaskContent .TaskDetailsContainer{flex:1;display:grid;display:-ms-grid;grid-template-columns:auto 1fr;-ms-grid-columns:auto 1fr;grid-template-rows:auto auto auto auto;-ms-grid-rows:auto auto auto auto;justify-content:space-between;align-items:flex-start;color:var(--task-detail-color,var(--color-sub2,#717171));font-size:12px;font-weight:600;white-space:normal;margin-bottom:12px}:host .Task .TaskContent .TaskDetailsContainer .TaskDetail{width:100%;height:100%;margin:4px 24px 6px 0;display:flex;justify-content:flex-start;align-items:center}:host .Task .TaskContent .TaskDetailsContainer .TaskTitle{color:var(--task-title-color,var(--title-color-subtitle,#323130));font-size:14px;font-weight:600;grid-row:1;-ms-grid-row:1;grid-column:1/3;-ms-grid-column:1;-ms-grid-column-span:2;margin:22px 0 4px}:host .Task .TaskContent .TaskDetailsContainer .TaskGroup{min-height:24px;grid-row:2;-ms-grid-row:2;grid-column:1;-ms-grid-column:1}:host .Task .TaskContent .TaskDetailsContainer .TaskBucket{min-height:24px;grid-row:2;-ms-grid-row:2;grid-column:2;-ms-grid-column:2}:host .Task .TaskContent .TaskDetailsContainer .TaskDue{justify-content:flex-end;align-items:flex-start;grid-row:4;-ms-grid-row:4;grid-column:1/3;-ms-grid-column:1;-ms-grid-column-span:2}:host .Task .TaskContent .TaskDetailsContainer.tablet{grid-template-columns:1fr .5fr 1fr .5fr;-ms-grid-columns:1fr .5fr 1fr .5fr;grid-template-rows:auto auto;-ms-grid-rows:auto auto}:host .Task .TaskContent .TaskDetailsContainer.tablet.NoPlan{grid-template-columns:0 1fr 1fr 1fr;-ms-grid-columns:0 1fr 1fr 1fr}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskDetail{margin:4px 24px 6px 0}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskTitle{grid-row:1;-ms-grid-row:1;grid-column:1/5;-ms-grid-column:1;-ms-grid-column-span:4}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskGroup{grid-row:2;-ms-grid-row:2;grid-column:1;-ms-grid-column:1}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskBucket{grid-row:2;-ms-grid-row:2;grid-column:2;-ms-grid-column:2}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskAssignee{grid-row:2;-ms-grid-row:2;grid-column:3;-ms-grid-column:3}:host .Task .TaskContent .TaskDetailsContainer.tablet .TaskDue{justify-content:flex-start;align-items:center;grid-row:2;-ms-grid-row:2;grid-column:4;-ms-grid-column:4}:host .Task .TaskContent .TaskDetailsContainer.desktop{grid-template-columns:2fr 1fr .5fr 1fr .5fr;-ms-grid-columns:2fr 1fr .5fr 1fr .5fr;grid-template-rows:auto;-ms-grid-rows:auto;margin:0}:host .Task .TaskContent .TaskDetailsContainer.desktop.NoPlan{grid-template-columns:2fr 0 1fr 1fr 1fr;-ms-grid-columns:2fr 0 1fr 1fr 1fr}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskDetail{margin:0 24px 0 0}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskTitle{padding:0;grid-row:1;-ms-grid-row:1;grid-column:1;-ms-grid-column:1}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskGroup{min-height:61px;grid-row:1;-ms-grid-row:1;grid-column:2;-ms-grid-column:2}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskBucket{grid-row:1;-ms-grid-row:1;grid-column:3;-ms-grid-column:3}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskAssignee{grid-row:1;-ms-grid-row:1;grid-column:4;-ms-grid-column:4}:host .Task .TaskContent .TaskDetailsContainer.desktop .TaskDue{justify-content:flex-start;align-items:center;grid-row:1;-ms-grid-row:1;grid-column:5;-ms-grid-column:5}:host .Task .TaskContent .TaskDetailsContainer svg{vertical-align:middle;margin-right:4px}:host .Task .TaskContent .TaskDetailsContainer svg path{fill:var(--task-detail-color,var(--color-sub2,#717171))}:host .Task .TaskContent .TaskDetailsContainer select,:host .Task .TaskContent .TaskDetailsContainer span{vertical-align:middle;color:var(--color-sub2,#717171)}:host .Task .TaskContent .TaskDetailsContainer .TaskIcon{color:#797775;margin-right:8px}:host .Task .TaskContent .TaskDetailsContainer mgt-people{color:var(--task-detail-color,var(--color-sub2,#717171));font-size:16px}:host .Task .TaskContent .TaskDetailsContainer mgt-person{display:inline-block}:host .Task .TaskContent .TaskDetailsContainer .Picker{background-color:var(--background-color-sub1,#faf9f8);-webkit-background-clip:padding-box;-moz-background-clip:padding-box;background-clip:padding-box;width:var(--mgt-flyout-set-width,350px);color:var(--task-detail-color,var(--color-sub2,#717171))}:host .Task .TaskContent .TaskDetailsContainer .Picker mgt-people-picker{--separator-margin:0px 10px 0px 10px}:host .Task .TaskContent .TaskDetailsContainer input,:host .Task .TaskContent .TaskDetailsContainer select{color:var(--task-detail-color,var(--color-sub2,#717171));font-size:.9em;background-color:var(--background-color-sub1,#faf9f8)}:host .Task .TaskCheckContainer{font-family:FabricMDL2Icons;display:inline-block;border-radius:50%;color:#fff;cursor:pointer;display:flex;align-items:var(--task-icon-alignment,flex-start);margin:21px 10px 20px 20px;user-select:none;-moz-user-select:none;-ms-user-select:none}:host .Task .TaskCheckContainer.Complete .TaskCheck{background-color:var(--task-icon-background-completed,#00ad56);border:var(--task-icon-border-completed,solid 1px #fff);color:var(--task-icon-color-completed,#fff)}:host .Task .TaskCheckContainer.Complete .TaskContent .TaskDetailsContainer .TaskTitle{text-decoration:line-through;color:var(--color-sub3,#727170)}:host .Task .TaskCheckContainer .TaskCheck{font-family:FabricMDL2Icons;font-size:12px;display:inline-block;width:18px;height:18px;border-radius:var(--task-icon-border-radius,50%);border:var(--task-icon-border,solid 1px #797775);color:var(--task-icon-color,#000);display:flex;justify-content:center;align-items:center;background-color:var(--task-icon-background,transparent);user-select:none;-moz-user-select:none;-ms-user-select:none}:host .Task .TaskCheckContainer .TaskCheck.Loading .TaskCheckContent{animation:rotateIcon 2s infinite linear}:host .Task .TaskOptions{cursor:pointer;user-select:none;-moz-user-select:none;-ms-user-select:none;margin:16px 8px 0 0}:host .ReadOnly.Task .TaskCheckContainer{cursor:default}:host .Complete.Task{background:var(--task-complete-background,var(--background-color-sub1,#faf9f8));border:var(--task-complete-border,2px dotted #e1dfdd)}:host .Complete.Task .TaskContent .TaskDetailsContainer .TaskTitle{text-decoration:line-through;color:var(--color-sub3,#727170)}:host .NewTask.Task{margin:var(--task-new-margin,var(--task-margin,0 0 24px 0));display:flex;flex-direction:row}:host .NewTask.Task .SelfAssign{display:none}:host .NewTask.Task .AssignTo{border:0;background:0 0}:host .NewTask.Task .FakeCheckBox{width:15px;height:15px;cursor:pointer;margin:0 5px 0 5px}:host .NewTask.Task .FakeCheckBox::after{font-family:FabricMDL2Icons;content:'\uE739'}:host .NewTask.Task .FakeCheckBox~:checked{font-family:FabricMDL2Icons;content:'\uE73A'}:host .NewTask.Task .TaskContent{flex:1 1 auto;align-content:center;vertical-align:middle;margin:0 0 0 12px}:host .NewTask.Task .TaskContent .TaskDetailsContainer{display:flex;flex-direction:column;align-items:stretch;margin:0}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskTitle{display:flex;height:32px;padding:2px}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskTitle input{flex:1;font-family:var(--default-font-family, "Segoe UI");margin:var(--task-new-input-margin,0 24px 0 16px);padding:var(--task-new-input-padding,6px);font-size:var(--task-new-input-font-size,14px);font-weight:600;border:var(--task-new-border,none);border-bottom:1px solid #e1dfdd;outline:0;border-radius:0;background-color:var(--background-color-sub1,#faf9f8)}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskTitle input:hover{border-bottom:1px solid #106ebe}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskTitle input:active{border-bottom:1px solid #005a9e}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskTitle input:focus{border-bottom:1px solid #0078d4}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails{display:flex;justify-content:stretch;align-items:center;flex-wrap:wrap;margin:14px 0 14px 4px}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskGroup{margin:8px 16px}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskBucket{margin:8px 16px}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskDue{margin:8px 16px}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails .NewTaskAssignee{margin:8px 16px;min-width:80px}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails .TaskPeople label{display:flex;align-content:center;align-items:center}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails input,:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails select{font-family:var(--default-font-family);font-size:12px;font-weight:600;border:var(--task-new-select-border,none);border-bottom:1px solid #e1dfdd}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails input:hover,:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails select:hover{border-bottom:1px solid #106ebe}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails input:active,:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails select:active{border-bottom:1px solid #005a9e}:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails input:focus,:host .NewTask.Task .TaskContent .TaskDetailsContainer .TaskDetails select:focus{border-bottom:1px solid #0078d4}:host .NewTask.Task .TaskAddButtonContainer{margin-right:28px}:host .NewTask.Task .TaskAddButtonContainer .TaskAdd,:host .NewTask.Task .TaskAddButtonContainer .TaskCancel{justify-content:center;align-items:center;cursor:pointer;flex:0 0 auto;display:flex;width:var(--tasks-new-button-width,100px);height:var(--tasks-new-button-height,32px);border-radius:4px;border:var(--tasks-new-button-border,solid 1px #e5e5e5);font-family:var(--default-font-family, "Segoe UI");font-size:14px;line-height:20px}:host .NewTask.Task .TaskAddButtonContainer .TaskAdd{color:#fff;background:var(--task-new-add-button-background,#0078d4);margin:22px 0 12px auto}:host .NewTask.Task .TaskAddButtonContainer .TaskCancel{color:var(--task-new-cancel-button-color,var(--color-sub1,#323130))}:host .NewTask.Task .TaskAddButtonContainer.Disabled .TaskAdd{color:var(--task-new-cancel-button-color,var(--color-sub1,#323130));background:var(--task-new-add-button-disabled-background,#fff);cursor:default}:host .LoadingTask.Task .TaskCheckContainer{cursor:default}:host .LoadingTask.Task .TaskDetails{display:flex}:host .LoadingTask.Task .TaskCheck{background:#f2f2f2;border-color:#f2f2f2;cursor:default}:host .LoadingTask.Task .TaskDetailIcon{width:16px;height:16px;margin:5px;background:#f2f2f2}:host .LoadingTask.Task .TaskTitle{background:#f2f2f2;max-width:400px;height:20px;margin-right:20px!important}:host .LoadingTask.Task .TaskDetail{margin-right:12px;display:flex;flex-direction:row;align-items:center}:host .LoadingTask.Task .TaskDetailName{width:81px;height:10px;background:#f2f2f2}@keyframes rotateIcon{from{transform:rotate(0)}to{transform:rotate(360deg)}}[dir=rtl] mgt-arrow-options{--arrow-options-left:auto}[dir=rtl] mgt-dot-options{--dot-options-translateX:translateX(60px)}[dir=rtl] .TaskDetails{margin-right:14px!important}[dir=rtl] .TaskIcon{margin-left:8px}[dir=rtl] .TaskDetail svg{margin-left:4px}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host svg{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}:host{border-radius:8px}:host .Task{border:none}
`
];

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-todo/strings.js
var strings16 = {
  cancelNewTaskSubtitle: "Cancel",
  newTaskPlaceholder: "Adding task...",
  addTaskButtonSubtitle: "Add",
  removeTaskSubtitle: "Delete Task"
};

// node_modules/@microsoft/mgt-components/dist/es6/components/mgt-todo/mgt-todo.js
var __decorate26 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata23 = function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter29 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MgtTodo = class MgtTodo2 extends MgtTasksBase {
  /**
   * Array of styles to apply to the element. The styles should be defined
   * using the `css` tag function.
   */
  static get styles() {
    return styles22;
  }
  get strings() {
    return strings16;
  }
  /**
   * Get the scopes required for todo
   *
   * @static
   * @return {*}  {string[]}
   * @memberof MgtTodo
   */
  static get requiredScopes() {
    return ["tasks.read", "tasks.readwrite"];
  }
  constructor() {
    super();
    this._graph = null;
    this._newTaskDueDate = null;
    this._newTaskListId = "";
    this._currentList = null;
    this._lists = [];
    this._tasks = [];
    this._loadingTasks = [];
    this._isLoadingTasks = false;
  }
  /**
   * Render the list of todo tasks
   */
  renderTasks() {
    if (this._isLoadingTasks) {
      return this.renderLoadingTask();
    }
    let tasks = this._tasks;
    if (tasks && this.taskFilter) {
      tasks = tasks.filter((task) => this.taskFilter(task));
    }
    const taskTemplates = repeat(tasks, (task) => task.id, (task) => this.renderTask(task));
    return html`
      ${taskTemplates}
    `;
  }
  /**
   * Render the details part of the new task panel
   *
   * @protected
   * @returns {TemplateResult}
   * @memberof MgtTodo
   */
  renderNewTaskDetails() {
    const lists = this._lists.filter((list) => this._currentList && list.id === this._currentList.id || !this._currentList && list.id === this._newTaskListId);
    if (lists.length > 0 && !this._newTaskListId) {
      this._newTaskListId = lists[0].id;
    }
    const taskList = this._currentList ? html`
          <span class="NewTaskGroup">
            ${this.renderBucketIcon()}
            <span>${this._currentList.displayName}</span>
          </span>
        ` : html`
          <span class="NewTaskGroup">
            ${this.renderBucketIcon()}
            <select
              .value="${this._newTaskListId}"
              @change="${(e) => {
      this._newTaskListId = e.target.value;
    }}"
            >
              ${lists.map((list) => html`
                  <option value="${list.id}">${list.displayName}</option>
                `)}
            </select>
          </span>
        `;
    const taskDue = html`
      <span class="NewTaskDue">
        ${this.renderCalendarIcon()}
        <input
          type="date"
          label="new-taskDate-input"
          aria-label="new-taskDate-input"
          role="textbox"
          .value="${this.dateToInputValue(this._newTaskDueDate)}"
          @change="${(e) => {
      const value = e.target.value;
      if (value) {
        this._newTaskDueDate = new Date(value + "T17:00");
      } else {
        this._newTaskDueDate = null;
      }
    }}"
        />
      </span>
    `;
    return html`
      ${taskList} ${taskDue}
    `;
  }
  /**
   * Render the header part of the component.
   *
   * @protected
   * @returns
   * @memberof MgtTodo
   */
  renderHeaderContent() {
    if (this.isLoadingState) {
      return html`
        <div class="header__loading"></div>
      `;
    }
    const lists = this._lists || [];
    const currentList = this._currentList;
    const targetId = this.targetId;
    let listSelect;
    if (targetId && lists.length) {
      const list = lists.find((l) => l.id === targetId);
      if (list) {
        listSelect = html`
          <span class="PlanTitle">
            ${list.displayName}
          </span>
        `;
      }
    } else if (currentList) {
      const listOptions = {};
      for (const l of lists) {
        listOptions[l.displayName] = () => this.loadTaskList(l);
      }
      listSelect = html`
        <mgt-arrow-options .value="${currentList.displayName}" .options="${listOptions}"></mgt-arrow-options>
      `;
    }
    return html`
      <span class="TitleCont">
        ${listSelect}
      </span>
    `;
  }
  /**
   * Render a task in the list.
   *
   * @protected
   * @param {TodoTask} task
   * @returns
   * @memberof MgtTodo
   */
  renderTask(task) {
    const context = { task, list: this._currentList };
    if (this.hasTemplate("task")) {
      return this.renderTemplate("task", context, task.id);
    }
    const isCompleted = TaskStatus[task.status] === TaskStatus.completed;
    const isLoading = this._loadingTasks.includes(task.id);
    const taskCheckClasses = {
      Complete: !isLoading && isCompleted,
      Loading: isLoading,
      TaskCheck: true,
      TaskIcon: true
    };
    const taskCheckContent = isLoading ? html`
          
        ` : isCompleted ? html`
          
        ` : null;
    let taskDetailsTemplate = null;
    if (this.hasTemplate("task-details")) {
      taskDetailsTemplate = this.renderTemplate("task-details", context, `task-details-${task.id}`);
    } else {
      const taskDueTemplate = task.dueDateTime ? html`
            <div class="TaskDetail TaskDue">
              <span>Due ${getShortDateString(new Date(task.dueDateTime.dateTime))}</span>
            </div>
          ` : null;
      taskDetailsTemplate = html`
        <div class="TaskTitle">
          ${task.title}
        </div>
        <div class="TaskDetail TaskBucket">
          ${this.renderBucketIcon()}
          <span>${this._currentList.displayName}</span>
        </div>
        ${taskDueTemplate}
      `;
    }
    const taskOptionsTemplate = !this.readOnly && !this.hideOptions ? html`
            <div class="TaskOptions">
              <mgt-dot-options
                .options="${{
      [this.strings.removeTaskSubtitle]: (e) => this.removeTask(e, task.id)
    }}"
              ></mgt-dot-options>
            </div>
          ` : null;
    const taskClasses = classMap({
      Complete: isCompleted,
      Incomplete: !isCompleted,
      ReadOnly: this.readOnly,
      Task: true
    });
    const taskCheckContainerClasses = classMap({
      Complete: isCompleted,
      Incomplete: !isCompleted,
      TaskCheckContainer: true
    });
    return html`
      <div class=${taskClasses}>
        <div class="TaskContent" @click="${(e) => this.handleTaskClick(e, task)}}">
          <span class=${taskCheckContainerClasses} @click="${(e) => this.handleTaskCheckClick(e, task)}">
            <span class=${classMap(taskCheckClasses)}>
              <span class="TaskCheckContent">${taskCheckContent}</span>
            </span>
          </span>
          <div class="TaskDetailsContainer ${this.mediaQuery}">
            ${taskDetailsTemplate}
          </div>
          ${taskOptionsTemplate}
          <div class="Divider"></div>
        </div>
      </div>
    `;
  }
  /**
   * loads tasks from dataSource
   *
   * @returns
   * @memberof MgtTasks
   */
  loadState() {
    return __awaiter29(this, void 0, void 0, function* () {
      const provider = Providers.globalProvider;
      if (!provider || provider.state !== ProviderState.SignedIn) {
        return;
      }
      if (!this._graph) {
        const graph = provider.graph.forComponent(this);
        this._graph = graph;
      }
      let lists = this._lists;
      if (!lists || !lists.length) {
        if (this.targetId) {
          const targetList = yield getTodoTaskList(this._graph, this.targetId);
          lists = targetList ? [targetList] : [];
        } else {
          lists = yield getTodoTaskLists(this._graph);
        }
        this._tasks = [];
        this._currentList = null;
        this._lists = lists;
      }
      let currentList = this._currentList;
      if (!currentList && lists && lists.length) {
        if (this.initialId) {
          currentList = lists.find((l) => l.id === this.initialId);
        }
        if (!currentList) {
          currentList = lists[0];
        }
        this._tasks = [];
        this._currentList = currentList;
      }
      if (currentList) {
        yield this.loadTaskList(currentList);
      }
    });
  }
  /**
   * Send a request the Graph to create a new todo task item
   *
   * @protected
   * @returns {Promise<any>}
   * @memberof MgtTodo
   */
  createNewTask() {
    return __awaiter29(this, void 0, void 0, function* () {
      const listId = this._currentList.id;
      const taskData = {
        title: this.newTaskName
      };
      if (this._newTaskDueDate) {
        taskData["dueDateTime"] = {
          dateTime: this._newTaskDueDate.toLocaleDateString(),
          timeZone: "UTC"
        };
      }
      const task = yield createTodoTask(this._graph, listId, taskData);
      this._tasks.unshift(task);
    });
  }
  /**
   * Clear out the new task metadata input fields
   *
   * @protected
   * @memberof MgtTodo
   */
  clearNewTaskData() {
    super.clearNewTaskData();
    this._newTaskDueDate = null;
    this._newTaskListId = null;
  }
  /**
   * Clear the state of the component
   *
   * @protected
   * @memberof MgtTodo
   */
  clearState() {
    super.clearState();
    this._currentList = null;
    this._lists = [];
    this._tasks = [];
    this._loadingTasks = [];
    this._isLoadingTasks = false;
  }
  loadTaskList(list) {
    return __awaiter29(this, void 0, void 0, function* () {
      this._isLoadingTasks = true;
      this._currentList = list;
      this.requestUpdate();
      this._tasks = yield getTodoTasks(this._graph, list.id);
      this._isLoadingTasks = false;
      this.requestUpdate();
    });
  }
  updateTaskStatus(task, taskStatus) {
    return __awaiter29(this, void 0, void 0, function* () {
      this._loadingTasks = [...this._loadingTasks, task.id];
      this.requestUpdate();
      task.status = taskStatus;
      const listId = this._currentList.id;
      task = yield updateTodoTask(this._graph, listId, task.id, task);
      const taskIndex = this._tasks.findIndex((t) => t.id === task.id);
      this._tasks[taskIndex] = task;
      this._loadingTasks = this._loadingTasks.filter((id) => id !== task.id);
      this.requestUpdate();
    });
  }
  // tslint:disable-next-line: completed-docs
  removeTask(e, taskId) {
    return __awaiter29(this, void 0, void 0, function* () {
      this._tasks = this._tasks.filter((t) => t.id !== taskId);
      this.requestUpdate();
      const listId = this._currentList.id;
      yield deleteTodoTask(this._graph, listId, taskId);
      this._tasks = this._tasks.filter((t) => t.id !== taskId);
    });
  }
  handleTaskCheckClick(e, task) {
    if (!this.readOnly) {
      if (TaskStatus[task.status] === TaskStatus.completed) {
        this.updateTaskStatus(task, TaskStatus.notStarted);
      } else {
        this.updateTaskStatus(task, TaskStatus.completed);
      }
      e.stopPropagation();
      e.preventDefault();
    }
  }
};
MgtTodo = __decorate26([
  customElement("mgt-todo"),
  __metadata23("design:paramtypes", [])
], MgtTodo);
export {
  Agenda,
  BatchResponse,
  BetaGraph,
  CacheService,
  CacheStore,
  ComponentMediaQuery,
  EventDispatcher,
  File2 as File,
  FileList,
  FluentButton,
  FluentCard,
  FluentCheckbox,
  FluentDesignSystemProvider,
  FluentProgress,
  FluentProgressRing,
  Get,
  Graph,
  GraphPageIterator,
  GroupType,
  IProvider,
  LocalizationHelper,
  Login,
  LoginType,
  MICROSOFT_GRAPH_DEFAULT_ENDPOINT,
  MICROSOFT_GRAPH_ENDPOINTS,
  Mgt,
  MgtAgenda,
  MgtBaseComponent,
  MgtBaseProvider,
  MgtFile,
  MgtFileList,
  MgtFileUpload,
  MgtGet,
  MgtLogin,
  MgtMockProvider,
  MgtPeople,
  MgtPeoplePicker,
  MgtPerson,
  MgtPersonCard,
  MgtTasks,
  MgtTeamsChannelPicker,
  MgtTemplatedComponent,
  MgtTodo,
  MockProvider,
  PACKAGE_VERSION,
  People,
  PeoplePicker,
  Person,
  PersonCard,
  PersonCardInteraction,
  PersonType,
  PersonViewType,
  ProviderState,
  Providers,
  ProvidersChangedState,
  ResponseType2 as ResponseType,
  SimpleProvider,
  Tasks,
  TasksSource,
  TeamsChannelPicker,
  TeamsHelper,
  TemplateHelper,
  Todo,
  UserType,
  ViewType,
  arraysAreEqual,
  avatarType,
  chainMiddleware,
  createFromProvider,
  equals,
  prepScopes,
  validateBaseURL,
  wrapMgt
};
/*! Bundled license information:

lit-html/directives/class-map.js:
  (**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

lit-html/directives/repeat.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

lodash-es/lodash.default.js:
  (**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

lodash-es/lodash.js:
  (**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 5.3.3
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@microsoft_mgt-react.js.map
