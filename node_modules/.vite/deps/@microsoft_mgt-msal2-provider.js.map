{
  "version": 3,
  "sources": ["../../@microsoft/mgt-msal2-provider/dist/es6/Msal2Provider.ts", "../../@microsoft/mgt-msal2-provider/dist/es6/mgt-msal2-provider.ts"],
  "sourcesContent": ["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  IProvider,\n  LoginType,\n  ProviderState,\n  createFromProvider,\n  Providers,\n  IProviderAccount\n} from '@microsoft/mgt-element';\nimport {\n  Configuration,\n  PublicClientApplication,\n  SilentRequest,\n  PopupRequest,\n  RedirectRequest,\n  AuthenticationResult,\n  AccountInfo,\n  EndSessionRequest,\n  InteractionRequiredAuthError\n} from '@azure/msal-browser';\nimport { AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProviderOptions';\n\n/**\n * base config for MSAL 2.0 authentication\n *\n * @export\n * @interface Msal2ConfigBase\n */\ninterface Msal2ConfigBase {\n  /**\n   * Redirect URI\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  redirectUri?: string;\n\n  /**\n   * Authority URL\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  authority?: string;\n\n  /**\n   * Other options\n   *\n   * @type {Configuration}\n   * @memberof Msal2Config\n   */\n  options?: Configuration;\n\n  /**\n   * List of scopes required\n   *\n   * @type {string[]}\n   * @memberof Msal2ConfigBase\n   */\n  scopes?: string[];\n  /**\n   * loginType if login uses popup\n   *\n   * @type {LoginType}\n   * @memberof Msal2ConfigBase\n   */\n  loginType?: LoginType;\n  /**\n   * login hint value\n   *\n   * @type {string}\n   * @memberof Msal2ConfigBase\n   */\n  loginHint?: string;\n  /**\n   * Domain hint value\n   *\n   * @type {string}\n   * @memberof Msal2ConfigBase\n   */\n  domainHint?: string;\n  /**\n   * prompt value\n   *\n   * @type {string}\n   * @memberof Msal2ConfigBase\n   */\n  prompt?: PromptType;\n\n  /**\n   * Session ID\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  sid?: string;\n\n  /**\n   * Specifies if incremental consent is disabled\n   *\n   * @type {boolean}\n   * @memberof Msal2ConfigBase\n   */\n  isIncrementalConsentDisabled?: boolean;\n}\n\n/**\n * Config for MSAL2.0 Authentication\n *\n * @export\n * @interface Msal2Config\n */\nexport interface Msal2Config extends Msal2ConfigBase {\n  /**\n   * Client ID of app registration\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  clientId: string;\n}\n\n/**\n * Config for MSAL 2.0 Authentication where a PublicClientApplication already exists\n *\n * @export\n * @interface Msal2PublicClientApplicationConfig\n */\nexport interface Msal2PublicClientApplicationConfig extends Msal2ConfigBase {\n  /**\n   * Existing PublicClientApplication instance to use\n   *\n   * @type {PublicClientApplication}\n   * @memberof Msal2PublicClientApplicationConfig\n   */\n  publicClientApplication: PublicClientApplication;\n}\n\n/**\n * Prompt type enum\n *\n * @export\n * @enum {number}\n */\nexport enum PromptType {\n  SELECT_ACCOUNT = 'select_account',\n  LOGIN = 'login',\n  CONSENT = 'consent'\n}\n\n/**\n * MSAL2Provider using msal-browser to acquire tokens for authentication\n *\n * @export\n * @class Msal2Provider\n * @extends {IProvider}\n */\nexport class Msal2Provider extends IProvider {\n  private _publicClientApplication: PublicClientApplication;\n\n  /**\n   * Login type, Either Redirect or Popup\n   *\n   * @private\n   * @type {LoginType}\n   * @memberof Msal2Provider\n   */\n  private _loginType: LoginType;\n\n  /**\n   * Login hint, if provided\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private _loginHint;\n\n  /**\n   * Domain hint if provided\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private _domainHint;\n\n  /**\n   * Prompt type\n   *\n   * @private\n   * @type {string}\n   * @memberof Msal2Provider\n   */\n  private _prompt: string;\n\n  /**\n   * Session ID, if provided\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private _sid;\n\n  /**\n   * Configuration settings for authentication\n   *\n   * @private\n   * @type {Configuration}\n   * @memberof Msal2Provider\n   */\n  private ms_config: Configuration;\n\n  /**\n   * Gets the PublicClientApplication Instance\n   *\n   * @private\n   * @type {PublicClientApplication}\n   * @memberof Msal2Provider\n   */\n  public get publicClientApplication() {\n    return this._publicClientApplication;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtMsal2Provider';\n  }\n\n  /**\n   * List of scopes\n   *\n   * @type {string[]}\n   * @memberof Msal2Provider\n   */\n  public scopes: string[];\n\n  private sessionStorageRequestedScopesKey = 'mgt-requested-scopes';\n  private sessionStorageDeniedScopesKey = 'mgt-denied-scopes';\n  private homeAccountKey = '275f3731-e4a4-468a-bf9c-baca24b31e26';\n\n  public constructor(config: Msal2Config | Msal2PublicClientApplicationConfig) {\n    super();\n    this.initProvider(config);\n  }\n\n  /**\n   * Initialize provider with configuration details\n   *\n   * @private\n   * @param {Msal2Config} config\n   * @memberof Msal2Provider\n   */\n  private async initProvider(config: Msal2Config | Msal2PublicClientApplicationConfig) {\n    const msalConfig: Configuration = config.options || { auth: { clientId: '' } };\n    this.ms_config = msalConfig;\n    this.ms_config.cache = msalConfig.cache || {};\n    this.ms_config.cache.cacheLocation = msalConfig.cache.cacheLocation || 'localStorage';\n    if (\n      typeof this.ms_config.cache.storeAuthStateInCookie === 'undefined' ||\n      this.ms_config.cache.storeAuthStateInCookie === null\n    ) {\n      this.ms_config.cache.storeAuthStateInCookie = true;\n    }\n\n    this.ms_config.system = msalConfig.system || {};\n    this.ms_config.system.iframeHashTimeout = msalConfig.system.iframeHashTimeout || 10000;\n\n    if (config.authority) {\n      this.ms_config.auth.authority = config.authority;\n    }\n    if (config.redirectUri) {\n      this.ms_config.auth.redirectUri = config.redirectUri;\n    }\n\n    if ('clientId' in config) {\n      if (config.clientId) {\n        this.ms_config.auth.clientId = config.clientId;\n        this._publicClientApplication = new PublicClientApplication(this.ms_config);\n      } else {\n        throw new Error('clientId must be provided');\n      }\n    } else if ('publicClientApplication' in config) {\n      if (config.publicClientApplication) {\n        this._publicClientApplication = config.publicClientApplication;\n      } else {\n        throw new Error('publicClientApplication must be provided');\n      }\n    } else {\n      throw new Error('either clientId or publicClientApplication must be provided');\n    }\n\n    this._loginType = typeof config.loginType !== 'undefined' ? config.loginType : LoginType.Redirect;\n    this._loginHint = typeof config.loginHint !== 'undefined' ? config.loginHint : null;\n    this._sid = typeof config.sid !== 'undefined' ? config.sid : null;\n    this.isIncrementalConsentDisabled =\n      typeof config.isIncrementalConsentDisabled !== 'undefined' ? config.isIncrementalConsentDisabled : false;\n    this._domainHint = typeof config.domainHint !== 'undefined' ? config.domainHint : null;\n    this.scopes = typeof config.scopes !== 'undefined' ? config.scopes : ['user.read'];\n    this._prompt = typeof config.prompt !== 'undefined' ? config.prompt : PromptType.SELECT_ACCOUNT;\n    this.graph = createFromProvider(this);\n    try {\n      const tokenResponse = await this._publicClientApplication.handleRedirectPromise();\n      if (tokenResponse !== null) {\n        this.handleResponse(tokenResponse?.account);\n      } else {\n        this.trySilentSignIn();\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  /**\n   * Attempts to sign in user silently\n   *\n   * @memberof Msal2Provider\n   */\n  public async trySilentSignIn() {\n    let silentRequest: any = {\n      scopes: this.scopes,\n      domainHint: this._domainHint\n    };\n    if (this._sid || this._loginHint) {\n      silentRequest.sid = this._sid;\n      silentRequest.loginHint = this._loginHint;\n      try {\n        this.setState(ProviderState.Loading);\n        const response = await this._publicClientApplication.ssoSilent(silentRequest);\n        if (response) {\n          this.handleResponse(response?.account);\n        }\n      } catch (e) {\n        this.setState(ProviderState.SignedOut);\n      }\n    } else {\n      const account: AccountInfo = this.getAccount();\n      if (account) {\n        if (await this.getAccessToken(null)) {\n          this.handleResponse(account);\n          return;\n        }\n      }\n      this.setState(ProviderState.SignedOut);\n    }\n  }\n\n  /**\n   * Log in the user\n   *\n   * @return {*}  {Promise<void>}\n   * @memberof Msal2Provider\n   */\n  public async login(): Promise<void> {\n    const loginRequest: PopupRequest = {\n      scopes: this.scopes,\n      loginHint: this._loginHint,\n      prompt: this._prompt,\n      domainHint: this._domainHint\n    };\n    if (this._loginType == LoginType.Popup) {\n      const response = await this._publicClientApplication.loginPopup(loginRequest);\n      this.handleResponse(response?.account);\n    } else {\n      const loginRedirectRequest: RedirectRequest = { ...loginRequest };\n      this._publicClientApplication.loginRedirect(loginRedirectRequest);\n    }\n  }\n\n  /**\n   * Get all signed in accounts\n   *\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  public getAllAccounts() {\n    let usernames = [];\n    this._publicClientApplication.getAllAccounts().forEach((account: AccountInfo) => {\n      usernames.push({ username: account.username, id: account.homeAccountId } as IProviderAccount);\n    });\n    return usernames;\n  }\n\n  /**\n   * Switching between accounts\n   *\n   * @param {*} user\n   * @memberof Msal2Provider\n   */\n  public setActiveAccount(user: IProviderAccount) {\n    this._publicClientApplication.setActiveAccount(this._publicClientApplication.getAccountByHomeId(user.id));\n    this.setStoredAccount();\n    super.setActiveAccount(user);\n  }\n\n  /**\n   * Once a succesful login occurs, set the active account and store it\n   *\n   * @param {(AuthenticationResult | null)} account\n   * @memberof Msal2Provider\n   */\n  handleResponse(account: AccountInfo) {\n    if (account !== null) {\n      this.setActiveAccount({\n        username: account.name,\n        id: account.homeAccountId\n      } as IProviderAccount);\n      this.setState(ProviderState.SignedIn);\n    } else {\n      this.setState(ProviderState.SignedOut);\n    }\n    this.clearRequestedScopes();\n  }\n\n  /**\n   * Store the currently signed in account in storage\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private setStoredAccount() {\n    this.clearStoredAccount();\n    window[this.ms_config.cache.cacheLocation].setItem(\n      this.homeAccountKey,\n      this._publicClientApplication.getActiveAccount().homeAccountId\n    );\n  }\n\n  /**\n   * Get the stored account from storage\n   *\n   * @private\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  private getStoredAccount() {\n    let homeId = null;\n\n    homeId = window[this.ms_config.cache.cacheLocation].getItem(this.homeAccountKey);\n\n    return this._publicClientApplication.getAccountByHomeId(homeId);\n  }\n\n  /**\n   * Clears the stored account from storage\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private clearStoredAccount() {\n    window[this.ms_config.cache.cacheLocation].removeItem(this.homeAccountKey);\n  }\n\n  /**\n   * Adds scopes that have already been requested to sessionstorage\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @memberof Msal2Provider\n   */\n  protected setRequestedScopes(scopes: string[]) {\n    if (scopes) {\n      sessionStorage.setItem(this.sessionStorageRequestedScopesKey, JSON.stringify(scopes));\n    }\n  }\n\n  /**\n   * Adds denied scopes to session storage\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @memberof Msal2Provider\n   */\n  protected addDeniedScopes(scopes: string[]) {\n    if (scopes) {\n      let deniedScopes: string[] = this.getDeniedScopes() || [];\n      deniedScopes = deniedScopes.concat(scopes);\n\n      let index = deniedScopes.indexOf('openid');\n      if (index !== -1) {\n        deniedScopes.splice(index, 1);\n      }\n\n      index = deniedScopes.indexOf('profile');\n      if (index !== -1) {\n        deniedScopes.splice(index, 1);\n      }\n      sessionStorage.setItem(this.sessionStorageDeniedScopesKey, JSON.stringify(deniedScopes));\n    }\n  }\n\n  /**\n   * Gets denied scopes\n   *\n   * @protected\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  protected getDeniedScopes() {\n    const scopesStr = sessionStorage.getItem(this.sessionStorageDeniedScopesKey);\n    return scopesStr ? JSON.parse(scopesStr) : null;\n  }\n\n  /**\n   * Checks if scopes were denied previously\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  protected areScopesDenied(scopes: string[]) {\n    if (scopes) {\n      const deniedScopes = this.getDeniedScopes();\n      if (deniedScopes && deniedScopes.filter(s => -1 !== scopes.indexOf(s)).length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears all requested scopes from session storage\n   *\n   * @protected\n   * @memberof Msal2Provider\n   */\n  protected clearRequestedScopes() {\n    sessionStorage.removeItem(this.sessionStorageRequestedScopesKey);\n  }\n\n  /**\n   * Gets stored account if available, otherwise fetches the first account in the list of signed in accounts\n   *\n   * @private\n   * @return {*}  {(AccountInfo | null)}\n   * @memberof Msal2Provider\n   */\n  protected getAccount(): AccountInfo | null {\n    const account = this.getStoredAccount();\n    if (account) {\n      return account;\n    } else if (this._publicClientApplication.getAllAccounts().length > 0) {\n      return this._publicClientApplication.getAllAccounts()[0];\n    }\n    return null;\n  }\n\n  /**\n   * Logs out user\n   *\n   * @memberof Msal2Provider\n   */\n  public async logout() {\n    const logOutAccount = this._publicClientApplication.getActiveAccount();\n    const logOutRequest: EndSessionRequest = {\n      account: logOutAccount\n    };\n    this.clearStoredAccount();\n    if (this._loginType == LoginType.Redirect) {\n      this._publicClientApplication.logoutRedirect(logOutRequest);\n      this.setState(ProviderState.SignedOut);\n    } else {\n      await this._publicClientApplication.logoutPopup({ ...logOutRequest });\n      this.setState(ProviderState.SignedOut);\n    }\n  }\n\n  /**\n   * Returns access token for scopes\n   *\n   * @param {AuthenticationProviderOptions} [options]\n   * @return {*}  {Promise<string>}\n   * @memberof Msal2Provider\n   */\n  public async getAccessToken(options?: AuthenticationProviderOptions): Promise<string> {\n    const scopes = options ? options.scopes || this.scopes : this.scopes;\n    const accessTokenRequest: SilentRequest = {\n      scopes: scopes,\n      account: this.getAccount()\n    };\n    try {\n      const silentRequest: SilentRequest = accessTokenRequest;\n      const response = await this._publicClientApplication.acquireTokenSilent(silentRequest);\n      return response.accessToken;\n    } catch (e) {\n      if (e instanceof InteractionRequiredAuthError) {\n        if (this.isIncrementalConsentDisabled) {\n          return null;\n        }\n        if (this._loginType === LoginType.Redirect) {\n          if (!this.areScopesDenied(scopes)) {\n            this.setRequestedScopes(scopes);\n            this._publicClientApplication.acquireTokenRedirect(accessTokenRequest);\n          } else {\n            throw e;\n          }\n        } else {\n          try {\n            const response = await this._publicClientApplication.acquireTokenPopup(accessTokenRequest);\n            return response.accessToken;\n          } catch (e) {\n            throw e;\n          }\n        }\n      } else {\n        // if we don't know what the error is, just ask the user to sign in again\n        this.setState(ProviderState.SignedOut);\n      }\n    }\n\n    throw null;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { customElement, property } from 'lit-element';\nimport { Providers, LoginType, MgtBaseProvider } from '@microsoft/mgt-element';\nimport { Msal2Config, Msal2Provider, PromptType } from './Msal2Provider';\n/**\n * Authentication Library Provider for Microsoft personal accounts\n *\n * @export\n * @class MgtMsalProvider\n * @extends {MgtBaseProvider}\n */\n@customElement('mgt-msal2-provider')\nexport class MgtMsal2Provider extends MgtBaseProvider {\n  /**\n   * String alphanumerical value relation to a specific user\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property({\n    attribute: 'client-id',\n    type: String\n  })\n  public clientId = '';\n\n  /**\n   * The login type that should be used: popup or redirect\n   *\n   * @memberof MgtMsal2Provider\n   */\n  @property({\n    attribute: 'login-type',\n    type: String\n  })\n  public loginType;\n\n  /**\n   * The authority to use.\n   *\n   * @memberof MgtMsal2Provider\n   */\n  @property() public authority;\n\n  /**\n   * Comma separated list of scopes\n   *\n   * @memberof MgtMsal2Provider\n   */\n  @property({\n    attribute: 'scopes',\n    type: String\n  })\n  public scopes;\n\n  /**\n   * The redirect uri to use\n   *\n   * @memberof MgtMsal2Provider\n   */\n  @property({\n    attribute: 'redirect-uri',\n    type: String\n  })\n  public redirectUri;\n\n  /**\n   * Type of prompt for login\n   *\n   * @memberof MgtMsal2Provider\n   */\n  @property({\n    attribute: 'prompt',\n    type: String\n  })\n  public prompt: string;\n\n  /**\n   * Disables incremental consent\n   *\n   * @memberof MgtMsal2Provider\n   */\n  @property({\n    attribute: 'incremental-consent-disabled',\n    type: Boolean\n  })\n  public isIncrementalConsentDisabled: boolean;\n\n  /**\n   * Gets whether this provider can be used in this environment\n   *\n   * @readonly\n   * @memberof MgtMsal2Provider\n   */\n  public get isAvailable() {\n    return true;\n  }\n\n  /**\n   * method called to initialize the provider. Each derived class should provide their own implementation.\n   *\n   * @protected\n   * @memberof MgtMsal2Provider\n   */\n  protected initializeProvider() {\n    if (this.clientId) {\n      const config: Msal2Config = {\n        clientId: this.clientId\n      };\n\n      if (this.loginType && this.loginType.length > 1) {\n        let loginType: string = this.loginType.toLowerCase();\n        loginType = loginType[0].toUpperCase() + loginType.slice(1);\n        const loginTypeEnum = LoginType[loginType];\n        config.loginType = loginTypeEnum;\n      }\n\n      if (this.authority) {\n        config.authority = this.authority;\n      }\n\n      if (this.scopes) {\n        const scope = this.scopes.split(',');\n        if (scope && scope.length > 0) {\n          config.scopes = scope;\n        }\n      }\n\n      if (this.redirectUri) {\n        config.redirectUri = this.redirectUri;\n      }\n\n      if (this.prompt) {\n        let prompt: string = this.prompt.toUpperCase();\n        const promptEnum = PromptType[prompt];\n        config.prompt = promptEnum;\n      }\n\n      if (this.isIncrementalConsentDisabled) {\n        config.isIncrementalConsentDisabled = true;\n      }\n\n      this.provider = new Msal2Provider(config);\n      Providers.globalProvider = this.provider;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["PromptType", "e", "MgtMsal2Provider"]
}
